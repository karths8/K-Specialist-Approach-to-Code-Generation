{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                if not stack:\n                    result.append('')\n    return [group + ')' for group in result]"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with a supplied string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a) and i < len(b):\n            if a[i] == b[i]:\n                result += '0'\n            else:\n                result += '1'\n        elif i < len(a):\n            result += a[i]\n        else:\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return next((s for s in strings if len(s) == max_length), None)"}
{"task_id": "HumanEval/14", "completion": "    n = len(string)\n    prefixes = []\n    for i in range(n):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = [int(num) for num in numbers.split()]\n    num_list.sort()\n    return ' '.join(str(num) for num in num_list)"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing the process of encode_cyclic function.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[::-1] if len(group) == 3 else group) for group in groups]\n    # concatenate groups\n    decoded_string = \"\".join(groups)\n    # remove trailing spaces\n    return decoded_string.strip()"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the opposite direction.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = ''.join(filter(lambda x: x not in vowels, text))\n    return result"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = set('aeiouAEIOU')\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    digits = [int(d) for d in str(x)]\n    shift = shift % len(digits)\n    return ''.join(map(str, digits[-shift:] + digits[:-shift]))"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/74", "completion": "    total_chars_1 = sum(len(s) for s in lst1)\n    total_chars_2 = sum(len(s) for s in lst2)\n    if total_chars_1 < total_chars_2:\n        return lst1\n    elif total_chars_1 == total_chars_2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"task_id": "HumanEval/82", "completion": "    if len(string) < 2:\n        return False\n    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if word:\n            result.append(''.join(sorted(word)))\n        else:\n            result.append('')\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr((((ord(char) - 97) * 2) % 26) + 97)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    histogram = {}\n    for word in words:\n        for char in word:\n            if char in histogram:\n                histogram[char] += 1\n            else:\n                histogram[char] = 1\n    max_count = max(histogram.values()) if histogram else 0\n    most_repetitive = [key for key, value in histogram.items() if value == max_count]\n    return {key: value for key, value in histogram.items() if key in most_repetitive}"}
{"task_id": "HumanEval/112", "completion": "    s = list(s)\n    for i in range(len(s)):\n        if s[i] in c:\n            del s[i]\n            i -= 1\n    s = ''.join(s)\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                odd_count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_count, odd_count, s, odd_count))\n    return result"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.isalpha() and char.lower() not in \"aeiou\")\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            if i+1 < len(word) and word[i+1] in vowels:\n                return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if year < 1 or year > 9999:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_count = 0\n        for char in txt:\n            if char.islower():\n                if ord(char) % 2 != 0:\n                    odd_count += 1\n        return odd_count"}
{"task_id": "HumanEval/134", "completion": "    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha():\n        return not any(txt[-1] == char for char in txt.split())\n    else:\n        return False"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for char in text:\n        if char == \" \":\n            if result and result[-1] == \" \":\n                result += \"-\"\n            else:\n                result += \"_\"\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = [word for word in words if len(word) > 1 and all(len(word) % i == 0 for i in range(2, len(word)))]\n    return \" \".join(prime_words)"}
{"task_id": "HumanEval/149", "completion": "    odd_sum = 0\n    even_sum = 0\n    for num in lst:\n        if len(num) % 2 == 0:\n            even_sum += int(num)\n        else:\n            odd_sum += int(num)\n    return even_sum + odd_sum"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/156", "completion": "    roman_map = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000: 'm'}\n    result = ''\n    for key in sorted(roman_map.keys(), reverse=True):\n        if number >= key:\n            result += roman_map[key] * (number // key)\n            number %= key\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_count = 0\n    result = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            result = word\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    groups = []\n    start = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            if i > start and paren_string[i-1] != '(':\n                groups.append(paren_string[start:i])\n                start = i\n        elif paren_string[i] == ')':\n            if i > start:\n                groups.append(paren_string[start:i+1])\n                start = i+1\n    if start < len(paren_string):\n        groups.append(paren_string[start:])\n    return groups"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[i:][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result: List[str] = []\n    for i in range(max(len(a), len(b))):\n        if i < len(a) and i < len(b):\n            if a[i] == b[i]:\n                result.append('0')\n            else:\n                result.append('1')\n        elif i < len(a):\n            result.append(a[i])\n        else:\n            result.append(b[i])\n    return ''.join(result)"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = max(len(s) for s in strings)\n    return next((s for s in strings if len(s) == max_len), None)"}
{"task_id": "HumanEval/14", "completion": "    n = len(string)\n    prefixes = []\n    for i in range(n):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = numbers.split()\n    num_list.sort()\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing the process of encode_cyclic function.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[::-1] if len(group) == 3 else group) for group in groups]\n    # join groups to form decoded string\n    decoded_string = \"\".join(groups)\n    # remove trailing spaces\n    return decoded_string.strip()"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the opposite direction.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = ''.join(filter(lambda x: x not in vowels, text))\n    return result"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = set('aeiouAEIOU')\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    digits = [int(d) for d in str(x)]\n    n = len(digits)\n    shift = shift % n\n    if shift == 0:\n        return \"\".join(map(str, digits[::-1]))\n    else:\n        return \"\".join(map(str, digits[-shift:] + digits[:-shift][::-1]))"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 == total_chars2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length == 0:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if word:\n            result.append(''.join(sorted(word)))\n        else:\n            result.append('')\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    test = test.split()\n    hist = {}\n    for word in test:\n        for char in word:\n            if char in hist:\n                hist[char] += 1\n            else:\n                hist[char] = 1\n    max_count = max(hist.values())\n    most_repetitive = {key: value for key, value in hist.items() if value == max_count}\n    return most_repetitive"}
{"task_id": "HumanEval/112", "completion": "    s = list(s)\n    for i in range(len(s)):\n        if s[i] in c:\n            del s[i]\n            i -= 1\n    result = ''.join(s)\n    return result, result == result[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, len(s), s, len(lst)))\n    return result"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for char in word if char.isalpha() and char.lower() not in \"aeiou\") == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i-1, -1, -1):\n                if word[j] in vowels:\n                    return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if (month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12) and (day < 1 or day > 31):\n            return False\n        if (month == 4 or month == 6 or month == 9 or month == 11) and (day < 1 or day > 30):\n            return False\n        if month == 2 and (day < 1 or day > 29):\n            return False\n        if len(date) != 8:\n            return False\n        datetime.datetime(year, month, day)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_count = 0\n        for char in txt:\n            if char.islower():\n                if ord(char) % 2 != 0:\n                    odd_count += 1\n        return odd_count"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and not last_char.isalnum():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for char in text:\n        if char == \" \":\n            if result.endswith(\"  \"):\n                result += \"-\"\n            else:\n                result += \"_\"\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if len(word) > 1:\n            is_prime = True\n            for i in range(2, len(word)):\n                if word[i] != word[0]:\n                    is_prime = False\n                    break\n            if is_prime:\n                prime_words.append(word)\n    return \" \".join(prime_words)"}
{"task_id": "HumanEval/149", "completion": "    odd_length_words = [word for word in lst if len(word) % 2 != 0]\n    odd_length_words.sort()\n    result = [word for word in lst if len(word) % 2 == 0]\n    result.sort()\n    result.extend(odd_length_words)\n    return result"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap_count = 0\n        sm_count = 0\n        for char in extension:\n            if char.isupper():\n                cap_count += 1\n            elif char.islower():\n                sm_count += 1\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/156", "completion": "    roman_map = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000: 'm'}\n    result = ''\n    for key in sorted(roman_map.keys(), reverse=True):\n        if number >= key:\n            result += roman_map[key] * (number // key)\n            number %= key\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_unique_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_unique_word):\n            max_unique_chars = unique_chars\n            max_unique_word = word\n    return max_unique_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    groups = []\n    start = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            start = i\n        elif paren_string[i] == ')' and start != i:\n            groups.append(paren_string[start:i+1])\n            start = i+1\n    return groups"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with a supplied string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    if len(a) != len(b):\n        raise ValueError(\"Length of strings should be same\")\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return next((s for s in strings if len(s) == max_length), None)"}
{"task_id": "HumanEval/14", "completion": "    n = len(string)\n    prefixes = []\n    for i in range(n):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    nums = [int(num) for num in numbers.split()]\n    nums.sort()\n    return ' '.join(str(num) for num in nums)"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing the process of encode_cyclic function.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[::-1] if len(group) == 3 else group) for group in groups]\n    # concatenate groups and return\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the opposite direction.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = ''.join(filter(lambda x: x not in vowels, text))\n    return result"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    digits = [int(d) for d in str(x)]\n    n = len(digits)\n    shift = shift % n\n    if shift == 0:\n        return \"\".join(str(d) for d in digits)\n    else:\n        return \"\".join(str(d) for d in digits[-shift:] + digits[:-shift])"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/74", "completion": "    total_chars_1 = sum(len(s) for s in lst1)\n    total_chars_2 = sum(len(s) for s in lst2)\n    if total_chars_1 < total_chars_2:\n        return lst1\n    elif total_chars_1 == total_chars_2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"task_id": "HumanEval/82", "completion": "    if len(string) < 2:\n        return False\n    for i in range(2, int(len(string)**0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if word:\n            result.append(''.join(sorted(word)))\n        else:\n            result.append('')\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    histogram = {}\n    words = test.split()\n    for word in words:\n        for char in word:\n            if char in histogram:\n                histogram[char] += 1\n            else:\n                histogram[char] = 1\n    max_count = max(histogram.values())\n    most_repetitive_letters = [key for key, value in histogram.items() if value == max_count]\n    return {letter: histogram[letter] for letter in most_repetitive_letters}"}
{"task_id": "HumanEval/112", "completion": "    s = list(s)\n    for i in range(len(s)):\n        if s[i] in c:\n            del s[i]\n            i -= 1\n    return ''.join(s), ''.join(s) == ''.join(reversed(s))"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, count, s, len(lst)))\n    return result"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        if sum(1 for char in word if char.lower() in consonants) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i-1, -1, -1):\n                if word[j] in vowels:\n                    return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if len(date) != 8:\n        return False\n    if date[2] != '-' or date[5] != '-':\n        return False\n    month = int(date[:2])\n    day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return False\n        if day < 1 or day > 30:\n            return False\n    if month == 2 and day > 29:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_count = 0\n        for char in txt:\n            if char.isalpha() and ord(char) % 2 != 0:\n                odd_count += 1\n        return [odd_count]"}
{"task_id": "HumanEval/134", "completion": "    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and not last_char.isalnum():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for char in text:\n        if char == \" \":\n            if result.endswith(\"  \"):\n                result += \"-\"\n            else:\n                result += \"_\"\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if len(word) > 1:\n            is_prime = True\n            for i in range(2, len(word)):\n                if len(word) % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                prime_words.append(word)\n    return \" \".join(prime_words)"}
{"task_id": "HumanEval/149", "completion": "    odd_length_words = [word for word in lst if len(word) % 2 != 0]\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst + odd_length_words"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap_count = 0\n        sm_count = 0\n        for char in extension:\n            if char.isupper():\n                cap_count += 1\n            elif char.islower():\n                sm_count += 1\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/156", "completion": "    roman_map = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000: 'm'}\n    result = \"\"\n    for key in sorted(roman_map.keys(), reverse=True):\n        if number >= key:\n            result += roman_map[key] * (number // key)\n            number %= key\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_unique_chars_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_unique_chars_word = word\n    return max_unique_chars_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    groups = []\n    start = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            start = i\n        elif paren_string[i] == ')' and i > start:\n            groups.append(paren_string[start:i+1])\n    return groups"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with a supplied string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[i:][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    if len(a) != len(b):\n        raise ValueError(\"Both inputs must be of same length\")\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = max(len(s) for s in strings)\n    return next((s for s in strings if len(s) == max_len), None)"}
{"task_id": "HumanEval/14", "completion": "    n = len(string)\n    prefixes = []\n    for i in range(n):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = [int(num) for num in numbers.split()]\n    num_list.sort()\n    return ' '.join(str(num) for num in num_list)"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing the process of encode_cyclic function.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[::-1] if len(group) == 3 else group) for group in groups]\n    # concatenate groups and return\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the opposite direction.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = ''.join([i for i in text if i not in vowels])\n    return result"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    digits = [int(d) for d in str(x)]\n    n = len(digits)\n    shift = shift % n\n    if shift == 0:\n        return ''.join(str(d) for d in digits[::-1])\n    else:\n        return ''.join(str(d) for d in digits[-shift:] + digits[:-shift][::-1])"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if word:\n            result.append(''.join(sorted(word)))\n        else:\n            result.append('')\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    histogram = {}\n    words = test.split()\n    for word in words:\n        for char in word:\n            if char in histogram:\n                histogram[char] += 1\n            else:\n                histogram[char] = 1\n    max_count = max(histogram.values())\n    most_repetitive_letters = [key for key, value in histogram.items() if value == max_count]\n    return {letter: histogram[letter] for letter in most_repetitive_letters}"}
{"task_id": "HumanEval/112", "completion": "    s = list(s)\n    for i in range(len(s)):\n        if s[i] in c:\n            del s[i]\n            i -= 1\n    s = ''.join(s)\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, len(s), s, len(lst)))\n    return result"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for char in word if char.isalpha() and char.lower() not in \"aeiou\") == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i - 1, -1, -1):\n                if word[j] in vowels:\n                    return word[j]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            if month in [1, 3, 5, 7, 8, 10, 12]:\n                return False\n            if month in [4, 6, 9, 11]:\n                if day < 1 or day > 30:\n                    return False\n            if month == 2:\n                if day < 1 or day > 29:\n                    return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_count = 0\n        for char in txt:\n            if char.islower():\n                if ord(char) % 2 != 0:\n                    odd_count += 1\n        return odd_count"}
{"task_id": "HumanEval/134", "completion": "    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and not last_char.isalnum():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for char in text:\n        if char == \" \":\n            if result.endswith(\"  \"):\n                result += \"-\"\n            else:\n                result += \"_\"\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if len(word) > 1:\n            is_prime = True\n            for i in range(2, len(word)):\n                if word[i] in prime_words:\n                    is_prime = False\n                    break\n            if is_prime:\n                prime_words.append(word)\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/149", "completion": "    odd_words = [word for word in lst if len(word) % 2 != 0]\n    odd_words.sort()\n    result = [word for word in lst if len(word) % 2 == 0]\n    result.sort()\n    result.extend(odd_words)\n    return result"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap_count = 0\n        sm_count = 0\n        for char in extension:\n            if char.isupper():\n                cap_count += 1\n            elif char.islower():\n                sm_count += 1\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/156", "completion": "    roman_map = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000: 'm'}\n    result = ''\n    for key in sorted(roman_map.keys(), reverse=True):\n        if number >= key:\n            result += roman_map[key] * (number // key)\n            number %= key\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_unique_chars_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_unique_chars_word = word\n    return max_unique_chars_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    groups = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            if current_group:\n                groups.append(current_group)\n                current_group = \"\"\n            current_group += char\n        elif char == ')' and current_group:\n            current_group += char\n            groups.append(current_group)\n            current_group = \"\"\n    if current_group:\n        groups.append(current_group)\n    return groups"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a) and i < len(b):\n            if a[i] == b[i]:\n                result += '0'\n            else:\n                result += '1'\n        elif i < len(a):\n            result += a[i]\n        else:\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return next((s for s in strings if len(s) == max_length), None)"}
{"task_id": "HumanEval/14", "completion": "    n = len(string)\n    prefixes = []\n    for i in range(n):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    n = len(string)\n    m = len(substring)\n    for i in range(n - m + 1):\n        if string[i:i + m] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = numbers.split()\n    num_list.sort()\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing the encoding process.\n    \"\"\"\n    # reverse string\n    s = s[::-1]\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[2:] + group[0:2]) if len(group) == 3 else group for group in groups]\n    # reverse groups\n    groups = groups[::-1]\n    # join groups\n    decoded_string = \"\".join(groups)\n    # remove trailing spaces\n    decoded_string = decoded_string.strip()\n    return decoded_string"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the opposite direction.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = ''.join([i for i in text if i not in vowels])\n    return result"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    digits = [int(d) for d in str(x)]\n    shift = shift % len(digits)\n    return ''.join(map(str, digits[-shift:] + digits[:-shift]))"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/74", "completion": "    total_chars_1 = sum(len(s) for s in lst1)\n    total_chars_2 = sum(len(s) for s in lst2)\n    if total_chars_1 < total_chars_2:\n        return lst1\n    elif total_chars_1 == total_chars_2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if word:\n            result.append(''.join(sorted(word)))\n        else:\n            result.append('')\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                result += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    hist = {}\n    for char in test.split():\n        if char in hist:\n            hist[char] += 1\n        else:\n            hist[char] = 1\n    max_count = max(hist.values())\n    result = {key: value for key, value in hist.items() if value == max_count}\n    return result"}
{"task_id": "HumanEval/112", "completion": "    s = list(s)\n    for i in range(len(s)):\n        if s[i] in c:\n            del s[i]\n    s = ''.join(s)\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, len(s), s, len(lst)))\n    return result"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou') == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels and word[i+1] not in vowels and word[i+2] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if (month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12) and (day < 1 or day > 31):\n            return False\n        if (month == 4 or month == 6 or month == 9 or month == 11) and (day < 1 or day > 30):\n            return False\n        if (month == 2) and (day < 1 or day > 29):\n            return False\n        if year < 0:\n            return False\n        datetime.datetime(year, month, day)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_count = 0\n        for char in txt:\n            if char.islower():\n                if ord(char) % 2 != 0:\n                    odd_count += 1\n        return odd_count"}
{"task_id": "HumanEval/134", "completion": "    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and not last_char.isalnum():\n        return True\n    return False"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for char in text:\n        if char == ' ':\n            if result.endswith(' '):\n                result += '-'\n            else:\n                result += '_'\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if len(word) > 1 and all(word[i] not in prime_words for i in range(len(word))):\n            prime_words.append(word)\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/149", "completion": "    odd_sum = 0\n    even_sum = 0\n    for num in lst:\n        if len(num) % 2 == 0:\n            even_sum += int(num)\n        else:\n            odd_sum += int(num)\n    return even_sum + odd_sum"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap_count = 0\n        sm_count = 0\n        for char in extension:\n            if char.isupper():\n                cap_count += 1\n            elif char.islower():\n                sm_count += 1\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/156", "completion": "    roman_map = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000: 'm'}\n    result = \"\"\n    for key in sorted(roman_map.keys(), reverse=True):\n        if number >= key:\n            result += roman_map[key] * (number // key)\n            number %= key\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_unique_chars_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_unique_chars_word = word\n    return max_unique_chars_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split())\n    return n - apples - oranges"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * starts_one_ends(n-1) + 2 * starts_one_ends(n-2)"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/147", "completion": "    max_triples = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    max_triples += 1\n    return max_triples"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split())\n    return n - apples - oranges"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * 9 * 10 ** (n - 2)"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    for sentence in S.split(\".\"):\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/147", "completion": "    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split())\n    return n - apples - oranges"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * (10**(n-1) - 1) + 1"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/147", "completion": "    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples = 0\n    oranges = 0\n    mango = 0\n    fruit_count = 0\n    fruit_list = s.split()\n    for fruit in fruit_list:\n        if fruit.isdigit():\n            fruit_count += int(fruit)\n        else:\n            if fruit == 'apples':\n                apples = int(fruit_list[fruit_list.index(fruit)+1])\n            elif fruit == 'oranges':\n                oranges = int(fruit_list[fruit_list.index(fruit)+1])\n            elif fruit == 'mango':\n                mango = int(fruit_list[fruit_list.index(fruit)+1])\n    return n - apples - oranges - mango"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * starts_one_ends(n-1) + 2 * starts_one_ends(n-2)"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    for sentence in S.split(\".\"):\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/147", "completion": "    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split())\n    return n - apples - oranges"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * 9 * 10 ** (n - 2) + 10 ** (n - 1)"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    for sentence in S.split(\".\"):\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/147", "completion": "    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(x - mean) for x in numbers]\n    return sum(absolute_differences) / len(numbers)"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero point of a polynomial with coefficients xs.\n    return x such that poly(x) = 0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Even number of coefficients is required\")\n    if max([abs(coeff) for coeff in xs]) == 0:\n        raise ValueError(\"Largest non-zero coefficient is required\")\n    x = 0\n    for i in range(len(xs) // 2):\n        x = -xs[i] / (xs[i + len(xs) // 2])\n    return x"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = [0] * n\n    for i in range(n):\n        for j in range(i, n):\n            result[i] += xs[j] * (j - i)\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/81", "completion": "    result = []\n    for grade in grades:\n        if grade >= 4.0:\n            result.append('A+')\n        elif grade >= 3.7:\n            result.append('A')\n        elif grade >= 3.3:\n            result.append('A-')\n        elif grade >= 3.0:\n            result.append('B+')\n        elif grade >= 2.7:\n            result.append('B')\n        elif grade >= 2.3:\n            result.append('B-')\n        elif grade >= 2.0:\n            result.append('C+')\n        elif grade >= 1.7:\n            result.append('C')\n        elif grade >= 1.3:\n            result.append('C-')\n        elif grade >= 1.0:\n            result.append('D+')\n        elif grade >= 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, len(row) - j - 1))\n    return sorted(result)"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return 0"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 < 0 or index2 < 0:\n        return ()\n    return tuple(planets[index1+1:index2])"}
{"task_id": "HumanEval/159", "completion": "    if number + remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [need, remaining - (need - number)]"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds a zero of a polynomial with coefficients xs.\n    return x such that poly(x) = 0\n    \"\"\"\n    if len(xs) % 2 == 1:\n        raise ValueError(\"Polynomial must have even number of coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"Largest non-zero coefficient is required\")\n    x = 0\n    for i in range(len(xs) // 2):\n        x = -xs[-1 - i] / (xs[-2 - i] + xs[-1 - i] * x)\n    return x"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = [0] * n\n    for i in range(n):\n        if i > 0:\n            result[i-1] = i * xs[i]\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            result.append((i, lst[i].index(x)))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return 0"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str):\n        a = a.replace(',', '.')\n    if isinstance(b, str):\n        b = b.replace(',', '.')\n    if a == b:\n        return None\n    elif float(a) > float(b):\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2) + 1\n    return tuple(planets[start:end])"}
{"task_id": "HumanEval/159", "completion": "    if number + remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [need, remaining - (need - number)]"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero point of a polynomial with coefficients xs.\n    return x such that poly(x) = 0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients should be even\")\n    if max([abs(coeff) for coeff in xs]) == 0:\n        raise ValueError(\"Largest non zero coefficient is required\")\n\n    x = 0\n    for i in range(len(xs) // 2):\n        x = -xs[i] / (xs[i + len(xs) // 2])\n    return x"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = [0] * n\n    for i in range(n):\n        if i == 0:\n            result[i] = 0\n        else:\n            result[i] = xs[i-1] * i\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            result.append((i, lst[i].index(x)))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return 0"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, float) and isinstance(b, float):\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        return a if float(a) > float(b) else b\n    else:\n        return None"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 < 0 or index2 < 0 or index1 > 7 or index2 > 7:\n        return ()\n    if index1 == index2:\n        return (planet1, planet2)\n    if index1 < index2:\n        return planets[index1+1:index2+1]\n    else:\n        return planets[index2+1:index1+1]"}
{"task_id": "HumanEval/159", "completion": "    if number + remaining >= need:\n        return [need, 0]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(x - mean) for x in numbers]\n    return sum(absolute_differences) / len(numbers)"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero point of a polynomial with coefficients xs.\n    return x such that poly(x) = 0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Even number of coefficients is required\")\n    if max([abs(coeff) for coeff in xs]) == 0:\n        raise ValueError(\"Largest non-zero coefficient is required\")\n    x = 0\n    for i in range(len(xs) // 2):\n        x = -xs[i] / (xs[i + len(xs) // 2])\n    return x"}
{"task_id": "HumanEval/41", "completion": "    return n - 1"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = [0] * n\n    for i in range(n):\n        for j in range(i, n):\n            result[i] += xs[j] * (j - i)\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, len(row) - j - 1))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return 0"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, float) and isinstance(b, float):\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        return a if float(a) > float(b) else b\n    else:\n        return None"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start == -1 or end == -1:\n        return ()\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/159", "completion": "    if number + remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [need, remaining - (need - number)]"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero point of a polynomial with coefficients xs.\n    return x such that poly(x) = 0\n    \"\"\"\n    if len(xs) % 2 != 0 or max([abs(coeff) for coeff in xs]) == 0:\n        return \"No solution\"\n    x = 0\n    for i in range(len(xs) // 2):\n        x = -xs[i] / (xs[i + len(xs) // 2])\n    return round(x, 2)"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = [0] * n\n    for i in range(n):\n        result[i] = xs[i] * i\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, len(row) - j - 1))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num - int(num) == 0.5:\n        return int(num) + 1\n    else:\n        return int(num)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str) and isinstance(b, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n    if isinstance(a, float) and isinstance(b, float):\n        return a if a > b else b\n    elif isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        return a if float(a) > float(b) else b\n    else:\n        return None"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 < 0 or index2 < 0 or index1 > 7 or index2 > 7:\n        return ()\n    if index1 == index2:\n        return (planet1, planet2)\n    return tuple(planets[min(index1, index2)+1:max(index1, index2)])"}
{"task_id": "HumanEval/159", "completion": "    if number + remaining >= need:\n        return [need, 0]\n    else:\n        return [number + remaining, need - (number + remaining)]"}
{"task_id": "HumanEval/6", "completion": "    max_level = 0\n    result = []\n    for group in paren_string.split():\n        level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for element in l:\n        if element > max_element:\n            max_element = element\n    return max_element"}
{"task_id": "HumanEval/6", "completion": "    max_level = 0\n    result = []\n    for group in paren_string.split():\n        level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n            elif char == ')':\n                level -= 1\n            max_level = max(max_level, level)\n        result.append(max_level)\n    return result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(num, max_so_far)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for element in l:\n        if element > max_element:\n            max_element = element\n    return max_element"}
{"task_id": "HumanEval/6", "completion": "    max_level = 0\n    result = []\n    for group in paren_string.split():\n        level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(num, max_so_far)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/6", "completion": "    max_level = 0\n    deepest_level = 0\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            max_level += 1\n        elif char == ')':\n            stack.pop()\n            if len(stack) == 0:\n                deepest_level = max_level\n                max_level -= 1\n            else:\n                max_level -= 1\n    return [deepest_level] * len(paren_string.split())"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_val = float('-inf')\n    for num in numbers:\n        max_val = max(num, max_val)\n        result.append(max_val)\n    return result"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/6", "completion": "    max_level = 0\n    deepest_level = 0\n    stack = []\n    groups = paren_string.split()\n    for group in groups:\n        level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                stack.append(level)\n            elif char == ')':\n                level -= 1\n                stack.pop()\n                if level > max_level:\n                    max_level = level\n                elif level == 0 and stack:\n                    deepest_level = max(deepest_level, stack[-1])\n    return [max_level, deepest_level]"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_val = float('-inf')\n    for num in numbers:\n        max_val = max(num, max_val)\n        result.append(max_val)\n    return result"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        else:\n            balance -= operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in brackets:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    return x == n**int(x/n)"}
{"task_id": "HumanEval/77", "completion": "    return a == int(round(a ** (1/3))) ** 3"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    distinct_letters = set(s)\n    return len(distinct_letters) == len(s)"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or x == z + y or y == z + x or y == x + z or z == x + y or z == y + x:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = dict.keys()\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case"}
{"task_id": "HumanEval/109", "completion": "    if len(arr)==0:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = len(lst1) - even_count\n    if even_count == len(lst1) or odd_count == 0:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return True\n            stack.pop()\n    return False"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return n >= 8"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') != 1:\n        return 'No'\n    if file_name.count('0') > 3 or file_name.count('1') > 3 or file_name.count('2') > 3 or file_name.count('3') > 3 or file_name.count('4') > 3 or file_name.count('5') > 3 or file_name.count('6') > 3 or file_name.count('7') > 3 or file_name.count('8') > 3 or file_name.count('9') > 3:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 1:\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    x_numerator, x_denominator = x.split('/')\n    n_numerator, n_denominator = n.split('/')\n    \n    x_value = int(x_numerator) / int(x_denominator)\n    n_value = int(n_numerator) / int(n_denominator)\n    \n    return (x_value * n_value).is_integer()"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    if a == b:\n        return True\n    a_rotations = [a[i:] + a[:i] for i in range(len(a))]\n    return any(b in rotation for rotation in a_rotations)"}
{"task_id": "HumanEval/157", "completion": "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        else:\n            balance -= operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    return x == n**int(x/n)"}
{"task_id": "HumanEval/77", "completion": "    return a == int(round(a ** (1/3))) ** 3"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    elif x == y or y == x or z == x or x == z or y == z:\n        return False\n    else:\n        return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = dict.keys()\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = len(lst1) - even_count\n    return \"YES\" if even_count >= odd_count else \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes'"}
{"task_id": "HumanEval/126", "completion": "    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if length <= 1:\n            return \"NO\"\n        if isPrime(length):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\ndef isPrime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return True\n            stack.pop()\n    return False"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    target = n // 2\n    for i in range(1, target + 1):\n        if (n - i) % 2 == 0 and (n - i) // 2 >= 1:\n            return True\n    return False"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 0:\n        return 'No'\n    if file_name.count('.') == 1:\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.rfind('.') == len(file_name) - 1:\n            return 'No'\n        if file_name.count('0') > 3 or file_name.count('1') > 3 or file_name.count('2') > 3 or file_name.count('3') > 3 or file_name.count('4') > 3 or file_name.count('5') > 3 or file_name.count('6') > 3 or file_name.count('7') > 3 or file_name.count('8') > 3 or file_name.count('9') > 3:\n            return 'No'\n        if file_name.find('.') == -1:\n            return 'No'\n        if file_name.rfind('.') == -1:\n            return 'No'\n        if file_name.find('.') + 1 == file_name.rfind('.'):\n            return 'No'\n        if file_name.rfind('.') + 1 == len(file_name):\n            return 'No'\n        if file_name.find('.') == 0:\n            return 'No'\n        if file_name.rfind('.') == 0:\n            return 'No'\n        if file_name.find('.') + 1 == file_name.rfind('.') and file_name.find('.') != 0 and file_name.rfind('.') != 0:\n            return 'Yes'\n        if file_name.rfind('.') + 1 == len(file_name) and file_name.rfind('.') != 0:\n            return 'Yes'\n        if file_name.find('.') != 0 and file_name.rfind('.') != 0:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/144", "completion": "    x_numerator, x_denominator = x.split(\"/\")\n    n_numerator, n_denominator = n.split(\"/\")\n    product = int(x_numerator) * int(n_numerator)\n    if product % int(x_denominator) == 0 and product % int(n_denominator) == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    a_list = [a]\n    for i in range(len(a)):\n        a_list.append(a[i:] + a[:i])\n    return any(b in x for x in a_list)"}
{"task_id": "HumanEval/157", "completion": "    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        if operation < 0:\n            balance += operation\n        else:\n            balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    return x == n**int(x/n)"}
{"task_id": "HumanEval/77", "completion": "    return (a > 0) and (a ** (1/3))"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or x == z + y or x == y or y == z + x or y == x + z or z == x + y or z == y + x:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = dict.keys()\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case"}
{"task_id": "HumanEval/109", "completion": "    if len(arr)==0:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    if len(lst1) != len(lst2):\n        return \"NO\"\n    sum_lst1 = sum(lst1)\n    sum_lst2 = sum(lst2)\n    if sum_lst1 % 2 != 0:\n        return \"NO\"\n    if sum_lst2 % 2 != 0:\n        return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes'"}
{"task_id": "HumanEval/126", "completion": "    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if length < 2:\n            return \"NO\"\n        for i in range(2, int(length**0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return True\n            stack.pop()\n    return False"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    for i in range(1, n):\n        if (n - i) % 2 == 0 and (n - i) >= 0:\n            return True\n    return False"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') != 1:\n        return 'No'\n    pre, post = file_name.split('.')\n    if pre.isalnum() and post in ['txt', 'exe', 'dll']:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/144", "completion": "    x_numerator = int(x.split('/')[0])\n    x_denominator = int(x.split('/')[1])\n    n_numerator = int(n.split('/')[0])\n    n_denominator = int(n.split('/')[1])\n    \n    if (x_denominator * n_numerator) % (x_numerator * n_denominator) == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    a_set = set(a)\n    b_set = set(b)\n    if a_set != b_set:\n        return False\n    return True"}
{"task_id": "HumanEval/157", "completion": "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        else:\n            balance -= operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/43", "completion": "    s = set()\n    for num in l:\n        if -num in s:\n            return True\n        s.add(num)\n    return False"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    return x == n**int(x/n)"}
{"task_id": "HumanEval/77", "completion": "    return a == int(round(a ** (1/3))) ** 3"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    distinct_count = len(set(s))\n    return distinct_count == len(s)"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or x == z + y or y == z + x or y == x + z or z == x + y or z == y + x:\n        return True\n    elif x == y or x == z or y == z or x == 0 or y == 0 or z == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = dict.keys()\n    lower_case = all(key.islower() for key in keys)\n    upper_case = all(key.isupper() for key in keys)\n    return lower_case or upper_case"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = len(lst1) - even_count\n    if even_count == len(lst1) or odd_count == 0:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes'"}
{"task_id": "HumanEval/126", "completion": "    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if length < 2:\n            return \"NO\"\n        for i in range(2, int(length**0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return True\n            stack.pop()\n    return False"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    for i in range(1, n):\n        if (n - i) % 2 == 0 and (n - i) >= 0:\n            return True\n    return False"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 0:\n        return 'No'\n    if file_name.count('.') == 1:\n        if file_name.split('.')[0].isalnum() == False:\n            return 'No'\n        if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n            return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    x_num = int(x.split('/')[0])\n    x_den = int(x.split('/')[1])\n    n_num = int(n.split('/')[0])\n    n_den = int(n.split('/')[1])\n    return (x_num * n_num) % (x_den * n_den) == 0"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    if a == b:\n        return True\n    a_list = [a]\n    for i in range(len(a)):\n        a_list.append(a[i:] + a[:i])\n    return any(b in word for word in a_list)"}
{"task_id": "HumanEval/157", "completion": "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        else:\n            balance -= operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in brackets:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    return x == n**int(x/n)"}
{"task_id": "HumanEval/77", "completion": "    return (a > 0) and (a ** (1/3)) % 1 == 0"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or x == z + y or y == z + x or y == x + z or z == x + y or z == y + x:\n        return True\n    if x != int(x) or y != int(y) or z != int(z):\n        return False\n    return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(key.islower() for key in keys)\n    upper_case = all(key.isupper() for key in keys)\n    return lower_case or upper_case"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = len(lst1) - even_count\n    if even_count >= odd_count:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes'"}
{"task_id": "HumanEval/126", "completion": "    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True"}
{"task_id": "HumanEval/127", "completion": "    if interval1[0] > interval2[0]:\n        interval1, interval2 = interval2, interval1\n    if interval2[0] <= interval1[0] <= interval2[1]:\n        start = interval1[0]\n    elif interval1[1] < interval2[0]:\n        return \"NO\"\n    else:\n        start = interval2[0]\n    if interval1[1] < interval2[1]:\n        end = interval1[1]\n    elif interval2[1] < interval1[1]:\n        end = interval2[1]\n    else:\n        end = interval2[1]\n    length = end - start + 1\n    return \"YES\" if is_prime(length) else \"NO\"\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return True\n            stack.pop()\n    return False"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    target = n // 2\n    for i in range(1, target + 1):\n        if (n - i) % 2 == 0 and (n - i) // 2 >= 1:\n            return True\n    return False"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') == 0:\n        return 'No'\n    if file_name.count('.') == 1:\n        if file_name.split('.')[0].isalnum() == False:\n            return 'No'\n        if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n            return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    x_numerator, x_denominator = x.split('/')\n    n_numerator, n_denominator = n.split('/')\n\n    # Calculate the product of the numerators and denominators\n    product = int(x_numerator) * int(n_numerator)\n    denominator = int(x_denominator) * int(n_denominator)\n\n    # Check if the product is a whole number\n    return product % denominator == 0"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    a = a + a\n    return b in a"}
{"task_id": "HumanEval/157", "completion": "    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/120", "completion": "    heap = []\n    for num in arr:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total += arr[i]\n    return total"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/120", "completion": "    heap = []\n    for num in arr:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return sorted(heap)"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total += arr[i]\n    return total"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[k-1]\n\ndef minimum(arr, k):\n    arr.sort()\n    return arr[k-1]\n\ndef maximumAndMinimum(arr, k):\n    arr.sort()\n    return [arr[k-1], arr[k-1]]"}
{"task_id": "HumanEval/122", "completion": "    first_k_elements = arr[:k]\n    elements_with_two_digits = [num for num in first_k_elements if len(str(num)) == 2]\n    return sum(elements_with_two_digits)"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[k-1]\n\ndef minimum(arr, k):\n    arr.sort()\n    return arr[k-1]\n\ndef maximumAndMinimum(arr, k):\n    arr.sort()\n    return [arr[k-1], arr[k-1]]"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total += arr[i]\n    return total"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[k-1]\n\ndef minimum(arr, k):\n    arr.sort()\n    return arr[k-1]\n\ndef maximumAndMinimum(arr, k):\n    arr.sort()\n    return [arr[k-1], arr[k-1]]"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total += arr[i]\n    return total"}
{"task_id": "HumanEval/68", "completion": "    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n    even_values.sort()\n    index = arr.index(even_values[0])\n    return [even_values[0], index]"}
{"task_id": "HumanEval/68", "completion": "    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n    even_values.sort()\n    index = arr.index(even_values[0])\n    return [even_values[0], index]"}
{"task_id": "HumanEval/68", "completion": "    even_values = [val for val in arr if val % 2 == 0]\n    if not even_values:\n        return []\n    even_values.sort()\n    index = arr.index(even_values[0])\n    return [even_values[0], index]"}
{"task_id": "HumanEval/68", "completion": "    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n    even_values.sort()\n    index = arr.index(even_values[0])\n    return [even_values[0], index]"}
{"task_id": "HumanEval/68", "completion": "    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n    even_values.sort()\n    index = arr.index(even_values[0])\n    return [even_values[0], index]"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    return sum(numbers), 1 if len(numbers) == 1 else 1 * numbers[0]"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for char in music_string:\n        if char == 'o':\n            beats.append(4)\n        elif char == 'o|':\n            beats.append(2)\n        elif char == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).find('7') != -1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/39", "completion": "    fib = [0, 1]\n    for i in range(2, n+1):\n        fib.append(fib[i-1] + fib[i-2])\n        if fib[i] > 1 and all(fib[i] % j != 0 for j in range(2, fib[i])):\n            return fib[i]\n    return -1"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n+1):\n            a, b, c, d = b, c, d, a+b+c+d\n        return d"}
{"task_id": "HumanEval/49", "completion": "    return (n % p)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/59", "completion": "    for i in range(n//2, 1, -1):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(3, n+1):\n            c = a + b + c\n            a, b = b, c\n        return c"}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, a//2 + 1):\n        if a % i == 0 and is_prime(i) and is_prime(a//i) and is_prime(a//i//i):\n            return True\n    return False"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = '0123456789ABCDEF'\n    decimal_num = int(num, 16)\n    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    while decimal_num > 0:\n        digit = decimal_num % 16\n        if digit in primes or hex_digits[digit] in primes:\n            count += 1\n        decimal_num = decimal_num // 16\n    return count"}
{"task_id": "HumanEval/84", "completion": "    return bin(N)[2:]"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(n):\n        return sum([int(x) for x in str(n)])\n\n    max_prime = 0\n    for num in lst:\n        if isPrime(num):\n            max_prime = max(max_prime, num)\n    return sumOfDigits(max_prime)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        if num < n and all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/100", "completion": "    result = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            result.append(n + 2 * i)\n        else:\n            result.append(n + 2 * i - 1)\n    return result"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)[2:]"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/123", "completion": "    result = []\n    while n != 1:\n        if n % 2 != 0:\n            result.append(n)\n        n = 3 * n + 1\n    return result"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        trib = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                trib.append(trib[i - 1] + trib[i - 2])\n            else:\n                trib.append(1 + i / 2)\n        return trib"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    rounded_lst = [int(x) for x in lst]\n    squared_lst = [x**2 for x in rounded_lst]\n    return sum(squared_lst)"}
{"task_id": "HumanEval/139", "completion": "    if n < 0:\n        return -1\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result"}
{"task_id": "HumanEval/142", "completion": "    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i] * lst[i]\n        elif i % 4 == 0:\n            total_sum += lst[i] * lst[i] * lst[i]\n        else:\n            total_sum += lst[i]\n    return total_sum"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    total_sum = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            total_sum += num * num\n    return total_sum"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/2", "completion": "    return number % 1"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1 if len(numbers) == 1 else numbers[0] * sum_product(numbers[1:])[1]"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    for char in music_string:\n        if char == 'o':\n            result.append(4)\n        elif char == 'o|':\n            result.append(2)\n        elif char == '.|':\n            result.append(1)\n    return result"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n / divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).find('7') != -1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/39", "completion": "    fib = [0, 1]\n    for i in range(2, n+1):\n        fib.append(fib[i-1] + fib[i-2])\n        if fib[i] > 1 and all(fib[i] % j != 0 for j in range(2, fib[i])):\n            return fib[i]\n    return -1"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n+1):\n            a, b, c, d = b, c, d, b + c + d\n        return d"}
{"task_id": "HumanEval/49", "completion": "    return (n % p)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/59", "completion": "    for i in range(n//2, 1, -1):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for i in range(3, n+1):\n            c = a + b + c\n            a, b = b, c\n        return c"}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, a):\n        if is_prime(i) and is_prime(a//i) and is_prime(a%i):\n            return True\n    return False"}
{"task_id": "HumanEval/78", "completion": "    hex_map = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    return hex_map[num]\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef countPrimesInHex(hex_num: str) -> int:\n    count = 0\n    for digit in hex_num:\n        if is_prime(hex_key(digit)):\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "    res = bin(N)[2:]\n    return res"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(n):\n        return sum([int(x) for x in str(n)])\n\n    max_prime = 0\n    for num in lst:\n        if isPrime(num):\n            max_prime = max(max_prime, num)\n    return sumOfDigits(max_prime)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        if num < n and all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/100", "completion": "    result = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            result.append(n + 2 * i)\n        else:\n            result.append(n + 2 * i - 1)\n    return result"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)[2:]"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/123", "completion": "    result = []\n    while n > 1:\n        if n % 2 != 0:\n            result.append(n)\n        n = 3 * n + 1\n    return result"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n % 2 == 0:\n        return tri(n // 2) + [tri(n // 2)[-1] + tri(n // 2)[-2]]\n    else:\n        return tri(n // 2) + [tri(n // 2)[-1] + tri(n // 2)[-2] + tri(n // 2)[-3]]"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    rounded_lst = [int(x) for x in lst]\n    squared_lst = [x**2 for x in rounded_lst]\n    return sum(squared_lst)"}
{"task_id": "HumanEval/139", "completion": "    if n <= 0:\n        return -1\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/142", "completion": "    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i] ** 2\n        elif i % 4 == 0:\n            total_sum += lst[i] ** 3\n        else:\n            total_sum += lst[i]\n    return total_sum"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            total += num * num\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/2", "completion": "    return number % 1"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    return sum(numbers), 1 if len(numbers) == 1 else 1 * numbers[0]"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    current_note = ''\n    for char in music_string:\n        if char.isalpha():\n            current_note += char\n        elif char == ' ':\n            if current_note == 'o':\n                result.append(4)\n            elif current_note == 'o|':\n                result.append(2)\n            elif current_note == '.|':\n                result.append(1)\n            current_note = ''\n        else:\n            if current_note != '':\n                result.append(4)\n            current_note = ''\n    if current_note != '':\n        result.append(4)\n    return result"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n / divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).find('7') != -1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/39", "completion": "    fib = [0, 1]\n    for i in range(2, n+1):\n        fib.append(fib[i-1] + fib[i-2])\n        if fib[i] > 1 and all(fib[i] % j != 0 for j in range(2, fib[i])):\n            return fib[i]\n    return -1"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/49", "completion": "    return (n % p)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/59", "completion": "    for i in range(n//2, 1, -1):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for i in range(3, n+1):\n            c = a + b + c\n            a, b = b, c\n        return c"}
{"task_id": "HumanEval/75", "completion": "    if a < 100:\n        for i in range(2, a):\n            count = 0\n            for j in range(2, i):\n                if i % j == 0:\n                    count += 1\n                    if count == 3:\n                        return True\n                        break\n                else:\n                    count = 0\n        return False\n    else:\n        return \"Number is not less than 100\""}
{"task_id": "HumanEval/78", "completion": "    hex_map = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    return hex_map[num]\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef countPrimesInHex(hex_num: str) -> int:\n    count = 0\n    for digit in hex_num:\n        if is_prime(hex_key(digit)):\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 2\n        N //= 2\n    return bin(binary_sum)[2:]"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(n):\n        return sum([int(x) for x in str(n)])\n\n    max_prime = 0\n    for num in lst:\n        if isPrime(num):\n            max_prime = max(max_prime, num)\n    return sumOfDigits(max_prime)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        if num < n and all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    unit_a = a % 10\n    unit_b = b % 10\n    return unit_a * unit_b"}
{"task_id": "HumanEval/100", "completion": "    result = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            result.append(n + 2 * i)\n        else:\n            result.append(n + 2 * i - 1)\n    return result"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)[2:]"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/123", "completion": "    result = []\n    while n != 1:\n        if n % 2 != 0:\n            result.append(n)\n        n = 3 * n + 1\n    return result"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        result = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                result.append(result[-1] + result[-2])\n            else:\n                result.append(result[-1] + result[-2] + result[-3])\n        return result"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    rounded_lst = [int(x) for x in lst]\n    sum_squared = sum(x**2 for x in rounded_lst)\n    return sum_squared"}
{"task_id": "HumanEval/139", "completion": "    if n < 0:\n        return -1\n    elif n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/142", "completion": "    total_sum = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total_sum += num * num\n        elif i % 4 == 0:\n            total_sum += num * num * num\n        else:\n            total_sum += num\n    return total_sum"}
{"task_id": "HumanEval/150", "completion": "    if n % 2 == 0:\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    total_sum = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            total_sum += num * num\n    return total_sum"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/2", "completion": "    return number % 1"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    return sum(numbers), 1 if not numbers else numbers[0] * (product(numbers[1:]))\n\n\ndef product(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    for note in music_string:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n / divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).find('7') != -1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/39", "completion": "    fib = [0, 1]\n    for i in range(2, n+1):\n        fib.append(fib[i-1] + fib[i-2])\n        if fib[i] > 1 and all(fib[i] % j != 0 for j in range(2, int(fib[i]**0.5) + 1)):\n            return fib[i]\n    return -1"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n+1):\n            a, b, c, d = b, c, d, b + c + d\n        return d"}
{"task_id": "HumanEval/49", "completion": "    return (n % p) % 10"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/59", "completion": "    for i in range(n//2, 1, -1):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for i in range(3, n+1):\n            c = a + b + c\n            a, b = b, c\n        return c"}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, a):\n        if a % i == 0:\n            count = 0\n            for j in range(2, i):\n                if i % j == 0:\n                    count += 1\n            if count == 0:\n                return False\n    return True"}
{"task_id": "HumanEval/78", "completion": "    hex_key = '0123456789ABCDEF'\n    return hex_key.index(num)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef countPrimesInHex(num: str) -> int:\n    count = 0\n    for digit in num:\n        if is_prime(hex_key(digit)):\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "    sum_of_digits = bin(N)[2:]\n    return sum_of_digits"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def sumOfDigits(n):\n        return sum([int(i) for i in str(n)])\n    \n    max_prime = -1\n    for num in lst:\n        if isPrime(num):\n            max_prime = max(max_prime, num)\n    \n    return sumOfDigits(max_prime)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        if num < n and all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/100", "completion": "    result = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            result.append(n + 2 * i)\n        else:\n            result.append(n + 2 * i - 1)\n    return result"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)[2:]"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/123", "completion": "    result = []\n    while n != 1:\n        if n % 2 != 0:\n            result.append(n)\n        n = 3 * n + 1\n    return result"}
{"task_id": "HumanEval/130", "completion": "    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [1] + [1 + (i / 2) for i in range(2, n + 1)]\n    else:\n        trib = [1]\n        for i in range(2, n + 1):\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 3])\n        return trib"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    rounded_lst = [int(x) for x in lst]\n    sum_of_squares = sum([x**2 for x in rounded_lst])\n    return sum_of_squares"}
{"task_id": "HumanEval/139", "completion": "    if n < 0:\n        return -1\n    elif n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/142", "completion": "    total_sum = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total_sum += num * num\n        elif i % 4 == 0:\n            total_sum += num * num * num\n        else:\n            total_sum += num\n    return total_sum"}
{"task_id": "HumanEval/150", "completion": "    if n % 2 != 0:\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            total += num * num\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/2", "completion": "    return number % 1"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    return sum(numbers), 1 if len(numbers) == 1 else 1 * numbers[0]"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    for note in music_string:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n / divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).find('7') != -1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/39", "completion": "    fib = [0, 1]\n    for i in range(2, n+1):\n        fib.append(fib[i-1] + fib[i-2])\n        if fib[i] > 1 and all(fib[i] % j != 0 for j in range(2, fib[i])):\n            return fib[i]\n    return -1"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/49", "completion": "    return (n % p)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/59", "completion": "    for i in range(n//2, 1, -1):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(3, n+1):\n            c = a + b + c\n            a, b = b, c\n        return c"}
{"task_id": "HumanEval/75", "completion": "    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                count = 0\n                for j in range(2, i):\n                    if i % j == 0:\n                        count += 1\n                        if count == 3:\n                            return True\n                            break\n                if count < 3:\n                    break\n        return False\n    else:\n        return \"Number is too large\""}
{"task_id": "HumanEval/78", "completion": "    hex_digits = '0123456789ABCDEF'\n    decimal_num = int(num, 16)\n    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    while decimal_num > 0:\n        digit = decimal_num % 16\n        if hex_digits[digit] in primes:\n            count += 1\n        decimal_num //= 16\n    return count"}
{"task_id": "HumanEval/84", "completion": "    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 2\n        N //= 2\n    return bin(binary_sum)[2:]"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(n):\n        return sum([int(x) for x in str(n)])\n\n    max_prime = -1\n    for num in lst:\n        if isPrime(num):\n            max_prime = max(max_prime, num)\n\n    return sumOfDigits(max_prime)"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        if num < n and all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/100", "completion": "    result = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            result.append(n + 2 * i)\n        else:\n            result.append(n + 2 * i - 1)\n    return result"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)[2:]"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/123", "completion": "    if n == 1:\n        return [1]\n    else:\n        result = []\n        while n > 1:\n            if n % 2 != 0:\n                result.append(n)\n            n = 3 * n + 1\n        return result"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        result = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                result.append(result[-1] + result[-2])\n            else:\n                result.append(result[-1] + result[-2] + result[-3])\n        return result"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    rounded_lst = [int(x) for x in lst]\n    sum_squared = sum(rounded_lst**2)\n    return sum_squared"}
{"task_id": "HumanEval/139", "completion": "    if n < 0:\n        return -1\n    elif n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/142", "completion": "    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i]**2\n        elif i % 4 == 0:\n            total_sum += lst[i]**3\n        else:\n            total_sum += lst[i]\n    return total_sum"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            total += num * num\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    scale = 1 / (max_val - min_val)\n    return [(num - min_val) * scale for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/33", "completion": "    l.sort(key=lambda x: x % 3)\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/37", "completion": "    l.sort(key=lambda x: x % 2)\n    return l"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq = -1\n    max_num = -1\n    for key, value in freq.items():\n        if key > 0 and value >= key:\n            if value > max_freq:\n                max_freq = value\n                max_num = key\n    return max_num"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    for num in lst:\n        if num < min_val:\n            min_val = num\n    if min_val == float('inf'):\n        return None\n    next_min = float('inf')\n    for num in lst:\n        if num < min_val and num < next_min:\n            next_min = num\n    return next_min"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 != 0 or y % 2 != 0:\n        return -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/104", "completion": "    unique_elements = []\n    for num in x:\n        num_str = str(num)\n        if not any(digit.isdigit() for digit in num_str if int(digit) % 2 == 0):\n            unique_elements.append(num)\n    return sorted(unique_elements)"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef replace_with_name(arr):\n    name_map = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    result = []\n    for num in arr:\n        if num in range(1, 10):\n            result.append(name_map[num])\n        else:\n            result.append(str(num))\n    return result\n\ndef sort_and_reverse_with_name(arr):\n    arr.sort(key=by_length)\n    arr.reverse()\n    return replace_with_name(arr)"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    product = 1\n    for sign in signs:\n        product *= sign\n    result = 0\n    for i in range(len(arr)):\n        result += abs(arr[i]) * product\n    return result"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    visited[0][0] = True\n    path = [grid[0][0]]\n    for i in range(1, k):\n        x, y = path[i-1]\n        if x+1 < n and not visited[x+1][y]:\n            visited[x+1][y] = True\n            path.append((x+1, y))\n            break\n        if y+1 < m and not visited[x][y+1]:\n            visited[x][y+1] = True\n            path.append((x, y+1))\n            break\n        if x-1 >= 0 and not visited[x-1][y]:\n            visited[x-1][y] = True\n            path.append((x-1, y))\n            break\n        if y-1 >= 0 and not visited[x][y-1]:\n            visited[x][y-1] = True\n            path.append((x, y-1))\n            break\n    return path"}
{"task_id": "HumanEval/135", "completion": "    max_index = -1\n    for i in range(len(arr)):\n        if arr[i] <= arr[i-1]:\n            max_index = i-1\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "    max_neg = None\n    min_pos = None\n    for num in lst:\n        if isinstance(num, int):\n            if num < 0 and (max_neg is None or num > max_neg):\n                max_neg = num\n            elif num > 0 and (min_pos is None or num < min_pos):\n                min_pos = num\n    return max_neg, min_pos"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(num):\n        total = 0\n        while num:\n            total += num % 10\n            num //= 10\n        return total\n\n    nums.sort(key=lambda x: (sum_of_digits(x), nums.index(x)))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            if int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for i in range(a, b+1):\n        if str(i).isdigit() and len(str(i)) % 2 == 0:\n            even_digits.append(i)\n    even_digits.sort()\n    return even_digits"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    scale = 1 / (max_val - min_val)\n    return [(num - min_val) * scale for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/33", "completion": "    l.sort(key=lambda x: x % 3)\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(dict.fromkeys(l))"}
{"task_id": "HumanEval/37", "completion": "    l.sort(key=lambda x: x % 2)\n    return l"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    l.sort()\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq = -1\n    max_num = -1\n    for key, value in freq.items():\n        if key > 0 and value >= key:\n            max_freq = value\n            max_num = key\n    return max_num"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0] + array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    second_min_val = float('inf')\n    for num in lst:\n        if num < min_val:\n            second_min_val = min_val\n            min_val = num\n        elif num < second_min_val and num != min_val:\n            second_min_val = num\n    return second_min_val"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 != 0 or y % 2 != 0:\n        return -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/104", "completion": "    unique_elements = []\n    for i in x:\n        if not any(j.isdigit() and int(j) % 2 == 0 for j in str(i)):\n            unique_elements.append(i)\n    unique_elements.sort()\n    return unique_elements"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef replace_with_names(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(names[num - 1])\n        else:\n            result.append(str(num))\n    result.sort(key=by_length)\n    return result\n\ndef sort_and_replace(arr):\n    if not arr:\n        return []\n    else:\n        arr.sort()\n        return replace_with_names(arr)"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    product = 1\n    for sign in signs:\n        product *= sign\n    result = 0\n    for i in range(len(arr)):\n        result += abs(arr[i]) * product\n    return result"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    dp = [[0] * k for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            dp[i][0] = grid[i][j]\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return dp[n-1][m-1]"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    max_index = -1\n    for i in range(n-1):\n        if arr[i] <= arr[i+1]:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "    negative = None\n    positive = None\n    for num in lst:\n        if isinstance(num, int):\n            if num < 0 and (negative is None or num > negative):\n                negative = num\n            elif num > 0 and (positive is None or num < positive):\n                positive = num\n    return negative, positive"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            if int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for i in range(a, b+1):\n        if str(i).isdigit() and len(str(i)) % 2 == 0:\n            even_digits.append(i)\n    even_digits.sort()\n    return even_digits"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    scale = 1 / (max_val - min_val)\n    return [(num - min_val) * scale for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/33", "completion": "    l.sort(key=lambda x: x % 3)\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(dict.fromkeys(l))"}
{"task_id": "HumanEval/37", "completion": "    l.sort(key=lambda x: x % 2)\n    return l"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq = -1\n    max_num = -1\n    for key, value in freq.items():\n        if value >= key and key > 0:\n            if value > max_freq:\n                max_freq = value\n                max_num = key\n    return max_num"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0] + array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    second_min_val = float('inf')\n    for num in lst:\n        if num < min_val:\n            second_min_val = min_val\n            min_val = num\n        elif num < second_min_val and num != min_val:\n            second_min_val = num\n    return second_min_val"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 != 0 or y % 2 != 0:\n        return -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/104", "completion": "    unique_elements = []\n    for i in x:\n        if not any(int(digit) % 2 == 0 for digit in str(i)):\n            unique_elements.append(i)\n    unique_elements.sort()\n    return unique_elements"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef replace_digits(arr):\n    if not arr:\n        return []\n    sorted_arr = sorted(arr, key=by_length)\n    reverse_arr = sorted_arr[::-1]\n    result = []\n    for num in reverse_arr:\n        if num >= 1 and num <= 9:\n            result.append(str(num))\n        else:\n            result.append(str(num))\n    return result\n\ndef replace_with_names(arr):\n    if not arr:\n        return []\n    sorted_arr = sorted(arr, key=by_length)\n    reverse_arr = sorted_arr[::-1]\n    result = []\n    for num in reverse_arr:\n        if num >= 1 and num <= 9:\n            result.append(str(num))\n        else:\n            result.append(str(num))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    product = 1\n    for sign in signs:\n        product *= sign\n    result = 0\n    for i in range(len(arr)):\n        result += abs(arr[i]) * product\n    return result"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    dp = [[float('inf')] * (k + 1) for _ in range(n)]\n    dp[0][0] = 0\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + grid[i-1][0]\n    for j in range(1, m):\n        dp[0][j] = dp[0][j-1] + grid[0][j-1]\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = min(dp[i-1][j] + grid[i-1][j], dp[i][j-1] + grid[i][j-1])\n    return dp[n-1][k]"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    max_index = -1\n    for i in range(n-1):\n        if arr[i] <= arr[i+1]:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "    max_neg = None\n    min_pos = None\n    for num in lst:\n        if isinstance(num, int):\n            if num < 0 and (max_neg is None or num > max_neg):\n                max_neg = num\n            elif num > 0 and (min_pos is None or num < min_pos):\n                min_pos = num\n    return max_neg, min_pos"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            if int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for i in range(a, b+1):\n        if str(i).isdigit() and len(str(i)) % 2 == 0:\n            even_digits.append(i)\n    even_digits.sort()\n    return even_digits"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    result = [(num - min_val) / (max_val - min_val) for num in numbers]\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/33", "completion": "    l.sort(key=lambda x: x % 3)\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(dict.fromkeys(l))"}
{"task_id": "HumanEval/37", "completion": "    l.sort(key=lambda x: x % 2)\n    return l"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq = -1\n    max_num = -1\n    for num in lst:\n        if num > 0 and freq[num] >= num and num > max_freq:\n            max_freq = freq[num]\n            max_num = num\n    return max_num"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    result = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result.append(lst[i])\n        else:\n            result.insert(0, lst[i])\n    return result"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0] + array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    for num in lst:\n        if num < min_val:\n            min_val = num\n    if min_val == float('inf'):\n        return None\n    next_min = float('inf')\n    for num in lst:\n        if num < min_val and num < next_min:\n            next_min = num\n    return next_min"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 != 0:\n        x += 1\n    if y % 2 != 0:\n        y -= 1\n    for i in range(x, y+1, 2):\n        if i >= x and i <= y:\n            return i\n    return -1"}
{"task_id": "HumanEval/104", "completion": "    unique_elements = []\n    for num in x:\n        num_str = str(num)\n        if all(int(digit) % 2 != 0 for digit in num_str):\n            unique_elements.append(num)\n    return sorted(unique_elements)"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef name_digits(arr):\n    if not arr:\n        return []\n    sorted_arr = sorted(arr, key=by_length)\n    reverse_arr = sorted_arr[::-1]\n    result = []\n    for num in reverse_arr:\n        if num >= 1 and num <= 9:\n            result.append(str(num))\n    return result\n\ndef replace_with_names(arr):\n    if not arr:\n        return []\n    sorted_arr = sorted(arr, key=by_length)\n    reverse_arr = sorted_arr[::-1]\n    result = []\n    for num in reverse_arr:\n        if num >= 1 and num <= 9:\n            result.append(str(num))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    signs = [0] * len(arr)\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            signs[i] = 1\n        elif arr[i] < 0:\n            signs[i] = -1\n    product = 1\n    for sign in signs:\n        product *= sign\n    result = 0\n    for i in range(len(arr)):\n        result += abs(arr[i]) * product\n    return result"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    visited[0][0] = True\n    path = [grid[0][0]]\n    for _ in range(k - 1):\n        x, y = path[-1]\n        if x + 1 < n and not visited[x + 1][y]:\n            path.append((x + 1, y))\n            visited[x + 1][y] = True\n        elif y + 1 < m and not visited[x][y + 1]:\n            path.append((x, y + 1))\n            visited[x][y + 1] = True\n        elif x - 1 >= 0 and not visited[x - 1][y]:\n            path.append((x - 1, y))\n            visited[x - 1][y] = True\n        else:\n            path.append((x, y - 1))\n            visited[x][y - 1] = True\n    return path"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    max_index = -1\n    for i in range(n-1):\n        if arr[i] <= arr[i+1]:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "    max_neg = None\n    min_pos = None\n    for num in lst:\n        if isinstance(num, int):\n            if num < 0 and (max_neg is None or num > max_neg):\n                max_neg = num\n            elif num > 0 and (min_pos is None or num < min_pos):\n                min_pos = num\n    return max_neg, min_pos"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            if int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for i in range(a, b+1):\n        if str(i).isdigit() and len(str(i)) % 2 == 0:\n            even_digits.append(i)\n    even_digits.sort()\n    return even_digits"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    result = [(num - min_val) / (max_val - min_val) for num in numbers]\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/33", "completion": "    l.sort(key=lambda x: x % 3)\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/37", "completion": "    l.sort(key=lambda x: x % 2)\n    return l"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq = -1\n    max_num = -1\n    for key in freq:\n        if key > 0 and freq[key] >= key:\n            if freq[key] > max_freq:\n                max_freq = freq[key]\n                max_num = key\n    return max_num"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        lst.sort()\n        result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    second_min_val = float('inf')\n    for num in lst:\n        if num < min_val:\n            second_min_val = min_val\n            min_val = num\n        elif num < second_min_val and num != min_val:\n            second_min_val = num\n    return second_min_val if second_min_val != float('inf') else None"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 != 0 or y % 2 != 0:\n        return -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/104", "completion": "    unique_elements = []\n    for i in x:\n        if not any(j.isdigit() and int(j) % 2 == 0 for j in str(i)):\n            unique_elements.append(i)\n    unique_elements.sort()\n    return unique_elements"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef replace_digits(arr):\n    if not arr:\n        return []\n    sorted_arr = sorted(arr, key=by_length)\n    reversed_arr = sorted_arr[::-1]\n    result = []\n    for num in reversed_arr:\n        if num >= 1 and num <= 9:\n            result.append(str(num))\n        else:\n            result.append(str(num))\n    return result\n\ndef replace_with_names(arr):\n    if not arr:\n        return []\n    sorted_arr = sorted(arr, key=by_length)\n    reversed_arr = sorted_arr[::-1]\n    result = []\n    for num in reversed_arr:\n        if num >= 1 and num <= 9:\n            result.append(str(num))\n        else:\n            result.append(str(num))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    product = 1\n    for sign in signs:\n        product *= sign\n    result = 0\n    for i in range(len(arr)):\n        result += abs(arr[i]) * product\n    return result"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    visited[0][0] = True\n    path = [grid[0][0]]\n    for _ in range(k - 1):\n        x, y = path[-1]\n        if x + 1 < n and not visited[x + 1][y]:\n            path.append(grid[x + 1][y])\n            visited[x + 1][y] = True\n        elif y + 1 < m and not visited[x][y + 1]:\n            path.append(grid[x][y + 1])\n            visited[x][y + 1] = True\n        elif x - 1 >= 0 and not visited[x - 1][y]:\n            path.append(grid[x - 1][y])\n            visited[x - 1][y] = True\n        elif y - 1 >= 0 and not visited[x][y - 1]:\n            path.append(grid[x][y - 1])\n            visited[x][y - 1] = True\n    return path"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    max_index = -1\n    for i in range(n-1):\n        if arr[i] <= arr[i+1]:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "    max_neg = None\n    min_pos = None\n    for num in lst:\n        if isinstance(num, int):\n            if num < 0 and (max_neg is None or num > max_neg):\n                max_neg = num\n            elif num > 0 and (min_pos is None or num < min_pos):\n                min_pos = num\n    return max_neg, min_pos"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(num):\n        total = 0\n        while num:\n            total += num % 10\n            num //= 10\n        return total\n\n    nums.sort(key=lambda x: (sum_of_digits(x), nums.index(x)))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            if int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for i in range(a, b+1):\n        if str(i).isdigit() and len(str(i)) % 2 == 0:\n            even_digits.append(i)\n    even_digits.sort()\n    return even_digits"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    total_water = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                total_water += 1\n    if total_water == 0:\n        return 0\n    max_water = max(grid[i][j] for i in range(n) for j in range(m))\n    return math.ceil(total_water / capacity)"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if l == 2:\n                dp[i][j] = abs(arr[i] - arr[j])\n            else:\n                dp[i][j] = min(dp[i][j - 1] + abs(arr[j] - arr[j - 1]), dp[i + 1][j] + abs(arr[i] - arr[j]))\n    return dp[0][n - 1]"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    total_water = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                total_water += 1\n    if total_water == 0:\n        return 0\n    max_water = max(grid[i][j] for i in range(n) for j in range(m))\n    return math.ceil(total_water / capacity)"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if l == 2:\n                dp[i][j] = 0 if arr[i] == arr[j] else 1\n            else:\n                dp[i][j] = min(dp[i][j - 1] + 1, dp[i + 1][j] + 1)\n                if arr[i] == arr[j]:\n                    dp[i][j] = min(dp[i][j], dp[i + 1][j - 1])\n                else:\n                    dp[i][j] = min(dp[i][j], dp[i + 1][j - 1] + 1)\n    return dp[0][n - 1]"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    total_water = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                total_water += 1\n    if total_water == 0:\n        return 0\n    max_water = max(grid[i][j] for i in range(n) for j in range(m))\n    return math.ceil(total_water / capacity)"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if l == 2:\n                dp[i][j] = 0 if arr[i] == arr[j] else 1\n            else:\n                dp[i][j] = min(dp[i][j - 1] + 1, dp[i + 1][j] + 1)\n                if arr[i] == arr[j]:\n                    dp[i][j] = min(dp[i][j], dp[i + 1][j - 1])\n                else:\n                    dp[i][j] = min(dp[i][j], dp[i + 1][j - 1] + 1)\n    return dp[0][n - 1]"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    total_water = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                total_water += 1\n    if total_water == 0:\n        return 0\n    max_water = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                max_water += capacity\n    return math.ceil(max_water / total_water)"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    total_water = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                total_water += 1\n    return math.ceil(total_water / capacity)"}
