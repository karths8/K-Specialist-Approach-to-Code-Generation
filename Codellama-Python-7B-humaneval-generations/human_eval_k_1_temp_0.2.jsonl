{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                if not stack:\n                    groups.append('(' + ''.join(stack) + ')')\n                    stack = []\n    return groups"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    return number - integer_part"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        if op > 0:\n            balance += op\n        else:\n            balance -= op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    depth = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(depth)\n            depth += 1\n        elif char == ')':\n            depth = stack.pop()\n        max_depth = max(max_depth, depth)\n    return [max_depth] * len(paren_string)"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    return (sum(numbers), 1) if numbers else (0, 1)"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_val = float('-inf')\n    for num in numbers:\n        max_val = max(max_val, num)\n        result.append(max_val)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n    i = 1\n    while True:\n        if is_palindrome(string + string[i:]):\n            return string + string[i:][::-1]\n        i += 1"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            result += str(int(a[i]) ^ int(b[i]))\n        else:\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    max_str = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_str = s\n    return max_str"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    return [string[i:] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "    beats = [4, 2, 1]\n    result = []\n    for char in music_string:\n        if char == 'o':\n            result.append(beats[0])\n        elif char == 'o|':\n            result.append(beats[1])\n        elif char == '.|':\n            result.append(beats[2])\n    return result"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    i = 0\n    while i <= len(string) - len(substring):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = numbers.split()\n    num_list.sort(key=lambda x: int(x))\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (numbers[0], numbers[0])\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return \"\"\n    result = strings[0]\n    for string in strings[1:]:\n        result += string\n    return result"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds a zero of a polynomial with coefficients xs.\n    \"\"\"\n    if len(xs) % 2 == 0:\n        return 0\n    else:\n        return round(math.exp(math.log(1e-10)/(len(xs)-1)), 10)"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    for i in range(n):\n        if i % 3 != 0:\n            l[i] = l[i]\n        else:\n            l[i] = sorted(l[i:])[i]\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).find('7') != -1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = sorted(l[i])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from encoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode each group. Unless group has fewer elements than 3.\n    groups = [(group[0] + group[1:]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    for i in range(n-1, 1, -1):\n        if is_prime(fib[i]):\n            return fib[i]\n    return -1\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l) - 2):\n        if l[i] + l[i + 1] + l[i + 2] == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    area = 0.5 * a * h\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c = 0, 2, 1\n        for _ in range(4, n + 1):\n            a, b = b, a + c\n            c = a + b\n        return b"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    res = 1\n    n = n % p\n    while n > 0:\n        if n % 2 == 1:\n            res = (res * n) % p\n        n = n // 2\n    return res"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string from encoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    if len(l) <= 1:\n        return True\n    if l[0] > l[1]:\n        return all(l[i] >= l[i-1] for i in range(1, len(l)))\n    else:\n        return all(l[i] <= l[i-1] for i in range(1, len(l)))"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    res = [0] * n\n    for i in range(n):\n        res[i] = xs[i] * (i + 1)\n    return res"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/64", "completion": "    vowels = set(\"aeiouAEIOU\")\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split(' '))\n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_even = float('inf')\n    min_even_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < min_even:\n            min_even = num\n            min_even_index = i\n    if min_even_index == -1:\n        return []\n    return [min_even, min_even_index]"}
{"task_id": "HumanEval/69", "completion": "    max_freq = -1\n    result = -1\n    for num in lst:\n        if num > 0 and lst.count(num) >= num:\n            if num > max_freq:\n                max_freq = num\n                result = num\n    return result"}
{"task_id": "HumanEval/70", "completion": "    if len(lst) <= 1:\n        return lst\n    min_val = min(lst)\n    max_val = max(lst)\n    result = [min_val]\n    lst.remove(min_val)\n    result.append(max_val)\n    lst.remove(max_val)\n    result += strange_sort_list(lst)\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and len(q) % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    diff = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            diff += 1\n    return diff"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "    primes = [True] * (a + 1)\n    p = 2\n    while p * p <= a:\n        if primes[p] == True:\n            for i in range(p * p, a + 1, p):\n                primes[i] = False\n        p += 1\n    for i in range(2, a + 1):\n        if primes[i]:\n            if a % i == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    for i in range(2, int(x ** 0.5) + 1):\n        if n ** i == x:\n            return True\n    return False"}
{"task_id": "HumanEval/77", "completion": "    return (a > 0 and round(a ** (1/3)) ** 3 == a)"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = {'A': '10', 'B': '11', 'C': '12', 'D': '13', 'E': '14', 'F': '15'}\n    decimal_num = 0\n    for i in range(len(num)):\n        decimal_num = decimal_num * 16 + int(hex_digits[num[i]])\n    return decimal_num\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_prime_hex_digits(num: str) -> int:\n    decimal_num = hex_key(num)\n    count = 0\n    while decimal_num > 0:\n        digit = decimal_num % 16\n        if is_prime(digit):\n            count += 1\n        decimal_num //= 16\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "    sum_of_digits = sum(int(digit) for digit in str(N))\n    binary_sum = bin(sum_of_digits)[2:]\n    return binary_sum"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for row in lst:\n        for i in range(len(row)):\n            if row[i] == x:\n                result.append((lst.index(row), i))\n    return sorted(result, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.')\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char in vowels:\n            result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if num > max_prime and isPrime(num):\n            max_prime = num\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    case = dict.keys()[0].islower() if dict.keys() else False\n    for key in dict.keys():\n        if key.islower() != case:\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(2, n):\n        if is_prime(num):\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/97", "completion": "    return (a * b) % 10"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num == int(num):\n        return int(num)\n    else:\n        return int(num + 1) if num % 2 == 0 else int(num - 1)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i * 2)\n        else:\n            result.append(i * 2 + 1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -2):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = m - n + 1\n    rounded_sum = (n + m) // 2 * 2\n    if rounded_sum % 2 != n % 2:\n        rounded_sum += 1\n    return bin(rounded_sum)[2:] if total % 2 == 0 else bin(rounded_sum - 1)[2:]"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: len(str(x)))\n\ndef between_1_9(arr):\n    return [x for x in arr if 1 <= x <= 9]\n\ndef replace_by_name(arr):\n    return [str(x).replace(str(x), name) for x in arr]\n\ndef sort_and_reverse(arr):\n    return by_length(between_1_9(arr)[::-1])\n\ndef replace_by_name(arr):\n    return [str(x).replace(str(x), name) for x in arr]\n\ndef sort_and_reverse(arr):\n    return by_length(between_1_9(arr)[::-1])\n\ndef replace_by_name(arr):\n    return [str(x).replace(str(x), name) for x in arr]\n\ndef sort_and_reverse(arr):\n    return by_length(between_1_9(arr)[::-1])\n\ndef replace_by_name(arr):\n    return [str(x).replace(str(x), name) for x in arr]\n\ndef sort_and_reverse(arr):\n    return by_length(between_1_9(arr)[::-1])\n\ndef replace_by_name(arr):\n    return [str(x).replace(str(x), name) for x in arr]\n\ndef sort_and_reverse(arr):\n    return by_length(between_1_9(arr)[::-1])\n\ndef replace_by_name(arr):\n    return [str(x).replace(str(x), name) for x in arr]\n\ndef sort_and_reverse(arr):\n    return by_length(between_1_9(arr)[::-1])\n\ndef replace_by_name(arr):\n    return [str(x).replace(str(x), name) for x in arr]\n\ndef sort_and_reverse(arr):\n    return by_length(between_1_9(arr)[::-1])\n\ndef replace_by_name(arr):\n    return [str(x).replace(str(x), name) for x in arr]\n\ndef sort_and_reverse(arr):\n    return by_length(between_1_9(arr)[::-1])\n\ndef replace_by_name(arr):\n    return [str(x).replace(str(x), name) for x in arr]\n\ndef sort_and_reverse(arr):\n    return by_length(between_1_9(arr)[::-1])\n\ndef replace_by_name(arr):\n    return [str(x).replace(str(x), name) for x in arr]\n\ndef sort_and_reverse(arr):\n    return by_length(between_1_9(arr)[::-1])\n\ndef replace_by_name(arr):\n    return [str(x).replace(str(x), name) for x in arr]\n\ndef sort_and_reverse(arr):\n    return by_length(between_1_9(arr)[::-1])\n\ndef replace_by_name(arr):\n    return [str(x).replace(str(x), name) for x in arr]\n\ndef sort_and_reverse(arr):\n    return by_length(between_1_9(arr)[::-1])\n\ndef replace_by_name(arr):\n    return [str(x).replace(str(x), name) for x in arr]\n\ndef sort_and_reverse(arr):\n    return by_length(between_1_9(arr)[::-1])\n\ndef replace_by_name(arr):\n    return [str(x).replace(str(x), name) for x in arr]\n\ndef sort_and_reverse(arr):\n    return by_length(between_1_9(arr)[::-1])\n\ndef replace_by_name(arr):\n    return [str(x).replace(str(x), name) for x in arr]\n\ndef sort_and_reverse(arr):\n    return by_length(between_1_9(arr)[::-1])\n\ndef replace_by_name(arr):\n    return [str(x).replace(str("}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(1)\n            for j in range(2, i+1):\n                result[i-1] *= j\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(n):\n        if n == 0:\n            return 0\n        return n % 10 + sum_of_digits(n // 10)\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(abs(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            j = i\n            while j < n-1 and arr[j] > arr[j+1]:\n                j += 1\n            arr = [arr[-1]] + arr[:-1]\n            if j == n-1:\n                return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    if len(lst1) != len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0 and lst2[i] % 2 == 0:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    hist = {}\n    words = test.split()\n    for word in words:\n        for char in word:\n            if char in hist:\n                hist[char] += 1\n            else:\n                hist[char] = 1\n    max_count = max(hist.values())\n    result = {key: value for key, value in hist.items() if value == max_count}\n    return result"}
{"task_id": "HumanEval/112", "completion": "    for i in c:\n        s = s.replace(i,'')\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                odd_count += 1\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    m, n = len(grid), len(grid[0])\n    ans = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                ans += math.ceil(capacity / grid[i][j])\n    return ans"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou')\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    vowel_index = -1\n    consonant_index = -1\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in consonants:\n            consonant_index = i\n            break\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            vowel_index = i\n            break\n    if vowel_index == -1 or consonant_index == -1:\n        return \"\"\n    return word[vowel_index]"}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[::-1][:k]"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(1, len(lst), 2):\n        total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    def collatz(x):\n        if x % 2 == 0:\n            return x // 2\n        else:\n            return 3 * x + 1\n\n    result = []\n    while n != 1:\n        n = collatz(n)\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)"}
{"task_id": "HumanEval/124", "completion": "    if len(date) == 0:\n        return False\n    if len(date) != 10:\n        return False\n    if date.count('-') != 2:\n        return False\n    month, day, year = date.split('-')\n    if len(month) != 2 or len(day) != 2 or len(year) != 4:\n        return False\n    if int(month) < 1 or int(month) > 12:\n        return False\n    if int(day) < 1 or int(day) > 31:\n        return False\n    if int(year) < 1900 or int(year) > 2099:\n        return False\n    if int(year) % 4 == 0:\n        if int(year) % 100 != 0:\n            if int(year) % 400 != 0:\n                return False\n            else:\n                return True\n        else:\n            if int(year) % 400 != 0:\n                return False\n            else:\n                return True\n    else:\n        return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 != 0)"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if isPrime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef isPrime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    signs = 1\n    magnitude = 0\n    for num in arr:\n        if num != 0:\n            signs *= num\n            magnitude += abs(num)\n    return signs * magnitude"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[float('inf')] * n for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    for i in range(n):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + grid[i][j])\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + grid[i][j])\n    return [dp[n-1][n-1]]"}
{"task_id": "HumanEval/130", "completion": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        res = [1, 3]\n        for i in range(2, n + 1):\n            res.append(res[i - 1] + res[i - 2] + res[i - 3])\n        return res"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num**2)\n    return result"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "    max_index = -1\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [x for x in lst if x < 0]\n    if not neg_integers:\n        return None, None\n    else:\n        a = max(neg_integers)\n    \n    pos_integers = [x for x in lst if x > 0]\n    if not pos_integers:\n        return a, None\n    else:\n        b = min(pos_integers)\n    \n    return a, b"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    elif isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        return max(float(a), float(b))\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if n - i >= i:\n            count += 1\n            if count == 4:\n                return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    i = 0\n    while i < len(text):\n        if text[i] == \" \":\n            result += \"_\"\n        elif text[i] == \"-\":\n            result += \"-\"\n        else:\n            result += text[i]\n        i += 1\n    return result"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 10:\n        return \"No\"\n    if file_name.count('.') != 1:\n        return \"No\"\n    if file_name.count('0') or file_name.count('1') or file_name.count('2') or file_name.count('3') or file_name.count('4') or file_name.count('5') or file_name.count('6') or file_name.count('7') or file_name.count('8') or file_name.count('9'):\n        return \"No\"\n    if not file_name[:file_name.index('.')].isalpha() or not file_name[file_name.index('.')+1:].isalpha():\n        return \"No\"\n    if file_name[file_name.index('.')+1:].lower() not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if len(word) > 1 and all(i > 1 for i in range(2, len(word))):\n            prime_words.append(word)\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result = x_num * n_num\n    return result % n_den == 0"}
{"task_id": "HumanEval/145", "completion": "    def get_sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (get_sum_of_digits(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 2 != 0) and (num % 10 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    return tuple(sorted(planets[planets.index(planet1)+1:planets.index(planet2)]))"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n    else:\n        return x\n    return y"}
{"task_id": "HumanEval/151", "completion": "    odd_numbers = [x for x in lst if x > 0 and x % 2 != 0]\n    if not odd_numbers:\n        return 0\n    return sum(x**2 for x in odd_numbers)"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = (cap_count - sm_count) if cap_count > sm_count else 0\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    if b in a:\n        return True\n    b = b + b\n    for i in range(len(a)):\n        if a[i:] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = len(num_str) - even_count\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    val = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    syms = ['m', 'cm', 'd', 'cd', 'xc', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 't', 'ct', 's', 'cs', 'r', 'cr', 'p', 'cp', 'o', 'co', 'h', 'ch', 'g', 'cg', 'f', 'cf', 'e', 'ce', 'd', 'cd', 'c', 'xc', 'b', 'xb', 'a', 'xa']\n    roman_num = ''\n    for i in range(len(val)):\n        while number >= val[i]:\n            roman_num += syms[i]\n            number -= val[i]\n    return roman_num"}
{"task_id": "HumanEval/157", "completion": "    if a == b or b == c or c == a:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_word = word\n        elif len(set(word)) == max_chars:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        if all(int(digit) % 2 == 0 for digit in str(num)):\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                if not stack:\n                    result.append('(')\n    return result + stack"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimals = number - integer_part\n    return decimals"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        if op > 0:\n            balance += op\n        else:\n            balance -= op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                max_depth = max(max_depth, len(stack))\n    return [max_depth] * len(paren_string)"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    return (sum(numbers), 1) if numbers else (0, 1)"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_val = float('-inf')\n    for i, num in enumerate(numbers):\n        max_val = max(max_val, num)\n        result.append(max_val)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the supplied string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            result += str(int(a[i]) ^ int(b[i]))\n        else:\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    result = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    result = \"\"\n    for i in range(n+1):\n        result += str(i) + \" \"\n    return result.strip()"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "    beats = 0\n    result = []\n    for char in music_string:\n        if char == 'o':\n            beats += 4\n        elif char == 'o|':\n            beats += 2\n        elif char == '.|':\n            beats += 1\n        result.append(beats)\n    return result"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    while substring in string:\n        count += 1\n        string = string.replace(substring, '', 1)\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = numbers.split()\n    num_list.sort(key=lambda x: int(x))\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (numbers[0], numbers[0])\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    scale = 1 / (max_num - min_num)\n    return [(num - min_num) * scale for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return \"\"\n    result = strings[0]\n    for string in strings[1:]:\n        result += string\n    return result"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero point of a polynomial with coefficients xs.\n    \"\"\"\n    x = 1\n    epsilon = 0.000001\n    while abs(poly(xs, x)) > epsilon:\n        x += 0.000001\n    return x"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l.sort(key=lambda x: (x % 3, x))\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).find('7') != -1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = sorted(l[i:])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from encoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode each group. Unless group has fewer elements than 3.\n    groups = [encode_cyclic(group) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    for i in range(n-1, 1, -1):\n        if is_prime(fib[i]):\n            return fib[i]\n    return -1\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l)-2):\n        if l[i] + l[i+1] + l[i+2] == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n*(n-1)//2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    area = 0.5 * a * h\n    return area"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n):\n        a, b = b, c + d\n        d = a\n    return b"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    res = 1\n    n = n % p\n    while (n > 0):\n        if (n % 2 == 1):\n            res = (res * 2) % p\n        n = n // 2\n    return res"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    if len(l) <= 1:\n        return True\n    if l[0] > l[1]:\n        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n    else:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            n = n // factor\n        else:\n            factor += 1\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    res = []\n    for i in range(n):\n        res.append(xs[i] * (i + 1))\n    return res"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(3, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char.lower() in ['a', 'e', 'i', 'o', 'u', 'y']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int, s.split('and'))\n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_val:\n            min_val = val\n            min_index = i\n    if min_index == -1:\n        return []\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq = max(freq.values())\n    result = -1\n    for key, value in freq.items():\n        if value >= key and key > 0:\n            result = key\n    return result"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    result = []\n    while lst:\n        min_val = min(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            result.insert(0, max_val)\n            lst.remove(max_val)\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and is_palindrome(q):\n        return True\n    else:\n        return False\n\ndef is_palindrome(obj):\n    return obj == obj[::-1]"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    diff = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            diff += 1\n    return diff"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "    if a < 2:\n        return False\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    for i in range(2, int(x ** 0.5) + 1):\n        if n ** i == x:\n            return True\n    return False"}
{"task_id": "HumanEval/77", "completion": "    return (a > 0 and (a ** (1/3)) % 1 == 0)"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = {'A': '10', 'B': '11', 'C': '12', 'D': '13', 'E': '14', 'F': '15'}\n    decimal_num = 0\n    for i in range(len(num)):\n        decimal_num = decimal_num * 16 + int(hex_digits[num[i]])\n    return decimal_num\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_prime_hex_digits(num):\n    decimal_num = hex_key(num)\n    count = 0\n    while decimal_num > 0:\n        if decimal_num % 16 == 0:\n            count += 1\n            decimal_num //= 16\n        else:\n            decimal_num -= 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "    res = \"\"\n    while N > 0:\n        res = str(N % 2) + res\n        N = N // 2\n    return res"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for row in lst:\n        for col in range(len(row)):\n            if row[col] == x:\n                result.append((lst.index(row), col))\n    return sorted(result, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "    if len(array) <= 1:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    unique_nums = list(set(lst))\n    if len(unique_nums) < 2:\n        return None\n    unique_nums.sort()\n    return unique_nums[1]"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.')\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    return (x == y + z) or (y == x + z) or (z == x + y)"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char in vowels:\n            result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def sumOfDigits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    max_prime = max(lst)\n    if not isPrime(max_prime):\n        return -1\n    return sumOfDigits(max_prime)"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    case = dict.values()[0].isupper()\n    for key in dict:\n        if dict[key].isupper() != case:\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_count = 0\n    result = []\n    for num in range(2, n):\n        if is_prime(num):\n            result.append(num)\n            prime_count += 1\n        if prime_count == n:\n            break\n    return result"}
{"task_id": "HumanEval/97", "completion": "    return (a * b) % 10"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(1, len(s), 2):\n        if s[i].upper() in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num == int(num):\n        return int(num)\n    else:\n        return int(num + 1) if num % 2 != 0 else int(num)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i * 2)\n        else:\n            result.append((i * 2) + 1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 != 0 or y % 2 != 0:\n        return -1\n    else:\n        return max(i for i in range(x, y+1) if i % 2 == 0)"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = (m - n + 1) * n\n    return bin(total // (m - n + 1))[2:]"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef sortAndReplace(arr):\n    result = []\n    for num in by_length(arr):\n        if 1 <= num <= 9:\n            result.append(str(num))\n    result.sort(reverse=True)\n    for i in range(len(result)):\n        result[i] = result[i].replace(str(i+1), str(result[i]))\n    return result"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(1)\n            for j in range(2, i+1):\n                result[i-1] *= j\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(num):\n        if num == 0:\n            return 0\n        return num % 10 + sum_of_digits(num // 10)\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            j = i\n            while j < n-1 and arr[j] > arr[j+1]:\n                j += 1\n            if j == n-1:\n                return False\n            arr = [arr[j]] + arr[:j] + arr[j+1:]\n    return True"}
{"task_id": "HumanEval/110", "completion": "    if all(x % 2 == 0 for x in lst1) and all(x % 2 == 0 for x in lst2):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    histogram = {}\n    words = test.split()\n    for word in words:\n        for char in word:\n            if char in histogram:\n                histogram[char] += 1\n            else:\n                histogram[char] = 1\n    return histogram"}
{"task_id": "HumanEval/112", "completion": "    result = \"\"\n    for i in s:\n        if i not in c:\n            result += i\n    return result, result == result[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    row, col = len(grid), len(grid[0])\n    ans = 0\n    for i in range(row):\n        for j in range(col):\n            if grid[i][j] == 1:\n                ans += math.ceil(grid[i][j] / capacity)\n    return ans"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    words = s.split()\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    selected_words = []\n    for word in words:\n        if sum(1 for char in word if char in consonants) == n:\n            selected_words.append(word)\n    return selected_words"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    vowel_index = -1\n    consonant_index = -1\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in consonants:\n            consonant_index = i\n            break\n    for i in range(consonant_index+1, len(word)):\n        if word[i] in vowels:\n            vowel_index = i\n            break\n    if vowel_index == -1:\n        return \"\"\n    return word[vowel_index]"}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(1, len(lst), 2):\n        total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    def collatz(x):\n        if x % 2 == 0:\n            return x // 2\n        else:\n            return 3 * x + 1\n\n    result = []\n    while n != 1:\n        n = collatz(n)\n        if n % 2 != 0:\n            result.append(n)\n\n    return sorted(result)"}
{"task_id": "HumanEval/124", "completion": "    date_format = \"%m-%d-%Y\"\n    try:\n        datetime.strptime(date, date_format)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) % 2 != 0))"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if length < 2:\n        return \"NO\"\n    for i in range(2, length):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    signs = 1\n    for num in arr:\n        if num == 0:\n            return 0\n        signs *= num\n    return abs(signs)"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[float('inf')] * n for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    for i in range(n):\n        for j in range(n):\n            for x, y in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                r, c = i + x, j + y\n                if 0 <= r < n and 0 <= c < n:\n                    dp[i][j] = min(dp[i][j], dp[r][c] + grid[i][j])\n    return [dp[0][0]] * k"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    else:\n        res = [3]\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            c = a + b\n            res.append(c)\n            a, b = b, c\n        return res"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num**2)\n    return result"}
{"task_id": "HumanEval/134", "completion": "    txt = txt.strip()\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i] <= arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [x for x in lst if x < 0]\n    if not neg_integers:\n        return None, None\n    else:\n        return max(neg_integers), min([x for x in lst if x > 0])"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    elif isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        return max(float(a), float(b))\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    if n % 4 != 0:\n        return False\n    return True"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        elif char == \"-\":\n            result += \"--\"\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 10:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name[:file_name.index('.')].isalpha():\n        return 'No'\n    if not file_name[file_name.index('.')+1:].endswith(('.txt', 'exe', 'dll')):\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if len(word) > 1 and all(len(word) % i != 0 for i in range(2, len(word))):\n            prime_words.append(word)\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result = x_num * n_num\n    return result % n_den == 0"}
{"task_id": "HumanEval/145", "completion": "    def get_sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (get_sum_of_digits(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 2 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n    else:\n        return x"}
{"task_id": "HumanEval/151", "completion": "    odd_numbers = [num for num in lst if num > 0 and num % 2 != 0]\n    if not odd_numbers:\n        return 0\n    return sum(num ** 2 for num in odd_numbers)"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = ''\n    for extension in extensions:\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = (cap_count - sm_count)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    if b in a:\n        return True\n    b_len = len(b)\n    for i in range(b_len):\n        if b[i:] + b[:i] in a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    num_str = str(num)\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = len(num_str) - even_count\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    val = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    syms = ['m', 'cm', 'd', 'cd', 'xc', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 'x', '"}
{"task_id": "HumanEval/157", "completion": "    if a == b or b == c or c == a:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_word = word\n        elif len(set(word)) == max_chars:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    if number + remaining < need:\n        return [number + remaining, remaining]\n    else:\n        return [number + need, 0]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result if len(result) > 0 else result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        if all(int(digit) % 2 == 0 for digit in str(num)):\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                if not stack:\n                    groups.append(''.join(group))\n                    group = []\n    return groups"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    return number - integer_part"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        if op > 0:\n            balance += op\n        else:\n            balance -= op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                max_depth = max(max_depth, len(stack))\n    return [max_depth] * len(paren_string)"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), 1) if len(numbers) == 1 else (sum(numbers), numbers[0])"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    for i in range(len(numbers)):\n        max_val = float('-inf')\n        for j in range(i, len(numbers)):\n            max_val = max(max_val, numbers[j])\n            result.append(max_val)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the supplied string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            result += str(int(a[i]) ^ int(b[i]))\n        else:\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    result = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    for char in music_string:\n        if char == 'o':\n            result.append(4)\n        elif char == 'o|':\n            result.append(2)\n        elif char == '.|':\n            result.append(1)\n    return result"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    while string:\n        if string.startswith(substring):\n            count += 1\n            string = string[len(substring):]\n        else:\n            string = string[1:]\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = numbers.split()\n    num_list.sort(key=lambda x: int(x))\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (numbers[0], numbers[0])\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    scale = 1 / (max_num - min_num)\n    return [(num - min_num) * scale for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return \"\"\n    result = strings[0]\n    for s in strings[1:]:\n        result += s\n    return result"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero point of a polynomial with coefficients xs.\n    It is guaranteed that there is at least one zero point.\n    \"\"\"\n    x = 1\n    while True:\n        if poly(xs, x) == 0:\n            return x\n        x += 0.000001  # Increasing step size to avoid infinite loop\n    return x"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l.sort(key=lambda x: (x % 3, x))\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    if len(l) == 0:\n        return None\n    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = sorted(l[i])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from encoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode each group. Unless group has fewer elements than 3.\n    groups = [encode_cyclic(group) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    for num in fib:\n        if num < 2:\n            continue\n        for j in range(2, int(num**0.5) + 1):\n            if num % j == 0:\n                break\n        else:\n            return num\n    return -1"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l) - 2):\n        if l[i] + l[i + 1] + l[i + 2] == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n*(n-1)//2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    area = 0.5 * a * h\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c = 0, 2, 1\n        for _ in range(4, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    res = 1\n    n = n % p\n    while (n > 0):\n        if (n % 2 == 1):\n            res = (res * 2) % p\n        n = n // 2\n    return res"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string from encoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            increasing = False\n        elif l[i] < l[i-1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    max_prime = 2\n    while n > 1:\n        for i in range(2, n+1):\n            if n % i == 0:\n                max_prime = max(max_prime, i)\n                n //= i\n                break\n    return max_prime"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    res = [0] * n\n    for i in range(n):\n        res[i] = xs[i] * (i + 1)\n    return res"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/64", "completion": "    vowels = set('aeiouAEIOU')\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "    apples = 0\n    oranges = 0\n    mango = 0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            if i < len(s) - 1 and s[i+1] == ' ':\n                if s[i] == '0':\n                    break\n                else:\n                    if i < len(s) - 2 and s[i+2] == 'mango':\n                        mango = int(s[i])\n                    else:\n                        n -= int(s[i])\n                    break\n            else:\n                if i < len(s) - 1 and s[i+1] == 'mango':\n                    mango = int(s[i])\n                else:\n                    n -= int(s[i])\n                break\n    return n"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_val:\n            min_val = val\n            min_index = i\n    if min_index == -1:\n        return []\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    max_freq = 0\n    result = -1\n    for num in lst:\n        if num > 0 and lst.count(num) >= num:\n            if num > max_freq:\n                max_freq = num\n                result = num\n    return result"}
{"task_id": "HumanEval/70", "completion": "    if len(lst) <= 1:\n        return lst\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        lst.remove(min_val)\n        lst.remove(max_val)\n        return [min_val] + strange_sort_list(lst) + [max_val]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and len(q) % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    diff = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            diff += 1\n    return diff"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "    primes = [True] * (a + 1)\n    p = 2\n    while p * p <= a:\n        if primes[p] == True:\n            for i in range(p * p, a + 1, p):\n                primes[i] = False\n        p += 1\n    for i in range(2, a):\n        if primes[i]:\n            if a % i == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    for i in range(2, int(x**0.5) + 1):\n        if n**i == x:\n            return True\n    return False"}
{"task_id": "HumanEval/77", "completion": "    return (a > 0 and round(a ** (1/3)) ** 3 == a)"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = {'A': '1', 'B': '2', 'C': '3', 'D': '4', 'E': '5', 'F': '6'}\n    decimal_num = 0\n    for i in range(len(num)):\n        decimal_num = decimal_num * 16 + int(hex_digits[num[i]])\n    return decimal_num\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef countPrimeHexDigits(num):\n    hex_num = hex_key(num)\n    count = 0\n    while hex_num > 0:\n        digit = hex_num % 10\n        hex_num //= 10\n        if is_prime(digit):\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(1, 10):\n        count += 1\n    for i in range(1, 10):\n        count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "    res = 0\n    while N > 0:\n        res += N % 2\n        N = N // 2\n    return bin(res)[2:]"}
{"task_id": "HumanEval/85", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for row in lst:\n        for col in range(len(row) - 1, -1, -1):\n            if row[col] == x:\n                result.append((lst.index(row), col))\n    return result"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    second_min = float('inf')\n    for num in lst:\n        if num < min_val:\n            second_min = min_val\n            min_val = num\n        elif num < second_min and num != min_val:\n            second_min = num\n    return second_min if second_min != float('inf') else None"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char in vowels:\n            result += chr(ord(char) + 2)\n        elif char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(n):\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum\n\n    max_prime = -1\n    for num in lst:\n        if isPrime(num):\n            max_prime = max(max_prime, num)\n\n    if max_prime == -1:\n        return 0\n    else:\n        return sumOfDigits(max_prime)"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    case = dict.values()[0].isupper()\n    for key in dict:\n        if dict[key].isupper() != case:\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(2, n):\n        if is_prime(num):\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/97", "completion": "    return (a * b) % 10"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num == int(num):\n        return int(num)\n    else:\n        return int(num + 1) if num > 0 else int(num - 1)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i * 2)\n        else:\n            result.append(i * 2 + 1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -2):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = (m - n + 1) * n\n    return bin(total // (m - n + 1))[2:]"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (x >= 10, x <= 9, len(str(x))))\n\ndef replace_by_name(arr):\n    res = []\n    for num in arr:\n        if 1 <= num <= 9:\n            res.append(str(num).replace(str(num), str(num_to_name[num])))\n    return res\n\ndef sortAndReplace(arr):\n    arr = by_length(arr)\n    arr = replace_by_name(arr)\n    return arr\n\nnum_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(1)\n            for j in range(2, i+1):\n                result[i-1] *= j\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(num):\n        if num == 0:\n            return 0\n        return num % 10 + sum_of_digits(num // 10)\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(abs(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    if len(lst1) != len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0 and lst2[i] % 2 == 0:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    hist = {}\n    words = test.split()\n    for word in words:\n        for char in word:\n            if char in hist:\n                hist[char] += 1\n            else:\n                hist[char] = 1\n    max_count = max(hist.values())\n    result = {}\n    for char, count in hist.items():\n        if count == max_count:\n            result[char] = count\n    return result"}
{"task_id": "HumanEval/112", "completion": "    for i in c:\n        s = s.replace(i,'')\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                ans += math.ceil(capacity / grid[i][j])\n    return ans"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    words = s.split()\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    selected_words = []\n    for word in words:\n        if sum(1 for char in word if char in consonants) == n:\n            selected_words.append(word)\n    return selected_words"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    vowel_index = -1\n    consonant_index = -1\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in consonants:\n            consonant_index = i\n            break\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowel_index = i\n            break\n    if vowel_index == -1 or consonant_index == -1:\n        return \"\"\n    return word[vowel_index]"}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return \"No\"\n            stack.pop()\n    return \"Yes\" if not stack else \"No\""}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    def collatz(x):\n        if x % 2 == 0:\n            return x // 2\n        else:\n            return 3 * x + 1\n\n    result = []\n    while n != 1:\n        n = collatz(n)\n        if n % 2 != 0:\n            result.append(n)\n\n    return sorted(result)"}
{"task_id": "HumanEval/124", "completion": "    if len(date) != 8:\n        return False\n    if date.isdigit() == False:\n        return False\n    month = int(date[0:2])\n    day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        if month == 2:\n            if day < 1 or day > 29:\n                return False\n        elif month == 4 or month == 6 or month == 8 or month == 9 or month == 11:\n            if day < 1 or day > 30:\n                return False\n        else:\n            if day < 1 or day > 30:\n                return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and int(char) % 2 != 0)"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if isPrime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    signs = 1\n    for num in arr:\n        if num == 0:\n            return 0\n        if num < 0:\n            signs *= -1\n    return abs(sum(arr)) * signs"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[float('inf')] * n for _ in range(k)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, k):\n        dp[i][0] = min(dp[i-1][0], grid[i][0])\n    for j in range(1, n):\n        dp[0][j] = min(dp[0][j-1], grid[0][j])\n    for i in range(1, k):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1], grid[i][j])\n    return [dp[k-1][n-1]]"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    else:\n        res = [3]\n        for i in range(2, n + 1):\n            res.append(res[i - 1] + res[i - 2] + res[i - 3])\n        return res"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num**2)\n    return result"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if len(words) == 0:\n        return False\n    last_char = words[-1][-1]\n    return last_char.isalpha() and not last_char.isalnum()"}
{"task_id": "HumanEval/135", "completion": "    max_index = -1\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [x for x in lst if x < 0]\n    if not neg_integers:\n        return None, None\n    else:\n        return max(neg_integers), min([x for x in lst if x > 0])"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    elif isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        return max(float(a), float(b))\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    if n == 0:\n        return True\n    return is_equal_to_sum_even(n - 2)"}
{"task_id": "HumanEval/139", "completion": "    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    i = 0\n    while i < len(text):\n        if text[i] == \" \":\n            result += \"_\"\n        elif text[i] == \"-\":\n            result += \"-\"\n        else:\n            result += text[i]\n        i += 1\n    return result"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 10:\n        return \"No\"\n    if file_name.count('.') != 1:\n        return \"No\"\n    if not file_name[:file_name.index('.')].isalnum():\n        return \"No\"\n    if not file_name[file_name.index('.')+1:].endswith(('.txt', 'exe', 'dll')):\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if len(word) > 1 and all(i > 1 for i in range(2, len(word))):\n            prime_words.append(word)\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n    \n    result = x_numerator * n_denominator + x_denominator * n_numerator\n    return result % 2 == 0"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 2 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    return tuple(sorted(planets[planets.index(planet1)+1:planets.index(planet2)]))"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n    else:\n        return x"}
{"task_id": "HumanEval/151", "completion": "    odd_numbers = [num for num in lst if num > 0 and num % 2 != 0]\n    if not odd_numbers:\n        return 0\n    return sum(num ** 2 for num in odd_numbers)"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = (cap_count - sm_count) if cap_count > sm_count else 0\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    if a == b:\n        return True\n    for i in range(len(a)):\n        if a[i:] + a[:i] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    num_str = str(num)\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = len(num_str) - even_count\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    val = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    syms = ['m', 'cm', 'd', 'cd', 'xc', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 't', 'ct', 's', 'cs', 'r', 'cr', 'p', 'cp']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num"}
{"task_id": "HumanEval/157", "completion": "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_word = word\n        elif len(set(word)) == max_chars:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    if number + remaining < need:\n        return [number + remaining, remaining]\n    else:\n        return [number + need, 0]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            stack.append(operand[i] + operand[i+1])\n        elif operator[i] == '-':\n            stack.append(operand[i] - operand[i+1])\n        elif operator[i] == '*':\n            stack.append(operand[i] * operand[i+1])\n        elif operator[i] == '//':\n            stack.append(operand[i] // operand[i+1])\n        elif operator[i] == '**':\n            stack.append(operand[i] ** operand[i+1])\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result if len(result) > 0 else result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        if all(int(digit) % 2 == 0 for digit in str(num)):\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                if not stack:\n                    groups.append(''.join(group))\n                    group = []\n    return groups"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    return number - integer_part"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        if op > 0:\n            balance += op\n        else:\n            balance -= op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    depth = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(depth)\n            depth += 1\n        elif char == ')':\n            max_depth = max(max_depth, depth)\n            depth = stack.pop()\n    return [max_depth] * len(paren_string)"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    return (sum(numbers), 1) if numbers else (0, 1)"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(num, max_so_far)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the supplied string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)-1, -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            result += str(int(a[i]) ^ int(b[i]))\n        else:\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    result = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    return [string[i:] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    for char in music_string:\n        if char == 'o':\n            result.append(4)\n        elif char == 'o|':\n            result.append(2)\n        elif char == '.|':\n            result.append(1)\n    return result"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    while string:\n        if string.startswith(substring):\n            count += 1\n            string = string[len(substring):]\n        else:\n            string = string[1:]\n    return count"}
{"task_id": "HumanEval/19", "completion": "    nums = numbers.split()\n    nums.sort(key=lambda x: int(x))\n    return ' '.join(nums)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (numbers[0], numbers[0])\n    \n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    \n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    scale = 1 / (max_num - min_num)\n    return [(num - min_num) * scale for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return \"\"\n    result = strings[0]\n    for string in strings[1:]:\n        result += string\n    return result"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero of a polynomial with coefficients xs.\n    \"\"\"\n    x = 1\n    epsilon = 0.000001\n    while abs(poly(xs, x)) > epsilon:\n        x += 0.000001\n    return x"}
{"task_id": "HumanEval/33", "completion": "    l.sort(key=lambda x: (x % 3, x))\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).find('7') != -1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    for i in range(0, len(l), 2):\n        l[i] = sorted(l[i])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from encoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode each group. Unless group has fewer elements than 3.\n    groups = [encode_cyclic(group) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    for i in range(n-1, 1, -1):\n        if is_prime(fib[i]):\n            return fib[i]\n    return -1\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l) - 2):\n        if l[i] + l[i + 1] + l[i + 2] == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    area = 0.5 * a * h\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c = 0, 2, 1\n        for _ in range(4, n+1):\n            a, b = b, a + b + c\n            c = a + b\n        return b"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    res = 1\n    n = n % p\n    while (n > 0):\n        if (n % 2 == 1):\n            res = (res * 2) % p\n        n = n // 2\n    return res"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string from encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    if len(l) <= 1:\n        return True\n    if l[0] > l[1]:\n        return all(l[i] >= l[i-1] for i in range(1, len(l)))\n    else:\n        return all(l[i] <= l[i-1] for i in range(1, len(l)))"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    res = []\n    for i in range(n):\n        res.append(xs[i] * (i + 1))\n    return res"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    if shift == 0:\n        return str(x)\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[shift:] + str(x)[:shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    apples = 0\n    oranges = 0\n    mango = 0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            if i < len(s) - 1 and s[i + 1] == ' ':\n                if s[i] == '0':\n                    continue\n                if i == 0:\n                    apples = int(s[i])\n                elif i == 1:\n                    oranges = int(s[i])\n                else:\n                    mango = int(s[i])\n            else:\n                if s[i] == '0':\n                    continue\n                if i == 0:\n                    apples = int(s[i])\n                elif i == 1:\n                    oranges = int(s[i])\n                else:\n                    mango = int(s[i])\n    return n - apples - oranges - mango"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_val:\n            min_val = val\n            min_index = i\n    if min_index == -1:\n        return []\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq = max(freq.values())\n    result = -1\n    for num, count in freq.items():\n        if num > 0 and count >= num:\n            result = max(result, num)\n    return result"}
{"task_id": "HumanEval/70", "completion": "    if len(lst) <= 1:\n        return lst\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        return [min_val] + strange_sort_list(lst[1:]) + [max_val]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and len(q) % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "    primes = [True] * (a + 1)\n    primes[0], primes[1] = False, False\n    for i in range(2, int(a ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, a + 1, i):\n                primes[j] = False\n    for i in range(2, a):\n        if primes[i]:\n            if a % i == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    for i in range(2, int(x**0.5) + 1):\n        if n**i == x:\n            return True\n    return False"}
{"task_id": "HumanEval/77", "completion": "    return (a > 0 and round(a ** (1/3)) ** 3 == a)"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = {'A': '10', 'B': '11', 'C': '12', 'D': '13', 'E': '14', 'F': '15'}\n    decimal_num = 0\n    for i in range(len(num)):\n        decimal_num = decimal_num * 16 + int(hex_digits[num[i]])\n    return decimal_num\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef countPrimeHexDigits(num: str) -> int:\n    decimal_num = hex_key(num)\n    count = 0\n    while decimal_num > 0:\n        digit = decimal_num % 10\n        if is_prime(digit):\n            count += 1\n        decimal_num //= 10\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    binary = '0' * (4 - len(binary)) + binary\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "    res = bin(N)[2:]\n    return res"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for row in lst:\n        for col in range(len(row)):\n            if row[col] == x:\n                result.append((lst.index(row), col))\n    return sorted(result, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "    if len(array) <= 1:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.')\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    return (x == y + z) or (y == x + z) or (z == x + y)"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char in vowels:\n            result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(n):\n        return sum(int(digit) for digit in str(n))\n\n    largestPrime = max(lst)\n    return sumOfDigits(largestPrime)"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    case = dict.keys()[0].islower() if dict.keys() else False\n    for key in dict.keys():\n        if key.islower() != case:\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a * b) % 10"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num == int(num):\n        return int(num)\n    else:\n        return int(num + 1) if num % 2 == 0 else int(num - 1)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i * (i + 1) // 2)\n        else:\n            result.append((i * (i + 1) // 2) + 1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 != 0 or y % 2 != 0:\n        return -1\n    for i in range(y, x-1, -2):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total_sum = (m - n + 1) * (n + m) // 2\n    return bin(total_sum // (m - n + 1))[2:]"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: len(str(x)))\n\ndef between_one_and_nine(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(num)\n    return result\n\ndef replace_by_name(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num))\n    return result\n\ndef sort_and_replace(arr):\n    if not arr:\n        return []\n    sorted_arr = by_length(arr)\n    between_arr = between_one_and_nine(sorted_arr)\n    replaced_arr = replace_by_name(between_arr)\n    return replaced_arr"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(1)\n            for j in range(2, i+1):\n                result[i-1] *= j\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(num):\n        if num == 0:\n            return 0\n        return num % 10 + sum_of_digits(num // 10)\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            j = i\n            while j >= 0 and arr[j] > arr[j+1]:\n                j -= 1\n            if j == -1:\n                return False\n            arr = arr[:j] + arr[j+1:]\n            arr[j] = arr[j+1]\n    return True"}
{"task_id": "HumanEval/110", "completion": "    if all(x % 2 == 0 for x in lst1) and all(x % 2 == 0 for x in lst2):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    histogram = {}\n    max_count = 0\n    for word in words:\n        count = word.count(max(word, key=word.count))\n        if count > max_count:\n            histogram = {word: count}\n            max_count = count\n        elif count == max_count:\n            histogram[word] = count\n    return histogram"}
{"task_id": "HumanEval/112", "completion": "    result = \"\"\n    for i in s:\n        if i not in c:\n            result += i\n    return result, result == result[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                ans += math.ceil(capacity / grid[i][j])\n    return ans"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    words = s.split()\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    result = []\n    for word in words:\n        if sum(1 for char in word if char.lower() in consonants) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    vowel_index = -1\n    consonant_index = -1\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in consonants:\n            consonant_index = i\n            break\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowel_index = i\n            break\n    if vowel_index == -1 or consonant_index == -1:\n        return \"\"\n    return word[vowel_index]"}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[0:k]"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    def collatz(x):\n        if x % 2 == 0:\n            return x // 2\n        else:\n            return 3 * x + 1\n\n    result = []\n    while n != 1:\n        n = collatz(n)\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)"}
{"task_id": "HumanEval/124", "completion": "    date_format = '%m-%d-%Y'\n    try:\n        datetime.strptime(date, date_format)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) % 2 != 0))"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n        elif lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if isPrime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef isPrime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    signs = [1 if x >= 0 else -1 for x in arr]\n    magnitude_sum = sum([abs(x) for x in arr])\n    return magnitude_sum * reduce(lambda x, y: x * y, signs)"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[float('inf')] * n for _ in range(k)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, k):\n        dp[i][0] = min(dp[i-1][0], grid[i][0])\n    for j in range(1, n):\n        dp[0][j] = min(dp[0][j-1], grid[0][j])\n    for i in range(1, k):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1], grid[i][j])\n    return [dp[k-1][n-1]]"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    else:\n        res = [0, 3]\n        for i in range(2, n + 1):\n            res.append(res[i - 1] + res[i - 2] + res[i - 3])\n        return res"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num**2)\n    return result"}
{"task_id": "HumanEval/134", "completion": "    txt = txt.strip()  # Remove leading and trailing spaces\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i] <= arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [x for x in lst if x < 0]\n    if not neg_integers:\n        return None, None\n    else:\n        a = max(neg_integers)\n    \n    pos_integers = [x for x in lst if x > 0]\n    if not pos_integers:\n        return a, None\n    else:\n        b = min(pos_integers)\n    \n    return a, b"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    elif isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        return max(float(a), float(b))\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return n % 4 == 0"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        elif char == \"  \":\n            result += \"-\"\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 10:\n        return \"No\"\n    if file_name.count('.') != 1:\n        return \"No\"\n    if file_name[0].isalpha() and file_name[0].isalpha() and file_name[0].isalpha():\n        return \"Yes\"\n    if file_name[-3:] in ['txt', 'exe', 'dll']:\n        return \"Yes\"\n    return \"No\""}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if len(word) > 1 and all(i > 1 for i in range(2, len(word))):\n            prime_words.append(word)\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    product = x_num * n_num\n    if product % x_den == 0 and product % n_den == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 2 != 0) and (num % 10 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    return tuple(sorted(planets[planets.index(planet1)+1:planets.index(planet2)]))"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n    else:\n        return x"}
{"task_id": "HumanEval/151", "completion": "    odd_numbers = [num for num in lst if num > 0 and num % 2 != 0]\n    if not odd_numbers:\n        return 0\n    return sum(num ** 2 for num in odd_numbers)"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = (cap_count - sm_count)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    b = b + b\n    return b in a"}
{"task_id": "HumanEval/155", "completion": "    num_str = str(num)\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = len(num_str) - even_count\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    val = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    syms = ['m', 'cm', 'd', 'cd', 'xc', 'x', 'xvii', 'ix', 'viii', 'vii', 'vi', 'iv', 'iii', 'ii', 'i']\n    roman_num = ''\n    for i in range(len(val)):\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n    return roman_num"}
{"task_id": "HumanEval/157", "completion": "    if a == 0 or b == 0 or c == 0:\n        return False\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_word = word\n        elif len(set(word)) == max_chars and word < max_word:\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result = result // operand[i+1]\n        elif operator[i] == '**':\n            result = result ** operand[i+1]\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result if len(result) > 0 else result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        if all(int(digit) % 2 == 0 for digit in str(num)):\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                if not stack:\n                    groups.append('(' + ''.join(group) + ')')\n                    group = []\n    return groups"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimals = number - integer_part\n    return decimals"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        if op > 0:\n            balance += op\n        else:\n            balance -= op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                max_depth = max(max_depth, len(stack))\n    return [max_depth] * len(paren_string.split())"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    return (sum(numbers), 1) if numbers else (0, 1)"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_val = float('-inf')\n    for i in range(len(numbers)):\n        max_val = max(max_val, numbers[i])\n        result.append(max_val)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n    i = 1\n    while True:\n        if is_palindrome(string + string[i:]):\n            return string + string[i:][::-1]\n        i += 1"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            result += str(int(a[i]) ^ int(b[i]))\n        else:\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    result = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    for char in music_string:\n        if char == 'o':\n            result.append(4)\n        elif char == 'o|':\n            result.append(2)\n        elif char == '.|':\n            result.append(1)\n    return result"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while start < len(string):\n        if string[start:start+len(substring)] == substring:\n            count += 1\n            start += len(substring)\n        else:\n            start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = numbers.split()\n    num_list.sort(key=lambda x: int(x))\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (numbers[0], numbers[1])\n    \n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    \n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    scale = 1 / (max_num - min_num)\n    return [(num - min_num) * scale for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero point of a polynomial with coefficients xs.\n    \"\"\"\n    x = 1\n    epsilon = 0.000001\n    while abs(poly(xs, x)) > epsilon:\n        x += 0.000001\n    return x"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l.sort(key=lambda x: (x % 3, x))\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).find('7') != -1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = sorted(l[i])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from encoded string with encode_cyclic function.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode each group. Unless group has fewer elements than 3.\n    groups = [encode_cyclic(group) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    for i in range(n-1, 1, -1):\n        if is_prime(fib[i]):\n            return fib[i]\n    return -1\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l)-2):\n        if l[i] + l[i+1] + l[i+2] == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    area = 0.5 * a * h\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c = 0, 2, 1\n        for _ in range(4, n+1):\n            c = a + b + c\n            a, b = b, c\n        return c"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    res = 1\n    n = n % p\n    while (n > 0):\n        if (n % 2 == 1):\n            res = (res * 2) % p\n        n = n // 2\n    return res"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string from encoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    if len(l) <= 1:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            increasing = True\n        elif l[i] < l[i-1]:\n            decreasing = True\n        else:\n            return False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            n = n // factor\n        else:\n            factor += 1\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    res = []\n    for i in range(n):\n        res.append(xs[i] * (i+1))\n    return res"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(3, n+1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char in ['a', 'e', 'i', 'o', 'u', 'y']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    apples = 0\n    oranges = 0\n    mango = 0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            if i < len(s) - 1 and s[i + 1] == ' ':\n                if s[i] == '0':\n                    continue\n                if i < len(s) - 2 and s[i + 2] == 's':\n                    if s[i] == '1':\n                        apples += 1\n                    elif s[i] == '2':\n                        oranges += 1\n                    elif s[i] == '3':\n                        mango += 1\n                else:\n                    if s[i] == '1':\n                        apples += 1\n                    elif s[i] == '2':\n                        oranges += 1\n                    elif s[i] == '3':\n                        mango += 1\n            else:\n                if s[i] == '1':\n                    apples += 1\n                elif s[i] == '2':\n                    oranges += 1\n                elif s[i] == '3':\n                    mango += 1\n    return n - apples - oranges - mango"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_val:\n            min_val = val\n            min_index = i\n    if min_index == -1:\n        return []\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    max_freq = 0\n    result = -1\n    for num in lst:\n        if num > 0 and lst.count(num) >= num:\n            if num > max_freq:\n                max_freq = num\n                result = num\n    return result"}
{"task_id": "HumanEval/70", "completion": "    if len(lst) <= 1:\n        return lst\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        return [min_val] + strange_sort_list(lst[1:]) + [max_val]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and is_palindrome(q):\n        return True\n    else:\n        return False\n\ndef is_palindrome(obj):\n    return str(obj) == str(obj)[::-1]"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "    primes = [True] * (a + 1)\n    p = 2\n    while p * p <= a:\n        if primes[p] == True:\n            for i in range(p * p, a + 1, p):\n                primes[i] = False\n        p += 1\n    for i in range(2, a):\n        if primes[i] and a % i == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    for i in range(2, int(x**0.5)+1):\n        if n**i == x:\n            return True\n    return False"}
{"task_id": "HumanEval/77", "completion": "    return round(a ** (1/3)) ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = {'A': '10', 'B': '11', 'C': '12', 'D': '13', 'E': '14', 'F': '15'}\n    decimal_num = 0\n    for i in range(len(num)):\n        decimal_num = decimal_num * 16 + int(hex_digits[num[i]])\n    return decimal_num\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_prime_hex_digits(num):\n    decimal_num = hex_key(num)\n    count = 0\n    while decimal_num > 0:\n        digit = decimal_num % 16\n        if is_prime(digit):\n            count += 1\n        decimal_num //= 16\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n-2):\n        if s[i] == s[i+1] or s[i] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while N > 0:\n        sum += N % 2\n        N = N // 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for row in lst:\n        for col in range(len(row) - 1, -1, -1):\n            if row[col] == x:\n                result.append((lst.index(row), col))\n    return result"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.')\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    return (x == y + z) or (y == x + z) or (z == x + y)"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char in vowels:\n            result += chr(ord(char) + 2)\n        elif char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(n):\n        return sum(int(digit) for digit in str(n))\n\n    max_prime = max(lst)\n    while not isPrime(max_prime):\n        max_prime -= 1\n    return sumOfDigits(max_prime)"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if not (isinstance(key, str) and (key.islower() or key.isupper())):\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a * b) % 10"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(1, len(s), 2):\n        if s[i].upper() in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num == int(num):\n        return int(num)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return int(num + 0.5)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i * 2)\n        else:\n            result.append(i * 2 + 1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 != 0 or y % 2 != 0:\n        return -1\n    else:\n        return max(i for i in range(x, y+1) if i % 2 == 0)"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = (m - n + 1) * n\n    return bin(total // (m - n + 1))[2:]"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: len(str(x)))\n\ndef sortAndReplace(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num))\n    result = by_length(result)\n    result = [str(num) for num in result]\n    return result"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(1)\n            for j in range(2, i+1):\n                result[i-1] *= j\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(num):\n        if num == 0:\n            return 0\n        return num % 10 + sum_of_digits(num // 10)\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(abs(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            j = i\n            while j < n-1 and arr[j] > arr[j+1]:\n                j += 1\n            arr[j+1:] = arr[j+1:][::-1]\n            return True\n    return True"}
{"task_id": "HumanEval/110", "completion": "    if len(lst1) != len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0 and lst2[i] % 2 == 0:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    hist = {}\n    words = test.split()\n    for word in words:\n        for char in word:\n            if char in hist:\n                hist[char] += 1\n            else:\n                hist[char] = 1\n    max_count = max(hist.values())\n    result = {}\n    for char, count in hist.items():\n        if count == max_count:\n            result[char] = count\n    return result"}
{"task_id": "HumanEval/112", "completion": "    s = list(s)\n    for i in range(len(s)):\n        if s[i] in c:\n            s[i] = ''\n    s = ''.join(s)\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                odd_count += 1\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                ans += math.ceil(grid[i][j] / capacity)\n    return ans"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    words = s.split()\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    result = []\n    for word in words:\n        if sum(1 for char in word if char in consonants) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    vowel_index = -1\n    consonant_index = -1\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in consonants:\n            consonant_index = i\n            break\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowel_index = i\n            break\n    if vowel_index == -1 or consonant_index == -1:\n        return \"\"\n    return word[vowel_index]"}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[::-1][:k]"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    def collatz(x):\n        if x % 2 == 0:\n            return x // 2\n        else:\n            return 3 * x + 1\n\n    result = []\n    while n != 1:\n        n = collatz(n)\n        if n % 2 != 0:\n            result.append(n)\n\n    return sorted(result)"}
{"task_id": "HumanEval/124", "completion": "    if len(date) != 8:\n        return False\n    month, day, year = date.split('-')\n    if int(month) < 1 or int(month) > 12:\n        return False\n    if int(day) < 1 or int(day) > 31:\n        return False\n    if int(year) < 1000 or int(year) > 9999:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if ord(c) % 2 != 0)"}
{"task_id": "HumanEval/126", "completion": "    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if isPrime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    signs = 1\n    magnitude = 0\n    for num in arr:\n        if num == 0:\n            return 0\n        if num > 0:\n            signs *= 1\n        else:\n            signs *= -1\n        magnitude += abs(num)\n    return signs * magnitude"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[float('inf')] * n for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    for i in range(n):\n        for j in range(n):\n            for x, y in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                ni, nj = i + x, j + y\n                if 0 <= ni < n and 0 <= nj < n:\n                    dp[ni][nj] = min(dp[ni][nj], dp[i][j] + grid[ni][nj])\n    return [dp[n-1][n-1]] * k"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    else:\n        res = [3]\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            c = a + b\n            res.append(c)\n            a, b = b, c\n        return res"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num**2)\n    return result"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if len(words) == 0:\n        return False\n    last_word = words[-1]\n    last_char = last_word[-1]\n    return last_char.isalpha() and not last_char.isalnum()"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i] <= arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [x for x in lst if x < 0]\n    if not neg_integers:\n        return None, None\n    else:\n        a = max(neg_integers)\n    \n    pos_integers = [x for x in lst if x > 0]\n    if not pos_integers:\n        return a, None\n    else:\n        b = min(pos_integers)\n        return a, b"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    elif isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        return max(float(a), float(b))\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return n == 2 * (n // 2)"}
{"task_id": "HumanEval/139", "completion": "    if n <= 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    i = 0\n    while i < len(text):\n        if text[i] == \" \":\n            result += \"_\"\n        elif text[i] == \"-\":\n            result += \"-\"\n        else:\n            result += text[i]\n        i += 1\n    return result"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 10:\n        return \"No\"\n    if file_name.count('.') != 1:\n        return \"No\"\n    if not file_name[:file_name.index('.')].isalnum():\n        return \"No\"\n    if not file_name[file_name.index('.')+1:].endswith(('.txt', '.exe', '.dll')):\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return ' '.join(prime_words)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/144", "completion": "    x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n    result = x_numerator * n_numerator\n    return result % n_denominator == 0"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 2 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    return tuple(planets[planets.index(planet1)+1:planets.index(planet2)])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst)"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n    else:\n        return x"}
{"task_id": "HumanEval/151", "completion": "    odd_numbers = [num for num in lst if num > 0 and num % 2 != 0]\n    if not odd_numbers:\n        return 0\n    return sum(num ** 2 for num in odd_numbers)"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = ''\n    for extension in extensions:\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = (cap_count - sm_count) if cap_count > sm_count else 0\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    b = b + b\n    return b in a"}
{"task_id": "HumanEval/155", "completion": "    num_str = str(num)\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = len(num_str) - even_count\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    val = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    syms = ['m', 'cm', 'd', 'cd', 'xc', 'x', 'ix', 'v', 'X', 'IX', 'u', 'Xu', 't', 'Xt', 'r', 'Xr', 'p', 'Xp', 'o', 'Xo', 'h', 'Xh', 'g', 'Xg', 'f', 'Xf', 'e', 'Xe', 'd', 'Xd', 'c', 'Xc', 'b', 'Xb', 'a', 'Xa']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num"}
{"task_id": "HumanEval/157", "completion": "    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_word = word\n        elif len(set(word)) == max_chars:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    if number == need:\n        return [number, 0]\n    if remaining == 0:\n        return [number, 0]\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            stack.append(operand[i] + operand[i+1])\n        elif operator[i] == '-':\n            stack.append(operand[i] - operand[i+1])\n        elif operator[i] == '*':\n            stack.append(operand[i] * operand[i+1])\n        elif operator[i] == '//':\n            stack.append(operand[i] // operand[i+1])\n        elif operator[i] == '**':\n            stack.append(operand[i] ** operand[i+1])\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result if len(result) > 0 else result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        if all(int(digit) % 2 == 0 for digit in str(num)):\n            result.append(num)\n    return result"}
