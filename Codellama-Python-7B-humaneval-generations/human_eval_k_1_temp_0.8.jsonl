{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                result.append(\"(\")\n            else:\n                stack.pop()\n                if not stack:\n                    result.append(\")\")\n    while stack:\n        stack.pop()\n        result.append(\")\")\n    return result"}
{"task_id": "HumanEval/2", "completion": "    number_str = str(number)\n\tinteger_part = int(number_str.split('.')[0])\n\tdecimal_part = float('.' + number_str.split('.')[1])\n\treturn decimal_part"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        else:\n            balance -= operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = [(abs(x - mean)) for x in numbers]\n    return sum(deviation) / len(deviation)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(0, len(numbers) - 1, 2):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    depth = 0\n    result = []\n    stack = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(depth)\n            depth += 1\n        elif char == ')':\n            depth = stack.pop()\n            max_depth = max(max_depth, depth)\n\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            depth += 1\n        elif paren_string[i] == ')':\n            depth -= 1\n            max_depth = max(max_depth, depth)\n            result.append(max_depth)\n            max_depth = 0\n\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    return (sum(numbers), 1) if numbers[0] == 0 else (sum(numbers), numbers[0])"}
{"task_id": "HumanEval/9", "completion": "    max_val = float('-inf')\n    result = []\n    for num in numbers:\n        if num > max_val:\n            max_val = num\n        result.append(max_val)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(1, len(string) + 1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            result += str(int(a[i]) ^ int(b[i]))\n        else:\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    \n    max_len = -1\n    max_string = None\n    \n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_string = s\n    \n    return max_string"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    return [string[i:] for i in range(len(string)+1)]"}
{"task_id": "HumanEval/15", "completion": "    result = \"\"\n    for i in range(n + 1):\n        result += str(i) + \" \"\n    return result.strip()"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "    beats = [4, 2, 1]\n    result = []\n    for i in range(0, len(music_string), 2):\n        if music_string[i] in beats:\n            result.append(beats.index(music_string[i]))\n    return result"}
{"task_id": "HumanEval/18", "completion": "    if not substring:\n        return 0\n    \n    len_string = len(string)\n    len_substring = len(substring)\n    count = 0\n    \n    for i in range(len_string - len_substring + 1):\n        if string[i:i+len_substring] == substring:\n            count += 1\n    \n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = numbers.split()\n    num_list.sort(key=lambda x: (int(x), x))\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (numbers[0], numbers[1])\n\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i-1], numbers[i])\n\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    result = []\n    seen = set()\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in string:\n        if char.isalpha():\n            if char in vowels:\n                result += char.swapcase()\n            else:\n                result += char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return \"\"\n    result = strings[0]\n    for string in strings[1:]:\n        result += string\n    return result"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds a zero point of a polynomial with coefficients xs.\n    Zero point of a polynomial is a value of x such that\n    poly(x) = 0.\n    \"\"\"\n    x_lower = 0\n    x_upper = 1\n    epsilon = 1e-9\n    while abs(poly(xs, x_upper)) > epsilon:\n        x_lower, x_upper = x_upper, x_lower + x_upper\n    return x_upper"}
{"task_id": "HumanEval/33", "completion": "    return sorted([x for x in l if x % 3 != 0])"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    if not l:\n        return None\n    max_val = float('-inf')\n    for val in l:\n        max_val = max(max_val, val)\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = sorted(l[i:])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from encoded string.\n    \"\"\"\n    # split string into groups of three characters\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode each group\n    groups = [encode_cyclic(group) for group in groups]\n    # join the groups\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    fib = [0, 1]\n    while fib[-1] < 10**9:\n        fib.append(fib[-1] + fib[-2])\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    for i in range(len(fib) - 1, 1, -1):\n        if is_prime(fib[i]):\n            return fib[i]\n    return -1"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        j = i + 1\n        k = n - 1\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                return True\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    if len(l) < 2:\n        return False\n    hash_map = {}\n    for num in l:\n        complement = -num\n        if complement in hash_map:\n            return True\n        hash_map[num] = True\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    res = ''\n    while x != 0:\n        res = str(x % base) + res\n        x = x // base\n    return res"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    fib = [0] * (n + 1)\n    fib[0] = 0\n    fib[1] = 0\n    fib[2] = 2\n    fib[3] = 0\n    for i in range(4, n + 1):\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4]\n    return fib[n]"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    if n == 0:\n        return 1\n    else:\n        return pow(n, p - 2, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string from encoded string\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiou'\n    result = ''\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if not l:\n        return True\n    increasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            increasing = True\n        elif l[i] < l[i-1]:\n            increasing = False\n        else:\n            continue\n        if increasing:\n            for j in range(i-1, 0, -1):\n                if l[j] >= l[j-1]:\n                    return False\n        else:\n            for j in range(i-1, len(l)-1):\n                if l[j] <= l[j+1]:\n                    return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    largest_prime = 2\n    while n > 1:\n        for i in range(2, n+1):\n            if n % i == 0:\n                largest_prime = max(largest_prime, i)\n                n //= i\n                break\n    return largest_prime"}
{"task_id": "HumanEval/60", "completion": "    return n*(n+1)//2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = [0] * (n-1)\n    for i in range(1, n):\n        result[i-1] = xs[i] * (i + 1)\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n <= 2:\n        return 0 if n == 0 else 1\n    else:\n        a, b = 0, 1\n        for _ in range(3, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char.lower() in ['a', 'e', 'i', 'o', 'u', 'y']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift_index = shift % len(x_str)\n    result = x_str[-shift_index:] + x_str[:-shift_index] if shift_index != 0 else x_str\n    return result"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "    words = s.split()\n    apples, oranges = 0,0\n    for word in words:\n        if 'apples' in word:\n            apples = int(word.replace('apples',''))\n        elif 'oranges' in word:\n            oranges = int(word.replace('oranges',''))\n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "completion": "    min_val = float('inf')\n    min_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < min_val:\n            min_val = num\n            min_index = i\n    if min_index == -1:\n        return []\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    max_freq = -1\n    result = -1\n    for num in lst:\n        if num > 0 and lst.count(num) >= num:\n            if num > max_freq:\n                max_freq = num\n                result = num\n    return result"}
{"task_id": "HumanEval/70", "completion": "    if len(lst) == 0:\n        return []\n\n    result = []\n    while len(lst) > 0:\n        min_val = min(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n\n        if len(lst) > 0:\n            max_val = max(lst)\n            result.append(max_val)\n            lst.remove(max_val)\n\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = (a * b * c) / (4 * (s * (s - a) * (s - b) * (s - c)))\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    odd = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            odd += 1\n    return (odd + 1) // 2"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "    primes = [True for i in range(a+1)]\n\tp = 2\n\twhile (p * p <= a):\n\t\tif (primes[p] == True):\n\t\t\tfor i in range(p * p, a+1, p):\n\t\t\t\tprimes[i] = False\n\t\tp += 1\n\tfor i in range(2, a+1):\n\t\tif primes[i]:\n\t\t\tfor j in range(i*i, a+1, i):\n\t\t\t\tif primes[j]:\n\t\t\t\t\tfor k in range(j*j, a+1, j):\n\t\t\t\t\t\tif primes[k]:\n\t\t\t\t\t\t\treturn True\n\treturn False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    for i in range(2, int(x**0.5)+1):\n        if n**i == x:\n            return False\n    return True"}
{"task_id": "HumanEval/77", "completion": "    if (a < 0):\n        return False\n    cube_root = a ** (1 / 3)\n    return (cube_root.is_integer())"}
{"task_id": "HumanEval/78", "completion": "    prime = [2, 3, 5, 7]\n    count = 0\n    for i in range(len(num)):\n        if num[i] == '0':\n            continue\n        if num[i] == 'A':\n            if 10 in prime:\n                count += 1\n        elif num[i] == 'B':\n            if 11 in prime:\n                count += 1\n        elif num[i] == 'C':\n            if 12 in prime:\n                count += 1\n        elif num[i] == 'D':\n            if 13 in prime:\n                count += 1\n        elif num[i] == 'E':\n            if 14 in prime:\n                count += 1\n        elif num[i] == 'F':\n            if 15 in prime:\n                count += 1\n        else:\n            if int(num[i]) in prime:\n                count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    res = \"\"\n    while decimal > 0:\n        res = str(decimal % 2) + res\n        decimal = decimal // 2\n    return \"db\" + res + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i:i+3] == s[i+1:i+3]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n < 1:\n        return 0\n    return (1 << n) - 1 - (1 << n - 1)"}
{"task_id": "HumanEval/84", "completion": "    if N == 0:\n        return \"0\"\n    res = \"\"\n    while N > 0:\n        digit = N % 2\n        res = str(digit) + res\n        N //= 2\n    return res"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(1, len(lst), 2):\n        result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(\"\".join(sorted(word)))\n    return \" \".join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return []\n    \n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            index = alphabet.find(char.lower())\n            new_index = (index * 2 + 2) % len(alphabet)\n            encrypted += alphabet[new_index].upper() if char.isupper() else alphabet[new_index].lower()\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    sentences = S.split('. ')\n    for sentence in sentences:\n        if sentence.startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiou'\n    result = ''\n    for char in message:\n        if char in vowels:\n            result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(n):\n        sum = 0\n        while n:\n            sum += n % 10\n            n //= 10\n        return sum\n\n    max_prime = -1\n    for i in lst:\n        if i > max_prime and isPrime(i):\n            max_prime = i\n    \n    if max_prime == -1:\n        return 0\n    return sumOfDigits(max_prime)"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    case_insensitive = True\n    case_sensitive = True\n    for key in dict:\n        if type(key) != str:\n            return False\n        if key.islower() or key.isupper():\n            case_insensitive = False\n        else:\n            case_sensitive = False\n    return case_insensitive or case_sensitive"}
{"task_id": "HumanEval/96", "completion": "    if n <= 0:\n        return []\n    result = []\n    i = 2\n    while len(result) < n:\n        is_prime = True\n        for num in result:\n            if i % num == 0:\n                is_prime = False\n                break\n        if is_prime and i < n:\n            result.append(i)\n        i += 1\n    return result"}
{"task_id": "HumanEval/97", "completion": "    return a % 10 * b % 10"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper() and s[i] in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num == int(num):\n        return int(num)\n    else:\n        closest_int = int(num + 1) if num % 1 == 0 else int(num)\n        return closest_int if closest_int % 2 != 0 else int(num)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i + i)\n        else:\n            result.append(2 * i + 1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    for num in range(y, x-1, -1):\n        if num % 2 == 0 and str(num).isdigit() and int(str(num)[:-1]) % 2 == 0:\n            return num\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    return bin(round((m - n + 1) / 2))[2:]"}
{"task_id": "HumanEval/104", "completion": "    return sorted(set(x))"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: len(str(x)))\n\ndef between_one_and_nine(arr):\n    return [x for x in arr if 1 <= x <= 9]\n\ndef replace_digits_with_names(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(names[num-1])\n    return result"}
{"task_id": "HumanEval/106", "completion": "    ans = [0] * n\n    for i in range(1, n):\n        if i % 2 == 0:\n            ans[i] = 1\n            for j in range(1, i+1):\n                ans[i] *= j\n        else:\n            ans[i] = i\n            for j in range(i, 0, -1):\n                ans[i] += j\n    return ans"}
{"task_id": "HumanEval/107", "completion": "    start = 1\n    end = n\n    even = 0\n    odd = 0\n    while start <= end:\n        if start % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        start += 1\n        end -= 1\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(n):\n        if n == 0:\n            return 0\n        elif n % 10 == 0:\n            return sum_of_digits(n // 10)\n        else:\n            return sum_of_digits(n // 10) + n % 10\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(abs(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_in_lst1 = sum(1 for num in lst1 if num % 2 == 0)\n    odd_in_lst1 = len(lst1) - even_in_lst1\n    if even_in_lst1 == 0 or odd_in_lst1 == 0:\n        return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    hist = {}\n    words = test.split()\n    for word in words:\n        for char in word:\n            if char in hist:\n                hist[char] += 1\n            else:\n                hist[char] = 1\n    max_occurrence = max(hist.values())\n    result = {}\n    for key, value in hist.items():\n        if value == max_occurrence:\n            result[key] = value\n    return result"}
{"task_id": "HumanEval/112", "completion": "    for i in c:\n        s = s.replace(i,'')\n    rev_s = s[::-1]\n    if rev_s == s:\n        return s,True\n    else:\n        return s,False"}
{"task_id": "HumanEval/113", "completion": "    def count_odd(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n    \n    result = []\n    for s in lst:\n        result.append(f\"the number of odd elements in the string {s} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    def calc(grid, x, y):\n        cnt = 0\n        while x >= 0 and y >= 0:\n            if grid[x][y] == 1:\n                cnt += 1\n                grid[x][y] = 0\n            else:\n                break\n            x -= 1\n            y -= 1\n        return cnt\n    ans = 0\n    for i in range(len(grid)):\n        ans = max(ans, calc(grid, i, 0))\n    return ans"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    \n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou')\n        if consonant_count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    vowels = \"aeiouAEIOU\"\n    vowel = \"\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in consonants and word[i-1] in consonants:\n            for j in range(i-1, -1, -1):\n                if word[j] in vowels:\n                    vowel = word[j]\n                    break\n                if word[j] in consonants:\n                    break\n    return vowel"}
{"task_id": "HumanEval/119", "completion": "    open_count = 0\n    close_count = 0\n    for char in lst:\n        if char == '(':\n            open_count += 1\n        else:\n            if open_count > 0:\n                open_count -= 1\n            else:\n                close_count += 1\n    return \"Yes\" if close_count == open_count else \"No\""}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[len(arr) - k:]"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(min(k, len(arr))):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    res = []\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n * 3 + 1\n        if n % 2 != 0:\n            res.append(n)\n    return sorted(res)"}
{"task_id": "HumanEval/124", "completion": "    if len(date) == 0:\n        return False\n    \n    if date.count('/') != 2:\n        return False\n    \n    month, day, year = date.split('/')\n    \n    if len(month) == 0 or len(day) == 0 or len(year) == 0:\n        return False\n    \n    if month.isdigit() and day.isdigit() and year.isdigit():\n        return validate_date(month, day, year)\n    else:\n        return False\n\ndef validate_date(month, day, year):\n    if int(month) < 1 or int(month) > 12:\n        return False\n    \n    if int(month) in [1,3,5,7,8,10,12] and int(day) < 1 or int(day) > 31:\n        return False\n    \n    if int(month) in [4,6,9,11] and int(day) < 1 or int(day) > 30:\n        return False\n    \n    if int(month) == 2 and int(day) < 1 or int(day) > 29:\n        return False\n    \n    if int(year) < 1000:\n        return False\n    \n    return True"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    if not words:\n        words = txt.split(',')\n    if not words:\n        words = len(txt) // 2\n    return words"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] == lst[i+1]:\n            return False\n        elif lst[i] > lst[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    if length > 1:\n        for i in range(2, length):\n            if length % i == 0:\n                return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    \n    sign = 1\n    prod = 1\n    \n    for num in arr:\n        sign *= 1 if num > 0 else -1\n        prod *= num\n        \n    return abs(prod) * sign"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[float('inf') for _ in range(k)] for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    for i in range(k):\n        for j in range(n):\n            for x in range(n):\n                if (i > 0 and x == j):\n                    dp[i][j] = min(dp[i][j], dp[i-1][x])\n                if (j > 0 and x == i):\n                    dp[i][j] = min(dp[i][j], dp[x][j-1])\n    return dp[k-1][n-1]\n\ndef minPathPath(grid, k):\n    n = len(grid)\n    dp = [[float('inf') for _ in range(k)] for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    for i in range(k):\n        for j in range(n):\n            for x in range(n):\n                if (i > 0 and x == j):\n                    dp[i][j] = min(dp[i][j], dp[i-1][x])\n                if (j > 0 and x == i):\n                    dp[i][j] = min(dp[i][j], dp[x][j-1])\n    ans = []\n    while k > 0:\n        ans.append(dp[k-1][n-1])\n        k -= 1\n        n -= 1\n    return ans[::-1]"}
{"task_id": "HumanEval/130", "completion": "    if n <= 1:\n        return [1, 3]\n    else:\n        t = [1, 3]\n        for i in range(2, n + 1):\n            t.append(t[i - 1] + t[i - 2] + tri(i - 1))\n        return t"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        if n % 2 != 0:\n            product *= (n % 10)\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num**2)\n    return result"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    return last_char.isalpha() and not any(last_char in word for word in txt.split())"}
{"task_id": "HumanEval/135", "completion": "    if len(arr) < 2:\n        return -1\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    negative_integers = [i for i in lst if i < 0]\n    if not negative_integers:\n        return (None, None)\n    largest_negative = max(negative_integers)\n    \n    positive_integers = [i for i in lst if i > 0]\n    if not positive_integers:\n        return (largest_negative, None)\n    smallest_positive = min(positive_integers)\n    \n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    if isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    if isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    if isinstance(a, str) and isinstance(b, str):\n        a = float(a)\n        b = float(b)\n        return max(a, b)\n    if isinstance(a, str) or isinstance(b, str):\n        a = float(a)\n        b = float(b)\n        return max(a, b)\n    return None"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    count = 0\n    for i in range(2, n, 2):\n        if i <= n:\n            n -= i\n            count += 1\n        else:\n            break\n    return count == 4"}
{"task_id": "HumanEval/139", "completion": "    if n < 1:\n        return 1\n    else:\n        return n * special_factorial(n - 1)"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(\"  \", \" - \")\n    return text.replace(\" \", \"_\")"}
{"task_id": "HumanEval/141", "completion": "    conditions = [\n        len(file_name) <= 3,\n        file_name.count('.') == 1,\n        file_name[0].isalpha() and file_name[1:3].isdigit(),\n        file_name[file_name.index('.') + 1:].lower() in ['txt', 'exe', 'dll']\n    ]\n    return 'Yes' if all(conditions) else 'No'"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i%3 == 0:\n            total += lst[i]*lst[i]\n        elif i%4 == 0 and i%3 != 0:\n            total += lst[i]*lst[i]*lst[i]\n    return total"}
{"task_id": "HumanEval/143", "completion": "    return sentence.split()\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_word_lengths(sentence):\n    words = words_in_sentence(sentence)\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    \n    return result_num % result_den == 0"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 2 != 0 or num % 10 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = []\n    for i in range(1, n+1):\n        a.append(i*i - i + 1)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    try:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 < index2:\n            return tuple(planets[index1+1:index2])\n        elif index1 > index2:\n            return tuple(planets[index2+1:index1])\n        else:\n            return ()\n    except ValueError:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "    sorted_lst = sorted(lst, key=lambda x: (len(x), x))\n    return sum(int(digit) for word in sorted_lst for digit in word)\n\n# Test the function\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == 12\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == 17\nassert sorted_list_sum([\"abc\", \"def\", \"ghi\"]) == 19\nassert sorted_list_sum([\"abc\", \"def\"]) == 19"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if num >= 0 and num % 2 != 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/152", "completion": "    result=[]\n    for i in range(len(game)):\n        if game[i]==guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i]-game[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    max_extension = ''\n    for extension in extensions:\n        cap_count = extension.count(extension.upper())\n        sm_count = len(extension) - cap_count\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            max_extension = extension\n    return f'{class_name}.{max_extension}'"}
{"task_id": "HumanEval/154", "completion": "    if b in a:\n        return True\n    len_b = len(b)\n    rotations = [b[i:] + b[:i] for i in range(len_b)]\n    for r in rotations:\n        if r in a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    if num < 0:\n        return (0, 0)\n    str_num = str(num)\n    even_count = 0\n    odd_count = 0\n    for digit in str_num:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_map = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        20: 'xx',\n        30: 'xxx',\n        40: 'xl',\n        50: 'xlv',\n        60: 'xli',\n        70: 'xlii',\n        80: 'xlix',\n        90: 'xix',\n        100: 'xc',\n        200: 'xcxx',\n        300: 'xcix',\n        400: 'xcd',\n        500: 'xcv',\n        600: 'xci',\n        700: 'xcii',\n        800: 'xcix',\n        900: 'xi',\n    }\n    roman_num = ''\n    for key, val in roman_map.items():\n        while number >= key:\n            roman_num += val\n            number -= key\n    return roman_num"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    if sides[2]**2 == sides[0]**2 + sides[1]**2:\n        return True\n    return False"}
{"task_id": "HumanEval/158", "completion": "    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    if remaining == 0:\n        return [number + need, 0]\n    if remaining < need:\n        return [number + remaining, 0]\n    return [number + need, remaining - need]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '/':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not any(char.isalpha() for char in result):\n        result = result[::-1]\n    return result"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for i in range(a, b+1):\n        if all(int(digit) % 2 == 0 for digit in str(i)):\n            result.append(i)\n    return sorted(result)"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers)-1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            top_element = stack.pop()\n            if not stack:  # Empty stack means this is a new group\n                groups.append(''.join(stack + [top_element]))\n                stack = []\n    return groups"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimals = number - integer_part\n    return decimals"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        if op > 0:\n            balance += op\n        elif op < 0:\n            if balance < abs(op):\n                return True\n            balance += op\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(0, len(numbers)-1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    groups = paren_string.split()\n    result = []\n    for group in groups:\n        stack = []\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if stack:\n                    stack.pop()\n                    max_depth += 1\n        result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)"}
{"task_id": "HumanEval/9", "completion": "    max_numbers = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        max_numbers.append(max_so_far)\n    return max_numbers"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    i = len(string) - 1\n    while i >= 0 and not is_palindrome(string[:i+1]):\n        i -= 1\n    if i == -1:\n        return string + string[::-1]\n    else:\n        return string[:i+1] + string[:i+1][::-1]"}
{"task_id": "HumanEval/11", "completion": "    if len(a) != len(b):\n        raise ValueError(\"Input strings should be of equal length\")\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n\n    max_length = max(map(len, strings))\n    max_length_strings = [s for s in strings if len(s) == max_length]\n\n    return max_length_strings[0] if max_length_strings else None"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(0, n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats = [4, 2, 1]  # legend: whole note, half note, quater note\n    result = []\n    for i, char in enumerate(music_string):\n        if i % 2 == 0:  # skip every second character\n            result.append(beats[ord(char) - 97])\n    return result"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    while substring in string:\n        count += 1\n        string = string.replace(substring, '', 1)\n    return count"}
{"task_id": "HumanEval/19", "completion": "    number_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    nums = list(map(lambda x: number_dict[x], numbers.split()))\n    return ' '.join(sorted(nums))"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest = (numbers[i], numbers[i + 1])\n    return closest"}
{"task_id": "HumanEval/21", "completion": "    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    result = []\n    seen = set()\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    if len(strings) == 0:\n        return \"\"\n    result = strings[0]\n    for i in range(1, len(strings)):\n        result += strings[i]\n    return result"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    result = []\n    for num in l:\n        if num > 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds a zero point of a polynomial.\n    \"\"\"\n    x = 1\n    epsilon = 1e-9\n    while abs(poly(xs, x)) > epsilon:\n        x += 0.1\n    return x"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    res = [0]*n\n    for i in range(n):\n        if i % 3 == 0:\n            res[i] = l[i]\n        else:\n            res[i] = sorted(l)[i]\n    return res"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = float('-inf')\n    for ele in l:\n        max_val = max(max_val, ele)\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(7) in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[1::2] = sorted(l[1::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from encoded cyclic string.\n    \"\"\"\n    # convert each group of three characters to one character. Unless group has fewer elements than 3.\n    result = \"\".join([s[i:i+1] for i in range(0, len(s), 3)])\n    return result"}
{"task_id": "HumanEval/39", "completion": "    fib = [0, 1]\n    for i in range(2, n):\n        fib.append((fib[i-1] + fib[i-2]) % 2147483647)\n    return fib[n-1]"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    s = set()\n    for x in l:\n        s.add(-x)\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if -l[i] - l[j] in s:\n                return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n*(n-1)//2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return \"0\"\n    if x < 0:\n        return \"-\" + change_base(-x, base)\n    result = \"\"\n    while x:\n        result = str(x % base) + result\n        x //= base\n    return result"}
{"task_id": "HumanEval/45", "completion": "    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "    if n <= 2:\n        return n\n    a, b, c, d = 0, 2, 1, 3\n    for _ in range(n - 4):\n        a, b, c, d = b, c, d, a + c\n    return a"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    n = n % p\n    while (n > 0):\n        if n % 2 == 1:\n            result = (result * n) % p\n        n = n // 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by inverse shift operation.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiou\"\n    result = ''.join([ch for ch in text if ch not in vowels])\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    # Handle even numbers\n    while n % 2 == 0:\n        n = n // 2\n        \n    # Check for odd factor\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            n = n // i\n            \n    # If n is a prime number greater than 2\n    if n > 2:\n        return n\n    else:\n        return n-1"}
{"task_id": "HumanEval/60", "completion": "    return n*(n+1)//2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    res = []\n    for i in range(n):\n        res.append(xs[i] * (i + 1))\n    return res"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        fib_fib = [0] * (n + 1)\n        fib_fib[0] = 0\n        fib_fib[1] = 0\n        for i in range(2, n + 1):\n            fib_fib[i] = fib_fib[i-1] + fib_fib[i-2] + fib_fib[i-3]\n        return fib_fib[n]"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char.lower() in ['a', 'e', 'i', 'o', 'u', 'y']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    if shift == 0:\n        return str(x)\n    elif shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "    s = s.replace(\" \", \"\")\n    apples, oranges = 0, 0\n    mangoes = n\n    \n    for char in s:\n        if char.isdigit():\n            continue\n        elif char == 'a':\n            apples += 1\n        elif char == 'o':\n            oranges += 1\n        elif char == 'm':\n            mangoes -= 1\n    \n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if len(arr) == 0:\n        return []\n    min_even = float('inf')\n    idx = -1\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < min_even:\n            min_even = node\n            idx = i\n    return [min_even, idx]"}
{"task_id": "HumanEval/69", "completion": "    max_freq = -1\n    result = -1\n    for i in range(len(lst)):\n        freq = lst.count(lst[i])\n        if lst[i] > 0 and freq >= lst[i]:\n            if freq > max_freq:\n                max_freq = freq\n                result = lst[i]\n    return result"}
{"task_id": "HumanEval/70", "completion": "    if len(lst) == 0:\n        return lst\n    result = []\n    while lst:\n        min_val = min(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n    return result"}
{"task_id": "HumanEval/71", "completion": "    sides = [a, b, c]\n    sides.sort()\n    if sides[2] > (sides[0] + sides[1]):\n        return -1\n    area = (sides[0] * sides[1]) / 2\n    return round(area, 2)"}
{"task_id": "HumanEval/72", "completion": "    # Your code here\n    pass"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    left, right = 0, n - 1\n    count = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            count += 1\n        left += 1\n        right -= 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, a//2 + 1):\n        if a % i == 0 and is_prime(i) and is_prime(a//i) and is_prime(i*a//i):\n            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    root = x ** (1 / n)\n    return root == int(root)"}
{"task_id": "HumanEval/77", "completion": "    sqrt_a = int(a ** (1/3))\n    return sqrt_a ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    hex_key = 0\n    for digit in num:\n        if digit.isdigit():\n            hex_key += int(digit)\n        elif digit in \"ABCDEF\":\n            hex_key += 10 + ord(digit) - ord('A')\n    return hex_key\n\ndef countPrimeDigits(num):\n    hex_key = hex_key(num)\n    count = 0\n    while hex_key > 1:\n        if isPrime(hex_key):\n            count += 1\n        hex_key = hex_key // 10\n    return count\n\ndef isPrime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] and s[i+1] == s[i+2]:\n            return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade >= 3.7:\n            letter_grades.append(\"A\")\n        elif grade >= 3.3:\n            letter_grades.append(\"A-\")\n        elif grade >= 3.0:\n            letter_grades.append(\"B+\")\n        elif grade >= 2.7:\n            letter_grades.append(\"B\")\n        elif grade >= 2.3:\n            letter_grades.append(\"B-\")\n        elif grade >= 2.0:\n            letter_grades.append(\"C+\")\n        elif grade >= 1.7:\n            letter_grades.append(\"C\")\n        elif grade >= 1.3:\n            letter_grades.append(\"C-\")\n        elif grade >= 1.0:\n            letter_grades.append(\"D+\")\n        elif grade >= 0.7:\n            letter_grades.append(\"D\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(length)"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 2\n    return 2 * (n - 1)"}
{"task_id": "HumanEval/84", "completion": "    result = 0\n    while N:\n        result += N & 1\n        N >>= 1\n    return bin(result)[2:]"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "    s = s.split()\n    for i in range(len(s)):\n        s[i] = ''.join(sorted(s[i]))\n    return ' '.join(s)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for row in lst:\n        for j in range(len(row)):\n            if row[j] == x:\n                result.append((lst.index(row), j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "    if len(array) <= 1:\n        return array\n    \n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        result += chr(((ord(char)-97-2)*2)%26+97)\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    for i in range(len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n    if min_val == float('inf'):\n        return None\n    min_index = -1\n    for i in range(len(lst)):\n        if lst[i] == min_val:\n            min_index = i\n            break\n    if min_index == -1:\n        return None\n    lst[min_index] = float('inf')\n    return sorted(lst)[1]"}
{"task_id": "HumanEval/91", "completion": "    boredoms = 0\n    sentences = S.split(\".\")\n    for sentence in sentences:\n        if sentence.startswith(\"I \"):\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char in vowels:\n            index = vowels.index(char)\n            encoded_message += chr(ord(char) + (index + 2) % 5)\n        else:\n            encoded_message += char\n    return encoded_message.swapcase()"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_prime = -1\n    for num in lst:\n        if isPrime(num) and num > max_prime:\n            max_prime = num\n    return sum(map(int, str(max_prime)))\n\n# Example usage\nlst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\nprint(skjkasdkd(lst))  # Output: 10"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    \n    if all(key.islower() for key in dict) or all(key.isupper() for key in dict):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "    if n <= 2:\n        return []\n    prime_numbers = []\n    num = 2\n    while len(prime_numbers) < n:\n        is_prime = True\n        for prime in prime_numbers:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime and num < n:\n            prime_numbers.append(num)\n        num += 1\n    return prime_numbers"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(1, len(s), 2):\n        if s[i].lower() in 'aeiou':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num == int(num):\n        return int(num)\n    else:\n        return round(num)"}
{"task_id": "HumanEval/100", "completion": "    result = [n]\n    while n > 1:\n        n -= 1\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n        result.append(n)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split(\",\") + s.split()"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 != 0 or y % 2 != 0:\n        return -1\n    max_even_num = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            max_even_num = max(max_even_num, i)\n    return max_even_num"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = m - n + 1\n    rounded_total = (total + 1) // 2\n    return bin(rounded_total)[2:]"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    def get_length(num):\n        num_str = str(num)\n        length = len(num_str)\n        return length\n\n    return sorted(arr, key=get_length, reverse=True)\n\ndef replace_by_name(arr):\n    num_name_map = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(num_name_map[num])\n    return result\n\ndef sortAndReplace(arr):\n    between_1_9 = [num for num in arr if 1 <= num <= 9]\n    if not between_1_9:\n        return []\n    sorted_between_1_9 = by_length(between_1_9)\n    reversed_between_1_9 = sorted_between_1_9[::-1]\n    replaced_between_1_9 = replace_by_name(reversed_between_1_9)\n    return replaced_between_1_9"}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        else:\n            return i * factorial(i - 1)\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))"}
{"task_id": "HumanEval/110", "completion": "    if len(lst1) != len(lst2):\n        return \"NO\"\n    lst1.sort()\n    lst2.sort()\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0 and lst2[i] % 2 == 0:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    hist = {}\n    max_count = 0\n    result = {}\n    for word in words:\n        count = word.count()\n        if count > max_count:\n            max_count = count\n            result = {word: count}\n        elif count == max_count:\n            result[word] = count\n    return result"}
{"task_id": "HumanEval/112", "completion": "    s = list(s)\n    for char in c:\n        while char in s:\n            s.remove(char)\n    return \"\".join(s), \"\".join(s)==s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n\n    def calc_water(i, j, water):\n        if i < 0 or i >= rows or j < 0 or j >= cols or grid[i][j] != 0:\n            return\n        water[i][j] += 1\n        calc_water(i+1, j, water)\n        calc_water(i-1, j, water)\n        calc_water(i, j+1, water)\n        calc_water(i, j-1, water)\n\n    def calc_buckets(i, j, buckets):\n        if i < 0 or i >= rows or j < 0 or j >= cols or grid[i][j] != 1:\n            return\n        buckets[i][j] += 1\n        calc_buckets(i+1, j, buckets)\n        calc_buckets(i-1, j, buckets)\n        calc_buckets(i, j+1, buckets)\n        calc_buckets(i, j-1, buckets)\n\n    ans = 0\n    water = [[0]*cols for _ in range(rows)]\n    buckets = [[0]*cols for _ in range(rows)]\n\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 0:\n                calc_water(i, j, water)\n            else:\n                calc_buckets(i, j, buckets)\n\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                ans += max(0, min(water[i][j], buckets[i][j]-1) + 1)\n\n    return ans"}
{"task_id": "HumanEval/116", "completion": "    ones_count = {}\n    for num in arr:\n        count = bin(num).count('1')\n        if count in ones_count:\n            ones_count[count].append(num)\n        else:\n            ones_count[count] = [num]\n    sorted_arr = []\n    for count in sorted(ones_count.keys()):\n        sorted_arr.extend(sorted(ones_count[count]))\n    return sorted_arr"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    words = s.split()\n    words_with_n_consonants = [word for word in words if count_consonants(word) == n]\n    return words_with_n_consonants\n\ndef count_consonants(s):\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    return sum(1 for char in s if char.lower() in consonants)"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"AEIOUaeiou\"\n    vowel = \"\"\n    consonants = []\n    n = len(word)\n    for i in range(n-1, -1, -1):\n        if word[i].isalpha() and word[i].upper() in vowels:\n            vowel = word[i].upper()\n            break\n    for i in range(n-1, -1, -1):\n        if word[i].isalpha() and word[i].upper() not in vowels:\n            consonants.append(word[i].upper())\n    if not consonants:\n        return \"\"\n    for c in consonants:\n        if vowel == \"\":\n            return \"\"\n        if c != vowel and c != \"C\":\n            return vowel\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/121", "completion": "    odd_elements_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            odd_elements_sum += lst[i]\n    return odd_elements_sum"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        num = arr[i]\n        if len(str(num)) <= 2:\n            sum += num\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    def collatz(x):\n        if x % 2 == 0:\n            return x // 2\n        else:\n            return 3 * x + 1\n\n    result = []\n    for i in range(1, n + 1):\n        result.append(collatz(i))\n\n    result = [x for x in result if x % 2 != 0]\n    result.sort()\n    return result"}
{"task_id": "HumanEval/124", "completion": "    if len(date) == 0:\n        return False\n    if len(date) != 8:\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if not 1 <= month <= 12:\n        return False\n    if not 1 <= day <= 31:\n        return False\n    if not 1 <= year <= 9999:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and not 1 <= day <= 31:\n        return False\n    if month in [4, 6, 9, 11] and not 1 <= day <= 30:\n        return False\n    if month == 2 and not 1 <= day <= 29:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([char for char in txt if char.islower() and int(ord(char)) % 2 != 0])"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start, end = interval1\n    left, right = interval2\n    if left > right or left > end or right < start:\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    prod = 1\n    sign = 1\n    for num in arr:\n        if num == 0:\n            return None\n        if num > 0:\n            sign = 1\n        elif num < 0:\n            sign = -1\n        prod *= sign\n    return abs(prod)"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    for i in range(1, n):\n        grid[i][0] += grid[i - 1][0]\n    for j in range(1, n):\n        grid[0][j] += grid[0][j - 1]\n    for i in range(1, n):\n        for j in range(1, n):\n            grid[i][j] += min(grid[i - 1][j], grid[i][j - 1])\n    return [grid[k - 1][k - 1]]"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [0]\n    else:\n        a, b, c = 0, 1, 1\n        result = [c]\n        for i in range(2, n + 1):\n            c = a + b + b\n            result.append(c)\n            a, b = b, c\n        return result"}
{"task_id": "HumanEval/131", "completion": "    if n == 0:\n        return 0\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        num = int(num)\n        result += num*num\n    return result"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if len(words) < 1:\n        return False\n    last_char = words[-1][-1]\n    return last_char.isalpha() and not words[-1].endswith(last_char)"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg = None\n    pos = None\n    for i in lst:\n        if isinstance(i, int):\n            if i < 0 and (neg is None or i > neg):\n                neg = i\n            if i > 0 and (pos is None or i < pos):\n                pos = i\n    return (neg, pos)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, int) and isinstance(b, int):\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, float) and isinstance(b, float):\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        else:\n            return b\n    else:\n        return \"Invalid input\""}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    even_sum = 0\n    count = 0\n    while even_sum < n:\n        count += 1\n        even_sum += 2 * count\n    return even_sum == n"}
{"task_id": "HumanEval/139", "completion": "    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    i = 0\n    while i < len(text):\n        if text[i] == \" \":\n            result += \"_\"\n        elif text[i] == \"-\":\n            result += \"-\"\n        else:\n            result += text[i]\n        i += 1\n    return result"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 12:\n        return 'No'\n    \n    if file_name[0].isdigit() or file_name[len(file_name)-4 : len(file_name)] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    dot_index = file_name.find('.')\n    if dot_index == -1 or dot_index == 0 or dot_index == len(file_name)-1:\n        return 'No'\n    \n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word) > 1 and is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/144", "completion": "    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    x_gcd = gcd(x_num, x_den)\n    n_gcd = gcd(n_num, n_den)\n\n    return (x_gcd == n_gcd) and (x_num % x_gcd == 0) and (n_num % n_gcd == 0) and (x_den % x_gcd == 0) and (n_den % n_gcd == 0)"}
{"task_id": "HumanEval/145", "completion": "    def get_sum_of_digits(num):\n        return sum([int(digit) for digit in str(num)])\n    \n    return sorted(nums, key=lambda x: (get_sum_of_digits(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 2 == 1 or num % 10 == 1):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    if planet1 not in \"Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune\".split() or planet2 not in \"Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune\".split():\n        return ()\n    planets = \"Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune\".split()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    return tuple(planets[index1 + 1:index2])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "    if n % 2 == 0:\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    result = 0\n    for num in lst:\n        if num > 0 and int(num) % 2 != 0:\n            result += num**2\n    return result"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_ext = ''\n    for ext in extensions:\n        cap = ext.count(ext.upper())\n        sm = ext.count(ext.lower())\n        strength = (cap - sm) if cap > sm else -1\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    return class_name + '.' + strongest_ext"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    b = b + b\n    return b in a"}
{"task_id": "HumanEval/155", "completion": "    count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            count += 1\n    return (count, len(str(abs(num))) - count)"}
{"task_id": "HumanEval/156", "completion": "    val = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    syms = [\"m\", \"cm\", \"d\", \"cd\", \"xc\", \"x\", \"xi\", \"c\", \"xc\", \"xii\", \"ix\", \"v\", \"ix\", \"i\", \"vi\", \"vii\"]\n\n    roman_num = \"\"\n\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n\n    return roman_num.lower()"}
{"task_id": "HumanEval/157", "completion": "    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n\t\treturn True\n\telse:\n\t\treturn False"}
{"task_id": "HumanEval/158", "completion": "    max_chars = -1\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    if number + remaining < need:\n        return [number + remaining, remaining]\n    else:\n        return [number + need, 0]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            stack.append(operand[i])\n        elif operator[i] == '-':\n            stack.append(-operand[i])\n        elif operator[i] == '*':\n            stack.append(stack.pop() * operand[i])\n        elif operator[i] == '//':\n            stack.append(stack.pop() // operand[i])\n        elif operator[i] == '**':\n            stack.append(stack.pop() ** operand[i])\n    return sum(stack)"}
{"task_id": "HumanEval/161", "completion": "    s = s.replace(\"#\",\"\")\n    s = ''.join(c.lower() if c.isupper() else c.upper() for c in s if c.isalpha())\n    return s if len(s) > 0 else s[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if text == '':\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for num in range(a, b+1):\n        num_str = str(num)\n        for digit in num_str:\n            if int(digit) % 2 == 0:\n                even_digits.append(int(digit))\n    return sorted(even_digits)"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                if not stack:  # Empty stack means group is complete\n                    groups.append(''.join(group))\n                    group = []\n        else:\n            group.append(char)\n    return groups"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimals = number - integer_part\n    return decimals"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        if op > 0:\n            balance += op\n        else:\n            balance -= op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    result = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                if not stack:\n                    max_depth += 1\n            else:\n                max_depth += 1\n        result.append(max_depth)\n\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    sum_val = 0\n    product_val = 1\n    for num in numbers:\n        sum_val += num\n        product_val *= num\n    return sum_val, product_val"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    current_max = numbers[0]\n    for num in numbers[1:]:\n        current_max = max(num, current_max)\n        result.append(current_max)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the supplied string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)-1, -1, -1):\n        if is_palindrome(string[:i+1]):\n            return string[:i+1] + string[:i+1][::-1]\n    return string"}
{"task_id": "HumanEval/11", "completion": "    res = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            res += str(int(a[i]) ^ int(b[i]))\n        else:\n            res += b[i]\n    return res"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    result = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(1, len(string)+1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "    music_string = music_string.replace(' ', '')  # Remove spaces\n    beats_count = 0\n    beats = []\n    for char in music_string:\n        if char == 'o':\n            beats_count += 4\n        elif char == 'o|':\n            beats_count += 2\n        elif char == '.|':\n            beats_count += 1\n        beats.append(beats_count)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    n = len(string)\n    m = len(substring)\n    if n == 0 or m == 0:\n        return 0\n    count = 0\n    i = 0\n    while i <= n - m:\n        if string[i:i + m] == substring:\n            count += 1\n            i += m\n        else:\n            i += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = list(map(int, numbers.split()))\n    num_list.sort()\n    return ' '.join(map(str, num_list))"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_elements = (numbers[0], numbers[0])\n    \n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_elements = (numbers[i], numbers[i+1])\n            \n    return closest_elements"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return list(filter(lambda x: isinstance(x, int), values))"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n//2, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "    result = ''.join(strings)\n    return result"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    result = []\n    for num in l:\n        if num > 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n**0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True"}
{"task_id": "HumanEval/32", "completion": "    if len(xs) % 2 == 0:\n        return -1  # Even number of coefficients, no solution\n    return -1 if xs[0] == 0 else round(math.pow(xs[0], 1/len(xs)), 2)"}
{"task_id": "HumanEval/33", "completion": "    for i in range(len(l)):\n        if i % 3 != 0:\n            l[i] = sorted(l[i:i+3])[1]\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    for i in range(0, len(l), 2):\n        l[i] = sorted(l[i])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing the effect of encode_cyclic function.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [group[::-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    fib = [0, 1]\n    for i in range(2, n+1):\n        fib.append(fib[i-1] + fib[i-2])\n    for j in range(len(fib)-1, 1, -1):\n        if is_prime(fib[j]):\n            return fib[j]\n    return -1\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        j = i+1\n        k = n-1\n        while j < k:\n            if l[i] + l[j] + l[k] == 0:\n                return True\n            elif l[i] + l[j] + l[k] < 0:\n                j += 1\n            else:\n                k -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return int(n / 2)"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    return len(set(l)) >= 2"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    area = 0.5 * a * h\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 0\n    else:\n        a, b = 0, 2\n        for _ in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    if n<0:\n        n+=p\n    res = (2**n) % p\n    return res"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string from encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiouAEIOU'\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(3, n+1):\n            a, b = b, a+b\n        return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\" and stack:\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    if len(l) <= 1:\n        return True\n    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            decreasing = False\n        if l[i] > l[i - 1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    common_set = set1.intersection(set2)\n    return sorted(list(common_set))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = [0] * n\n    for i in range(1, n):\n        result[i] = (i+1) * xs[i]\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n==0:\n        return 0\n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        a,b=0,1\n        for _ in range(3,n+1):\n            a,b=b,a+b+1\n        return b"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouy\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    apples = 0\n    oranges = 0\n    mango = 0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            if i < len(s) - 1 and s[i + 1] == \" \":\n                if s[i] == \"0\":\n                    continue\n                if s[i] == \"1\":\n                    mango += 1\n                elif s[i] == \"2\":\n                    mango += 2\n                elif s[i] == \"3\":\n                    mango += 3\n                elif s[i] == \"4\":\n                    mango += 4\n                elif s[i] == \"5\":\n                    mango += 5\n                elif s[i] == \"6\":\n                    mango += 6\n                elif s[i] == \"7\":\n                    mango += 7\n                elif s[i] == \"8\":\n                    mango += 8\n                elif s[i] == \"9\":\n                    mango += 9\n            elif s[i] == \"0\":\n                continue\n            elif s[i] == \"1\":\n                mango += 1\n            elif s[i] == \"2\":\n                mango += 2\n            elif s[i] == \"3\":\n                mango += 3\n            elif s[i] == \"4\":\n                mango += 4\n            elif s[i] == \"5\":\n                mango += 5\n            elif s[i] == \"6\":\n                mango += 6\n            elif s[i] == \"7\":\n                mango += 7\n            elif s[i] == \"8\":\n                mango += 8\n            elif s[i] == \"9\":\n                mango += 9\n    return n - apples - oranges - mango"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    \n    min_val = float('inf')\n    idx = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < min_val:\n            min_val = num\n            idx = i\n    if idx != -1:\n        return [min_val, idx]\n    else:\n        return []"}
{"task_id": "HumanEval/69", "completion": "    max_val = -1\n    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n    \n    for num, freq in freq_map.items():\n        if num > 0 and freq >= num:\n            max_val = max(max_val, num)\n    \n    return max_val"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n\n    result = []\n    while lst:\n        min_value = min(lst)\n        result.append(min_value)\n        lst.remove(min_value)\n        if lst:\n            max_value = max(lst)\n            result.append(max_value)\n            lst.remove(max_value)\n    return result"}
{"task_id": "HumanEval/71", "completion": "    sides = [a, b, c]\n    sides.sort()\n    if sides[0] + sides[1] > sides[2]:\n        return round((sides[0] + sides[1] + sides[2]) / 2, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if len(q) <= 1:\n        return True\n    if sum(q) <= w:\n        return True\n    return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes"}
{"task_id": "HumanEval/74", "completion": "    total_chars_in_list1 = sum(len(s) for s in lst1)\n    total_chars_in_list2 = sum(len(s) for s in lst2)\n    \n    if total_chars_in_list1 < total_chars_in_list2:\n        return lst1\n    elif total_chars_in_list1 == total_chars_in_list2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, 100):\n\t\tif a % i == 0:\n\t\t\tcount = 0\n\t\t\tfor j in range(2, 100):\n\t\t\t\tif i % j == 0:\n\t\t\t\t\tcount += 1\n\t\t\tif count == 3:\n\t\t\t\treturn True\n\treturn False"}
{"task_id": "HumanEval/76", "completion": "    while x > 1 and n > 1:\n        if x % n == 0:\n            x = x // n\n        else:\n            return False\n    if x == 1 and n == 1:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/77", "completion": "    root = a ** (1/3)\n    return (root.is_integer())"}
{"task_id": "HumanEval/78", "completion": "    hex_digit = {'A': '1', 'B': '2', 'C': '3', 'D': '4', 'E': '5', 'F': '6'}\n    hex_num = \"\"\n    for i in num:\n        hex_num += hex_digit[i]\n    return hex_num\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef count_primes_hex_digits(num: str) -> int:\n    decimal_num = int(hex_key(num), 16)\n    count = 0\n    while decimal_num > 0:\n        last_digit = decimal_num % 10\n        if last_digit in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]:\n            count += 1\n        decimal_num //= 10\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    binary = '0' * (4 - len(binary)) + binary\n    return 'db' + binary + 'db'"}
{"task_id": "HumanEval/80", "completion": "    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n-2):\n        if s[i] == s[i+1] and s[i+1] == s[i+2]:\n            return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif 4.0 > grade >= 3.7:\n            letter_grades.append('A')\n        elif 3.7 > grade >= 3.3:\n            letter_grades.append('A-')\n        elif 3.3 > grade >= 3.0:\n            letter_grades.append('B+')\n        elif 3.0 > grade >= 2.7:\n            letter_grades.append('B')\n        elif 2.7 > grade >= 2.3:\n            letter_grades.append('B-')\n        elif 2.3 > grade >= 2.0:\n            letter_grades.append('C+')\n        elif 2.0 > grade >= 1.7:\n            letter_grades.append('C')\n        elif 1.7 > grade >= 1.3:\n            letter_grades.append('C-')\n        elif 1.3 > grade >= 1.0:\n            letter_grades.append('D+')\n        elif 1.0 > grade >= 0.7:\n            letter_grades.append('D')\n        elif 0.7 > grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length//2 + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    start_one = 9*n + 1\n    end_one = 1*n + 1\n    return start_one + end_one"}
{"task_id": "HumanEval/84", "completion": "    binary_sum = bin(N).replace(\"0b\", \"\")\n    return binary_sum"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(1, len(lst), 2):\n        result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for row in lst:\n        for j in range(len(row)-1, -1, -1):\n            if row[j] == x:\n                result.append((lst.index(row), j))\n    return sorted(result, key=lambda tup: (tup[0], -tup[1]))"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return array\n    first_index_sum = array[0]\n    last_index_sum = array[-1]\n    if (first_index_sum + last_index_sum) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[-2:] + alphabet[:-2]  # Rotating the alphabet by two places\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            encrypted_string += rotated_alphabet[(ord(char) - ord('a') + 2) % 26]  # Encrypting using the rotated alphabet\n        else:\n            encrypted_string += char\n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None"}
{"task_id": "HumanEval/91", "completion": "    boredoms = 0\n    words = S.split()\n    for word in words:\n        if word.startswith(\"I\"):\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "    return (x == y + z) or (y == x + z) or (z == x + y)"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                result += chr((ord(char) - 2) % 26 + 65)\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_prime = max([num for num in lst if isPrime(num)])\n    sum_of_digits = sum(map(int, str(largest_prime)))\n    return sum_of_digits"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n    key_case = dict[list(dict.keys())[0]].islower()\n    for key in dict:\n        if (dict[key].islower() != key_case) or (dict[key].isupper() != key_case):\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    result = []\n    num = 2\n    while len(result) < n:\n        if all(num % i != 0 for i in range(2, num)):\n            result.append(num)\n        num += 1\n    return result"}
{"task_id": "HumanEval/97", "completion": "    return int(str(a)[-1]) * int(str(b)[-1])"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num % 1 == 0:\n        return int(num)\n    elif num % 1 == 0.5:\n        return int(num + 0.5) if num > 0 else int(num - 0.5)\n    else:\n        return int(num + 1) if num > 0 else int(num)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append((i+1)*2)\n        else:\n            result.append((i+1)*2 - 1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 1:\n        return -1\n    for i in range(x, y+1, 2):\n        if i >= y:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = (m - n + 1) * n // 2\n    return bin(total)[2:]"}
{"task_id": "HumanEval/104", "completion": "    res = []\n    for num in x:\n        if all(int(d) % 2 != 0 for d in str(num)):\n            res.append(num)\n    return sorted(res)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: len(str(x)))\n\ndef sortAndReplace(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num))\n    result = by_length(result)\n    result = [x[::-1] for x in result]\n    result = [x.replace('1', 'One').replace('2', 'Two').replace('3', 'Three').replace('4', 'Four').replace('5', 'Five').replace('6', 'Six').replace('7', 'Seven').replace('8', 'Eight').replace('9', 'Nine') for x in result]\n    return result"}
{"task_id": "HumanEval/106", "completion": "    res = [0]*n\n    for i in range(1, n):\n        if i%2==0:\n            res[i] = 1\n            for j in range(2, i+1):\n                res[i] *= j\n        else:\n            res[i] = i\n            for j in range(1, i):\n                res[i] += j\n    return res"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(num):\n        sum = 0\n        while num > 0:\n            sum += num % 10\n            num = num // 10\n        return sum\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))"}
{"task_id": "HumanEval/110", "completion": "    if any(num % 2 != 0 for num in lst1) or any(num % 2 != 0 for num in lst2):\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    count = {}\n    words = test.split()\n    max_count = 0\n    max_char = ''\n    for word in words:\n        for char in word:\n            if char in count:\n                count[char] += 1\n            else:\n                count[char] = 1\n            if count[char] > max_count:\n                max_count = count[char]\n                max_char = char\n    result = {max_char: max_count} if max_count > 0 else {}\n    for char, count in count.items():\n        if count < max_count and char != max_char:\n            result[char] = count\n    return result"}
{"task_id": "HumanEval/112", "completion": "    result = \"\"\n\tfor char in s:\n\t\tif char not in c:\n\t\t\tresult += char\n\treturn result,result==result[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    m, n = len(grid), len(grid[0])\n    pre = [[0] * (n + 1) for _ in range(m + 1)]\n    ans = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            pre[i][j] = pre[i-1][j] + pre[i][j-1] - pre[i-1][j-1] + grid[i-1][j-1]\n\n    for i in range(m):\n        for j in range(n):\n            ans = max(ans, min(i + 1, n - j) - grid[i][j])\n    \n    return ans"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    return [word for word in words if word.isalpha() and word.isupper() == False and word.lower().count('a') == n]"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    word = word.strip()\n    left_consonants = \"\"\n    right_vowels = \"\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in consonants:\n            left_consonants = word[i] + left_consonants\n        elif word[i] in vowels:\n            right_vowels = word[i] + right_vowels\n    if not right_vowels:\n        return \"\"\n    return right_vowels[0]"}
{"task_id": "HumanEval/119", "completion": "    count = 0\n    for c in lst:\n        if c == '(':\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                count = 0\n    return 'Yes' if count == 0 else 'No'"}
{"task_id": "HumanEval/120", "completion": "    stack = []\n    for num in arr:\n        while stack and num > stack[-1]:\n            stack.pop()\n        stack.append(num)\n        if len(stack) > k:\n            stack.pop(0)\n    return stack"}
{"task_id": "HumanEval/121", "completion": "    sum_of_odd_in_even_positions = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_of_odd_in_even_positions += lst[i]\n    return sum_of_odd_in_even_positions"}
{"task_id": "HumanEval/122", "completion": "    sum_digits = 0\n    for i in range(k):\n        digits = len(str(arr[i]))\n        if digits <= 2:\n            sum_digits += arr[i]\n    return sum_digits"}
{"task_id": "HumanEval/123", "completion": "    if n == 1:\n        return [1]\n    else:\n        return [1] + get_odd_collatz(n-1)"}
{"task_id": "HumanEval/124", "completion": "    if len(date) == 8:\n        month, day, year = date.split('-')\n    else:\n        return False\n    \n    if month.isdigit() and day.isdigit() and year.isdigit():\n        month = int(month)\n        day = int(day)\n        year = int(year)\n        \n        if month in [1,3,5,7,8,10,12] and day >= 1 and day <= 31:\n            return True\n        elif month in [4,6,9,11] and day >= 1 and day <= 30:\n            return True\n        elif month == 2 and day >= 1 and day <= 29:\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    if ',' in txt:\n        return txt.split(',')\n    return len(set(c.lower() for c in txt if c.isalpha()))//2 + 1"}
{"task_id": "HumanEval/126", "completion": "    for i in range(1, len(lst)):\n        if lst[i] <= lst[i - 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if isPrime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef isPrime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    res = 0\n    for num in arr:\n        if num == 0:\n            continue\n        elif num > 0:\n            res += num\n        else:\n            res -= num\n    return res * prod([1 if x > 0 else -1 for x in arr])"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    visited = [[False] * n for _ in range(n)]\n    pq = []\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] <= n*n:\n                visited[i][j] = True\n                pq.append((grid[i][j], i, j))\n    pq.sort()\n    ans = []\n    while k > 0 and pq:\n        val, i, j = pq.pop(0)\n        ans.append(val)\n        for ni, nj in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= ni < n and 0 <= nj < n and not visited[ni][nj]:\n                visited[ni][nj] = True\n                pq.append((grid[ni][nj], ni, nj))\n        pq.sort()\n        k -= 1\n    return ans"}
{"task_id": "HumanEval/130", "completion": "    if n == 1:\n        return [1]\n    else:\n        trib = [0] * (n + 1)\n        trib[0] = 1\n        trib[1] = 3\n        for i in range(2, n + 1):\n            trib[i] = trib[i - 1] + trib[i - 2] + (n - i + 1)\n        return trib"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num + 0.5) ** 2\n    return result"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if len(words) == 0:\n        return False\n    last_word = words[-1]\n    if not last_word:\n        return False\n    last_char = last_word[-1]\n    if last_char.isalpha():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr) - 1):\n        if arr[i] == arr[i+1]:\n            continue\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_ints = [x for x in lst if x < 0]\n    if not neg_ints:\n        return None, None\n    else:\n        largest_neg = max(neg_ints)\n    \n    pos_ints = [x for x in lst if x > 0]\n    if not pos_ints:\n        return largest_neg, None\n    else:\n        smallest_pos = min(pos_ints)\n    \n    return largest_neg, smallest_pos"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif isinstance(a, float) or isinstance(b, float):\n        return max(a, b)\n    elif isinstance(a, str) or isinstance(b, str):\n        return max(float(a), float(b))\n    else:\n        return max(a, b)"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    else:\n        return n / 2 == 2"}
{"task_id": "HumanEval/139", "completion": "    if n <= 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    i = 0\n    while i < len(text):\n        if text[i] == \" \":\n            result += \"_\"\n            while i < len(text) and text[i] == \" \":\n                i += 1\n        elif text[i] == \"-\":\n            result += \"-\"\n        else:\n            result += text[i]\n        i += 1\n    return result"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 10 or len(file_name) < 4:\n        return \"No\"\n    if file_name[0] == \".\" or file_name[-1] == \".\":\n        return \"No\"\n    if file_name.count(\".\") != 1 or file_name.count(\" \") != 0:\n        return \"No\"\n    if not file_name[0].isalpha() or not file_name[-4:].lower() in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i]**2\n        elif i % 4 == 0:\n            result += lst[i]**3\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    primes = []\n    for word in words:\n        is_prime = True\n        for char in word:\n            if char.isalpha():\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(word)\n    return \" \".join(primes)"}
{"task_id": "HumanEval/144", "completion": "    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n\n    return (num_x * num_n) % den_n == 0"}
{"task_id": "HumanEval/145", "completion": "    def get_sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    nums.sort(key=lambda x: (get_sum_of_digits(x), nums.index(x)))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 2 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    max_triples = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    max_triples += 1\n    return max_triples"}
{"task_id": "HumanEval/148", "completion": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets:\n        return ()\n    if planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/149", "completion": "    odd_length_words = [word for word in lst if len(word) % 2 != 0]\n    sorted_odd_length_words = sorted(odd_length_words)\n    for i in range(len(lst)):\n        if len(lst[i]) % 2 != 0:\n            lst[i] = sorted_odd_length_words[i]\n    return sorted(lst)"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n        return x\n    elif n == 2:\n        return y\n    else:\n        return x_or_y(n-1, x, y)"}
{"task_id": "HumanEval/151", "completion": "    sum_of_squares = 0\n    for num in lst:\n        if num >= 0 and int(num) % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares"}
{"task_id": "HumanEval/152", "completion": "    result = []\n\tfor i in range(len(game)):\n\t\tif game[i] == guess[i]:\n\t\t\tresult.append(0)\n\t\telse:\n\t\t\tresult.append(abs(game[i]-guess[i]))\n\treturn result"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    result = ''\n    for ext in extensions:\n        cap_count = sum(1 for c in ext if c.isupper())\n        sm_count = len(ext) - cap_count\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            result = class_name + '.' + ext\n    return result"}
{"task_id": "HumanEval/154", "completion": "    a = a.lower()\n    b = b.lower()\n    if len(a)!=len(b):\n        return False\n    if a==b:\n        return True\n    for i in range(len(a)):\n        if a[i:] + a[:i] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    num_str = str(num)\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = len(num_str) - even_count\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    val = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100]\n    syms = ['m', 'cm', 'd', 'cd', 'xc', 'x', 'ix', 'i', 'v', 'vi']\n    roman_numeral = ''\n    i = 0\n    while number > 0 and i < len(val):\n        for _ in range(number // val[i]):\n            roman_numeral += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_numeral"}
{"task_id": "HumanEval/157", "completion": "    return (a**2 + b**2 == c**2)"}
{"task_id": "HumanEval/158", "completion": "    max_char = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_char:\n            max_char = len(word)\n            max_word = word\n        elif len(word) == max_char:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    total = number + need\n    if total > remaining:\n        number = max(number, remaining)\n        need = remaining - number\n        remaining = 0\n    else:\n        number = total\n        need = 0\n        remaining -= number\n    return [number, need, remaining]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            stack.append(operand[i])\n        elif operator[i] == '-':\n            stack.append(-operand[i])\n        elif operator[i] == '*':\n            num = stack.pop()\n            stack.append(num * operand[i])\n        elif operator[i] == '/':\n            num = stack.pop()\n            stack.append(num // operand[i])\n        elif operator[i] == '**':\n            num = stack.pop()\n            stack.append(num ** operand[i])\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result if len(result) > 0 else result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    def even_digits(num):\n        digits = [int(x) for x in str(num)]\n        return [x for x in digits if x % 2 == 0]\n\n    return sorted([num for num in range(a, b+1) if even_digits(num)])"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                result.append(stack.pop())\n            stack.pop()  # pop '('\n    return result"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n\tdecimal_part = number - integer_part\n\treturn decimal_part"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        if op > 0:\n            balance += op\n        else:\n            balance -= abs(op)\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    level = 0\n    max_level = 0\n    max_level_count = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            if len(stack) > max_level:\n                max_level = len(stack)\n                max_level_count = 1\n            elif len(stack) == max_level:\n                max_level_count += 1\n        elif char == ')':\n            if stack:\n                stack.pop()\n    return [max_level_count] * len(paren_string.split())"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    return sum(numbers), 1 if not numbers else reduce(lambda x, y: x * y, numbers)"}
{"task_id": "HumanEval/9", "completion": "    max_so_far = float('-inf')\n    rolling_maxes = []\n    for num in numbers:\n        max_so_far = max(num, max_so_far)\n        rolling_maxes.append(max_so_far)\n    return rolling_maxes"}
{"task_id": "HumanEval/10", "completion": "    if is_palindrome(string):\n        return string\n\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            result += str(int(a[i]) ^ int(b[i]))\n        else:\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    result = ''\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/13", "completion": "    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    result = []\n    for i in range(n+1):\n        result.append(str(i))\n    return ' '.join(result)"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    for note in music_string:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    while substring in string:\n        count += 1\n        string = string.replace(substring, '', 1)\n    return count"}
{"task_id": "HumanEval/19", "completion": "    nums = numbers.split()\n    nums.sort(key=lambda x: int(x))\n    return ' '.join(nums)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (float('-inf'), float('inf'))\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return \"\"\n    result = strings[0]\n    for i in range(1, len(strings)):\n        result += strings[i]\n    return result"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds a zero of a polynomial with given coefficients.\n    returns a zero point of the given polynomial\n    \"\"\"\n    if len(xs) % 2 == 1:\n        return \"No zero point found\"\n    else:\n        n = len(xs)\n        return float((-1) ** (n + 1)) * xs[0] / xs[n // 2]"}
{"task_id": "HumanEval/33", "completion": "    l.sort(key=lambda x: (x % 3, l.index(x)))\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    if not l:\n        return None\n    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(11, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    even = [x for x in l if x % 2 == 0]\n    even.sort()\n    odd = [l[i] for i in range(len(l)) if i % 2 != 0]\n    return odd + even"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    takes encoded string and returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode each group. Unless group has fewer elements than 3.\n    groups = [encode_cyclic(group) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\n# Example usage\ns = \"hello world\"\nencoded = encode_cyclic(s)\nprint(encoded)  # Output: hlohello world\nprint(decode_cyclic(encoded))  # Output: hello world"}
{"task_id": "HumanEval/39", "completion": "    if n <= 0:\n        return \"Invalid input\"\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    \n    fib = [0, 1]\n    while fib[-1] + fib[-2] <= 10**9:\n        fib.append(fib[-1] + fib[-2])\n    \n    prime = [True] * (max(fib) + 1)\n    p = 2\n    while p * p <= max(fib):\n        if prime[p]:\n            for i in range(p * p, max(fib) + 1, p):\n                prime[i] = False\n        p += 1\n    \n    for i in range(len(fib)-1, -1, -1):\n        if prime[fib[i]]:\n            return fib[i]\n\n    return -1"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return (n * (n - 1)) // 2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    return str(x) in base(x) for base in bases"}
{"task_id": "HumanEval/45", "completion": "    area = 0.5 * a * h\n    return area"}
{"task_id": "HumanEval/46", "completion": "    a, b, c = 0, 0, 0\n    for i in range(5, n + 1):\n        c = a + b + c\n        a, b = b, c\n    return c"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    if n == 0:\n\t\treturn 0\n\telse:\n\t\treturn (n * pow(2, (n-1)*2, p)) % p"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string from encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        fib_seq = [1, 1]\n        for i in range(2, n):\n            fib_seq.append(fib_seq[i-1] + fib_seq[i-2])\n        return fib_seq"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if not l:\n        return True\n    increasing = True\n    for i in range(1, len(l)):\n        if l[i] == l[i-1]:\n            continue\n        elif l[i] > l[i-1]:\n            if not increasing:\n                return False\n        else:\n            increasing = False\n    return True"}
{"task_id": "HumanEval/58", "completion": "    s = set(l1) & set(l2)\n    return sorted(s)"}
{"task_id": "HumanEval/59", "completion": "    max_prime = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            is_prime = True\n            for j in range(2, int(i ** 0.5) + 1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime and i > max_prime:\n                max_prime = i\n    return max_prime"}
{"task_id": "HumanEval/60", "completion": "    return (n*(n+1))//2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in brackets:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = [0]*n\n    for i in range(n):\n        result[i] = xs[i] * (i + 1)\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for i in range(2, n+1):\n            c = a + b\n            a, b = b, c\n        return c"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    digits = list(str(x))\n    shift = shift % len(digits)\n    return \"\".join(digits[-shift:] + digits[:-shift])"}
{"task_id": "HumanEval/66", "completion": "    uppercase_chars = [char for char in s if char.isupper()]\n    if not uppercase_chars:\n        return 0\n    else:\n        return sum(ord(char) for char in uppercase_chars)"}
{"task_id": "HumanEval/67", "completion": "    total_apples = 0\n    total_oranges = 0\n    mango = 0\n    for i in s.split():\n        if i.isdigit():\n            count = int(i)\n        else:\n            fruit = i.lower()\n            if fruit == \"apples\":\n                total_apples += count\n            elif fruit == \"oranges\":\n                total_oranges += count\n    mango = n - (total_apples + total_oranges)\n    return mango"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = min(arr[::2])\n    min_index = arr.index(min_val)\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    max_freq = -1\n    result = -1\n    for num in lst:\n        if num > 0 and lst.count(num) >= num:\n            if num > max_freq:\n                max_freq = num\n                result = num\n    return result"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    result = [min(lst)]\n    lst.remove(min(lst))\n    while lst:\n        result.append(max(lst))\n        lst.remove(max(lst))\n    return result + [min(lst)] * len(lst) if lst else []"}
{"task_id": "HumanEval/71", "completion": "    sides = [a, b, c]\n    sides.sort()\n    if sides[2] > sides[0] + sides[1]:\n        return -1\n    else:\n        return round(0.5 * sides[0] * sides[1] * (sides[0] + sides[1] - sides[2]), 2)"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and sum(q)/len(q) == sum(q[::-1])/len(q[::-1]):\n        return True\n    return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "    primes = []\n    for i in range(2, a):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        if len(primes) == 3:\n            if a == primes[0] * primes[1] * primes[2]:\n                return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if (n <= 0 or x <= 0):\n\t\treturn False\n\tif (x == 1):\n\t\treturn True\n\tfor i in range(2, int(x**0.5) + 1):\n\t\tif (n == i and x == i**n):\n\t\t\treturn True\n\treturn False"}
{"task_id": "HumanEval/77", "completion": "    cube_root = a ** (1/3)\n    return cube_root.is_integer()"}
{"task_id": "HumanEval/78", "completion": "    hex_key = {\n        \"0\": \"0\",\n        \"1\": \"1\",\n        \"2\": \"2\",\n        \"3\": \"3\",\n        \"4\": \"4\",\n        \"5\": \"5\",\n        \"6\": \"6\",\n        \"7\": \"7\",\n        \"8\": \"8\",\n        \"9\": \"9\",\n        \"A\": \"A\",\n        \"B\": \"B\",\n        \"C\": \"C\",\n        \"D\": \"D\",\n        \"E\": \"E\",\n        \"F\": \"F\"\n    }\n    decimal_num = 0\n    i = 0\n    while num:\n        digit = num[-1]\n        decimal_num += int(hex_key[digit]) * (10 ** i)\n        num = num[:-1]\n        i += 1\n    return decimal_num\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_primes_hex(num):\n    decimal_num = hex_key(num)\n    count = 0\n    for i in range(1, decimal_num + 1):\n        if decimal_num % i == 0 and is_prime(i):\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db1db\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i:i+3] == s[i+1:i+3]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4:\n            letter_grades.append('A')\n        elif 3.7 <= grade < 4:\n            letter_grades.append('A-')\n        elif 3.3 <= grade < 3.7:\n            letter_grades.append('B')\n        elif 2.7 <= grade < 3.3:\n            letter_grades.append('B-')\n        elif 2.3 <= grade < 2.7:\n            letter_grades.append('C+')\n        elif 1.7 <= grade < 2.3:\n            letter_grades.append('C')\n        elif 1.3 <= grade < 1.7:\n            letter_grades.append('C-')\n        elif 1 <= grade < 1.3:\n            letter_grades.append('D')\n        elif 0.7 <= grade < 1:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    length = len(string)\n    return is_prime(length)"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n\tif (n == 1):\n\t\treturn 1\n\tfor i in range(1, 10):\n\t\tcount += (10 - i) * i\n\treturn count"}
{"task_id": "HumanEval/84", "completion": "    res = \"\"\n    while N > 0:\n        res = str(N % 2) + res\n        N //= 2\n    return res"}
{"task_id": "HumanEval/85", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and i % 3 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if word.strip():  # Ignore blank spaces\n            result.append(sorted(word))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return result"}
{"task_id": "HumanEval/88", "completion": "    if len(array) < 2:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shifted_index = (alphabet.index(char) + 2) * 2 % 26\n            result += alphabet[shifted_index]\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    \n    min_val = float('inf')\n    second_min_val = float('inf')\n    \n    for num in lst:\n        if num < min_val:\n            second_min_val = min_val\n            min_val = num\n        elif num < second_min_val and num != min_val:\n            second_min_val = num\n    \n    return second_min_val if second_min_val != float('inf') else None"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('. ')\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    return (x == y + z) or (y == x + z) or (z == x + y)"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                result += chr((ord(char) + 2) % 26 + 65)\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    max_prime = max(lst)\n    return sum_of_digits(max_prime)\n\n# Sample input\nlst = [0,8,1,2,1,7]\nprint(skjkasdkd(lst))"}
{"task_id": "HumanEval/95", "completion": "    if len(dict)==0:\n\t\treturn False\n\tfor key in dict:\n\t\tif (type(key)!=str):\n\t\t\treturn False\n\t\tif (key.islower() or key.isupper()):\n\t\t\tcontinue\n\t\telse:\n\t\t\treturn False\n\treturn True"}
{"task_id": "HumanEval/96", "completion": "    result = []\n    num = 2\n    i = 2\n    while len(result) < n:\n        if num < n:\n            result.append(num)\n        i += 1\n        num += i\n    return result"}
{"task_id": "HumanEval/97", "completion": "    return (a*b)%10"}
{"task_id": "HumanEval/98", "completion": "    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num == 0:\n        return 0\n    elif num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n + 1):\n        result.append(n + (i * 2) - 1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 != 0 or y % 2 != 0:\n        return -1\n    else:\n        return max(i for i in range(x, y+1) if i % 2 == 0 and i % 4 == 0)"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    return bin(round((m - n + 1) / (m - n + 1)))[2:]"}
{"task_id": "HumanEval/104", "completion": "    res = []\n    for num in x:\n        while(num):\n            if(num%10)%2==0:\n                break\n            num = num // 10\n        else:\n            res.append(num)\n    return sorted(res)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: len(str(x)), reverse=True)\n\ndef between_one_and_nine(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(num)\n    return result\n\ndef replace_by_name(arr):\n    result = []\n    for num in arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result\n\ndef sortAndReplace(arr):\n    if len(arr) == 0:\n        return []\n    sorted_between_1_9 = by_length(between_one_and_nine(arr))\n    reversed_between_1_9 = sorted_between_1_9[::-1]\n    replaced_names = replace_by_name(reversed_between_1_9)\n    return replaced_names"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(1)\n            for j in range(2, i+1):\n                result[i-1] *= j\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even_count = n // 2\n    odd_count = n - even_count\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(n):\n        s = 0\n        while n:\n            s += n % 10\n            n //= 10\n        return s\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(abs(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))"}
{"task_id": "HumanEval/110", "completion": "    evens = [x for x in lst1 if x % 2 == 0]\n    odds = [x for x in lst1 if x % 2 != 0]\n    if len(evens) > len(odds) + 1:\n        return \"NO\"\n    else:\n        for i in range(len(evens)):\n            lst1[lst1.index(evens[i])], lst2[lst2.index(odds[i])] = lst2[lst2.index(odds[i])], lst1[lst1.index(evens[i])]\n        return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    count = {}\n    max_count = 0\n    max_letter = \"\"\n    for word in words:\n        for char in word:\n            if char in count:\n                count[char] += 1\n            else:\n                count[char] = 1\n            if count[char] > max_count:\n                max_count = count[char]\n                max_letter = char\n    result = {max_letter: max_count}\n    for char, count in count.items():\n        if count == max_count:\n            result[char] = count\n    return result"}
{"task_id": "HumanEval/112", "completion": "    result = s\n    for i in range(len(result)):\n        if result[i] in c:\n            result = result[:i] + result[i+1:]\n    return result, result == result[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                odd_count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_count, len(s), len(s), len(lst)))\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    row, col = len(grid), len(grid[0])\n    result = 0\n    for i in range(row):\n        temp = grid[i][0]\n        for j in range(1, col):\n            temp = min(temp, grid[i][j])\n        result += math.ceil(temp / capacity)\n    return result"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    vowels = set(\"aeiouAEIOU\")\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char not in vowels)\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    vowel = \"\"\n    for i in range(len(word) - 1, 1, -1):\n        if word[i] in vowels and word[i - 1] in consonants and word[i + 1] in consonants:\n            return word[i]\n    return vowel"}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst[0] + lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if len(stack) == 0 else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[::-1][:k]"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "    num_digits = lambda x: len(str(x))\n    result = 0\n    for num in arr[:k]:\n        if num_digits(num) <= 2:\n            result += num\n    return result"}
{"task_id": "HumanEval/123", "completion": "    if n < 1:\n        return []\n    collatz_sequence = []\n    while n not in collatz_sequence:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return collatz_sequence"}
{"task_id": "HumanEval/124", "completion": "    if date == \"\":\n        return False\n    if date.count('-') != 2:\n        return False\n    if date.split('-')[0].isdigit() and date.split('-')[1].isdigit() and date.split('-')[2].isdigit():\n        day, month, year = map(int, date.split('-'))\n        if day <= 0 or day > 31 or month <= 0 or month > 12 or year <= 0:\n            return False\n        if (month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12) and day <= 0 or day > 31:\n            return False\n        elif (month == 4 or month == 6 or month == 9 or month == 11):\n            if day <= 0 or day > 30:\n                return False\n        elif month == 2:\n            if day <= 0 or day > 29:\n                return False\n        return True\n    return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for i in range(26) if i % 2 != 0)"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if length < 2:\n        return \"NO\"\n    for i in range(2, length):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    positive_count = 0\n    negative_count = 0\n    zero_count = 0\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        elif num > 0:\n            positive_count += 1\n        else:\n            negative_count += 1\n    if zero_count > 0:\n        return 0\n    if positive_count > 0 and negative_count > 0:\n        return -1 * positive_count * negative_count\n    return positive_count * negative_count"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    ans = []\n    def dfs(x, y, visited, path):\n        if len(path) == k:\n            ans.append(path[:])\n            return\n        visited[x][y] = True\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                dfs(nx, ny, visited, path + [grid[nx][ny]])\n        visited[x][y] = False\n\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, visited, [grid[i][j]])\n\n    return sorted(ans[0])"}
{"task_id": "HumanEval/130", "completion": "    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [1] + [1 + x / 2 for x in tri(n // 2)]\n    else:\n        return [1] + [1 + x / 2 for x in tri(n // 2)] + [1 + x / 2 for x in tri((n + 1) // 2)]"}
{"task_id": "HumanEval/131", "completion": "    if n < 10:\n        if n % 2 != 0:\n            return n\n        else:\n            return 0\n    else:\n        product = 1\n        while n > 0:\n            digit = n % 10\n            if digit % 2 != 0:\n                product *= digit\n            n //= 10\n        return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in string:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += (int(num + 0.5) ** 2)\n    return result"}
{"task_id": "HumanEval/134", "completion": "    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and not last_char.isalnum():\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    max_idx = -1\n    for i in range(1, n):\n        if arr[i] > max_idx and arr[i] <= max_idx:\n            max_idx = i\n    return max_idx"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [x for x in lst if x < 0]\n    if not neg_integers:\n        return None, None\n    max_neg_integer = max(neg_integers)\n    \n    pos_integers = [x for x in lst if x > 0]\n    if not pos_integers:\n        return max_neg_integer, None\n    min_pos_integer = min(pos_integers)\n    \n    return max_neg_integer, min_pos_integer"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif isinstance(a, int) and isinstance(b, int):\n        return int(max(a, b))\n    elif isinstance(a, float) and isinstance(b, float):\n        return float(max(a, b))\n    elif isinstance(a, str) and isinstance(b, str):\n        return max(a, b)\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    if n % 2 == 0 and n % 3 == 0:\n        return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    if n <= 1:\n        return 1\n    else:\n        return n * special_factorial(n - 1)"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 10:\n        return \"No\"\n    if file_name.count('.') != 1:\n        return \"No\"\n    if file_name[0] == '.' or file_name[-1] == '.':\n        return \"No\"\n    if file_name.count(' ') != 0:\n        return \"No\"\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    new_words = [word for word in words if len(word) in primes]\n    return ' '.join(new_words)"}
{"task_id": "HumanEval/144", "completion": "    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n\n    if num_x * den_n % num_n == 0 and den_x * num_n % num_n == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(n):\n        return sum([int(digit) for digit in str(n)])\n\n    nums.sort(key=lambda x: (digit_sum(x), nums.index(x)))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 2 != 0) and (int(str(num)[-1]) % 2 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    if planet1 in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"] and planet2 in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        return tuple(planets[planets.index(planet1)+1:planets.index(planet2)])\n    else:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "    if n % 2 == 0:\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    odd_numbers = [num for num in lst if num % 2 != 0 and num >= 0 and num % 1 == 0]\n    if not odd_numbers:\n        return 0\n    else:\n        return sum(odd_numbers) ** 2"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = ''\n    for extension in extensions:\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        strength = (cap_count - sm_count)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n\t\treturn False\n\tlen_a = len(a)\n\tfor i in range(len_a):\n\t\tsubstr = a[i:] + a[:i]\n\t\tif b in substr:\n\t\t\treturn True\n\treturn False"}
{"task_id": "HumanEval/155", "completion": "    num_str = str(abs(num))\n    even_count = len([int(digit) for digit in num_str if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in num_str if int(digit) % 2 != 0])\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    val = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100]\n    syms = ['m', 'cm', 'd', 'cd', 'xc', 'x', 'ix', 'vi', 'vii', 'xvi']\n    roman_number = \"\"\n    for i in range(len(val)):\n        for _ in range(number // val[i]):\n            roman_number += syms[i]\n            number -= val[i]\n    return roman_number"}
{"task_id": "HumanEval/157", "completion": "    if a == b or b == c or c == a:\n        return False\n    elif a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_chars = -1\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_word = word\n        elif len(set(word)) == max_chars:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    total_carrots = number + need\n    remaining_carrots = max(0, total_carrots - remaining)\n    hungry_carrots = total_carrots - remaining_carrots\n    return [total_carrots, hungry_carrots]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            stack.append(stack.pop() + stack.pop())\n        elif operator[i] == '*':\n            stack.append(stack.pop() * stack.pop())\n        elif operator[i] == '-':\n            stack.append(-stack.pop())\n        elif operator[i] == '//':\n            x = stack.pop()\n            y = stack.pop()\n            stack.append(y // x)\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not result:\n        return s[::-1]\n    return result"}
{"task_id": "HumanEval/162", "completion": "    if text is None or text == '':\n        return None\n    \n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for i in range(a, b+1):\n        if all(int(digit) % 2 == 0 for digit in str(i)):\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                groups.append(stack.pop())\n            stack.pop()\n    groups.extend(stack)\n    return ''.join(groups).split()"}
{"task_id": "HumanEval/2", "completion": "    integer = int(number)\n    return number - integer"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        if op > 0:\n            balance += op\n        else:\n            balance -= op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.append(delimeter)\n        result.append(num)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            max_depth = max(max_depth, len(stack))\n    return [max_depth] * len(paren_string)"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    return (sum(numbers), 1) if numbers else (0, 1)"}
{"task_id": "HumanEval/9", "completion": "    max_so_far = max_till_now = numbers[0]\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        max_till_now = max(num, max_till_now + num)\n        max_so_far = max(max_so_far, max_till_now)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    n = len(string)\n    i = n-1\n    while i >= 0 and not is_palindrome(string[:i+1]):\n        i -= 1\n    if i < 0:\n        return string + string[::-1]\n    else:\n        return string"}
{"task_id": "HumanEval/11", "completion": "    if len(a) != len(b):\n        return \"Invalid Input\"\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    \n    max_length = 0\n    result = None\n    \n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            result = string\n            \n    return result"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    for char in music_string:\n        if char == 'o':\n            result.append(4)\n        elif char == 'o|':\n            result.append(2)\n        elif char == '.|':\n            result.append(1)\n    return result"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    i = 0\n    while i <= len(string) - len(substring):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = numbers.split()\n    num_list.sort(key=lambda x: int(x))\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    scale = max_num - min_num\n    return [(num - min_num) / scale for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    if n < 4:\n\t\treturn n\n\tfor i in range(2, n//2 + 1):\n\t\tif n % i == 0:\n\t\t\treturn i\n\treturn n"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n / divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return \"\"\n    result = strings[0]\n    for string in strings[1:]:\n        result += string\n    return result"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n**0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds all roots of a given polynomial.\n    Return a list of roots of the polynomial.\n    \"\"\"\n    roots = []\n    for i in range(1, len(xs) + 1):\n        val = poly(xs, i)\n        if val == 0:\n            roots.append(i)\n        if val < 0:\n            for j in range(i + 1, len(xs) + 1):\n                val = poly(xs, j)\n                if val == 0:\n                    roots.append(j)\n    return roots"}
{"task_id": "HumanEval/33", "completion": "    for i in range(len(l)):\n        if i % 3 != 0:\n            l[i] = sorted([x for x in l if x % 3 == i % 3])\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = float('-inf')\n    for val in l:\n        if val > max_val:\n            max_val = val\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).find('7') != -1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    for i in range(0, len(l)-1, 2):\n        if i+1 < len(l):\n            l[i], l[i+1] = l[i+1], l[i]\n    l.sort()\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    takes encoded string and returns decoded string.\n    \"\"\"\n    return encode_cyclic(s[::-1])[::-1]"}
{"task_id": "HumanEval/39", "completion": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(3, n+1):\n        a, b = b, a + b\n    \n    return b"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return (n*(n-1))//2"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    s = set()\n    for num in l:\n        if -num in s:\n            return True\n        s.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    area = 0.5 * a * h\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    a, b = 0, 2\n    for _ in range(3, n + 1):\n        a, b = b, a + b + b\n    return b"}
{"task_id": "HumanEval/47", "completion": "    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[n//2 - 1] + sorted_l[n//2]) / 2\n    else:\n        return sorted_l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string from encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    new_text = \"\"\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    while (y != 0):\n\t\tcarry = x & y\n\t\tx = x ^ y\n\t\ty = carry << 1\n\treturn x"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in brackets:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) <= 1:\n        return True\n    increasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n            break\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n            break\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1 & set2)"}
{"task_id": "HumanEval/59", "completion": "    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return factor"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n\tys = [0]*n\n\tfor i in range(n):\n\t\tif i == 0:\n\t\t\tys[i] = xs[i]\n\t\telse:\n\t\t\tys[i] = ys[i-1] + xs[i]\n\treturn ys"}
{"task_id": "HumanEval/63", "completion": "    fib = [0] * (n+1)\n    fib[0] = 0\n    fib[1] = 0\n    for i in range(2, n+1):\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3]\n    return fib[n]"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    s = str(x)\n    n = len(s)\n    shift = shift % n\n    return s[-shift:] + s[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "    s = s.split()\n    apples = int(s[0])\n    oranges = int(s[1])\n    return n - (apples + oranges)"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    smallest_even_value = float('inf')\n    smallest_even_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < smallest_even_value:\n            smallest_even_value = val\n            smallest_even_index = i\n    return [smallest_even_value, smallest_even_index] if smallest_even_index != -1 else []"}
{"task_id": "HumanEval/69", "completion": "    max_freq = 0\n    max_val = -1\n    \n    for num in lst:\n        if num <= 0 or lst.count(num) < num:\n            continue\n        \n        if num > max_val:\n            max_freq = lst.count(num)\n            max_val = num\n        elif num == max_val:\n            max_freq = max(max_freq, lst.count(num))\n            \n    return max_val if max_freq > 0 else -1"}
{"task_id": "HumanEval/70", "completion": "    if len(lst) <= 1:\n        return lst\n\n    min_val = min(lst)\n    max_val = max(lst)\n    result = [min_val]\n    lst.remove(min_val)\n\n    for _ in range(len(lst)):\n        if lst:\n            max_val = max(lst)\n            result.append(max_val)\n            lst.remove(max_val)\n        else:\n            break\n\n    result.extend(lst)\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and len(set(q))==1:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    diff = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            diff += 1\n    return diff"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "    if a < 4:\n        return False\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "completion": "    # check if x is a perfect power of n\n    root = x ** (1/n)\n    return root.is_integer()"}
{"task_id": "HumanEval/77", "completion": "    n = round(a ** (1 / 3))\n    return (n ** 3 == a)"}
{"task_id": "HumanEval/78", "completion": "    dic = {\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    res = 0\n    n = len(num)\n    for i in range(n):\n        res += dic[num[i]] * (16 ** (n - i - 1))\n    return res\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef countPrimeDigits(num):\n    hex_val = hex_key(num)\n    count = 0\n    while hex_val > 0:\n        digit = hex_val % 16\n        hex_val = hex_val // 16\n        if is_prime(digit):\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    binary = '0' * (16 - len(binary)) + binary\n    return 'db' + binary + 'db'"}
{"task_id": "HumanEval/80", "completion": "    s = s.lower()\n    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n-2):\n        if s[i] == s[i+1] or s[i] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade > 3.7:\n            letter_grades.append('A+')\n        elif grade > 3.3:\n            letter_grades.append('A')\n        elif grade > 2.7:\n            letter_grades.append('A-')\n        elif grade > 2.3:\n            letter_grades.append('B+')\n        elif grade > 1.7:\n            letter_grades.append('B')\n        elif grade > 1.3:\n            letter_grades.append('B-')\n        elif grade > 1:\n            letter_grades.append('C+')\n        elif grade > 0.7:\n            letter_grades.append('C')\n        elif grade > 0.3:\n            letter_grades.append('C-')\n        else:\n            letter_grades.append('D')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 10\n    start = 10\n    end = 9\n    for i in range(2, n + 1):\n        start = start * 10 + 1\n        end = end * 10 + 1\n    return start + end"}
{"task_id": "HumanEval/84", "completion": "    result = 0\n    while N:\n        result += N % 2\n        N //= 2\n    return bin(result)"}
{"task_id": "HumanEval/85", "completion": "    total = 0\n    for i in range(1, len(lst), 2):\n        total += lst[i]\n    return total"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    anti_shuffled_words = [sorted(word) for word in words]\n    return ' '.join(anti_shuffled_words)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, len(row) - j - 1))\n    return sorted(result, key=lambda tup: (tup[0], -tup[1]))"}
{"task_id": "HumanEval/88", "completion": "    if len(array) < 2:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    second_min_val = float('inf')\n    for num in lst:\n        if num < min_val:\n            second_min_val = min_val\n            min_val = num\n        elif num < second_min_val and num != min_val:\n            second_min_val = num\n    return second_min_val if second_min_val != float('inf') else None"}
{"task_id": "HumanEval/91", "completion": "    boredom_count = 0\n    words = S.split()\n    for word in words:\n        if word.startswith('I'):\n            if len(word) > 1 and word[1] in ['.', '?', '!']:\n                boredom_count += 1\n    return boredom_count"}
{"task_id": "HumanEval/92", "completion": "    return (x == y + z) or (x == z + y) or (y == z + x) or (y == x + z)"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                result += chr((ord(char.lower()) + 2 - 97) % 26 + 97)\n            else:\n                result += char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    max_prime = -1\n    max_prime_digits_sum = 0\n    \n    for num in lst:\n        if num > 1:\n            for i in range(2, int(num ** 0.5) + 1):\n                if (num % i == 0):\n                    break\n            else:\n                max_prime = max(max_prime, num)\n    \n    max_prime_digits_sum = sum(int(digit) for digit in str(max_prime))\n    \n    return max_prime_digits_sum"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n\t\treturn False\n\t\n\tfor key in dict:\n\t\tif (type(key) != str):\n\t\t\treturn False\n\t\tif (key != key.lower() and key != key.upper()):\n\t\t\treturn False\n\t\n\treturn True"}
{"task_id": "HumanEval/96", "completion": "    result = []\n    num = 2\n    while len(result) < n:\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime and num < n:\n            result.append(num)\n        num += 1\n    return result"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num % 0.5 == 0:\n        return int(num)\n    else:\n        return int(num + (num % 0.5 * (1 - 2 * (num % 2))))"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n + 1):\n        if n % 2 == 0:\n            result.append(2 * i * (i + 1) // 2)\n        else:\n            result.append((2 * i + 1) * i // 2)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    if \" \" in s:\n        return s.split(\" \")\n    else:\n        return s.split(\",\")"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -2):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    sum_of_range = (m - n + 1) * (n + m) // 2\n    return bin(sum_of_range // (m - n + 1))[2:]"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        num_str = str(num)\n        if all(int(digit) % 2 != 0 for digit in num_str):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    result = sorted(arr, key=lambda x: len(str(x)))\n    return result\n\ndef by_name(arr):\n    result = sorted(arr, key=lambda x: str(x))\n    return result\n\ndef between_1_9(arr):\n    result = [x for x in arr if 1 <= x <= 9]\n    return result\n\ndef replace_digits(arr):\n    result = [str(x).replace(str(x), str(i)) for x in arr]\n    return result\n\ndef by_name_length(arr):\n    result = sorted(arr, key=lambda x: len(str(x)))\n    return result\n\ndef sort_and_replace(arr):\n    if not arr:\n        return []\n\n    arr = by_length(arr)\n    arr = between_1_9(arr)\n    arr = by_name(arr)\n    arr = replace_digits(arr)\n    arr = by_name_length(arr)\n\n    return arr"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i * sum([i for i in range(1, i + 1)]))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    def get_sum_of_digits(num):\n        return sum([int(digit) for digit in str(num)])\n\n    def is_negative(num):\n        return num < 0\n\n    count = 0\n    for num in arr:\n        if not is_negative(num):\n            if get_sum_of_digits(num) > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    count = 0\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0 and lst2[i] % 2 == 0:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n            count += 1\n    if count % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    histogram = {}\n    words = test.split()\n    for word in words:\n        for letter in word:\n            if letter in histogram:\n                histogram[letter] += 1\n            else:\n                histogram[letter] = 1\n    return histogram"}
{"task_id": "HumanEval/112", "completion": "    new_s = s\n    for char in c:\n        new_s = new_s.replace(char,'')\n    return new_s, new_s == new_s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    def count_odds(s):\n        count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                count += 1\n        return count\n\n    result = []\n    for i in lst:\n        result.append(\"the number of odd elements in the string {} of the input.\".format(count_odds(i)))\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    result = 0\n    for row in grid:\n        well = [0] * len(row)\n        for col in row:\n            well[col] += 1\n        max_water = 0\n        for j in range(len(row)):\n            water = well[j]\n            for i in range(len(grid)):\n                if i != j:\n                    water += grid[i][j]\n            max_water = max(max_water, water)\n        if max_water > capacity:\n            result += math.ceil(max_water / capacity) - 1\n    return result"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    \n    def is_consonant(c):\n        return c.lower() not in \"aeiou\"\n    \n    def count_consonants(word):\n        return sum(1 for char in word if is_consonant(char))\n    \n    words = s.split()\n    result = []\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n    \n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    vowel_between_consonants = \"\"\n    consonants_count = 0\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in consonants:\n            consonants_count += 1\n        elif word[i] in vowels:\n            if consonants_count > 0:\n                vowel_between_consonants = word[i]\n                break\n    return vowel_between_consonants"}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        else:\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[::-1][:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        num = arr[i]\n        if len(str(num)) <= 2:\n            sum += num\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    def collatz(num):\n        if num % 2 == 0:\n            return num // 2\n        else:\n            return 3 * num + 1\n\n    def dfs(node, path):\n        if node == 1:\n            return path\n        if node in visited:\n            return\n        visited.add(node)\n        for next_node in collatz(node):\n            if next_node % 2 != 0:\n                dfs(next_node, path + [next_node])\n    \n    visited = set()\n    path = []\n    dfs(n, path)\n    return [x for x in path if x % 2 != 0]"}
{"task_id": "HumanEval/124", "completion": "    date_format = \"%m-%d-%Y\"\n    try:\n        if date != '':\n            datetime.strptime(date, date_format)\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for i in range(26):\n            if chr(i+ord('a')) in txt:\n                count += 1\n        return count"}
{"task_id": "HumanEval/126", "completion": "    seen = set()\n    prev = float('-inf')\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n        if num < prev:\n            return False\n        prev = num\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if isPrime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef isPrime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    \n    prod = 1\n    for num in arr:\n        if num < 0:\n            prod *= -1\n        elif num != 0:\n            prod *= abs(num)\n    \n    return prod"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    ans = []\n    visited = set()\n    \n    def bfs(x, y, val):\n        queue = [(x, y, val)]\n        visited.add((x, y))\n        while queue:\n            x, y, val = queue.pop(0)\n            if len(ans) == k:\n                return True\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                    queue.append((nx, ny, grid[nx][ny]))\n                    visited.add((nx, ny))\n                    if len(ans) < k and grid[nx][ny] == val:\n                        ans.append(val)\n        return False\n    \n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] not in ans:\n                if bfs(i, j, grid[i][j]):\n                    return ans\n    \n    return ans"}
{"task_id": "HumanEval/130", "completion": "    a, b = 0, 1\n    tribonacci = [0, 1]\n    for i in range(2, n + 1):\n        c = a + b\n        a, b = b, c\n        tribonacci.append(c)\n    return tribonacci"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n = n // 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return True\n    return False"}
{"task_id": "HumanEval/133", "completion": "    total = 0\n    for num in lst:\n        if num < 0:\n            num = -num\n        total += num**2\n    return total"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if len(words) == 0:\n        return False\n    last_char = words[-1][-1]\n    return last_char.isalpha() and last_char not in words[-1]"}
{"task_id": "HumanEval/135", "completion": "    max_index = -1\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "    min_positive = float('inf')\n    max_negative = float('-inf')\n    \n    for num in lst:\n        if num < 0:\n            max_negative = max(max_negative, num)\n        if num > 0:\n            min_positive = min(min_positive, num)\n            \n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "    a_type = type(a)\n    b_type = type(b)\n    if a_type == b_type:\n        if a == b:\n            return None\n        else:\n            return max(a, b)\n    elif a_type in [float, int] and b_type in [float, int]:\n        if a == b:\n            return None\n        else:\n            return max(a, b)\n    elif a_type in [float, int] and b_type == str:\n        if a == float(b):\n            return None\n        else:\n            return max(a, float(b))\n    elif a_type == str and b_type in [float, int]:\n        if float(a) == b:\n            return None\n        else:\n            return max(float(a), b)\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return n % 4 == 0"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    i = 0\n    while i < len(text):\n        if text[i] != ' ':\n            result += text[i]\n        else:\n            result += '_'\n            i += 1\n        i += 1\n    return result"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 8:\n        return \"No\"\n    if file_name.count(\".\") != 1:\n        return \"No\"\n    if file_name.count(\"\") != 1:\n        return \"No\"\n    if not file_name[0].isalpha():\n        return \"No\"\n    if not file_name[-4:].lower() in ['txt', 'exe', 'dll']:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i%3==0:\n            total += lst[i]**2\n        elif i%4==0:\n            total += lst[i]**3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_length_words = []\n    for word in words:\n        if len(word) > 1:\n            for i in range(2, len(word)):\n                if (i * i) % i == 0:\n                    break\n            else:\n                prime_length_words.append(word)\n    return ' '.join(prime_length_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    product = x_num * n_num\n    divisor = x_den * n_den\n    \n    return product % divisor == 0"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(num):\n        total = 0\n        while num > 0:\n            total += num % 10\n            num = num // 10\n        return total\n\n    nums.sort(key=lambda x: (digit_sum(x), nums.index(x)))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            if str(num)[0] % 2 != 0 and str(num)[-1] % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\",\n              \"Saturn\", \"Uranus\", \"Neptune\"]\n    try:\n        index1, index2 = planets.index(planet1), planets.index(planet2)\n        return tuple(planets[index1+1:index2])\n    except ValueError:\n        return ()"}
{"task_id": "HumanEval/149", "completion": "    odd_length_words = [word for word in lst if len(word) % 2 != 0]\n    sorted_odd_length_words = sorted(odd_length_words)\n    result = lst.copy()\n    for i in range(len(lst)):\n        if lst[i] in odd_length_words:\n            result[i] = sorted_odd_length_words.pop(0)\n    return sorted(result)"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    odd_numbers = [num for num in lst if num > 0 and int(num) % 2 != 0]\n    return sum([num*num for num in odd_numbers]) if odd_numbers else 0"}
{"task_id": "HumanEval/152", "completion": "    result=[]\n    for i in range(len(game)):\n        if game[i]==guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i]-game[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = ''\n    for extension in extensions:\n        extension_name = extension.split('.')[-1]\n        cap_count = sum(1 for char in extension_name if char.isupper())\n        lower_count = len(extension_name) - cap_count\n        strength = cap_count - lower_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    if b in a:\n        return True\n    elif b in a + a:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/155", "completion": "    digits = [int(x) for x in str(abs(num))]\n    even = sum(1 for x in digits if x % 2 == 0)\n    odd = len(digits) - even\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "    val = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]\n    syms = ['m', 'c', 'd', 'x', 'v', 'i', 'o', 'p', 'h', 'g', 'b', 'y', 'k', 'w', 'u', 'f', 's', 't', 'r', 'q', 'p', 'n', 'm']\n    \n    roman_num = ''\n    for i in range(len(val)):\n        while number >= val[i]:\n            roman_num += syms[i]\n            number -= val[i]\n    return roman_num"}
{"task_id": "HumanEval/157", "completion": "    if a + b > c and a == b == c:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    if (number + need) > remaining:\n        return [number + remaining, remaining - need]\n    else:\n        return [number + need, remaining]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    i = 0\n    while i < len(operand):\n        if operator[i] == '+':\n            x = operand.pop(i)\n            y = operand.pop(i)\n            operand.insert(i, x + y)\n            i -= 1\n        elif operator[i] == '-':\n            x = operand.pop(i)\n            y = operand.pop(i)\n            operand.insert(i, x - y)\n            i -= 1\n        elif operator[i] == '*':\n            x = operand.pop(i)\n            y = operand.pop(i)\n            operand.insert(i, x * y)\n            i -= 1\n        elif operator[i] == '//':\n            x = operand.pop(i)\n            y = operand.pop(i)\n            operand.insert(i, x // y)\n            i -= 1\n        elif operator[i] == '**':\n            x = operand.pop(i)\n            y = operand.pop(i)\n            operand.insert(i, x ** y)\n            i -= 1\n        else:\n            stack.append(operand.pop(i))\n        i += 1\n    while stack:\n        operand.append(stack.pop())\n    return operand[0]"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result if len(result) > 0 else result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        num_str = str(num)\n        if all(int(digit) % 2 == 0 for digit in num_str):\n            result.append(int(num_str))\n    return sorted(result)"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char.isalnum():\n            if stack:\n                stack[-1] += char\n            else:\n                result.append(char)\n        elif char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop())\n    return result"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimals = number - integer_part\n    return decimals"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        elif operation < 0:\n            balance -= operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    absolute_differences = abs(mean - numbers)\n    mean_absolute_deviation = sum(absolute_differences) / len(absolute_differences)\n    return mean_absolute_deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(0, len(numbers) - 1, 2):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    depth = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif char == ')' and stack:\n            stack.pop()\n            depth -= 1\n    return [max_depth] * len(paren_string.split())"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    sum_val = 0\n    product_val = 1\n    for num in numbers:\n        sum_val += num\n        product_val *= num\n    return (sum_val, product_val)"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the supplied string \"\"\"\n    if not string:\n        return string\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[i:][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            result += str(int(a[i]) ^ int(b[i]))\n        else:\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    max_len_str = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_len_str = s\n    return max_len_str"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = [string[i] for i in range(len(string))]\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    music_string = music_string.replace('||', 'o|')\n    music_string = music_string.replace('..', '.|')\n    music_list = music_string.split()\n    beats = [4 if 'o' in note else 2 if '|' in note else 1 for note in music_list]\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    overlap_count = 0\n    i, j = 0, 0\n    while i < len(string) and j < len(substring):\n        if string[i] == substring[j]:\n            j += 1\n            if j == len(substring):\n                count += 1\n                j = 0\n        i += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = numbers.split()\n    num_list.sort(key=lambda x: int(x))\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (numbers[0], numbers[0])\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return list(filter(lambda x: isinstance(x, int), values))"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    result = []\n    for num in l:\n        if num > 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n**0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero point of a given polynomial.\n    xs is list of polynomial coefficients.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Length of coefficients must be even\")\n\n    def f(x):\n        return poly(xs, x)\n\n    a, b = xs[-2], xs[-1]\n    while abs(a) < 1e-9:\n        a, b = b, f(b)\n    root = b\n    e = 1e-6\n    while abs(a) > e:\n        root, a = b, f(root)\n    return root"}
{"task_id": "HumanEval/33", "completion": "    for i in range(len(l)):\n        if i % 3 != 0:\n            continue\n        l[i] = sorted(l[i:i+3])[0]\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    return max(l)"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(7) in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    for i in range(1, len(l), 2):\n        l[i] = sorted(l[i])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    takes encoded string and returns original string.\n    \"\"\"\n    # encode_cyclic function is inverse of this function.\n    return encode_cyclic(s)"}
{"task_id": "HumanEval/39", "completion": "    fib_seq = [0, 1]\n    a, b = 1, 1\n    while True:\n        a, b = b, a + b\n        fib_seq.append(b)\n        if b >= 2**31 - 1:\n            break\n    for i in range(2, len(fib_seq)):\n        if len(set(str(fib_seq[i]))) == len(str(fib_seq[i])) and is_prime(fib_seq[i]):\n            return fib_seq[i]\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    # The number of collisions is n^2/2\n\treturn int((n * n) / 2)"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    num_map = {}\n    for num in l:\n        if num in num_map:\n            return True\n        num_map[num] = True\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    area = 0.5 * a * h\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n <= 3:\n        return [0, 0, 2, 1][n]\n    a, b, c, d = 0, 0, 2, 1\n    for _ in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2] + l[n // 2 - 1]) / 2\n    else:\n        return l[n // 2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    n = n % p\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * n) % p\n        n = n // 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'AEIOUaeiou'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for i in l:\n        if i >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    # Add x and y\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>' and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    max_prime = -1\n    while n > 1:\n        for i in range(2, n+1):\n            if n % i == 0:\n                is_prime = True\n                for j in range(2, int(i**0.5) + 1):\n                    if i % j == 0:\n                        is_prime = False\n                        break\n                if is_prime and i > max_prime:\n                    max_prime = i\n                n //= i\n                break\n    return max_prime"}
{"task_id": "HumanEval/60", "completion": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    ys = [0]*n\n    \n    for i in range(n):\n        ys[i] = xs[i] * (n - i - 1)\n    \n    for i in range(n - 2, -1, -1):\n        ys[i] += ys[i + 1] * 2 * (i + 1)\n    \n    return ys"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(3, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/64", "completion": "    vowels = set(\"aeiouAEIOU\")\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    result = str(x)[shift:] + str(x)[:shift]\n    return result"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    # Your code here\n    pass"}
{"task_id": "HumanEval/68", "completion": "    even_values = [node for node in arr if node % 2 == 0]\n    if not even_values:\n        return []\n    else:\n        smallest_even_value = min(even_values)\n        index_of_smallest_even_value = arr.index(smallest_even_value)\n        return [smallest_even_value, index_of_smallest_even_value]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    max_val = -1\n    for key in freq:\n        if key > 0 and freq[key] >= key:\n            max_val = max(max_val, key)\n            \n    return max_val"}
{"task_id": "HumanEval/70", "completion": "    if len(lst) <= 1:\n        return lst\n    else:\n        return [min(lst)] + strange_sort_list(list(filter(lambda x: x != min(lst), lst)))"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = (a * b * c) / (4 * (s * (s - a) * (s - b) * (s - c)))\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w:\n        return is_palindrome(q)\n    else:\n        return False\n\ndef is_palindrome(l):\n    return l == l[::-1]"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    diff = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            diff += 1\n    return diff"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for i in range(1, len(primes)):\n        if a % primes[i] == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    for i in range(2, int(x**(1/n)) + 1):\n        if n**i == x:\n            return True\n    return False"}
{"task_id": "HumanEval/77", "completion": "    root = a ** (1 / 3)\n    return (root == int(root))"}
{"task_id": "HumanEval/78", "completion": "    hex_map = {\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n\n    decimal_num = int(num, 16)\n    result = []\n    while decimal_num > 0:\n        result.append(decimal_num % 10)\n        decimal_num = decimal_num // 10\n    return result\n\ndef count_prime_hex_digits(num):\n    hex_nums = hex_key(num)\n    count = 0\n    for hex_num in hex_nums:\n        if hex_num in [2, 3, 5, 7, 11, 13]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    result = \"\"\n    while decimal > 0:\n        result = str(decimal % 2) + result\n        decimal = decimal // 2\n    return \"db\" + result + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    length = len(string)\n    return is_prime(length)"}
{"task_id": "HumanEval/83", "completion": "    count = 9 * (n - 1) * (n - 1) + 9 * (n - 1)\n    return count"}
{"task_id": "HumanEval/84", "completion": "    digit_sum = sum([int(x) for x in str(N)])\n    binary_sum = bin(digit_sum)[2:]\n    return binary_sum"}
{"task_id": "HumanEval/85", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    if not lst:\n        return []\n    result = []\n    for row in lst:\n        if x in row:\n            result.append((lst.index(row), row.index(x)))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result"}
{"task_id": "HumanEval/88", "completion": "    if len(array) < 2:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n            result += shifted_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    \n    min_val = float('inf')\n    second_min_val = float('inf')\n    \n    for num in lst:\n        if num < min_val:\n            second_min_val = min_val\n            min_val = num\n        elif num < second_min_val and num != min_val:\n            second_min_val = num\n            \n    return second_min_val if second_min_val != float('inf') else None"}
{"task_id": "HumanEval/91", "completion": "    S = S.split()\n    count = 0\n    for word in S:\n        if word[0] == 'I':\n            count += 1\n            break\n    return count"}
{"task_id": "HumanEval/92", "completion": "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or y == x + z or z == x + y)"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char in vowels:\n            result += chr(ord(char) + 2)\n        elif char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = -1\n    for num in lst:\n        if num >= max_prime and isPrime(num):\n            max_prime = num\n    \n    if max_prime == -1:\n        return -1\n    \n    sum_of_digits = sum([int(x) for x in str(max_prime)])\n    return sum_of_digits\n\n# Example usage\nlst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\nprint(skjkasdkd(lst)) # Output: 10"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    return unit_digit_a * unit_digit_b"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(2, len(s), 2):\n        if s[i] in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    int_low = int(num - 0.5)\n    int_high = int(num + 0.5)\n\n    if abs(num - int_low) <= abs(num - int_high):\n        return int_low\n    else:\n        return int_high"}
{"task_id": "HumanEval/100", "completion": "    result = [n]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            result.append(i + 1)\n        else:\n            result.append(i + 2)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.replace(',', ' ').split()"}
{"task_id": "HumanEval/102", "completion": "    biggest_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            biggest_even = max(biggest_even, i)\n    return biggest_even"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total_sum = (m - n + 1) * (n + m) // 2\n    total_integers = m - n + 1\n    average = total_sum // total_integers\n    binary_str = bin(average)[2:]\n    return binary_str"}
{"task_id": "HumanEval/104", "completion": "    res = []\n    for num in x:\n        if all(int(d) % 2 != 0 for d in str(num)):\n            res.append(num)\n    return sorted(res)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: len(str(x)))\n\ndef replace_digits(arr):\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(digit_names[num-1])\n        else:\n            result.append(str(num))\n    return result\n\ndef transform_array(arr):\n    sorted_arr = by_length(arr)\n    reversed_arr = sorted_arr[::-1]\n    replaced_arr = replace_digits(reversed_arr)\n    return replaced_arr"}
{"task_id": "HumanEval/106", "completion": "    factorial = [1] * n\n    for i in range(2, n):\n        factorial[i] = factorial[i - 1] * i\n    res = []\n    for i in range(1, n):\n        if i % 2 == 0:\n            res.append(factorial[i])\n        else:\n            res.append(sum(range(1, i + 1)))\n    return res"}
{"task_id": "HumanEval/107", "completion": "    even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        sum_of_digits = sum([int(digit) for digit in str(abs(num))])\n        if sum_of_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    \n    n = len(arr)\n    m = n - 1\n    for i in range(n - 1):\n        if arr[i] >= arr[i + 1]:\n            m = i\n    if m >= 0 and arr[m] > arr[0]:\n        return True\n    return False"}
{"task_id": "HumanEval/110", "completion": "    even_in_lst1 = sum(1 for num in lst1 if num % 2 == 0)\n    odd_in_lst1 = len(lst1) - even_in_lst1\n    even_in_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    odd_in_lst2 = len(lst2) - even_in_lst2\n    if even_in_lst1 == even_in_lst2 and odd_in_lst1 == odd_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    count = {}\n    max_count = 0\n    max_letter = ''\n    for word in words:\n        for letter in word:\n            if letter in count:\n                count[letter] += 1\n            else:\n                count[letter] = 1\n            if count[letter] > max_count:\n                max_count = count[letter]\n                max_letter = letter\n    result = {}\n    for letter, repetition in count.items():\n        if repetition == max_count:\n            result[letter] = repetition\n    return result"}
{"task_id": "HumanEval/112", "completion": "    res = \"\".join([i for i in s if i not in c])\n    return res, res == res[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for i, string in enumerate(lst):\n        odd_elements = sum(1 for char in string if char.isdigit() and int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_elements}n the str{odd_elements}ng {odd_elements} of the {odd_elements}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    wells = []\n    for row in grid:\n        wells.extend(row)\n\n    n = len(wells)\n    m = len(grid[0])\n\n    # Find the largest rectangle of water in the grid\n    def largestRectangleArea(heights):\n        stack = []\n        max_area = 0\n        i = 0\n        while i < n:\n            if not stack or heights[i] >= heights[stack[-1]]:\n                stack.append(i)\n                i += 1\n            else:\n                top = stack.pop()\n                area = heights[top] * ((i - stack[-1] - 1) if stack else i)\n                max_area = max(max_area, area)\n        while stack:\n            top = stack.pop()\n            area = heights[top] * ((i - stack[-1] - 1) if stack else i)\n            max_area = max(max_area, area)\n        return max_area\n\n    # Find the maximum amount of water that can be filled\n    max_water = largestRectangleArea(wells)\n\n    # Find the maximum amount of water that can be filled using the bucket\n    max_water_bucket = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                continue\n            if i < n - 1 and grid[i + 1][j] == 1:\n                max_water_bucket += (i + 1 - i) * min(capacity, wells[i])\n            if j < m - 1 and grid[i][j + 1] == 1:\n                max_water_bucket += (j + 1 - j) * min(capacity, wells[j])\n\n    return max(max_water, max_water_bucket)"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    \n    words = s.split()\n    consonant_words = []\n    for word in words:\n        consonant_count = sum(1 for char in word if char.lower() not in 'aeiou')\n        if consonant_count == n:\n            consonant_words.append(word)\n    return consonant_words"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels and word[i+2] in vowels:\n            return word[i+1]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        else:\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[::-1][:k]"}
{"task_id": "HumanEval/121", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/122", "completion": "    result = 0\n    for i in range(k):\n        result += int(str(arr[i])[:2])\n    return result"}
{"task_id": "HumanEval/123", "completion": "    if n < 2:\n        return [n]\n    else:\n        result = []\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = n * 3 + 1\n            result.append(n)\n        return sorted(result)"}
{"task_id": "HumanEval/124", "completion": "    if len(date)==0:\n        return False\n    if len(date)!=8:\n        return False\n    if date[2] != '-':\n        return False\n    if date[5] != '-':\n        return False\n    month = int(date[:2])\n    day = int(date[3:5])\n    year = int(date[6:])\n    if month<1 or month>12:\n        return False\n    if year<1000:\n        return False\n    if (month==1 or month==3 or month==5 or month==7 or month==8 or month==10 or month==12):\n        if (day<1 or day>31):\n            return False\n    elif (month==4 or month==6 or month==9 or month==11):\n        if (day<1 or day>30):\n            return False\n    else:\n        if (day<1 or day>29):\n            return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([char for char in txt if ord(char) % 2 != 0])"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start + 1\n        if isPrime(length):\n            return \"YES\"\n        else:\n            return \"NO\"\n\ndef isPrime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    result = 0\n    for num in arr:\n        if num != 0:\n            result += abs(num) * (1 if num > 0 else -1)\n    return result"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    dp = [[float('inf')] * (n + 1) for _ in range(k + 1)]\n    dp[0][1] = 0\n    for i in range(1, k + 1):\n        for j in range(n):\n            for l in range(m):\n                if j - 1 >= 0:\n                    dp[i][j + 1] = min(dp[i][j + 1], dp[i - 1][j - 1] + grid[j][l])\n                if j + 1 < n:\n                    dp[i][j + 1] = min(dp[i][j + 1], dp[i - 1][j + 2] + grid[j][l])\n    return dp[k][n]"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3, 0]\n    else:\n        tribonacci = [3, 0, 1]\n        for i in range(2, n + 1):\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n        return tribonacci"}
{"task_id": "HumanEval/131", "completion": "    result = 1\n    while n > 0:\n        if n % 2 != 0:\n            result *= n % 10\n        n //= 10\n    return result"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in string:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return True\n        else:\n            stack.append(char)\n    return False"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num + 0.5) ** 2\n    return result"}
{"task_id": "HumanEval/134", "completion": "    txt = txt.strip()\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if last_char.isalpha() and last_char.isalnum():\n        return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    res = -1\n    for i in range(n-1):\n        if arr[i] + 1 != arr[i+1]:\n            res = i\n    return res"}
{"task_id": "HumanEval/136", "completion": "    neg_max = None\n    pos_min = None\n    for i in lst:\n        if i < 0 and (neg_max is None or i > neg_max):\n            neg_max = i\n        if i > 0 and (pos_min is None or i < pos_min):\n            pos_min = i\n    return (neg_max, pos_min)"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    for i in range(1, n):\n        if (n - i) % 2 == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    if n < 0:\n        return \"Invalid input\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') != 1 or file_name.count('0'-'9') > 3:\n        return 'No'\n    dot_index = file_name.index('.')\n    if dot_index == 0 or dot_index == len(file_name) - 1:\n        return 'No'\n    if not file_name[:dot_index].isalpha():\n        return 'No'\n    if not file_name[dot_index+1:].lower() in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i]**2\n        elif i % 4 == 0:\n            total += lst[i]**3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_length_words = []\n    for word in words:\n        if len(word) > 1 and all(len(word) % i for i in range(2, len(word))):\n            prime_length_words.append(word)\n    return \" \".join(prime_length_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    product = x_num * n_num\n    if product % n_den == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 2 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = []\n    for i in range(1, n+1):\n        a.append(i*i - i + 1)\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = \"Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune\".split()\n    p1, p2 = planets.index(planet1), planets.index(planet2)\n    if p1 == -1 or p2 == -1:\n        return ()\n    return tuple(planets[p1+1:p2])"}
{"task_id": "HumanEval/149", "completion": "    sorted_lst = sorted(lst, key=lambda x: (len(x), x))\n    return ''.join(sorted_lst)"}
{"task_id": "HumanEval/150", "completion": "    if n % 2 == 0:\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    odd_numbers = [x for x in lst if x > 0 and x % 2 != 0]\n    if not odd_numbers:\n        return 0\n    else:\n        return sum(x**2 for x in odd_numbers)"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = (cap_count - sm_count) / max(cap_count, sm_count, 1)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    a = a.lower()\n\tb = b.lower()\n\tif b in a:\n\t\treturn True\n\telse:\n\t\tb = b + b\n\t\tfor i in range(1, len(a)):\n\t\t\tif a[i:] == b:\n\t\t\t\treturn True\n\t\treturn False"}
{"task_id": "HumanEval/155", "completion": "    count = [0, 0]\n\twhile num != 0:\n\t\tif num % 2 == 0:\n\t\t\tcount[0] += 1\n\t\telse:\n\t\t\tcount[1] += 1\n\t\tnum = num // 10\n\treturn (count[0], count[1])"}
{"task_id": "HumanEval/156", "completion": "    val = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    syms = ['x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix', 'xx', 'xxi', 'xxii', 'xxiii', 'xxiv', 'xxv', 'xxvi', 'xxvii', 'xxviii', 'xxix', 'xxx', 'xxxi', 'xxxxx']\n    roman_number = \"\"\n    for i in range(len(val)):\n        while number >= val[i]:\n            roman_number += syms[i]\n            number -= val[i]\n    return roman_number.lower()"}
{"task_id": "HumanEval/157", "completion": "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_unique = -1\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_unique:\n            max_unique = len(set(word))\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    total_eaten = number + need\n    if total_eaten > remaining:\n        return [total_eaten - remaining, remaining - 1]\n    else:\n        return [total_eaten, remaining]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            num = operand[i]\n            stack.append(num)\n        elif operator[i] == '-':\n            num = -operand[i]\n            stack.append(num)\n        elif operator[i] == '*':\n            stack[-1] *= operand[i]\n        elif operator[i] == '//':\n            stack[-1] //= operand[i]\n        elif operator[i] == '**':\n            stack[-1] = stack[-1] ** operand[i]\n    return sum(stack)"}
{"task_id": "HumanEval/161", "completion": "    for i in range(len(s)):\n        if s[i].isalpha():\n            s = s[:i] + s[i:i+1].swapcase() + s[i+1:]\n    return s"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for i in range(a, b+1):\n        if all(int(digit) % 2 == 0 for digit in str(i)):\n            result.append(i)\n    return sorted(result)"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            top = stack.pop()\n            if not stack:\n                groups.append(top + char)\n    return groups"}
{"task_id": "HumanEval/2", "completion": "    result = int(number)\n    return number - result"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        else:\n            balance -= operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    deepest = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            deepest = max(deepest, len(stack))\n    return [deepest] * len(paren_string.split())"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    \n    sum_val = 0\n    product_val = 1\n    \n    for num in numbers:\n        sum_val += num\n        product_val *= num\n    \n    return sum_val, product_val"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_val = float('-inf')\n    for num in numbers:\n        max_val = max(num, max_val)\n        result.append(max_val)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Return the shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n\n    i = 1\n    while True:\n        if is_palindrome(string + string[:i][::-1]):\n            return string + string[:i][::-1]\n        i += 1"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            result += str(int(a[i]) ^ int(b[i]))\n        else:\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    max_str = None\n    for string in strings:\n        if len(string) > max_len:\n            max_len = len(string)\n            max_str = string\n    return max_str"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    return [string[i:] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    for i in range(0, len(music_string), 2):\n        if music_string[i] == 'o':\n            result.append(4)\n        elif music_string[i] == '.':\n            result.append(1)\n        else:\n            result.append(2)\n    return result"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    n = len(substring)\n    m = len(string)\n    for i in range(m - n + 1):\n        if string[i:i + n] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    nums = [int(num) for num in numbers.split()]\n    nums.sort()\n    return ' '.join(str(num) for num in nums)"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero of a polynomial.\n    Given a list xs which has even number of coefficients and largest non zero coefficient,\n    find_zero returns the zero of the polynomial.\n    \"\"\"\n    if len(xs) % 2 == 1:\n        return float('inf')\n    if xs[0] == 0:\n        return float('inf')\n    start, end = 1, max(xs) * 2\n    while True:\n        mid = (start + end) / 2\n        if poly(xs, mid) == 0:\n            return round(mid, 2)\n        if poly(xs, mid) < 0:\n            start = mid\n        else:\n            end = mid\n        if abs(end - start) < 0.001:\n            return round(mid, 2)"}
{"task_id": "HumanEval/33", "completion": "    l.sort(key=lambda x: (x, x % 3))\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(7) in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[0], l[1] = l[1], l[0]\n    l[2:4] = sorted(l[2:4])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by inverse of encode_cyclic function.\n    \"\"\"\n    groups = [s[(i * 3):min((i * 3 + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[::-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib = [0, 1]\n    i = 2\n    while True:\n        new_num = fib[i-1] + fib[i-2]\n        if is_prime(new_num):\n            fib.append(new_num)\n            if len(fib) == n:\n                return fib[-1]\n        i += 1\n        if i > n:\n            break"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        if l[i] == 0:\n            continue\n        j = i+1\n        k = n-1\n        while j<k:\n            triplet_sum = l[i]+l[j]+l[k]\n            if triplet_sum == 0:\n                return True\n            if triplet_sum<0:\n                j+=1\n            else:\n                k-=1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n*(n-1)//2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    s = set()\n    for i in l:\n        if -i in s:\n            return True\n        s.add(i)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    res = ''\n    while x > 0:\n        res = str(x % base) + res\n        x = x // base\n    return res"}
{"task_id": "HumanEval/45", "completion": "    area = (a * h) / 2\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b, c, d = 0, 2, 2, 0\n    for _ in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2.0\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    while n>=p:\n\t\tn = (n>>1) - (n>>4)\n\treturn n"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    while (y != 0):\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in brackets:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) <= 1:\n        return True\n    if l[1] < l[0]:\n        return False\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    max_factor = 2\n    while n > 1:\n        for i in range(2, n+1):\n            if n % i == 0:\n                max_factor = max(max_factor, i)\n                n //= i\n                break\n    return max_factor"}
{"task_id": "HumanEval/60", "completion": "    return n*(n+1)//2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = []\n    for i in range(n-1):\n        result.append(xs[i] * (i+1))\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n <= 0:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(3, n+1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/64", "completion": "    vowels = set('aeiouAEIOU')\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    shift = shift % len(num_str)\n    return num_str[-shift:] + num_str[:-shift] if shift != 0 else num_str"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "    s = s.replace(\" \", \"\")\n    apples = 0\n    oranges = 0\n    mango = n - (apples + oranges)\n    for i in s:\n        if i == \"apples\":\n            apples += 1\n        elif i == \"oranges\":\n            oranges += 1\n    return mango"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_even = float('inf')\n    min_even_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n            min_even_index = i\n    if min_even_index == -1:\n        return []\n    return [min_even, min_even_index]"}
{"task_id": "HumanEval/69", "completion": "    max_freq = 0\n    ans = -1\n    freq = {}\n    \n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n        \n        if freq[num] >= num and num > ans:\n            max_freq = freq[num]\n            ans = num\n    \n    return ans"}
{"task_id": "HumanEval/70", "completion": "    if len(lst) < 2:\n        return lst\n    \n    result = []\n    min_val = min(lst)\n    max_val = max(lst)\n    \n    while lst:\n        result.append(min_val)\n        lst.remove(min_val)\n        \n        if lst:\n            max_val = max(lst)\n            result.append(max_val)\n            lst.remove(max_val)\n            \n            min_val = min(lst)\n            \n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = (a * b * c) / (4 * (s * (s - a) * (s - b) * (s - c)))\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    diff = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            diff += 1\n    return diff"}
{"task_id": "HumanEval/74", "completion": "    total_chars_1 = sum([len(s) for s in lst1])\n    total_chars_2 = sum([len(s) for s in lst2])\n    \n    if total_chars_1 < total_chars_2:\n        return lst1\n    elif total_chars_1 == total_chars_2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if (a % i) == 0:\n            j = i\n            while j * j <= a:\n                if (a % j) == 0:\n                    k = j\n                    while k * k <= a:\n                        if (a % k) == 0:\n                            return True\n                        k += 1\n                j += 1\n    return False"}
{"task_id": "HumanEval/76", "completion": "    root = x ** (1/n)\n    return (root == int(root)) and (n == int(n))"}
{"task_id": "HumanEval/77", "completion": "    return (round(a ** (1 / 3))) ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    hex_dict = {'A': '10', 'B': '11', 'C': '12', 'D': '13', 'E': '14', 'F': '15'}\n    return hex_dict[num]\n\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef countPrimeHexDigits(num):\n    count = 0\n    for hex_digit in num:\n        decimal_num = int(hex_key(hex_digit), 16)\n        if isPrime(decimal_num):\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    binary_padded = binary.zfill(8)  # Pad to 8 bits\n    return \"db\" + binary_padded + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grade = 'A'\n            if grade >= 4.3:\n                letter_grade += '+'\n            letter_grades.append(letter_grade)\n        elif grade >= 3.7:\n            letter_grade = 'A'\n            if grade >= 3.75:\n                letter_grade += '-'\n            letter_grades.append(letter_grade)\n        elif grade >= 3.3:\n            letter_grade = 'B'\n            if grade >= 3.45:\n                letter_grade += '+'\n            letter_grades.append(letter_grade)\n        elif grade >= 3:\n            letter_grade = 'B'\n            if grade >= 3.25:\n                letter_grade += '-'\n            letter_grades.append(letter_grade)\n        elif grade >= 2.7:\n            letter_grade = 'C'\n            if grade >= 2.75:\n                letter_grade += '+'\n            letter_grades.append(letter_grade)\n        elif grade >= 2.3:\n            letter_grade = 'C'\n            if grade >= 2.45:\n                letter_grade += '-'\n            letter_grades.append(letter_grade)\n        elif grade >= 2:\n            letter_grade = 'C'\n            if grade >= 2.25:\n                letter_grade += '+'\n            letter_grades.append(letter_grade)\n        elif grade >= 1.7:\n            letter_grade = 'D'\n            if grade >= 1.75:\n                letter_grade += '+'\n            letter_grades.append(letter_grade)\n        elif grade >= 1.3:\n            letter_grade = 'D'\n            if grade >= 1.45:\n                letter_grade += '-'\n            letter_grades.append(letter_grade)\n        elif grade >= 1:\n            letter_grade = 'D'\n            if grade >= 1.25:\n                letter_grade += '+'\n            letter_grades.append(letter_grade)\n        else:\n            letter_grade = 'E'\n            letter_grades.append(letter_grade)\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return 1 + 3 * (n - 2)"}
{"task_id": "HumanEval/84", "completion": "    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for row in lst:\n        for col in range(len(row)):\n            if row[col] == x:\n                result.append((row[0], col))\n    result.sort()\n    return result"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return array\n    \n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    s = s.lower()\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + 2*2\n            result += chr(shifted % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    first = min(lst)\n    remaining = [x for x in lst if x != first]\n    if len(remaining) == 0:\n        return None\n    return min(remaining)"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.')\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"AEIOUaeiou\"\n    encoded_message = \"\"\n    for char in message:\n        if char in vowels:\n            encoded_char = chr(ord(char) + 2)\n            encoded_message += encoded_char\n        else:\n            if char.isupper():\n                encoded_message += char.lower()\n            else:\n                encoded_message += char.upper()\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_prime = max(lst)\n    if not isPrime(max_prime):\n        for i in range(max_prime - 1, 1, -1):\n            if isPrime(i):\n                max_prime = i\n                break\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    for key in dict:\n        if not (isinstance(key, str) and key.islower() or isinstance(key, str) and key.isupper()):\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    prime_numbers = []\n    num = 2\n    while len(prime_numbers) < n:\n        if num < n:\n            is_prime = True\n            for prime in prime_numbers:\n                if num % prime == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                prime_numbers.append(num)\n        num += 1\n    return prime_numbers"}
{"task_id": "HumanEval/97", "completion": "    return abs(a) * abs(b)"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].upper() in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num == int(num):\n        return int(num)\n    else:\n        return int(num + (1 if num > 0 else -1))"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n + 1):\n        pile.append(2 * i + 1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -2):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total_sum = sum(range(n, m+1))\n    average = total_sum // (m - n + 1)\n    binary_avg = bin(average)[2:]\n    return binary_avg"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        if not any(int(digit) % 2 == 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef translate_numbers(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num).ljust(2, '0'))\n    result.sort(reverse=True)\n    return [str(ord(c) - 96) for num in result for c in num]"}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        else:\n            return i * factorial(i-1)\n\n    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            res.append(sum(range(1, i+1)))\n\n    return res"}
{"task_id": "HumanEval/107", "completion": "    count_even = n // 2\n    count_odd = n - count_even\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            j = i\n            while j < n-1 and arr[j] < arr[j-1]:\n                j += 1\n            arr = [arr[j-1]] + arr[:j-1] + arr[j:]\n    return True"}
{"task_id": "HumanEval/110", "completion": "    count = 0\n    for num in lst1:\n        if num % 2 != 0:\n            count += 1\n    for num in lst2:\n        if num % 2 == 0:\n            count -= 1\n    return \"YES\" if count == 0 else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    histogram = {}\n    words = test.split()\n    for word in words:\n        if word in histogram:\n            histogram[word] += 1\n        else:\n            histogram[word] = 1\n    return histogram"}
{"task_id": "HumanEval/112", "completion": "    result = ''.join([i for i in s if i not in c])\n    return result, result == result[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                odd_count += 1\n        result.append(\"the number of odd elements \" + str(odd_count) + \"n the str\" + str(odd_count) + \" of the \" + str(odd_count) + \"nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    def extract_water(bucket, well):\n        if well == 0:\n            return 0\n        return min(bucket, well)\n    \n    rows = len(grid)\n    cols = len(grid[0])\n    result = 0\n    for i in range(rows):\n        for j in range(cols):\n            bucket = capacity\n            for k in range(i, rows):\n                if grid[k][j] == 0:\n                    break\n                if grid[k][j] <= bucket:\n                    bucket -= grid[k][j]\n                else:\n                    result += 1\n                    bucket = capacity - grid[k][j]\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/117", "completion": "    if len(s) == 0:\n        return []\n    words = s.split()\n    consonant_words = []\n    for word in words:\n        consonants = sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou')\n        if consonants == n:\n            consonant_words.append(word)\n    return consonant_words"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"AEIOUaeiou\"\n    consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n    closest_vowel = \"\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in consonants and word[i+1] in consonants:\n            for j in range(i+2, len(word)):\n                if word[j] in vowels:\n                    closest_vowel = word[j]\n                    break\n    return closest_vowel"}
{"task_id": "HumanEval/119", "completion": "    def is_good(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if stack:\n                    stack.pop()\n                else:\n                    return False\n        return not stack\n\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            concat_str = lst[i] + lst[j]\n            if is_good(concat_str):\n                return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(1, len(lst), 2):\n        total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(min(k, len(arr))):\n        sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return sorted(collatz_sequence, key=lambda x: (x % 2, x))"}
{"task_id": "HumanEval/124", "completion": "    date_format = \"%m-%d-%Y\"\n    try:\n        date_obj = datetime.datetime.strptime(date, date_format)\n    except ValueError:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        return sum(1 for char in alphabet if char.islower())"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start, end = interval1\n    start1, end1 = interval2\n    if start > end or start1 > end1:\n        return \"NO\"\n    if start <= start1 <= end <= end1:\n        start = start1\n        end = end1\n    else:\n        start = max(start, start1)\n        end = min(end, end1)\n    if start <= end:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    prod = 1\n    signs = 1\n    for num in arr:\n        if num != 0:\n            signs *= 1 if num > 0 else -1\n            prod *= abs(num)\n    return signs * prod"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[[float('inf')] * n for _ in range(n)] for _ in range(k+1)]\n    dp[0][0][0] = grid[0][0]\n    for i in range(1, n):\n        dp[0][i][0] = min(dp[0][i-1][0], dp[0][i-1][0], grid[i][0])\n    for j in range(1, n):\n        dp[0][0][j] = min(dp[0][0][j-1], grid[0][j])\n    for i in range(1, k+1):\n        for x in range(n):\n            for y in range(n):\n                dp[i][x][y] = float('inf')\n                for a in range(n):\n                    for b in range(n):\n                        if i == 1 or grid[a][b] < grid[x][y]:\n                            dp[i][x][y] = min(dp[i][x][y], dp[i-1][a][b] + grid[x][y])\n    return dp[k][0][0]"}
{"task_id": "HumanEval/130", "completion": "    result = [0, 1]\n    for i in range(2, n + 1):\n        result.append(result[i-1] + result[i-2] + result[i-3])\n    return result"}
{"task_id": "HumanEval/131", "completion": "    result = 1\n    while n > 0:\n        if n % 2 != 0:\n            result *= (n % 10)\n        n //= 10\n    return result"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num ** 2)\n    return result"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        return not any(last_char in word for word in txt.split())\n    return False"}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] >= arr[i - 1]:\n            return i - 1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    min_positive = float('inf')\n    max_negative = float('-inf')\n\n    for num in lst:\n        if num < 0:\n            max_negative = max(max_negative, num)\n        elif num > 0:\n            min_positive = min(min_positive, num)\n    \n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    if isinstance(a, str) and \",\" in a:\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str) and \",\" in b:\n        b = float(b.replace(\",\", \".\"))\n    if isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return a if a > b else b\n    if isinstance(a, (int, float, str)) and isinstance(b, (int, float, str)):\n        return max(a, b)\n    else:\n        raise TypeError(\"Incompatible types\")"}
{"task_id": "HumanEval/138", "completion": "    count = 0\n    for i in range(2, n, 2):\n        if n - i >= 2 and (n - i) % 2 == 0:\n            count += 1\n        if count == 4:\n            return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"-  \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 15:\n        return \"No\"\n    if file_name.count('.') != 1:\n        return \"No\"\n    if file_name.count('0'):\n        return \"No\"\n    if file_name.count('1'):\n        return \"No\"\n    if file_name.count('2'):\n        return \"No\"\n    if file_name.count('3'):\n        return \"No\"\n    if file_name.count('4'):\n        return \"No\"\n    if file_name.count('5'):\n        return \"No\"\n    if file_name.count('6'):\n        return \"No\"\n    if file_name.count('7'):\n        return \"No\"\n    if file_name.count('8'):\n        return \"No\"\n    if file_name.count('9'):\n        return \"No\"\n    if file_name[0].isalpha() == False:\n        return \"No\"\n    if file_name.split('.')[-1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if (i+1)%3 == 0:\n            result += lst[i]**2\n        elif (i+1)%4 == 0 and (i+1)%3 != 0:\n            result += lst[i]**3\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if len(word) > 1:\n            prime_num = 2\n            while prime_num * prime_num <= len(word):\n                prime_num += 1\n            if prime_num * prime_num == len(word):\n                prime_words.append(word)\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result = x_num * n_num\n    result = result % n_den\n    return result == 0"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 2 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i*(i+1) - i for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    orbit1, orbit2 = 0, 0\n    for i in range(len(planet_names)):\n        if planet_names[i] == planet1:\n            orbit1 = i\n        if planet_names[i] == planet2:\n            orbit2 = i\n    \n    if orbit1 == 0 or orbit2 == 0:\n        return ()\n    \n    result = []\n    for i in range(orbit1+1, orbit2):\n        result.append(planet_names[i])\n    \n    return tuple(result)"}
{"task_id": "HumanEval/149", "completion": "    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n    result.sort(key=lambda x: (len(x), x))\n    return result"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n        return x\n    elif n == 2:\n        return y\n    elif n % 2 == 0:\n        return x_or_y(n//2, x, y)\n    else:\n        return x_or_y(n+1, x, y)"}
{"task_id": "HumanEval/151", "completion": "    odd_nums = [num for num in lst if 0 <= num and num % 2 != 0]\n    if not odd_nums:\n        return 0\n    else:\n        return sum([num**2 for num in odd_nums])"}
{"task_id": "HumanEval/152", "completion": "    res = []\n\tfor i in range(len(game)):\n\t\tif game[i] == guess[i]:\n\t\t\tres.append(0)\n\t\telse:\n\t\t\tdiff = abs(game[i] - guess[i])\n\t\t\tres.append(diff)\n\treturn res"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = ''\n    for extension in extensions:\n        cap_count = 0\n        for char in extension:\n            if char.isupper():\n                cap_count += 1\n        sm_count = len(extension) - cap_count\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    def rotate(word):\n\t\treturn word[1:] + word[0]\n\tb_rotations = [b]\n\tfor i in range(len(b)):\n\t\tb_rotations.append(rotate(b))\n\tfor i in range(len(a)):\n\t\tfor j in b_rotations:\n\t\t\tif j in a:\n\t\t\t\treturn True\n\treturn False"}
{"task_id": "HumanEval/155", "completion": "    num_str = str(num)\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = len(num_str) - even_count\n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "completion": "    val = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10]\n    syms = ['m', 'cm', 'd', 'cc', 'x', 'xc', 'v', 'xx', 'ix', 'i']\n    roman_num = ''\n    for i in range(len(val)):\n        while number >= val[i]:\n            roman_num += syms[i]\n            number -= val[i]\n    return roman_num"}
{"task_id": "HumanEval/157", "completion": "    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_chars = -1\n    max_word = ''\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_word = word\n        elif len(set(word)) == max_chars:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    if (number + remaining) < need:\n        return [number + remaining, remaining]\n    else:\n        return [number + need, 0]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(1, len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '/':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result = result ** operand[i]\n    return result"}
{"task_id": "HumanEval/161", "completion": "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].swapcase()\n    return ''.join(s)"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    a_str = str(a)\n    b_str = str(b)\n    result = []\n    for digit in a_str:\n        if digit.isdigit() and int(digit) % 2 == 0:\n            result.append(int(digit))\n    for digit in b_str[::-1]:\n        if digit.isdigit() and int(digit) % 2 == 0:\n            result.append(int(digit))\n    return sorted(result)"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            if not stack:\n                result.append('(' + ')')\n        else:\n            if stack:\n                stack.append(char)\n            else:\n                result.append(char)\n    return result"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        if operation < 0:\n            balance += operation\n        else:\n            balance -= operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(0, len(numbers)-1, 2):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                max_depth += 1\n            else:\n                result.append(0)\n    result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    return (sum(numbers), 1) if numbers else (0, 1)"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_val = float('-inf')\n    for moment in numbers:\n        max_val = max(max_val, moment)\n        result.append(max_val)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    if is_palindrome(string):\n        return string\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i:][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            result += str(int(a[i]) ^ int(b[i]))\n        else:\n            result += str(int(b[i]) ^ 0)\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = 0\n    result = \"\"\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(1, len(string)+1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "    beats = [4, 2, 1]  # Legend for whole, half, and quater notes\n    result = []\n    for char in music_string:\n        result.append(beats[ord(char) - ord('o')])\n    return result"}
{"task_id": "HumanEval/18", "completion": "    result = 0\n    len_substring = len(substring)\n    len_string = len(string)\n    for i in range(len_string - len_substring + 1):\n        if string[i:i+len_substring] == substring:\n            result += 1\n    return result"}
{"task_id": "HumanEval/19", "completion": "    nums = numbers.split()\n    nums.sort(key=lambda x: (x < 'five', x))\n    return ' '.join(nums)"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = (0.0, 0.0)\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "completion": "    return [val for val in values if isinstance(val, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero point of a polynomial.\n    \"\"\"\n    start = -1000\n    end = 1000\n    while start < end:\n        mid = (start + end) / 2\n        if abs(poly(xs, mid)) < 0.001:\n            return mid\n        elif poly(xs, mid) > 0:\n            end = mid\n        else:\n            start = mid\n    return start"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l1, l2, l3 = [], [], []\n    for i in range(n):\n        if i % 3 == 0:\n            l1.append(l[i])\n        elif i % 3 == 1:\n            l2.append(l[i])\n        else:\n            l3.append(l[i])\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    result = []\n    for i in range(n):\n        if i % 3 == 0:\n            result.append(l1[i // 3])\n        elif i % 3 == 1:\n            result.append(l2[i // 3])\n        else:\n            result.append(l3[i // 3])\n    return result"}
{"task_id": "HumanEval/34", "completion": "    n = len(l)\n    j = 0\n    for i in range(n):\n        if (l[i] != l[j]):\n            l[j] = l[i]\n            j += 1\n    return l[:j+1]"}
{"task_id": "HumanEval/35", "completion": "    return max(l)"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(7) in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    for i in range(1, len(l)-1, 2):\n        l[i] = sorted(l[i])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from the given encoded string.\n    \"\"\"\n    # split string into groups of three characters\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # cycle elements in each group back to original order\n    groups = [groups[-1] + groups[:-1] if len(groups) > 1 else groups]\n    # join the groups to get the decoded string\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    fib = [0, 1]\n    i = 2\n    while len(fib) < n:\n        next_num = fib[i - 1] + fib[i - 2]\n        if next_num > 1:\n            for j in range(2, int(next_num ** 0.5) + 1):\n                if next_num % j == 0:\n                    break\n            else:\n                fib.append(next_num)\n        i += 1\n    return fib[-1]"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    seen = set()\n    for i in range(len(l) - 2):\n        complement = -l[i]\n        if complement in seen:\n            return True\n        seen.add(l[i])\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n*(n-1)//2"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    hash_map = {}\n    for i in l:\n        if i in hash_map:\n            return True\n        else:\n            hash_map[-i] = True\n    return False"}
{"task_id": "HumanEval/44", "completion": "    def to_base(n, base):\n        if n == 0:\n            return ''\n        digits = []\n        while n:\n            digits.append(str(n % base))\n            n //= base\n        return ''.join(digits[::-1])\n\n    return to_base(x, base)"}
{"task_id": "HumanEval/45", "completion": "    area = 0.5 * a * h\n    return area"}
{"task_id": "HumanEval/46", "completion": "    a, b = 0, 2\n    for _ in range(n):\n        c = a + b + b + a\n        a = b\n        b = c\n    return b"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2-1]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    result = (n * n) % p\n    return result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string from encoded by encode_shift function.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\".join([c for c in text if c not in vowels])\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    if len(s0) != len(s1):\n        return False\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in brackets:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if not l:\n        return True\n    inc = dec = True\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            continue\n        elif l[i] < l[i+1]:\n            if not inc:\n                return False\n        elif l[i] > l[i+1]:\n            if not dec:\n                return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            n = n / i\n    if n > 2:\n        return n\n    return 2"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in brackets:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    res = []\n    for i in range(n):\n        res.append(xs[i] * (i + 1))\n    return res"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib1 = 0\n        fib2 = 1\n        for i in range(3, n+1):\n            fib1, fib2 = fib2, fib1 + fib2\n        return fib2"}
{"task_id": "HumanEval/64", "completion": "    vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    shift %= len(num_str)\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    upper_sum = 0\n    for char in s:\n        if char.isupper():\n            upper_sum += ord(char)\n    return upper_sum"}
{"task_id": "HumanEval/67", "completion": "    total_apples = 0\n    total_oranges = 0\n    mango = 0\n    apples_and_oranges = s.split()\n    for i in apples_and_oranges:\n        if \"apples\" in i:\n            total_apples = int(i.replace(\"apples\",\"\"))\n        elif \"oranges\" in i:\n            total_oranges = int(i.replace(\"oranges\",\"\"))\n    mango = n - total_apples - total_oranges\n    return mango"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_even = float('inf')\n    idx = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_even:\n            min_even = val\n            idx = i\n    if idx != -1:\n        return [min_even, idx]\n    return []"}
{"task_id": "HumanEval/69", "completion": "    max_val = -1\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    for key in freq:\n        if freq[key] >= key:\n            max_val = key\n    \n    return max_val"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    result = []\n    lst.sort()\n    i, j = 0, len(lst) - 1\n    while i <= j:\n        if i != j:\n            result.append(lst[j])\n            result.append(lst[i])\n        else:\n            result.append(lst[i])\n        i += 1\n        j -= 1\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (a * b * c) / (4 * (s * (s - a) * (s - b) * (s - c)))\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    def is_palindrome(obj):\n        return str(obj) == str(obj)[::-1]\n    \n    if is_palindrome(q) and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(x) for x in lst1)\n    total_chars_lst2 = sum(len(x) for x in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        count = 0\n        for j in range(2, i):\n            if i % j == 0:\n                count += 1\n                if count == 2:\n                    break\n        if count == 2:\n            break\n    return count == 2"}
{"task_id": "HumanEval/76", "completion": "    return x > 0 and x % n == 0"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    else:\n        root = round(a ** (1/3))\n        return root ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    num = str(num)\n    result = 0\n    for digit in num:\n        if digit.lower() in ['a', 'b', 'c', 'd', 'e', 'f']:\n            digit = ord(digit) - ord('a') + 1\n        result += digit\n    return result\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_primes_hex(num):\n    hex_num = hex_key(num)\n    count = 0\n    while hex_num > 0:\n        if is_prime(hex_num):\n            count += 1\n        hex_num //= 10\n    return count"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db0db\"\n    result = \"\"\n    while decimal > 0:\n        result = str(decimal % 2) + result\n        decimal //= 2\n    return \"db\" + result + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i:i+3] == s[i+1:i+3]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grade = \"A\"\n        elif grade >= 3.7:\n            letter_grade = \"A-\"\n        elif grade >= 3.3:\n            letter_grade = \"B+\"\n        elif grade >= 3.0:\n            letter_grade = \"B\"\n        elif grade >= 2.7:\n            letter_grade = \"B-\"\n        elif grade >= 2.3:\n            letter_grade = \"C+\"\n        elif grade >= 2.0:\n            letter_grade = \"C\"\n        elif grade >= 1.7:\n            letter_grade = \"C-\"\n        elif grade >= 1.3:\n            letter_grade = \"D+\"\n        elif grade >= 1.0:\n            letter_grade = \"D\"\n        else:\n            letter_grade = \"E\"\n        letter_grades.append(letter_grade)\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    length = len(string)\n    return is_prime(length)"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(1, 10):\n        count += 2\n        for j in range(2, n):\n            count += 9\n    return count"}
{"task_id": "HumanEval/84", "completion": "    if N==0:\n        return \"0\"\n    res = \"\"\n    while N>0:\n        res += str(N%2)\n        N //= 2\n    return res[::-1]"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    words.sort(key=lambda x: ''.join(sorted(x)))\n    return ' '.join(words)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for row in lst:\n        for j in range(len(row) - 1, -1, -1):\n            if row[j] == x:\n                result.append((lst.index(row), len(row) - j))\n    result.sort()\n    return result"}
{"task_id": "HumanEval/88", "completion": "    if len(array) <= 1:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    unique_elements = list(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    unique_elements.sort()\n    return unique_elements[1]"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if x == 0 and y == 0 and z == 0:\n        return True\n    if x == 0 or y == 0 or z == 0:\n        return False\n    return (x + y) == z or (x + z) == y or (y + z) == x"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr(ord(char.lower())+2)\n                if encoded_char.isupper():\n                    encoded_char = chr(ord(encoded_char)-32)\n                encoded_message += encoded_char\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(num):\n        sum = 0\n        while num:\n            sum += num % 10\n            num = num // 10\n        return sum\n\n    largestPrime = -1\n    for num in lst:\n        if isPrime(num) and num > largestPrime:\n            largestPrime = num\n    return sumOfDigits(largestPrime)"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    case = dict[list(dict.keys())[0]]\n    for key, value in dict.items():\n        if not key.islower() and not key.isupper() and case != value:\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    for num in range(2, n):\n        if all(num % i for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a * b) % 10"}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOUaeiou'\n    count = 0\n    for i in range(0, len(s), 2):  # iterate through even indices\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num == 0:\n        return 0\n    elif num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    result.append(n)\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            result.append(i*2)\n        else:\n            result.append(i*2 + 1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -2):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = m - n + 1\n    average = total // 2\n    return bin(average)"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: len(str(x)))\n\ndef sortAndReplace(arr):\n    result = []\n    for i in range(1, 10):\n        temp = [x for x in arr if x >= i and x <= i*9]\n        temp.sort()\n        result.extend([\" \".join(x) for x in zip(*[iter(temp)]*2)])\n    return result"}
{"task_id": "HumanEval/106", "completion": "    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(1)\n            for j in range(1, i+1):\n                res[-1] *= j\n        else:\n            res.append(sum(range(1, i+1)))\n    return res"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            even_count += 1\n        elif str(i) == str(i)[::-1] and i % 2 != 0:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            arr = [arr[-1]] + arr[:-1]\n            count += 1\n    return count % 2 == 0"}
{"task_id": "HumanEval/110", "completion": "    even_lst1 = [num for num in lst1 if num % 2 == 0]\n    odd_lst1 = [num for num in lst1 if num % 2 != 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n    odd_lst2 = [num for num in lst2 if num % 2 != 0]\n    if len(even_lst1) == len(even_lst2) and len(odd_lst1) == len(odd_lst2):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    res = {}\n    max_count = 0\n    max_char = ''\n    for char in test:\n        if char.isalpha():\n            char = char.lower()\n            if char not in res:\n                res[char] = 0\n            res[char] += 1\n            if res[char] > max_count:\n                max_count = res[char]\n                max_char = char\n    return {max_char: max_count} if max_count else {}"}
{"task_id": "HumanEval/112", "completion": "    result = \"\"\n    for i in range(len(s)):\n        if s[i] not in c:\n            result += s[i]\n    return (result, result == result[::-1])"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    row = len(grid)\n    col = len(grid[0])\n    ans = 0\n    for i in range(row):\n        cnt = 0\n        for j in range(col):\n            if grid[i][j] == 1:\n                cnt += 1\n        ans += math.ceil(cnt / capacity)\n    return ans"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    words = s.split()\n    return [word for word in words if sum(1 for char in word if char.iscons()) == n]"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels and word[i+1].isupper() and word[i+2].islower():\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "    count = 0\n    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n            count += 1\n            if count == 2:\n                break\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    if n == 1:\n        return [1]\n    else:\n        return get_odd_collatz(n//2) if n % 2 == 0 else get_odd_collatz((3*n+1)//2)"}
{"task_id": "HumanEval/124", "completion": "    date_format = \"%m-%d-%Y\"\n    try:\n        day, month, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day < 1 or day > 30:\n        return False\n    if month == 2 and day < 1 or day > 29:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if len(date) != 8:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return len([i for i in range(26) if i%2==1])"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] == lst[i+1]:\n            return False\n        elif lst[i] > lst[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start + 1\n        if length > 1:  # check if length is prime\n            for i in range(2, length):\n                if length % i == 0:\n                    return \"NO\"\n            return \"YES\"\n        else:\n            return \"NO\""}
{"task_id": "HumanEval/128", "completion": "    if len(arr) == 0:\n        return None\n\n    sign = 1\n    sum_magnitude = 0\n\n    for num in arr:\n        if num != 0:\n            sign *= (1 if num > 0 else -1)\n            sum_magnitude += abs(num)\n\n    return sign * sum_magnitude"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(n + 1):\n        for j in range(k + 1):\n            if i > 0 and j > 0:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1])\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i - 1][j - 1])\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i - 1][j - 1])\n    ans = []\n    i, j = n, k\n    while i > 0 and j > 0:\n        ans.append(grid[i - 1][j - 1])\n        if dp[i][j] != dp[i - 1][j] + grid[i - 1][j - 1] and dp[i][j] != dp[i][j - 1] + grid[i - 1][j - 1]:\n            break\n        if dp[i][j] == dp[i - 1][j]:\n            i -= 1\n        else:\n            j -= 1\n            i -= 1\n    return ans[::-1]"}
{"task_id": "HumanEval/130", "completion": "    if n == 1:\n        return [1]\n    else:\n        t = [0] * (n + 1)\n        t[0], t[1], t[2] = 1, 1, 2\n        for i in range(3, n + 1):\n            t[i] = t[i - 1] + t[i - 2] + t[i - 3]\n        return t"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n = n // 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num**2)\n    return result"}
{"task_id": "HumanEval/134", "completion": "    txt = txt.strip()  # Remove leading and trailing spaces\n    if not txt:  # Empty string\n        return False\n    last_char = txt[-1]  # Get the last character\n    return last_char.isalpha() and not any(last_char in word for word in txt.split())"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    if n < 2:\n        return -1\n    for i in range(n - 1, 0, -1):\n        if arr[i] <= arr[i - 1]:\n            return i - 1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [num for num in lst if num < 0]\n    if not neg_integers:\n        return None, None\n    a = max(neg_integers)\n    \n    pos_integers = [num for num in lst if num > 0]\n    if not pos_integers:\n        return a, None\n    b = min(pos_integers)\n    \n    return a, b"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif isinstance(a, int):\n        return int(b) if isinstance(b, int) else float(b)\n    elif isinstance(a, float):\n        return float(b) if isinstance(b, float) else int(b)\n    elif isinstance(a, str):\n        return float(b) if isinstance(b, float) else int(b)\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    if n % 4 != 0:\n        return False\n    sum_of_even_numbers = n // 2\n    if sum_of_even_numbers % 2 != 0 or sum_of_even_numbers > n or sum_of_even_numbers <= 0:\n        return False\n    return True"}
{"task_id": "HumanEval/139", "completion": "    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    text = text.strip()  # Remove leading and trailing spaces\n    text = text.replace(\" \", \"_\")  # Replace spaces with underscores\n    text = text.replace(\"- \", \"-\")  # Replace spaces with -\n    return text"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 10:  # maximum file name length is 10\n        return \"No\"\n    if file_name.count('.') != 1:  # there should be exactly one dot in the file name\n        return \"No\"\n    if not file_name.startswith(('.', '..')):  # the file name should not start with . or ..\n        return \"No\"\n    if file_name.count('0') > 3 or file_name.count('1') > 3 or file_name.count('2') > 3 or file_name.count('3') > 3 or file_name.count('4') > 3 or file_name.count('5') > 3 or file_name.count('6') > 3 or file_name.count('7') > 3 or file_name.count('8') > 3 or file_name.count('9') > 3:  # maximum number of digits\n        return \"No\"\n    if file_name.split('.')[-1] not in ['txt', 'exe', 'dll']:  # the file extension should be one of the given extensions\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_length_words)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/144", "completion": "    x_parts = x.split('/')\n    n_parts = n.split('/')\n    if len(x_parts) == 2 and len(n_parts) == 2:\n        x_num = int(x_parts[0])\n        x_den = int(x_parts[1])\n        n_num = int(n_parts[0])\n        n_den = int(n_parts[1])\n        if x_den == 1 and n_den == 1:\n            return x_num == n_num\n        else:\n            return x_num * n_den == n_num * x_den"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(num):\n        total = 0\n        while num:\n            total += num % 10\n            num //= 10\n        return total\n\n    nums.sort(key=lambda x: (digit_sum(x), nums.index(x)))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets:\n        return ()\n    if planet2 not in planets:\n        return ()\n    if planet1 == planet2:\n        return ()\n    if planet1 == 'Mercury':\n        return (planet1, planet2)\n    if planet2 == 'Neptune':\n        return (planet1, planet2)\n    if planet1 in ('Venus', 'Earth', 'Mars') and planet2 in ('Venus', 'Earth', 'Mars'):\n        return (planet1, planet2)\n    if planet1 in ('Jupiter', 'Saturn') and planet2 in ('Jupiter', 'Saturn'):\n        return (planet1, planet2)\n    return ()"}
{"task_id": "HumanEval/149", "completion": "    return \"\".join(sorted(lst))"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n        return x\n    elif n == 2:\n        return y\n    elif n == 3:\n        return y\n    elif n == 4:\n        return y\n    elif n == 5:\n        return y\n    elif n == 6:\n        return y\n    elif n == 7:\n        return x\n    elif n == 8:\n        return y\n    elif n == 9:\n        return y\n    elif n == 10:\n        return y\n    elif n == 11:\n        return y\n    elif n == 12:\n        return x\n    elif n == 13:\n        return y\n    elif n == 14:\n        return y\n    elif n == 15:\n        return y\n    elif n == 16:\n        return y\n    elif n == 17:\n        return y\n    elif n == 18:\n        return y\n    elif n == 19:\n        return y\n    elif n == 20:\n        return y\n    elif n == 21:\n        return y\n    elif n == 22:\n        return y\n    elif n == 23:\n        return y\n    elif n == 24:\n        return y\n    elif n == 25:\n        return y\n    elif n == 26:\n        return y\n    elif n == 27:\n        return y\n    elif n == 28:\n        return y\n    elif n == 29:\n        return y\n    elif n == 30:\n        return y\n    elif n == 31:\n        return y\n    elif n == 32:\n        return y\n    elif n == 33:\n        return y\n    elif n == 34:\n        return x\n    elif n == 35:\n        return y\n    elif n == 36:\n        return y\n    elif n == 37:\n        return y\n    elif n == 38:\n        return y\n    elif n == 39:\n        return y\n    elif n == 40:\n        return y\n    elif n == 41:\n        return y\n    elif n == 42:\n        return y\n    elif n == 43:\n        return y\n    elif n == 44:\n        return y\n    elif n == 45:\n        return y\n    elif n == 46:\n        return y\n    elif n == 47:\n        return y\n    elif n == 48:\n        return y\n    elif n == 49:\n        return y\n    elif n == 50:\n        return y\n    elif n == 51:\n        return y\n    elif n == 52:\n        return y\n    elif n == 53:\n        return y\n    elif n == 54:\n        return y\n    elif n == 55:\n        return y\n    elif n == 56:\n        return y\n    elif n == 57:\n        return y\n    elif n == 58:\n        return y\n    elif n == 59:\n        return y\n    elif n == 60:\n        return y\n    elif n == 61:\n        return y\n    elif n == 62:\n        return y\n    elif n == 63:\n        return y\n    elif n == 64:\n        return y\n    elif n == 65:\n        return y\n    elif n == 66:\n        return y\n    elif n == 67:\n        return y\n    elif n == 68:\n        return y\n    elif n == 69:\n        return y\n    elif n == 70:\n        return y\n    elif n == 71:\n        return y\n    elif n == 72:\n        return y\n    elif n == 73:\n        return y\n    elif n == 74:\n        return y\n    elif n == 75:\n        return y\n    elif n == 76:\n        return y\n    elif n == 77:\n        return y\n    elif n == 78"}
{"task_id": "HumanEval/151", "completion": "    odd_sum = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int) and num % 2 != 0:\n            odd_sum += num * num\n    return odd_sum"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i] - game[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    strength_map = {}\n    for ext in extensions:\n        cap_count = 0\n        sm_count = 0\n        for char in ext:\n            if char.isupper():\n                cap_count += 1\n            elif char.islower():\n                sm_count += 1\n        strength = cap_count - sm_count\n        strength_map[ext] = (strength, ext)\n    sorted_extensions = sorted(strength_map.keys(), key=lambda x: (-strength_map[x][0], x))\n    return class_name + '.' + sorted_extensions[0]"}
{"task_id": "HumanEval/154", "completion": "    def isRotation(s1, s2):\n        if len(s1) != len(s2):\n            return False\n        return s2 in s1 + s1\n\n    if b in a:\n        return True\n    for i in range(len(a)):\n        if isRotation(a, b):\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    if num < 0:\n        return (-1, -1)\n    else:\n        return (num//2, num//2) if num%2 == 0 else (num//2, num//2+1)"}
{"task_id": "HumanEval/156", "completion": "    val = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    syms = ['m', 'cm', 'd', 'cd', 'xc', 'xd', 'x', 'ix', 'v', 'xl', 'ix', 'i', 'vi', 'iv', 'xvi', 'ix']\n\n    roman_num = ''\n    for i in range(len(val)):\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n    return roman_num"}
{"task_id": "HumanEval/157", "completion": "    if a == b or b == c or c == a:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_word = word\n        elif len(set(word)) == max_chars:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    if remaining < need:\n        number += remaining\n        remaining = 0\n    else:\n        number += need\n        remaining -= need\n    return [number, remaining]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for op, val in zip(operator, operand):\n        if op == '+':\n            stack.append(val)\n        elif op == '-':\n            stack.append(-val)\n        elif op == '*':\n            stack.append(stack.pop() * val)\n        elif op == '//':\n            stack.append(stack.pop() // val)\n        elif op == '**':\n            stack.append(stack.pop() ** val)\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n    return \"\".join(s)"}
{"task_id": "HumanEval/162", "completion": "    if text == '':\n        return None\n    import hashlib\n    hash_obj = hashlib.md5(text.encode('utf-8'))\n    return hash_obj.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    start = max(a, b)\n    end = min(a, b)\n    result = []\n    for num in range(start, end + 1):\n        if num % 2 == 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            if current_group:\n                result.append(current_group)\n                current_group = \"\"\n            current_group += char\n        elif char == \")\":\n            current_group += char\n    if current_group:\n        result.append(current_group)\n    return result"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    truncated_number = number - integer_part\n    return truncated_number"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        else:\n            balance -= operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for num in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.append(delimeter)\n        result.append(number)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    groups = paren_string.split()\n    result = []\n    for group in groups:\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    return sum(numbers), numbers[0] * (1 if len(numbers) == 1 else product(numbers[1:]))\n\n\ndef product(nums: List[int]) -> int:\n    result = 1\n    for num in nums:\n        result *= num\n    return result"}
{"task_id": "HumanEval/9", "completion": "    max_element = max(numbers)\n    result = [max_element]\n    for num in numbers:\n        max_element = max(num, max_element)\n        result.append(max_element)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return \"\"\n\n    suffix = \"\"\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i + 1]):\n            suffix = string[i + 1:]\n            break\n\n    return string + string[:i + 1][::-1] + suffix"}
{"task_id": "HumanEval/11", "completion": "    result = ''\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            result += str(int(a[i]) ^ int(b[i]))\n        else:\n            result += str(int(b[i]) ^ 0)\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    max_str = \"\"\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_str = s\n    return max_str"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    result = \"\"\n    for i in range(n + 1):\n        result += str(i) + \" \"\n    return result.strip()"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "    notes = music_string.split()\n    beats_list = []\n    for note in notes:\n        if 'o' in note:\n            beats_list.append(4)\n        elif '|' in note:\n            beats_list.append(2)\n        else:\n            beats_list.append(1)\n    return beats_list"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    while substring in string:\n        count += 1\n        string = string.replace(substring, '', 1)\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = numbers.split()\n    num_list.sort(key=lambda x: int(x))\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = (-1, -1)\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[j] - numbers[i])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    result = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    num_dict = {}\n    result = []\n    for num in numbers:\n        if num not in num_dict:\n            num_dict[num] = 1\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    vowels = 'aeiouAEIOU'\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return \"\"\n    result = strings[0]\n    for string in strings[1:]:\n        result += string\n    return result"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    result = []\n    for num in l:\n        if num > 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds a zero point for polynomial with coefficients xs.\n    Returns a value of x such that poly(x) = 0.\n    xs[0] * x^n + xs[1] * x^n + ... + xs[n] * x^n = 0\n    \"\"\"\n    x = 1.0  # start from 1\n    epsilon = 0.000001  # set precision\n    while abs(poly(xs, x)) > epsilon:\n        x += 0.1  # iterate to find a value of x\n    return x"}
{"task_id": "HumanEval/33", "completion": "    for i in range(len(l)):\n        if i % 3 != 0:\n            l[i] = sorted(l[i])\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(7, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = sorted(l[i:i+2])\n        else:\n            l[i] = l[i]\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string.\n    \"\"\"\n    # split string to groups of three characters.\n    groups = [s[i:(i + 3)] for i in range(0, len(s), 3)]\n    # decode each group with encode_cyclic function.\n    groups = [encode_cyclic(group) for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    fib = [0, 1]\n    for i in range(2, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    for i in range(2, n + 1):\n        if is_prime(fib[i]):\n            return fib[i]\n    return -1\n\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l)-2):\n        if l[i] == -l[i+1] + l[i+2]:\n            return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    if n == 1:\n        return 0\n    else:\n        return n*(n-1)//2"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    s = {}\n    for i in l:\n        if -i in s:\n            return True\n        s[i] = True\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "    fib = [0] * (n + 1)\n    fib[0] = 0\n    fib[1] = 0\n    fib[2] = 2\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(3, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return fib[n]"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2] + l[n // 2 - 1]) / 2\n    else:\n        return l[n // 2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    res = 0\n    while n > 0:\n        if n % 2 == 1:\n            res += pow(2, p - 2, p)\n        n //= 2\n        p -= 1\n    return res"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string from encoded string with shift by 5.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'AEIOUaeiou'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    while (y != 0):\n\t\tcarry = x & y\n\t\tx = x ^ y\n\t\ty = carry << 1\n\treturn x"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if not l:\n        return True\n    inc = dec = True\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            inc = False\n        if l[i] > l[i-1]:\n            dec = False\n    return inc or dec"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(n**0.5)+1,2):\n        while n % i== 0:\n            n = n // i\n    if n > 2:\n        return n\n    return 2"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = []\n    for i in range(n):\n        result.append(xs[i] * (i+1))\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        a, b = 0, 1\n        for _ in range(3, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/64", "completion": "    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    s = str(x)\n    n = len(s)\n    shift = shift % n\n    return s[-shift:] + s[:-shift] if shift != 0 else s"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/67", "completion": "    n_apples = n_oranges = 0\n    for i in range(len(s)):\n        if s.startswith(\"apples\", i):\n            n_apples = int(s[i+5:])\n        elif s.startswith(\"oranges\", i):\n            n_oranges = int(s[i+6:])\n    return n - (n_apples + n_oranges)"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    \n    min_even_value = float('inf')\n    min_even_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_even_value:\n            min_even_value = val\n            min_even_index = i\n            \n    if min_even_index == -1:\n        return []\n    \n    return [min_even_value, min_even_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    greatest = -1\n    for key, value in freq.items():\n        if key > 0 and value >= key:\n            greatest = key\n    return greatest"}
{"task_id": "HumanEval/70", "completion": "    return sorted(lst)"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and a + c > b:\n\t\ts = (a + b + c) / 2\n\t\tarea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\t\treturn round(area, 2)\n\telse:\n\t\treturn -1"}
{"task_id": "HumanEval/72", "completion": "    if q == []:\n        return True\n    if q[0] == q[-1]:\n        return will_it_fly(q[1:-1], w)\n    else:\n        return will_it_fly(q[1:], w)"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    dp = [0] * (n + 1)\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] == arr[j]:\n                dp[j] = dp[i] + 1\n            else:\n                dp[j] = max(dp[j], dp[i] + 1)\n    return n - dp[n]"}
{"task_id": "HumanEval/74", "completion": "    total_chars_1 = sum(len(s) for s in lst1)\n    total_chars_2 = sum(len(s) for s in lst2)\n    \n    if total_chars_1 < total_chars_2:\n        return lst1\n    elif total_chars_1 == total_chars_2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            for j in range(2, int(i**0.5) + 1):\n                if i % j == 0:\n                    for k in range(2, int(j**0.5) + 1):\n                        if j % k == 0:\n                            return a == i * j * k\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x < 0 or n < 0:\n        return False\n    while(x % n == 0):\n        x = x / n\n    return x == 1"}
{"task_id": "HumanEval/77", "completion": "    return (round(a ** (1/3)) ** 3 == a)"}
{"task_id": "HumanEval/78", "completion": "    result = 0\n    for digit in num:\n        result = (result * 10 + int(digit)) % 20\n    return result\n\ndef countPrimeDigits(num: str) -> int:\n    count = 0\n    for digit in num:\n        decimal_digit = int(digit, 16)\n        if decimal_digit in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    result = []\n    for grade in grades:\n        if grade >= 4.0:\n            result.append('A+')\n        elif grade >= 3.7:\n            result.append('A')\n        elif grade >= 3.3:\n            result.append('A-')\n        elif grade >= 3.0:\n            result.append('B+')\n        elif grade >= 2.7:\n            result.append('B')\n        elif grade >= 2.3:\n            result.append('B-')\n        elif grade >= 2.0:\n            result.append('C+')\n        elif grade >= 1.7:\n            result.append('C')\n        elif grade >= 1.3:\n            result.append('C-')\n        elif grade >= 1.0:\n            result.append('D+')\n        elif grade >= 0.7:\n            result.append('D')\n        else:\n            result.append('E')\n    return result"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    start_with_one = 10**(n-1)\n    end_with_one = 10**n - 10**(n-1)\n    start_end_with_one = end_with_one - start_with_one + 1\n    return start_end_with_one"}
{"task_id": "HumanEval/84", "completion": "    total_sum = sum(map(int, str(N)))\n    return bin(total_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(1, len(lst), 2):\n        result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = \"\"\n    for word in words:\n        if word.isalpha():\n            result += ''.join(sorted(word))\n        else:\n            result += word\n        result += \" \"\n    return result.strip()"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for row in lst:\n        if x in row:\n            result.append((lst.index(row), row.index(x)))\n    return sorted(result, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return array\n\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = ''\n    for char in s:\n        if char.isalpha():\n            result += chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    \n    min_val = float('inf')\n    second_min_val = float('inf')\n    \n    for num in lst:\n        if num < min_val:\n            second_min_val = min_val\n            min_val = num\n        elif num < second_min_val and num != min_val:\n            second_min_val = num\n            \n    return second_min_val if second_min_val != float('inf') else None"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.')\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return (x == y + z or y == x + z or z == x + y)\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    result = \"\"\n    vowels = \"aeiou\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                result += chr(ord(char.lower()) + 2)\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largestPrime = max([num for num in lst if isPrime(num)])\n\n    def digitSum(num):\n        sum = 0\n        while num:\n            sum += num % 10\n            num //= 10\n        return sum\n\n    return digitSum(largestPrime)"}
{"task_id": "HumanEval/95", "completion": "    if len(dict)==0:\n        return False\n    \n    for key in dict.keys():\n        if isinstance(key, str) and key.islower() == False and key.isupper() == False:\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    if n <= 1:\n        return []\n    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a * b) % 10"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].upper() in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    integer = int(num)\n    if abs(num - integer) < abs(num - (integer + 1)):\n        return integer\n    else:\n        return integer + 1"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            pile.append(2 * i)\n        else:\n            pile.append(2 * i + 1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    return s.replace(\",\", \"\").split()"}
{"task_id": "HumanEval/102", "completion": "    biggest_even = -1\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            biggest_even = i\n            break\n    return biggest_even"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total_sum = (m - n + 1) * (n + m) // 2\n    return bin(total_sum)[2:]"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: len(str(x)))\n\n\ndef digitsToWords(arr):\n    between_1_9 = [str(i) for i in range(1, 10)]\n    words = {str(i): between_1_9[i-1] for i in range(1, 10)}\n    return [words[i] if i in between_1_9 else str(i) for i in arr]"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(1)\n            for j in range(2, i + 1):\n                result[i - 1] += j\n    return result"}
{"task_id": "HumanEval/107", "completion": "    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_palindromes = 0\n    odd_palindromes = 0\n\n    for i in range(1, n+1):\n        if i % 2 == 0 and is_palindrome(i):\n            even_palindromes += 1\n        elif i % 2 != 0 and is_palindrome(i):\n            odd_palindromes += 1\n\n    return (even_palindromes, odd_palindromes)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(num):\n        total = 0\n        while num:\n            total += num % 10\n            num //= 10\n        return total\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(abs(num)) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] > arr[i+1]:\n            return False\n        i += 1\n    while i < j:\n        if arr[j] < arr[j-1]:\n            return False\n        j -= 1\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_lst1 = [x for x in lst1 if x % 2 == 0]\n    odd_lst1 = [x for x in lst1 if x % 2 != 0]\n    even_lst2 = [x for x in lst2 if x % 2 == 0]\n    odd_lst2 = [x for x in lst2 if x % 2 != 0]\n    if len(even_lst1) > len(even_lst2) or len(odd_lst1) > len(odd_lst2):\n        return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    hist = {}\n    words = test.split()\n    max_count = 0\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter in hist:\n                hist[letter] += 1\n                count += 1\n            else:\n                hist[letter] = 1\n                count += 1\n        if count > max_count:\n            max_count = count\n    return hist"}
{"task_id": "HumanEval/112", "completion": "    for i in range(len(c)):\n        s = s.replace(c[i],'')\n    return s,s==s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    def count_odds(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n    \n    return [f\"the number of odd elements in the string {count_odds(s)} of the input.\" for s in lst]"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows, cols = len(grid), len(grid[0])\n    water_left = [0] * rows\n    res = 0\n    for j in range(cols):\n        for i in range(rows):\n            if grid[i][j] == 1:\n                water_left[i] += 1\n    for i in range(rows):\n        if water_left[i] > capacity:\n            res += math.ceil(water_left[i] / capacity)\n    return res"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.isupper())\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    word_list = list(word)\n    for i in range(len(word_list) - 1, 1, -1):\n        if word_list[i] in vowels and word_list[i - 1] not in vowels:\n            return word_list[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(min(k, len(arr))):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    if n==1:\n        return [1]\n    if n%2==0:\n        return get_odd_collatz(n//2)\n    else:\n        return [n] + get_odd_collatz(3*n+1)"}
{"task_id": "HumanEval/124", "completion": "    # Validating the date based on the given rules\n    date_format = \"%m-%d-%Y\"\n    try:\n        datetime.strptime(date, date_format)\n    except ValueError:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return len([c for c in txt if c.islower()])"}
{"task_id": "HumanEval/126", "completion": "    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if isPrime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    neg_count = 0\n    for num in arr:\n        if num < 0:\n            neg_count += 1\n    if neg_count % 2 == 0:\n        return 0\n    else:\n        return abs(sum(arr)) * (-1) ** (neg_count // 2)"}
{"task_id": "HumanEval/129", "completion": "    m, n = len(grid), len(grid[0])\n    dp = [[[0]*(k+1) for _ in range(n)] for _ in range(m)]\n    \n    for i in range(m):\n        for j in range(n):\n            dp[i][j][0] = grid[i][j]\n    \n    for l in range(1, k+1):\n        for i in range(m):\n            for j in range(n):\n                if i > 0:\n                    dp[i][j][l] = min(dp[i][j][l], dp[i-1][j][l-1] + grid[i][j])\n                if j > 0:\n                    dp[i][j][l] = min(dp[i][j][l], dp[i][j-1][l-1] + grid[i][j])\n    \n    return dp[m-1][n-1][k]"}
{"task_id": "HumanEval/130", "completion": "    if n <= 0:\n        return []\n    if n == 1:\n        return [3]\n    a, b = 1, 3\n    res = [a, b]\n    for _ in range(2, n + 1):\n        c = res[-1] + res[-2] + b\n        res.append(c)\n    return res"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    sum = 0\n    for num in lst:\n        if num < 0:\n            num = -num\n        sum += int(num ** 2)\n    return sum"}
{"task_id": "HumanEval/134", "completion": "    txt_list = txt.split()  # Split the string into words\n    last_word = txt_list[-1]  # Get the last word\n    if not last_word:  # If the last word is empty, return False\n        return False\n    last_char = last_word[-1]  # Get the last character of the last word\n    return last_char.isalpha()  # Return True if the last character is alphabetical, else False"}
{"task_id": "HumanEval/135", "completion": "    if not arr:\n        return -1\n    \n    max_index = -1\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            continue\n        if arr[i] < arr[i + 1]:\n            if max_index == -1:\n                max_index = i\n            max_index = max(max_index, i)\n    \n    return max_index"}
{"task_id": "HumanEval/136", "completion": "    neg_nums = [num for num in lst if num < 0]\n    pos_nums = [num for num in lst if num > 0]\n\n    if neg_nums:\n        a = max(neg_nums)\n    else:\n        a = None\n\n    if pos_nums:\n        b = min(pos_nums)\n    else:\n        b = None\n\n    return (a, b)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    even_sum = 0\n    for i in range(1, n//2+1):\n        if i % 2 == 0:\n            even_sum += i\n    return even_sum == n"}
{"task_id": "HumanEval/139", "completion": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    i = 0\n    while i < len(text):\n        if text[i] == \" \":\n            result += \"_\"\n            while i < len(text) and text[i] == \" \":\n                i += 1\n        else:\n            result += text[i]\n        i += 1\n    return result"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) <= 3:\n        if file_name.count('.') == 1 and file_name.count('0-9') == 0:\n            if file_name[0].isalpha():\n                if file_name[-4:].lower() == '.txt' or file_name[-4:].lower() == '.exe' or file_name[-4:].lower() == '.dll':\n                    return 'Yes'\n            return 'No'\n    return 'No'"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    numerator_x, denominator_x = map(int, x.split('/'))\n    numerator_n, denominator_n = map(int, n.split('/'))\n    result = numerator_x * numerator_n // denominator_x * denominator_n // denominator_x\n    return result % 1 == 0"}
{"task_id": "HumanEval/145", "completion": "    def get_sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return sorted(nums, key=lambda x: (get_sum_of_digits(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 2 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    arr = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets:\n        return ()\n    if planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n    return tuple(planets[idx1+1:idx2])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n        return x\n    elif n == 2:\n        return y\n    else:\n        return x_or_y(n-1, x, y)"}
{"task_id": "HumanEval/151", "completion": "    total_sum = 0\n    for num in lst:\n        if num % 2 != 0 and num > 0:\n            total_sum += num**2\n    return total_sum"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    strength_dict = {}\n    for extension in extensions:\n        CAP = sum(c.isupper() for c in extension)\n        SM = sum(c.islower() for c in extension)\n        strength = (CAP - SM) if CAP > SM else 0\n        strength_dict[extension] = strength\n    max_strength = max(strength_dict.values())\n    strongest_extensions = [ext for ext, strength in strength_dict.items() if strength == max_strength]\n    return f\"{class_name}.{strongest_extensions[0]}\""}
{"task_id": "HumanEval/154", "completion": "    if len(a)!=len(b):\n        return False\n    b = b + b\n    return b in a"}
{"task_id": "HumanEval/155", "completion": "    num_str = str(abs(num))\n    even = sum(1 for digit in num_str if int(digit)%2 == 0)\n    odd = len(num_str) - even\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "    val = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    syms = ['m', 'cm', 'd', 'cd', 'xc', 'x', 'xvii', 'ix', 'ixc', 'i', 'iiv', 'ixl', 'ixix', 'g', 'gc', 'd', 'cd', 'xc', 'x', 'xi', 'ixc', 'ix']\n\n    roman_num = ''\n    for i in range(len(val)):\n        while number >= val[i]:\n            roman_num += syms[i]\n            number -= val[i]\n    return roman_num"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_count = 0\n    result = \"\"\n    for word in words:\n        if len(set(word)) > max_count:\n            max_count = len(set(word))\n            result = word\n    return result"}
{"task_id": "HumanEval/159", "completion": "    total = number + need\n    if total > remaining:\n        return [total, 0]\n    else:\n        return [total, remaining - total]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result = result // operand[i+1]\n        elif operator[i] == '**':\n            result = result ** operand[i+1]\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result if result else s[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    \n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b + 1):\n        if ''.join(str(num)) != ''.join(sorted(str(num))):\n            continue\n        if int(''.join(str(num))) % 2 == 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers)-1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            if not stack:\n                result.append(char)\n    return result"}
{"task_id": "HumanEval/2", "completion": "    decimal_part = number - int(number)\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        if op > balance:\n            return True\n        balance += op\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.extend([delimeter, numbers[i]])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                if not stack:\n                    max_depth += 1\n    return [max_depth] * len(paren_string)"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    return (sum(numbers), 1) if numbers else (0, 1)"}
{"task_id": "HumanEval/9", "completion": "    rolling_max_list = []\n    max_so_far = float('-inf')\n    for i, num in enumerate(numbers):\n        max_so_far = max(num, max_so_far)\n        rolling_max_list.append(max_so_far)\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "completion": "    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i:][::-1]\n    return string"}
{"task_id": "HumanEval/11", "completion": "    xor_result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            xor_result += str(int(a[i]) ^ int(b[i]))\n        else:\n            xor_result += str(int(b[i]) ^ 0)\n    return xor_result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    max_string = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_string = s\n    return max_string"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    result = \"\"\n    for i in range(n):\n        result += str(i) + \" \"\n    return result[:-1]"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('|', '')\n    \n    beats = 0\n    result = []\n    for char in music_string:\n        if char == 'o':\n            beats += 4\n        elif char == '.':\n            beats += 1\n        else:\n            beats += 2\n        result.append(beats)\n    \n    return result"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    len_substring = len(substring)\n    len_string = len(string)\n    for i in range(len_string - len_substring + 1):\n        if string[i:i + len_substring] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = numbers.split()\n    num_list.sort(key=lambda x: int(x))\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest = (numbers[0], numbers[1])\n    \n    for i in range(1, len(numbers)-1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest = (numbers[i], numbers[i+1])\n    \n    return closest"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    scale = 1 / (max_num - min_num)\n    return [(num - min_num) * scale for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n = n / i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return \"\"\n    result = strings[0]\n    for string in strings[1:]:\n        result += string\n    return result"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero point of a polynomial with given coefficients.\n    Assumes that the coefficients of the polynomial are given in ascending order and\n    number of coefficients is even.\n    \"\"\"\n    x0 = xs[0]\n    epsilon = 0.00001\n    while (poly(xs, x0) > epsilon):\n        x0 -= poly(xs, x0) / (x0 - xs[0])\n    return x0"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l.sort()\n    for i in range(n):\n        if i % 3 != 0:\n            continue\n        else:\n            l[i] = l[i // 3]\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    if not l:\n        return None\n    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).find('7') != -1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = sorted(l[i:])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from encoded by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # join and reverse. Unless group has fewer elements than 3.\n    groups = [group[::-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    cnt = 0\n    while True:\n        a, b = b, a + b\n        if is_prime(b):\n            cnt += 1\n            if cnt == n:\n                return b\n        if cnt > n:\n            return -1"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l)-2):\n        if l[i] + l[i+1] + l[i+2] == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n*(n-1)//2"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    if len(l) < 2:\n        return False\n    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    if base == 2:\n        return bin(x)[2:]\n    res = ''\n    while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return res"}
{"task_id": "HumanEval/45", "completion": "    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "    if n==0:\n        return 0\n    elif n==1:\n        return 0\n    elif n==2:\n        return 2\n    elif n==3:\n        return 0\n    else:\n        a, b, c = 0, 2, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    res = 1\n    n = n % p\n    while n:\n        if n % 2 == 1:\n            res = (res * n) % p\n        n //= 2\n    return res"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string from encoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_nums = [0, 1]\n        for i in range(2, n + 1):\n            fib_nums.append(fib_nums[i - 1] + fib_nums[i - 2])\n        return fib_nums[n]"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>' and stack:\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    if not l:\n        return True\n    if l[0] < l[-1]:\n        return all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    else:\n        return all(l[i] >= l[i + 1] for i in range(len(l) - 1))"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    if n == 0:\n        return 0\n    else:\n        return n + sum_to_n(n-1)"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = [0] * n\n    result[0] = xs[0]\n    for i in range(1, n):\n        result[i] = result[i - 1] + xs[i]\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n <= 2:\n        return [0, 1, 1][n]\n    memo = [0] * (n + 1)\n    memo[0], memo[1] = 0, 1\n    for i in range(2, n + 1):\n        memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3]\n    return memo[n]"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x = str(x)\n    n = len(x)\n    shift = shift % n\n    return x[-shift:] + x[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "    apples = 0\n    oranges = 0\n    mango = 0\n    for char in s:\n        if char.isdigit():\n            if oranges > 0:\n                mango += int(char)\n                oranges -= 1\n            else:\n                apples += int(char)\n        elif char == ' ':\n            pass\n        elif char == 'oranges':\n            oranges = int(char)\n        elif char == 'apples':\n            apples = int(char)\n    return mango"}
{"task_id": "HumanEval/68", "completion": "    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    if min_index != -1:\n        return [min_val, min_index]\n    else:\n        return []"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    max_val = -1\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n        if num > 0 and freq[num] >= num:\n            max_val = max(max_val, num)\n    return max_val"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    result = []\n    while lst:\n        min_val = min(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            result.insert(0, max_val)\n            lst.remove(max_val)\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c))**0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w:\n        return is_balanced(q)\n    return False\n\ndef is_balanced(q):\n    q_str = ''.join(map(str, q))\n    return q_str == q_str[::-1]"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    diff = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            diff += 1\n    return diff"}
{"task_id": "HumanEval/74", "completion": "    total_chars_1 = sum(len(s) for s in lst1)\n    total_chars_2 = sum(len(s) for s in lst2)\n    \n    if total_chars_1 < total_chars_2:\n        return lst1\n    elif total_chars_1 == total_chars_2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(2, 100):\n        if is_prime(i):\n            for j in range(i*2, 100, i):\n                if is_prime(j):\n                    for k in range(j*2, 100, j):\n                        if k == a:\n                            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    return (x > 0) and (x % (n) == 0)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    root_a = int(a ** (1/3))\n    return a == root_a ** 3"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = {'A': '10', 'B': '11', 'C': '12', 'D': '13', 'E': '14', 'F': '15'}\n    decimal_num = int(num, 16)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    count = 0\n    while decimal_num > 0:\n        digit = decimal_num % 10\n        if hex_digits.get(str(digit), 0) == '13' or hex_digits.get(str(digit), 0) == '11':\n            count += 1\n        decimal_num = decimal_num // 10\n    return count\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_hex_digits(num):\n    hex_digits = {'A': '10', 'B': '11', 'C': '12', 'D': '13', 'E': '14', 'F': '15'}\n    decimal_num = int(num, 16)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    count = 0\n    while decimal_num > 0:\n        digit = decimal_num % 10\n        if hex_digits.get(str(digit), 0) in primes:\n            count += 1\n        decimal_num = decimal_num // 10\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal //= 2\n    return \"db\" + \"0\" * (8 - len(binary)) + binary + \"0\" * (8 - len(binary)) + \"db\""}
{"task_id": "HumanEval/80", "completion": "    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(length)"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "    res = \"\"\n    while N > 0:\n        res += str(N % 2)\n        N //= 2\n    return res"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i, num in enumerate(lst):\n        if i % 2 != 0:\n            result += num\n    return result"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    coordinates = []\n    for row in lst:\n        for j in range(len(row)):\n            if row[j] == x:\n                coordinates.append((lst.index(row), j))\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_string = ''\n    for char in s:\n        if char.isalpha():\n            index = (ord(char) - ord('a') + 2) * 2\n            if index > 26:\n                index -= 26\n            encrypted_string += chr(ord('a') + index)\n        else:\n            encrypted_string += char\n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    else:\n        first_smallest = min(lst)\n        next_smallest = None\n        for num in lst:\n            if num < first_smallest and (next_smallest is None or num < next_smallest):\n                next_smallest = num\n        return next_smallest"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.')\n    count = 0\n    for sentence in sentences:\n        if sentence.lstrip().startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char in vowels:\n            result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result.swapcase()"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n\t    if n <= 1:\n\t\t    return False\n\t    for i in range(2, n):\n\t\t    if n % i == 0:\n\t\t\t    return False\n\t    return True\n\n    max_prime = -1\n    for num in lst:\n\t    if num > max_prime and isPrime(num):\n\t\t    max_prime = num\n\t    \n    if max_prime == -1:\n\t    return 0\n    \n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n\t\treturn False\n\tcase = dict[dict.keys()[0]]\n\tfor key in dict.keys():\n\t\tif case.islower():\n\t\t\tif key.lower() != case:\n\t\t\t\treturn False\n\t\telse:\n\t\t\tif key.upper() != case:\n\t\t\t\treturn False\n\treturn True"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a * b) % 10"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(1, len(s), 2):\n        if s[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num % 1 == 0:\n        return int(num)\n    else:\n        if num > 0:\n            return int(num + 1)\n        else:\n            return int(num - 1)"}
{"task_id": "HumanEval/100", "completion": "    result = [n]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            result.append(i+1)\n        else:\n            result.append(2*i+1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 0 and y % 2 == 0:\n        return x\n    elif x % 2 != 0 and y % 2 != 0:\n        return -1\n    else:\n        return y - 1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = m - n + 1\n    return int(bin(total // 2)[2:].zfill(32), 2)"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef replace_by_name(arr):\n    num_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    for i in range(len(arr)):\n        if 1 <= arr[i] <= 9:\n            arr[i] = num_name[arr[i]]\n    return arr\n\ndef sort_and_replace(arr):\n    if not arr:\n        return []\n    between_1_9 = []\n    for num in arr:\n        if 1 <= num <= 9:\n            between_1_9.append(num)\n    between_1_9.sort()\n    between_1_9 = replace_by_name(between_1_9)\n    i = 0\n    for j in range(len(arr)):\n        if 1 <= arr[j] <= 9:\n            arr[j] = between_1_9[i]\n            i += 1\n    return arr"}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 1:\n            return 1\n        else:\n            return i * factorial(i - 1)\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = (n + 1) // 2\n    count_odd = n // 2\n    return count_even, count_odd"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n) if digit != '0')\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)"}
{"task_id": "HumanEval/109", "completion": "    if len(arr)==0:\n        return True\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))"}
{"task_id": "HumanEval/110", "completion": "    for num1 in lst1:\n        if num1 % 2 != 0:\n            return \"NO\"\n\n    for num2 in lst2:\n        if num2 % 2 != 0:\n            return \"NO\"\n\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    histogram_map = {}\n    max_repetition = 0\n    max_letter = ''\n    for word in words:\n        for char in word:\n            if char in histogram_map:\n                histogram_map[char] += 1\n            else:\n                histogram_map[char] = 1\n            if histogram_map[char] > max_repetition:\n                max_repetition = histogram_map[char]\n                max_letter = char\n    result = {}\n    for char, repetition in histogram_map.items():\n        if repetition == max_repetition:\n            result[char] = repetition\n    return result"}
{"task_id": "HumanEval/112", "completion": "    res = \"\".join([ch for ch in s if ch not in c])\n    return (res, res == res[::-1])"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_count = 0\n        for char in s:\n            if char.isdigit() and int(char) % 2 != 0:\n                odd_count += 1\n        result.append(\"the number of odd elements \" + str(odd_count) + \"n the str\" + str(odd_count) + \" of the 1nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    prefix_sum = [[0]*(m+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            prefix_sum[i][j] = prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] + grid[i-1][j-1]\n\n    def max_times(grid, capacity, n, m, prefix_sum):\n        ans = 0\n        for i in range(n):\n            for j in range(m):\n                for k in range(i, n):\n                    for l in range(m):\n                        ans = max(ans, math.ceil((prefix_sum[k+1][l+1] - prefix_sum[i][l+1] - prefix_sum[k+1][j] + prefix_sum[i][j] + grid[i][j]) / capacity))\n        return ans\n\n    return max_times(grid, capacity, n, m, prefix_sum)"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/117", "completion": "    def is_consonant(char):\n        return char.lower() not in \"aeiou\"\n    \n    words = s.split()\n    result = []\n    for word in words:\n        if sum(map(is_consonant, word)) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    vowels = \"aeiouAEIOU\"\n    vowel_between = \"\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i].isalpha() and word[i+1].isalpha() and word[i+2].isalpha() and word[i] in consonants and word[i+1] in consonants and word[i+2] in vowels:\n            vowel_between = word[i+1]\n            break\n    return vowel_between"}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if len(stack) == 0 else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/121", "completion": "    total_sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total_sum += lst[i]\n    return total_sum"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    result = []\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = n * 3 + 1\n        result.append(n)\n    return sorted(result)"}
{"task_id": "HumanEval/124", "completion": "    if date == '':\n        return False\n    date = date.split('-')\n    if len(date) != 3:\n        return False\n    month = int(date[0])\n    day = int(date[1])\n    year = int(date[2])\n    if month < 1 or month > 12:\n        return False\n    if year < 1000 or year > 9999:\n        return False\n    if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n        return False\n    if month in [4,6,9,11] and day < 1 or day > 30:\n        return False\n    if month == 2 and day < 1 or day > 29:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return 1 + sum(1 for i in range(26) if (i % 2 == 0))"}
{"task_id": "HumanEval/126", "completion": "    if not lst:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True\n\ndef has_duplicate(lst):\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\ndef is_sorted_and_no_duplicates(lst):\n    return is_sorted(lst) and not has_duplicate(lst)"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    return \"YES\" if isPrime(length) else \"NO\"\n\ndef isPrime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    \n    signs = [1]\n    for num in arr:\n        if num < 0:\n            signs.append(-signs.pop())\n        signs[-1] *= num\n        \n    result = 0\n    for sign in signs:\n        result += abs(sign)\n    \n    return result"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    prefix = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            prefix[i][j] = prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1] + grid[i - 1][j - 1]\n    ans = []\n    for i in range(k, 0, -1):\n        x, y = divmod(prefix[n][n], i)\n        ans.append(grid[x][y])\n        prefix[x][y] -= i\n    return ans[::-1]"}
{"task_id": "HumanEval/130", "completion": "    fib = [0, 1]\n    for i in range(2, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2] + fib[i + 1])\n    return fib"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n = n // 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    squared_lst = [round(num)**2 for num in lst]\n    return sum(squared_lst)"}
{"task_id": "HumanEval/134", "completion": "    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if last_char.isalpha() and not last_char.isalnum():\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "    max_index = -1\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] <= arr[i+1]:\n            return i\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "    negative_integers = [x for x in lst if x < 0]\n    if not negative_integers:\n        return None, None\n    \n    min_positive_integer = min([x for x in lst if x > 0])\n    return (max(negative_integers), min_positive_integer)"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    elif isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        a = float(a)\n        b = float(b)\n        return max(a, b)\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    return n%2==0 and (n-n%2)%2==0 and (n-n%2)//2>=2"}
{"task_id": "HumanEval/139", "completion": "    if n < 0:\n        return None\n    if n == 0:\n        return 1\n    result = 1\n    i = 1\n    while i <= n:\n        result = (result * i) % (10**9 + 7)\n        i += 1\n    return result"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    in_space = False\n    for char in text:\n        if char == \" \":\n            if in_space:\n                result += \"-\"\n            else:\n                result += \"_\"\n            in_space = True\n        else:\n            result += char\n            in_space = False\n    return result"}
{"task_id": "HumanEval/141", "completion": "    parts = file_name.split(\".\")\n    if len(parts) != 2:\n        return \"No\"\n    part1, part2 = parts[0], parts[1]\n    if not part1 or not part2 or len(part1) > 3 or len(part2) != 3 or part1[0].isdigit() or part1[1:].isdigit() or part2 not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i]**2\n        elif i % 4 == 0:\n            result += lst[i]**3\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word) > 1 and all(x < 2 for x in range(2, len(word) + 1)):\n            result.append(word)\n    return \" \".join(result)"}
{"task_id": "HumanEval/144", "completion": "    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    if num_x % den_x == 0 and num_n % den_n == 0:\n        return True\n    return False"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (int(str(num)[0]) % 2 != 0 or int(str(num)[-1]) % 2 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n - 1):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n        return x\n    elif n == 2:\n        return y\n    else:\n        return x_or_y(n-2, x, y)"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if num > 0 and int(num) % 2 != 0:\n            total += num * num\n    return total"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        extension_name = extension.split('.')[0]\n        cap_count = sum(1 for char in extension_name if char.isupper())\n        small_count = sum(1 for char in extension_name if char.islower())\n        strength = (cap_count - small_count) if cap_count > small_count else 0\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension_name\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    if a == b:\n        return True\n    len_a = len(a)\n    len_b = len(b)\n    if len_a < len_b:\n        return False\n    if b in a:\n        return True\n    b = b + b\n    if len_b == len(b):\n        return False\n    len_b = len(b)\n    return b in a"}
{"task_id": "HumanEval/155", "completion": "    num_str = str(num)\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = len(num_str) - even_count\n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "completion": "    val = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    syms = [\"m\", \"cm\", \"d\", \"cd\", \"xc\", \"XC\", \"X\", \"XI\", \"IX\", \"V\", \"IV\", \"I\", \"IV\", \"IX\", \"X\", \"XI\", \"XC\", \"X\", \"C\", \"XC\", \"XI\", \"X\", \"I\"]\n    roman_num = \"\"\n    for i in range(len(val)):\n        for _ in range(number//val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n    return roman_num"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = -1\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    total = number + need\n    if total > remaining:\n        return [total, 0]\n    else:\n        return [total, remaining-total]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operator) - 1):\n        if operator[i] == '+':\n            stack.append(operand[i] + operand[i + 1])\n        elif operator[i] == '*':\n            stack.append(operand[i] * operand[i + 1])\n        elif operator[i] == '-':\n            stack.append(operand[i] - operand[i + 1])\n        elif operator[i] == '//':\n            stack.append(operand[i] // operand[i + 1])\n        elif operator[i] == '**':\n            stack.append(operand[i] ** operand[i + 1])\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result if len(result) % 2 == 0 else result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    groups = []\n    stack = []\n    current_group = \"\"\n    \n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                if not stack:\n                    current_group += char\n                else:\n                    current_group += char\n            else:\n                groups.append(current_group)\n                current_group = char\n    \n    if current_group:\n        groups.append(current_group)\n        \n    return groups"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    return number - integer_part"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        if op < 0:\n            balance += op\n        else:\n            balance -= op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    \n    result = [numbers[0]]\n    \n    for i in range(1, len(numbers)):\n        result.extend([delimeter, numbers[i]])\n    \n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    deepest_level = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                deepest_level += 1\n    return [deepest_level] * len(paren_string)"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    return sum(numbers), 1 if not numbers else reduce(lambda x, y: y * x, numbers)"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    for i in range(len(numbers)):\n        max_element = max(numbers[:i+1])\n        result.append(max_element)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Returns the shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i:][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    res = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            res += str(int(a[i]) ^ int(b[i]))\n        else:\n            res += b[i]\n    return res"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_length = -1\n    result = None\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    return [string[i:] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    for char in music_string:\n        if char == 'o':\n            result.append(4)\n        elif char == 'o|':\n            result.append(2)\n        elif char == '.|':\n            result.append(1)\n    return result"}
{"task_id": "HumanEval/18", "completion": "    if not string or not substring:\n\t\treturn 0\n\tcount = 0\n\tindex = 0\n\twhile index < len(string):\n\t\tif string[index:index+len(substring)] == substring:\n\t\t\tcount += 1\n\t\t\tindex += len(substring)\n\t\telse:\n\t\t\tindex += 1\n\treturn count"}
{"task_id": "HumanEval/19", "completion": "    nums = numbers.split()\n    nums.sort(key=lambda x: int(x))\n    return ' '.join(nums)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (None, None)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    if len(numbers) < 2:\n        return numbers\n    min_val = min(numbers)\n    max_val = max(numbers)\n    scale = (max_val - min_val) / (numbers[-1] - numbers[0])\n    return [num - numbers[0] * scale for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return list(filter(lambda x: isinstance(x, int), values))"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Find a zero point of a polynomial with coefficients xs.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Number of coefficients should be even for a polynomial\")\n    coeff = xs[-1]\n    lower_bound = -coeff\n    upper_bound = coeff\n    while True:\n        mid = (lower_bound + upper_bound) / 2\n        if poly(xs, mid) > 0:\n            lower_bound = mid\n        else:\n            upper_bound = mid\n        if math.isclose(lower_bound, upper_bound, rel_tol=1e-9):\n            return lower_bound"}
{"task_id": "HumanEval/33", "completion": "    l.sort(key=lambda x: (x % 3, x))\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for element in l:\n        if element > max_element:\n            max_element = element\n    return max_element"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l.sort(key=lambda x: (x % 2, x))\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    fib = [0, 1]\n    for i in range(2, n + 1):\n        fib.append((fib[i - 1] + fib[i - 2]) % 1000000007)\n        if fib[i] == 1 and fib[i - 1] == 1:\n            break\n    return fib[n]"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    seen = set()\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            total = l[i] + l[j]\n            if total in seen:\n                return True\n            seen.add(l[j])\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n*(n-1)//2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    s = set()\n    for x in l:\n        if -x in s:\n            return True\n        s.add(x)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return 0\n    res = \"\"\n    while x > 0:\n        res += str(x % base)\n        x //= base\n    return res[::-1]"}
{"task_id": "HumanEval/45", "completion": "    area = 0.5 * a * h\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b = 0, 2\n        for _ in range(4, n+1):\n            a, b = b, a + b + 0\n        return b"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    res = 0\n    n = int(str(n))\n    while n > 0:\n        digit = n % 10\n        res = (res * 10 + digit) % p\n        n = n // 10\n    return res"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string from encoded string using above method.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    while (y != 0):\n\t\tcarry = x & y\n\t\tx = x ^ y\n\t\ty = carry << 1\n\treturn x"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a+b\n        return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if stack and stack[-1] == '<':\n                stack.pop()\n            else:\n                return False\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    s = set(l1)\n    return [x for x in l2 if x in s]"}
{"task_id": "HumanEval/59", "completion": "    factor = 2\n    while n > 1:\n        while n % factor == 0:\n            n = n // factor\n        factor += 1\n    return factor - 1"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = []\n    for i in range(n):\n        result.append(xs[i] * (i+1))\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(3, n+1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/64", "completion": "    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    if shift == 0:\n        return str(x)\n    elif shift == 1:\n        return str(x)[::-1]\n    else:\n        num_str = str(x)\n        shift = shift % len(num_str)\n        return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "    apples = 0\n    oranges = 0\n    mango = 0\n    s = s.split()\n    for item in s:\n        if 'apples' in item:\n            apples = int(item.replace('apples',''))\n        elif 'oranges' in item:\n            oranges = int(item.replace('oranges',''))\n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = min(arr)\n    min_val_index = arr.index(min_val)\n    return [min_val, min_val_index]"}
{"task_id": "HumanEval/69", "completion": "    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n    max_num = -1\n    for num, freq in freq_map.items():\n        if num > 0 and freq >= num:\n            max_num = max(max_num, num)\n    return max_num"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    result = []\n    index = 0\n    while lst:\n        min_val = min(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            result.append(max_val)\n            lst.remove(max_val)\n        else:\n            break\n        if lst:\n            min_val = min(lst)\n            result.append(min_val)\n            lst.remove(min_val)\n        index += 1\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    diff = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            diff += 1\n    return diff"}
{"task_id": "HumanEval/74", "completion": "    if not lst1 and not lst2:\n        return []\n\n    if not lst1:\n        return lst2\n\n    if not lst2:\n        return lst1\n\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "    primes = [True for i in range(a+1)]\n    p = 2\n    while p * p <= a:\n        if primes[p] == True:\n            for i in range(p * p, a+1, p):\n                primes[i] = False\n        p += 1\n\n    if a < 2:\n        return False\n\n    for i in range(2, a+1):\n        if primes[i] and a % i == 0:\n            return True\n\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x==0 or n==0:\n\t\treturn False\n\twhile(x>1):\n\t\tif(x%n!=0):\n\t\t\treturn False\n\t\tx//=n\n\treturn True"}
{"task_id": "HumanEval/77", "completion": "    return a >= 0 and (a ** (1/3)) * (a ** (1/3)) * (a ** (1/3)) == a"}
{"task_id": "HumanEval/78", "completion": "    prime = [0, 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = 0\n    n = len(num)\n    for i in range(n):\n        d = ord(num[i])\n        if d >= 48 and d <= 57:\n            d -= 48\n            if prime[d] == 1:\n                result += 1\n    return result"}
{"task_id": "HumanEval/79", "completion": "    res = \"\"\n    while decimal > 0:\n        res += str(decimal % 2)\n        decimal = decimal // 2\n    return \"db\" + \"0\" * (16 - len(res)) + res[::-1] + \"db\""}
{"task_id": "HumanEval/80", "completion": "    length = len(s)\n    if length < 3:\n        return False\n    for i in range(length - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    grade_map = {4.0: 'A+', 4.0-1: 'A', 3.7: 'A-', 3.3: 'B+', 2.7: 'B',\n                  2.3: 'C+', 1.7: 'C', 1.3: 'D+', 1: 'D', 0.7: 'D-',\n                  0: 'E'}\n    letter_grades = []\n    for gpa in grades:\n        letter_grades.append(grade_map[gpa])\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n==1:\n        return 1\n    else:\n        return 9 + 9 * (n-1)"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n\ttemp = N\n\twhile temp > 0:\n\t\tdigit = temp % 10\n\t\tsum += digit\n\t\ttemp = temp // 10\n\tbinary = bin(sum)[2:]\n\treturn binary"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    words = [word for word in words if word.strip()]\n    words.sort()\n    result = ' '.join(words)\n    return result"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, len(row) - j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result"}
{"task_id": "HumanEval/88", "completion": "    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] <= pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i+1], arr[high] = arr[high], arr[i+1]\n        return i+1\n    \n    def quick_sort(arr, low, high):\n        if low < high:\n            pi = partition(arr, low, high)\n            quick_sort(arr, low, pi-1)\n            quick_sort(arr, pi+1, high)\n    \n    if sum(array) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array"}
{"task_id": "HumanEval/89", "completion": "    result = ''\n    for char in s:\n        shifted_char = chr(((ord(char) - ord('a') + 1) * 2) % 26 + ord('a'))\n        result += shifted_char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    \n    first = second = float('inf')\n    \n    for num in lst:\n        if num < first:\n            second = first\n            first = num\n        elif num < second and num != first:\n            second = num\n    \n    return second if second != float('inf') else None"}
{"task_id": "HumanEval/91", "completion": "    n = len(S)\n    count = 0\n    for i in range(n):\n        if S[i] == 'I':\n            count += 1\n    return count\n\n# Test the function\nprint(is_bored(\"I love coding\"))  # Output: 1"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"AEIOUaeiou\"\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                result += chr((ord(char) + 2 - 97) % 26 + 97)\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(num):\n        return sum(int(digit) for digit in str(num))\n\n    largest_prime = max(num for num in lst if isPrime(num))\n    return sumOfDigits(largest_prime)"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n    \n    for key in dict:\n        if not (isinstance(key, str) and key.islower() or isinstance(key, str) and key.isupper()):\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    result = 0\n    while b:\n        if b % 10:\n            result += a * b % 10\n        a, b = b, a % b\n    return result"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(1, len(s), 2):\n        if s[i].lower() in \"aeiou\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num % 1 == 0:\n        return int(num)\n    else:\n        return int(num) + 1 if num % 1 > 0 else int(num) - 1"}
{"task_id": "HumanEval/100", "completion": "    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(i * (i + 1) // 2)\n        else:\n            res.append((i + 1) * i // 2)\n    return res"}
{"task_id": "HumanEval/101", "completion": "    if ',' in s:\n        return s.split(',')\n    else:\n        return s.split()"}
{"task_id": "HumanEval/102", "completion": "    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            max_even = max(max_even, i)\n    return max_even"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    sum = (m - n + 1) // 2\n    if (m - n + 1) % 2 == 1:\n        sum += 1\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        if all(int(d) % 2 != 0 for d in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef replace_with_names(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num).replace(str(num), str(num)))\n        else:\n            result.append(str(num))\n    return result\n\ndef sort_and_replace(arr):\n    sorted_arr = by_length(arr)\n    replaced_arr = replace_with_names(sorted_arr)\n    return replaced_arr"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i%2 == 0:\n            result.append(i)\n        else:\n            result.append(sum([j for j in range(1, i+1)]))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even_count = n // 2\n    odd_count = n - even_count\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(map(int, str(abs(num)))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    elif arr[0] <= arr[1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/110", "completion": "    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    if odd_count > 0:\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    max_count = 0\n    result = {}\n    for word in words:\n        count = word.count(max(word, key=word.count))\n        if count > max_count:\n            max_count = count\n            result = {word: count}\n        elif count == max_count:\n            result[word] = count\n    return result"}
{"task_id": "HumanEval/112", "completion": "    result = s\n    for char in c:\n        result = result.replace(char,'')\n    return (result, result==result[::-1])"}
{"task_id": "HumanEval/113", "completion": "    res = []\n    for s in lst:\n        count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                count += 1\n        res.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return res"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows, cols = len(grid), len(grid[0])\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    def is_valid(row, col, prev_row, prev_col):\n        return 0 <= row < rows and 0 <= col < cols and grid[row][col] == 1 and (row, col) != (prev_row, prev_col)\n    \n    def dfs(row, col, visited, level):\n        if not is_valid(row, col, -1, -1):\n            return\n        visited.add((row, col))\n        for dr, dc in directions:\n            r, c = row + dr, col + dc\n            if is_valid(r, c, row, col):\n                dfs(r, c, visited, level + 1)\n    \n    ans = 0\n    for i in range(rows):\n        for j in range(cols):\n            visited = set()\n            if grid[i][j] == 1:\n                dfs(i, j, visited, 0)\n                ans = max(ans, level + 1)\n    \n    return ans"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    vowels = \"aeiouAEIOU\"\n    result = []\n    words = s.split()\n    for word in words:\n        consonants = sum(1 for c in word if c not in vowels)\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"AEIOUaeiou\"\n    vowel = \"\"\n    i = len(word) - 1\n    while i >= 0:\n        if word[i] in vowels:\n            vowel = word[i]\n            break\n        i -= 1\n    if vowel == \"\":\n        return \"\"\n    i = 0\n    while i < len(word):\n        if word[i] in vowels:\n            return word[i]\n        i += 1\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for p in lst:\n        if p == '(':\n            stack.append(p)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if len(stack) == 0 else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[len(arr)-k:]"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "    sum_digits = 0\n    for i in range(k):\n        sum_digits += sum(map(int, str(arr[i]))[:2])\n    return sum_digits"}
{"task_id": "HumanEval/123", "completion": "    sequence = []\n    while n != 1:\n        sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return sorted(sequence)"}
{"task_id": "HumanEval/124", "completion": "    if len(date) != 8:\n        return False\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12):\n        return False\n    days_in_month = [0, 31, 28, 31, 30, 31, 31, 31, 30, 31, 31, 31]\n    days_in_month_leap = [0, 31, 29, 31, 30, 31, 31, 31, 30, 31, 31, 31]\n    if int(year)%4==0 and (int(year)%100!=0 or int(year)%400==0):\n        days = days_in_month_leap[int(month)]\n    else:\n        days = days_in_month[int(month)]\n    if not (1 <= int(day) <= days):\n        return False\n    if not (int(year) >= 1900):\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for i in range(26):\n            if chr(i + ord('a')) in txt:\n                count += 1\n        return count"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/128", "completion": "    if len(arr) == 0:\n        return None\n    signs = 1\n    magnitude = 0\n    for num in arr:\n        if num == 0:\n            return None\n        if num < 0:\n            signs *= -1\n            num = -num\n        magnitude += num\n    return signs * magnitude"}
{"task_id": "HumanEval/129", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    prefix_sum = [[0]*(cols+1) for _ in range(rows+1)]\n    for i in range(1, rows+1):\n        for j in range(1, cols+1):\n            prefix_sum[i][j] = prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] + grid[i-1][j-1]\n    min_path = [0]*k\n    for i in range(k):\n        min_val = float('inf')\n        for j in range(1, rows+1):\n            for m in range(1, cols+1):\n                cur_val = prefix_sum[j][m] - prefix_sum[j-1][m] - prefix_sum[j][m-1] + prefix_sum[j-1][m-1]\n                if cur_val < min_val:\n                    min_val = cur_val\n                    min_path[i] = grid[j-1][m-1]\n        grid[0][0] = min_val\n    return min_path"}
{"task_id": "HumanEval/130", "completion": "    a, b, c = 1, 3, 2\n    res = [a, b]\n    for _ in range(2, n + 1):\n        c = tri(n - 1) + tri(n - 2) + tri(n + 1)\n        res.append(c)\n    return res"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n = n // 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        if num < 0:\n            num = -num\n        result += int(num) ** 2\n    return result"}
{"task_id": "HumanEval/134", "completion": "    txt = txt.strip()  # remove leading and trailing spaces\n    last_char = txt[-1]\n    if last_char.isalpha():\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i + 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    \n    if not negatives or not positives:\n        return None, None\n    \n    return max(negatives), min(positives)"}
{"task_id": "HumanEval/137", "completion": "    a_type = type(a)\n    b_type = type(b)\n    \n    if a_type == b_type:\n        return None\n    \n    if a_type in [float, int]:\n        return b\n    elif b_type in [float, int]:\n        return a\n    else:\n        a_num = float(a.replace(',', '.')) if ',' in a else float(a)\n        b_num = float(b.replace(',', '.')) if ',' in b else float(b)\n        \n        if a_num > b_num:\n            return a\n        else:\n            return b"}
{"task_id": "HumanEval/138", "completion": "    if n % 4 != 0:\n        return False\n    total = 0\n    for i in range(1, n//2 + 1, 2):\n        total += i\n    return total == n"}
{"task_id": "HumanEval/139", "completion": "    if n <= 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name[:file_name.find('.')].isalnum() or not file_name[file_name.find('.')+1:].isalnum():\n        return 'No'\n    if file_name.find('.')+1 != len(file_name) and file_name[file_name.find('.')+1:].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    product = x_num * n_num\n    divisor = x_den * n_den\n    \n    return product % divisor == 0"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(n):\n        if n < 0:\n            n = -n\n        total = 0\n        while n:\n            total += n % 10\n            n //= 10\n        return total\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 2 == 0 or num % 10 == 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = []\n    for i in range(1, n + 1):\n        a.append(i * i - i + 1)\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    i, j = 0, 0\n    res = []\n    while i < 8 and j < 8:\n        if planets[i] == planet1:\n            j = 0\n            i += 1\n        elif planets[j] == planet2:\n            i = 0\n            j += 1\n        else:\n            res.append(planets[j])\n            j += 1\n    return tuple(res)"}
{"task_id": "HumanEval/149", "completion": "    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n    return sorted(result)"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n        return x\n    elif n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    total_sum = 0\n    for num in lst:\n        if num >= 0 and int(num) % 2 != 0:\n            total_sum += num * num\n    return total_sum"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i]==guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = \"\"\n    max_strength = -1\n    for extension in extensions:\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = len(extension) - cap_count\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + \".\" + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    b = b + b  # append b with itself to account for rotations\n    return any(a.find(b[i:i+len(a)]) != -1 for i in range(len(b) - len(a) + 1))"}
{"task_id": "HumanEval/155", "completion": "    if num < 0:\n        return (-1, -1)\n    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "    val = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    syms = [\"m\", \"cm\", \"d\", \"cd\", \"xc\", \"XC\", \"X\", \"IX\", \"i\", \"V\", \"IV\", \"X\", \"IX\", \"I\"]\n    roman_num = ''\n    for i in range(len(val)):\n        for _ in range(number//val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n    return roman_num.lower()"}
{"task_id": "HumanEval/157", "completion": "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_word = word\n        elif len(set(word)) == max_chars and word < max_word:\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    total = number + need\n    if total > remaining:\n        return [total, 0]\n    else:\n        return [total, remaining - total]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(1, len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result = result ** operand[i]\n    return result"}
{"task_id": "HumanEval/161", "completion": "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = chr(ord(s[i]) ^ 32)\n    return \"\".join(s)"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for num in range(a, b+1):\n        str_num = str(num)\n        for digit in str_num:\n            if int(digit) % 2 == 0:\n                even_digits.append(int(digit))\n    return sorted(even_digits)"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    groups = []\n    group = \"\"\n    \n    for char in paren_string:\n        if char != ' ':\n            group += char\n        \n        if char == ')' and group[0] == '(':\n            groups.append(group[1:])\n            group = \"\"\n    \n    return groups"}
{"task_id": "HumanEval/2", "completion": "    int_part = int(number)\n\tdecimal_part = number - int_part\n\treturn decimal_part"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        elif operation < 0:\n            balance -= operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                max_depth += 1\n            else:\n                stack.pop()\n                max_depth = max(max_depth, len(stack))\n    return [max_depth] * len(paren_string.split())"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    return sum(numbers), 1 if not numbers else reduce(lambda x, y: y*x, numbers)"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n    return result"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i:][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            result += str(int(a[i]) ^ int(b[i]))\n        else:\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    max_str = \"\"\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_str = s\n    return max_str"}
{"task_id": "HumanEval/13", "completion": "    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "    beats = 0\n    whole_note = 4\n    half_note = 2\n    quarter_note = 1\n\n    for char in music_string:\n        if char == 'o':\n            beats += whole_note\n        elif char == 'o|':\n            beats += half_note\n        elif char == '.|':\n            beats += quarter_note\n\n    return [beats]"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    i = 0\n    while i < len(string):\n        if string.startswith(substring, i):\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = numbers.split()\n    num_list.sort(key=lambda x: (int(x) % 10, int(x) // 10))\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    if len(numbers) < 2:\n        return numbers\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    return [(num - min_val) / (max_val - min_val) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return list(filter(lambda x: isinstance(x, int), values))"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    if n == 1:\n        return 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return \"\"\n    result = strings[0]\n    for s in strings[1:]:\n        result += s\n    return result"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    if len(xs) % 2 != 0:\n        raise ValueError(\"Number of coefficients should be even\")\n    largest_non_zero = max([abs(x) for x in xs if x != 0])\n    x = largest_non_zero / 2\n    while abs(poly(xs, x)) > 1e-9:\n        x += largest_non_zero / 2\n    return x"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l = [0]*n\n    for i in range(n):\n        if i % 3 != 0:\n            l[i] = l[i]\n        else:\n            l[i] = 0\n    l.sort()\n    for i in range(n):\n        if i % 3 == 0:\n            l[i] = l[i]\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l.sort(key=lambda x: x % 2)\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from given encoded cyclic string.\n    \"\"\"\n    # reverse encoded string.\n    s = s.replace('_', '!')\n    s = s.replace('!', '*')\n    s = s.replace('*', '=')\n    s = s.replace('=', '#')\n    s = s.replace('#', '!')\n    s = s.replace('!', '@')\n    s = s.replace('@', '*')\n    s = s.replace('*', '&')\n    s = s.replace('&', '=')\n    s = s.replace('=', '#')\n    s = s.replace('#', '!')\n    s = s.replace('!', '@')\n    s = s.replace('@', '*')\n    s = s.replace('*', '&')\n    s = s.replace('&', '=')\n    s = s.replace('=', '#')\n    s = s.replace('#', '!')\n    s = s.replace('!', '@')\n    s = s.replace('@', '*')\n    s = s.replace('*', '&')\n    s = s.replace('&', '=')\n    s = s.replace('=', '#')\n    s = s.replace('#', '!')\n    s = s.replace('!', '@')\n    s = s.replace('@', '*')\n    s = s.replace('*', '&')\n    s = s.replace('&', '=')\n    s = s.replace('=', '#')\n    s = s.replace('#', '!')\n    s = s.replace('!', '@')\n    s = s.replace('@', '*')\n    s = s.replace('*', '&')\n    s = s.replace('&', '=')\n    s = s.replace('=', '#')\n    s = s.replace('#', '!')\n    s = s.replace('!', '@')\n    s = s.replace('@', '*')\n    s = s.replace('*', '&')\n    s = s.replace('&', '=')\n    s = s.replace('=', '#')\n    s = s.replace('#', '!')\n    s = s.replace('!', '@')\n    s = s.replace('@', '*')\n    s = s.replace('*', '&')\n    s = s.replace('&', '=')\n    s = s.replace('=', '#')\n    s = s.replace('#', '!')\n    s = s.replace('!', '@')\n    s = s.replace('@', '*')\n    s = s.replace('*', '&')\n    s = s.replace('&', '=')\n    s = s.replace('=', '#')\n    s = s.replace('#', '!')\n    s = s.replace('!', '@')\n    s = s.replace('@', '*')\n    s = s.replace('*', '&')\n    s = s.replace('&', '=')\n    s = s.replace('=', '#')\n    s = s.replace('#', '!')\n    s = s.replace('!', '@')\n    s = s.replace('@', '*')\n    s = s.replace('*', '&')\n    s = s.replace('&', '=')\n    s = s.replace('=', '#')\n    s = s.replace('#', '!')\n    s = s.replace('!', '@')\n    s = s.replace('@', '*')\n    s = s.replace('*', '&')\n    s = s.replace('&', '=')\n    s = s.replace('=', '#')\n    s = s.replace('#', '!')\n    s = s.replace('!', '@')\n    s = s.replace('@', '*')\n    s = s.replace('*', '&')\n    s = s.replace('&', '=')\n    s = s.replace('=', '#')\n    s = s.replace('#', '!')\n    s = s.replace('!', '@"}
{"task_id": "HumanEval/39", "completion": "    fib_set = set()\n    a, b = 0, 1\n    while b <= n:\n        fib_set.add(b)\n        a, b = b, a + b\n    for num in range(2, n+1):\n        if num not in fib_set and is_prime(num):\n            return num\n    return -1\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    n = len(l)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return (n*(n-1))//2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    num_map = {}\n    for num in l:\n        if -num in num_map:\n            return True\n        num_map[num] = True\n    return False"}
{"task_id": "HumanEval/44", "completion": "    return str(x).zfill(len(bin(x))-2)[::-1]"}
{"task_id": "HumanEval/45", "completion": "    area = 0.5 * a * h\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n < 0:\n        raise ValueError(\"Input should be non-negative\")\n    elif n == 0 or n == 1:\n        return 0\n    else:\n        a, b, c = 0, 2, 1\n        for _ in range(2, n + 1):\n            c = a + b + c\n            a, b = b, c\n        return c"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2-1]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    if n == 0:\n        return 0\n    n = n % p\n    if n == 0:\n        return 0\n    res = 1\n    while n > 0:\n        if n % 2 == 1:\n            res = (res * n) % p\n        n = n // 2\n    return res"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if stack and stack[-1] == '<':\n                stack.pop()\n            else:\n                return False\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if not l:\n        return True\n\n    increasing = True\n    decreasing = False\n\n    for i in range(1, len(l)):\n        if l[i] == l[i - 1]:\n            continue\n        elif l[i] < l[i - 1]:\n            if increasing:\n                continue\n            else:\n                return False\n        elif l[i] > l[i - 1]:\n            if decreasing:\n                return False\n            else:\n                decreasing = True\n                increasing = False\n        else:\n            continue\n\n    return True"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1 & set2)"}
{"task_id": "HumanEval/59", "completion": "    max_prime = 2\n    while max_prime * max_prime <= n:\n        if n % max_prime == 0:\n            n = n / max_prime\n        else:\n            max_prime += 1\n    return int(n)"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        else:\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = []\n    for i in range(n):\n        if i + 2 <= n:\n            result.append((i + 2) * xs[i] + result[i + 1])\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    str_x = str(x)\n    if shift >= len(str_x):\n        return str_x[::-1]\n    else:\n        return str_x[-shift:] + str_x[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    upper_sum = 0\n    for char in s:\n        if char.isupper():\n            upper_sum += ord(char)\n    return upper_sum"}
{"task_id": "HumanEval/67", "completion": "    mangoes = 0\n    total_oranges = 0\n    total_apples = 0\n    for i in range(len(s)):\n        if i%2 == 0:\n            if \"oranges\" in s[i]:\n                total_oranges += int(s[i].split()[0])\n            else:\n                total_apples += int(s[i].split()[0])\n        else:\n            if \"mangoes\" in s[i]:\n                mangoes += int(s[i].split()[0])\n    return n - total_oranges - total_apples + mangoes"}
{"task_id": "HumanEval/68", "completion": "    min_even = float('inf')\n    idx = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n                min_even = arr[i]\n                idx = i\n    return [min_even, idx] if idx != -1 else []"}
{"task_id": "HumanEval/69", "completion": "    max_val = -1\n    freq_map = {}\n    for val in lst:\n        if val not in freq_map:\n            freq_map[val] = 1\n        else:\n            freq_map[val] += 1\n    \n    for val in lst:\n        if val > 0 and freq_map[val] >= val:\n            if val > max_val:\n                max_val = val\n    \n    return max_val"}
{"task_id": "HumanEval/70", "completion": "    if len(lst) < 2:\n        return lst\n    \n    mid = len(lst) // 2\n    left = lst[:mid]\n    right = lst[mid:]\n    \n    return [min(left)] + strange_sort_list(right) + [max(left)] if len(left) > 0 else []"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if len(q) <= 1:\n        return True\n    if sum(q) > w:\n        return False\n    return q == q[::-1]"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    odd_count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            odd_count += 1\n    return odd_count"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    if total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2 if total_chars_lst1 > total_chars_lst2 else lst1"}
{"task_id": "HumanEval/75", "completion": "    primes = [True] * (a + 1)\n    p = 2\n    while p * p <= a:\n        if primes[p] == True:\n            for i in range(p * p, a + 1, p):\n                primes[i] = False\n        p += 1\n\n    for i in range(2, a + 1):\n        if a % i == 0 and primes[i]:\n            return True\n\n    return False"}
{"task_id": "HumanEval/76", "completion": "    return (x != 1) and (n > 1) and (x == n**(x.bit_length()-1))"}
{"task_id": "HumanEval/77", "completion": "    return (int(a ** (1 / 3)) ** 3 == a)"}
{"task_id": "HumanEval/78", "completion": "    key = {'A': '1', 'B': '2', 'C': '3', 'D': '4', 'E': '5', 'F': '6'}\n    num_str = ''\n    for i in range(0, len(num), 2):\n        num_str += key[num[i]]\n    return int(num_str, 16)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef countPrimeHexDigits(num: str) -> int:\n    hex_num = hex_key(num)\n    count = 0\n    while hex_num:\n        if is_prime(hex_num % 10):\n            count += 1\n        hex_num //= 10\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grade = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grade.append('A+')\n        elif 3.7 <= grade <= 4.0:\n            letter_grade.append('A')\n        elif 3.3 <= grade <= 3.7:\n            letter_grade.append('A-')\n        elif 2.7 <= grade <= 3.3:\n            letter_grade.append('B')\n        elif 2.3 <= grade <= 2.7:\n            letter_grade.append('B-')\n        elif 1.7 <= grade <= 2.3:\n            letter_grade.append('C+')\n        elif 1.3 <= grade <= 1.7:\n            letter_grade.append('C')\n        elif 1.0 <= grade <= 1.3:\n            letter_grade.append('C-')\n        elif grade <= 1.0:\n            letter_grade.append('D+')\n    return letter_grade"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(length)"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n    else:\n        return (n * (n - 1)) // 2 + 1"}
{"task_id": "HumanEval/84", "completion": "    binary = bin(N)[2:]\n    total_sum = sum([int(bit) for bit in binary])\n    return bin(total_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:  # odd index\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/86", "completion": "    return ''.join(sorted(s))"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    if not lst:\n        return result\n\n    for i in range(len(lst)):\n        if x in lst[i]:\n            result.append((i, lst[i].index(x)))\n\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return array\n    if sum(array[:2]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    return ''.join([chr(((ord(c) - 97 - 2) % 26) + 97) for c in s])"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.')\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or y == x + z or z == x + y:\n        return all(isinstance(num, int) for num in [x, y, z])\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char in vowels:\n            if char.isupper():\n                result += chr(ord(char) + 2)\n            else:\n                result += chr(ord(char) - 2)\n        else:\n            result += char.swapcase()\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def sumOfDigits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    largest_prime = 0\n    for num in lst:\n        if num > largest_prime and isPrime(num):\n            largest_prime = num\n    \n    if largest_prime == 0:\n        return \"No prime number found\"\n    \n    return sumOfDigits(largest_prime)"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = dict.keys()\n    if all(key.islower() for key in keys):\n        return True\n    if all(key.isupper() for key in keys):\n        return True\n    return False"}
{"task_id": "HumanEval/96", "completion": "    if n <= 0:\n        return []\n    primes = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if primes[p]:\n            for i in range(p * p, n + 1, p):\n                primes[i] = False\n        p += 1\n    return [x for x in range(2, n) if primes[x]]"}
{"task_id": "HumanEval/97", "completion": "    return (a * b) % 10"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(1, len(s), 2):\n        if s[i].isupper() and s[i] in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    rounded_down = int(num)\n    rounded_up = int(num + 1)\n    if abs(num - rounded_down) < abs(num - rounded_up):\n        return rounded_down\n    else:\n        return rounded_up"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        result.append(2*i + 1 if i % 2 != 0 else 2*i)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()  # Split string at spaces\n    return words"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -2):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total_sum = (m - n + 1) // 2\n    return bin(total_sum)[2:]"}
{"task_id": "HumanEval/104", "completion": "    ans = []\n    for num in x:\n        num_str = str(num)\n        if all(int(digit) % 2 != 0 for digit in num_str):\n            ans.append(int(num_str))\n    return sorted(ans)"}
{"task_id": "HumanEval/105", "completion": "    nums = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    return sorted(arr, key=lambda x: (x > 0, -len(str(x)), nums.get(x)))\n\ndef replaceByNames(arr):\n    res = []\n    for num in by_length(arr):\n        if num > 0 and num < 10:\n            res.append(num_to_name(num))\n    return res\n\ndef num_to_name(num):\n    num_str = str(num)\n    if num_str[0] == '0':\n        return num_str\n    num_dict = {'1': 'One', '2': 'Two', '3': 'Three', '4': 'Four', '5': 'Five', '6': 'Six', '7': 'Seven', '8': 'Eight', '9': 'Nine'}\n    return num_dict[num_str]"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(1)\n            for j in range(2, i+1):\n                result[-1] *= j\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n+1):\n        if i == i[::-1]:\n            if i % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n    return even_palindromes, odd_palindromes"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            if arr[i] == n-1:\n                return False\n            while arr[i] != 0 and arr[i] != n-1:\n                arr[arr[i]] = arr[arr[i]-1]\n            if arr[i] == 0:\n                arr[arr[i]] = n-1\n            else:\n                arr[0] = arr[n-1]\n                arr.pop(n-1)\n            i = 0\n    return True"}
{"task_id": "HumanEval/110", "completion": "    if len(lst1) != len(lst2):\n        return \"NO\"\n    even_count = sum(1 for x in lst1 if x % 2 == 0)\n    odd_count = len(lst1) - even_count\n    if even_count == 0 or even_count == odd_count:\n        return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    hist = {}\n    for word in words:\n        hist[word] = hist.get(word, 0) + 1\n    return hist"}
{"task_id": "HumanEval/112", "completion": "    new_str = \"\"\n    for i in s:\n        if i not in c:\n            new_str += i\n    return new_str, new_str == new_str[::-1]"}
{"task_id": "HumanEval/113", "completion": "    def count_odd_digits(s):\n        count = 0\n        for char in s:\n            if char.isdigit() and int(char) % 2 != 0:\n                count += 1\n        return count\n\n    result = []\n    for s in lst:\n        result.append(f\"the number of odd elements {count_odd_digits(s)}n the str{count_odd_digits(s)}ng {count_odd_digits(s)} of the {count_odd_digits(s)}nput.\")\n    \n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    m = len(grid)\n    n = len(grid[0])\n    ans = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                ans += min(capacity, grid[i][j])\n    return ans"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/117", "completion": "    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        count = 0\n        for char in word:\n            if char in consonants:\n                count += 1\n        return count\n\n    words = s.split()\n    selected_words = [word for word in words if count_consonants(word) == n]\n    return selected_words"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    vowel_found = False\n    closest_vowel = ''\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in consonants and word[i+1] in consonants:\n            if not vowel_found:\n                vowel_found = True\n                closest_vowel = word[i+1]\n            else:\n                if word[i+1] in vowels and word[i+1] < closest_vowel:\n                    closest_vowel = word[i+1]\n    return closest_vowel"}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(0, len(lst), 2):\n        total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        num = arr[i]\n        while num >= 10:\n            num = sum(int(digit) for digit in str(num))\n        sum += num\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    def collatz(num):\n        if num % 2 == 0:\n            return num // 2\n        else:\n            return 3 * num + 1\n\n    seq = [n]\n    while seq[-1] != 1:\n        next_num = collatz(seq[-1])\n        seq.append(next_num)\n\n    return [x for x in seq if x % 2 != 0]"}
{"task_id": "HumanEval/124", "completion": "    date_format = '%m-%d-%Y'\n    try:\n        datetime.strptime(date, date_format)\n    except ValueError:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([char for char in txt if ord(char) % 2 != 0])"}
{"task_id": "HumanEval/126", "completion": "    seen = set()\n    prev = float('-inf')\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n        if num < prev:\n            return False\n        prev = num\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start + 1\n        if length == 1:\n            return \"YES\"\n        for i in range(2, length):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign = 1\n    result = 0\n    for num in arr:\n        if num < 0:\n            sign = -sign\n        result += abs(num) * sign\n    return result * sign"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    \n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i > 0:\n                dp[i][k] = min(dp[i][k], dp[i - 1][k - 1] + grid[i - 1][j - 1])\n            if j > 0:\n                dp[i][k] = min(dp[i][k], dp[i][k - 1] + grid[i - 1][j - 1])\n    \n    return dp[n][k]"}
{"task_id": "HumanEval/130", "completion": "    a, b, c = 0, 1, 1\n    res = [0, 1]\n    for _ in range(2, n + 1):\n        a, b = b, a + b + c\n        res.append(b)\n        c = b\n    return res"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in string:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        num_ceil = int(num + 0.5)\n        result += num_ceil * num_ceil\n    return result"}
{"task_id": "HumanEval/134", "completion": "    txt = txt.strip()  # Remove leading and trailing spaces\n    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "    max_index = -1\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            max_index = max(max_index, i)\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n    \n    if not neg_integers or not pos_integers:\n        return None, None\n    \n    max_neg = max(neg_integers)\n    min_pos = min(pos_integers)\n    \n    return (max_neg, min_pos)"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    elif isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        a_float = float(a)\n        b_float = float(b)\n        return max(a_float, b_float)\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    count = 0\n    for i in range(2, n, 2):\n        if n - i >= i:\n            count += 1\n    return count == 4"}
{"task_id": "HumanEval/139", "completion": "    if n <= 0:\n        return 0\n    else:\n        result = 1\n        for i in range(2, n+1):\n            result *= i\n        return result"}
{"task_id": "HumanEval/140", "completion": "    result = []\n    for char in text:\n        if char == \" \":\n            result.append(\"_\")\n        elif char == \"-\":\n            result.append(\"-\")\n        else:\n            result.append(char)\n    return \"\".join(result)"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 12:\n        return \"No\"\n    if file_name.count('.') != 1:\n        return \"No\"\n    if not file_name[:file_name.find('.')].isalnum():\n        return \"No\"\n    if not file_name[file_name.find('.')+1:].endswith(('.txt', 'exe', 'dll')):\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = []\n    for word in words:\n        if len(word) in primes:\n            result.append(word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "completion": "    numerator_x, denominator_x = map(int, x.split(\"/\"))\n    numerator_n, denominator_n = map(int, n.split(\"/\"))\n    result = numerator_x * numerator_n\n    result //= denominator_x * denominator_n\n    return result % 1 == 0"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(num):\n        total = 0\n        while num:\n            total += num % 10\n            num //= 10\n        return total\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 2 != 0) and (num % 10 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    if planet1 not in ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'] or planet2 not in ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']:\n        return ()\n\n    if planet1 == planet2:\n        return (planet1,)\n\n    if planet1 == 'Mercury':\n        return ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\n    if planet2 == 'Neptune':\n        return ('Saturn', 'Uranus', 'Neptune')\n\n    if planet2 == 'Uranus':\n        return ('Saturn', 'Uranus', 'Neptune')\n\n    if planet2 == 'Saturn':\n        return ('Uranus', 'Neptune')\n\n    if planet1 == 'Venus':\n        return ('Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\n    if planet1 == 'Earth':\n        return ('Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\n    if planet1 == 'Mars':\n        return ('Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\n    if planet1 == 'Jupiter':\n        return ('Saturn', 'Uranus', 'Neptune')\n\n    if planet1 == 'Saturn':\n        return ('Uranus', 'Neptune')\n\n    if planet1 == 'Uranus':\n        return ('Neptune')\n\n    if planet1 == 'Neptune':\n        return ()"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst)"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n\t\treturn x\n\telif n % 2 == 0:\n\t\treturn x_or_y(n // 2, x, y)\n\telse:\n\t\treturn y"}
{"task_id": "HumanEval/151", "completion": "    odd_numbers = [x for x in lst if isinstance(x, int) and x % 2 != 0]\n    return sum(odd_numbers)"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for ext in extensions:\n        cap = len(ext) - len(ext.lower())\n        sm = len(ext) - len(ext.upper())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    b = b + b # convert the second word to its rotations\n    return any(b in a)"}
{"task_id": "HumanEval/155", "completion": "    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = len(num_str) - even_count\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    values = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    symbols = ['m', 'cm', 'd', 'cd', 'xc', 'x', 'xvii', 'i', 'xvi', 'ix', 'xv', 'ix', 'xIV', 'xIII', 'xi', 'xI', 'IV', 'III', 'II', 'I']\n    roman_num = \"\"\n    i = 0\n    while number > 0:\n        for _ in range(number // values[i]):\n            roman_num += symbols[i]\n            number -= values[i]\n        i += 1\n    return roman_num.lower()"}
{"task_id": "HumanEval/157", "completion": "    if a == 0 or b == 0 or c == 0:\n        return False\n    elif a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_unique_chars:\n            max_unique_chars = len(set(word))\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    if number + remaining <= need:\n        return [number + remaining, remaining]\n    else:\n        return [number + need, 0]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    i = 0\n    while len(operand) > 1:\n        if operator[i] == '+':\n            num2 = operand.pop()\n            num1 = operand.pop()\n            operand.append(num1 + num2)\n        elif operator[i] == '-':\n            num2 = operand.pop()\n            num1 = operand.pop()\n            operand.append(num1 - num2)\n        elif operator[i] == '*':\n            num2 = operand.pop()\n            num1 = operand.pop()\n            operand.append(num1 * num2)\n        elif operator[i] == '//':\n            num2 = operand.pop()\n            num1 = operand.pop()\n            operand.append(num1 // num2)\n        elif operator[i] == '**':\n            num2 = operand.pop()\n            num1 = operand.pop()\n            operand.append(num1 ** num2)\n        i += 1\n    return operand.pop()"}
{"task_id": "HumanEval/161", "completion": "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].swapcase()\n        else:\n            s[i] = s[i]\n    return ''.join(s)"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for num in range(a, b+1):\n        str_num = str(num)\n        if '0' not in str_num and '1' not in str_num:\n            for digit in str_num:\n                if int(digit) % 2 == 0:\n                    even_digits.append(int(digit))\n    return sorted(even_digits)"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(1, len(numbers)):\n        if abs(numbers[i] - numbers[i-1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    groups = []\n    group = \"\"\n    stack = []\n    \n    for char in paren_string:\n        if char == \"(\":\n            if stack:\n                group += \"(\"\n            else:\n                groups.append(group)\n                group = \"(\"\n                stack.append(\"(\")\n        elif char == \")\":\n            if stack:\n                if stack[-1] == \"(\":\n                    stack.pop()\n                    group += \")\"\n                else:\n                    group += \")\"\n            else:\n                groups.append(group)\n                group = \")\"\n        else:\n            group += char\n    \n    if stack:\n        groups.append(group)\n    \n    return groups"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n\tdecimal_part = number - integer_part\n\treturn decimal_part"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        elif balance > 0:\n            balance -= operation\n        else:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation_sum = sum(abs(x - mean) for x in numbers)\n    return deviation_sum / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(0, len(numbers) - 1, 2):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            max_depth = max(max_depth, len(stack))\n            stack.pop()\n    return [max_depth] * len(paren_string)"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    return (sum(numbers), 1) if numbers[0] == 0 else (sum(numbers), 0) if numbers[0] < 0 else (sum(numbers), numbers[0])"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_val = float('-inf')\n    for i in range(len(numbers)):\n        if numbers[i] > max_val:\n            max_val = numbers[i]\n        result.append(max_val)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    if is_palindrome(string):\n        return string\n    i = 1\n    while True:\n        if is_palindrome(string + string[:i][::-1]):\n            return string + string[:i][::-1]\n        i += 1"}
{"task_id": "HumanEval/11", "completion": "    result = ''\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            result += str(int(a[i]) ^ int(b[i]))\n        else:\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = 0\n    max_string = ''\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_string = s\n    return max_string"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    result = \"\"\n    for i in range(n + 1):\n        result += str(i) + \" \"\n    return result.strip()"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "    beats = [4]  # Whole note (4 beats)\n    for char in music_string:\n        if char == 'o':\n            beats.append(4)  # Whole note\n        elif char == 'o|':\n            beats.append(2)  # Half note\n        elif char == '.|':\n            beats.append(1)  # Quater note\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    overlap = 0\n    while True:\n        pos = string.find(substring, overlap)\n        if pos == -1:\n            break\n        if pos == overlap:\n            count += 1\n        else:\n            count += 1\n            overlap = pos + 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = numbers.split()\n    num_list.sort(key=lambda x: (0 if x == 'zero' else int(x)))\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "    vowels = \"aeiou\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Returns a zero of polynomial with coefficients xs.\n    It ensures that the polynomial is strictly increasing and then uses\n    bisection method to find a zero.\n    \"\"\"\n    x1 = 0\n    x2 = 1\n    while poly(xs, x1) > 0:\n        x1 += 1\n    while poly(xs, x2) > 0:\n        x2 -= 1\n    epsilon = 0.0001\n    while x2 - x1 > epsilon:\n        x_new = (x1 + x2) / 2\n        if poly(xs, x_new) > 0:\n            x1 = x_new\n        else:\n            x2 = x_new\n    return x_new"}
{"task_id": "HumanEval/33", "completion": "    for i in range(len(l)):\n        if i % 3 != 0:\n            continue\n        l[i] = sorted([x for x in l if x % 3 == 0])[i]\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            if str(7) in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[::2] = sorted(l[::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    takes encoded string and returns decoded string\n    \"\"\"\n    # encode_cyclic does the reverse of the operation\n    return encode_cyclic(s)"}
{"task_id": "HumanEval/39", "completion": "    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    \n    for i in range(len(fib)-1, -1, -1):\n        if is_prime(fib[i]):\n            return fib[i]\n    return None\n    \ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        if l[i] + l[i + 1] + l[i + 2] == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return (n*(n-1))//2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    num_dict = {}\n    for num in l:\n        complement = -num\n        if complement in num_dict and num != complement:\n            return True\n        num_dict[num] = True\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n\t\treturn '0'\n\tdigits = []\n\twhile x:\n\t\tdigits.append(str(x % base))\n\t\tx //= base\n\treturn ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n <= 0:\n        return \"Invalid input\"\n    a, b, c, d = 0, 0, 0, 0\n    for i in range(n):\n        a, b, c, d = b, c, d, a+b+c+d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[n//2 - 1] + sorted_l[n//2]) / 2\n    else:\n        return sorted_l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    res = 1\n    n = n % p\n    while n > 0:\n        if n % 2 == 1:\n            res = (res * 2) % p\n        n = n // 2\n    return res"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by reversing the process of encode_shift.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    if len(s0) != len(s1):\n        return False\n    freq_s0 = [0] * 26\n    freq_s1 = [0] * 26\n    for char in s0:\n        if ord(char) < 128:\n            freq_s0[ord(char) - ord('a')] += 1\n    for char in s1:\n        if ord(char) < 128:\n            freq_s1[ord(char) - ord('a')] += 1\n    return freq_s0 == freq_s1"}
{"task_id": "HumanEval/55", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if not l:\n        return True\n    if l[0] < l[1]:\n        for i in range(1, len(l)):\n            if l[i] < l[i-1]:\n                return False\n    elif l[0] > l[1]:\n        for i in range(1, len(l)):\n            if l[i] > l[i-1]:\n                return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    res = []\n    for i in range(n):\n        res.append(xs[i] * (i+1))\n    return res"}
{"task_id": "HumanEval/63", "completion": "    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for char in s:\n        if char in \"aeiouAEIOU\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    if len(x_str) < shift:\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    apples, oranges = map(int,s.split(\"apples and \"))\n    mangoes = n - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_even = float('inf')\n    min_even_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n            min_even_index = i\n    if min_even_index == -1:\n        return []\n    return [min_even, min_even_index]"}
{"task_id": "HumanEval/69", "completion": "    max_freq = 0\n    max_value = -1\n    freq_map = {}\n    \n    for num in lst:\n        if num <= 0:\n            continue\n        \n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n        \n        if freq_map[num] >= num and num > max_value:\n            max_value = num\n            max_freq = freq_map[num]\n    \n    return max_value"}
{"task_id": "HumanEval/70", "completion": "    if len(lst) <= 1:\n        return lst\n\n    result = [min(lst)]\n    result += [max(lst)]\n    lst.remove(result[-1])\n    result += strange_sort_list(lst)\n\n    return result"}
{"task_id": "HumanEval/71", "completion": "    sides = [a, b, c]\n    sides.sort()\n    if sides[0] + sides[1] > sides[2] and sides[1] + sides[2] > sides[0] and sides[0] + sides[2] > sides[1]:\n        s = (sides[0] + sides[1] + sides[2]) / 2\n        area = (s * (s - sides[0]) * (s - sides[1]) * (s - sides[2])) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    q_sum = sum(q)\n    return q_sum <= w and q == q[::-1]"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    diff = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            diff += 1\n    return diff"}
{"task_id": "HumanEval/74", "completion": "    def total_chars_in_strings(strings):\n        return sum(len(s) for s in strings)\n    \n    total1 = total_chars_in_strings(lst1)\n    total2 = total_chars_in_strings(lst2)\n    \n    if total1 == total2:\n        return lst1\n    elif total1 < total2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    if a <= 1:\n        return False\n    for prime in primes:\n        if a % prime == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    return x > 0 and (x == 1 or x == n or x == n**2)"}
{"task_id": "HumanEval/77", "completion": "    return (a >= 0 and round(a ** (1/3)) ** 3 == a) or (a < 0 and round(a ** (1/3)) ** 3 < a)"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = {'A': '10', 'B': '11', 'C': '12', 'D': '13',\n                  'E': '14', 'F': '15'}\n    result = ''\n    for char in num:\n        result += hex_digits[char]\n    return result\n\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef count_prime_hex_digits(num):\n    decimal_num = int(hex_key(num), 16)\n    count = 0\n    for i in range(len(str(decimal_num))):\n        if is_prime(int(str(decimal_num)[i])):\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    result = []\n    for grade in grades:\n        if grade > 4.0:\n            result.append(\"A+\")\n        elif 4.0 >= grade >= 3.7:\n            result.append(\"A\")\n        elif 3.7 > grade >= 3.3:\n            result.append(\"A-\")\n        elif 3.3 > grade >= 3.0:\n            result.append(\"B+\")\n        elif 3.0 > grade >= 2.7:\n            result.append(\"B\")\n        elif 2.7 > grade >= 2.3:\n            result.append(\"B-\")\n        elif 2.3 > grade >= 2.0:\n            result.append(\"C+\")\n        elif 2.0 > grade >= 1.7:\n            result.append(\"C\")\n        elif 1.7 > grade >= 1.3:\n            result.append(\"C-\")\n        elif 1.3 > grade >= 1.0:\n            result.append(\"D+\")\n        elif 1.0 > grade >= 0.7:\n            result.append(\"D\")\n        elif 0.7 > grade >= 0.0:\n            result.append(\"D-\")\n        elif 0.0 > grade >= 0.0:\n            result.append(\"E\")\n        else:\n            result.append(\"Invalid grade\")\n    return result"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n\tfor i in range(pow(10, n-1), pow(10, n)):\n\t\tif str(i).startswith('1') or str(i).endswith('1'):\n\t\t\tcount += 1\n\treturn count"}
{"task_id": "HumanEval/84", "completion": "    sum_of_digits = sum(int(digit) for digit in str(N))\n    binary_sum = bin(sum_of_digits)[2:]\n    return binary_sum"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "    s = s.split()\n    for i in range(len(s)):\n        s[i] = ''.join(sorted(s[i]))\n    return ' '.join(s)"}
{"task_id": "HumanEval/87", "completion": "    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda tup: (tup[0], -tup[1]))\n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "    if len(array) < 2:\n        return array\n    \n    first_index_sum = sum(array[0])\n    last_index_sum = sum(array[-1])\n    \n    if (first_index_sum + last_index_sum) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n            result += shifted_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    second_min = float('inf')\n    for num in lst:\n        if num < min_val:\n            second_min = min_val\n            min_val = num\n        elif num < second_min and num != min_val:\n            second_min = num\n    if second_min == float('inf'):\n        return None\n    else:\n        return second_min"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    return (x == y + z) or (y == x + z) or (z == x + y)"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char in vowels:\n            result += chr(ord(char) + 2)\n        elif char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum\n\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num):\n            if num > largest_prime:\n                largest_prime = num\n\n    return sum_of_digits(largest_prime)"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    \n    for key, value in dict.items():\n        if not (isinstance(key, str) and key.islower()) and not (isinstance(key, str) and key.isupper()):\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    result = []\n    num = 2\n    while len(result) < n:\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            result.append(num)\n        num += 1\n    return result"}
{"task_id": "HumanEval/97", "completion": "    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    product = unit_digit_a * unit_digit_b\n    return product"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(1, len(s), 2):  # iterate over even indices\n        if s[i].upper() in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return round(num) if num % 0.5 != 0 else int(num)"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i + (n - i) + 1)\n        else:\n            result.append(i + (n - i))\n    return result"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    start = 2 * x\n    end = 2 * y\n    if start % 2 != 0 or end % 2 != 0:\n        return -1\n    for i in range(end, start, -2):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = m - n + 1\n    return bin(total // (m - n + 1))[2:]"}
{"task_id": "HumanEval/104", "completion": "    res = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            res.append(num)\n    res.sort()\n    return res"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: len(str(x)))\n\ndef sortAndReplace(arr):\n    result = []\n    for i in range(9):\n        temp = [x for x in arr if x >= 1 and x <= 9 and x % 10 == i]\n        temp.sort()\n        for j in range(len(temp)):\n            result.append(temp[j])\n    return [str(num).replace(str(num), \"One\") if num == 1 else\n          str(num).replace(str(num), \"Two\") if num == 2 else\n          str(num).replace(str(num), \"Three\") if num == 3 else\n          str(num).replace(str(num), \"Four\") if num == 4 else\n          str(num).replace(str(num), \"Five\") if num == 5 else\n          str(num).replace(str(num), \"Six\") if num == 6 else\n          str(num).replace(str(num), \"Seven\") if num == 7 else\n          str(num).replace(str(num), \"Eight\") if num == 8 else\n          str(num).replace(str(num), \"Nine\") if num == 9 else\n          \"\" for num in result]\n\n# Sample Input\narr = [11, 22, 33, 44, 55, 66, 77, 88, 99]\nprint(sortAndReplace(arr))  # Output: ['Nine', 'Nine', 'Nine', 'Nine', 'Nine', 'Nine', 'Nine', 'Nine', 'Nine']"}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        else:\n            return i * factorial(i-1)\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even_count = n // 2\n    odd_count = (n + 1) // 2\n    return even_count, odd_count"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(n):\n        if n == 0:\n            return 0\n        elif n % 10 == 0:\n            return 1\n        else:\n            return 1 + sum_of_digits(n // 10)\n    \n    def is_positive(n):\n        return n > 0\n    \n    def has_positive_sum(n):\n        return sum_of_digits(n) > 0\n    \n    count = 0\n    for num in arr:\n        if is_positive(num) and has_positive_sum(num):\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    n = len(arr)\n    count = 0\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n    return count <= 1"}
{"task_id": "HumanEval/110", "completion": "    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    hist = {}\n    words = test.split()\n    for word in words:\n        for char in word:\n            if char in hist:\n                hist[char] += 1\n            else:\n                hist[char] = 1\n    return hist"}
{"task_id": "HumanEval/112", "completion": "    s = s.replace(\" \",\"\")\n    for i in c:\n        s = s.replace(i,'')\n    rev_s = s[::-1]\n    if s==rev_s:\n        return (s,True)\n    else:\n        return (s,False)"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for string in lst:\n        odd_count = sum(1 for char in string if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements in the string {odd_count} of the input.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    max_fill = 0\n    for row in grid:\n        left, right = 0, len(row) - 1\n        while left < right:\n            while row[left] == 1 and left < right:\n                left += 1\n            while row[right] == 1 and left < right:\n                right -= 1\n            if left < right:\n                max_fill += min(capacity, right - left + 1)\n                row[left] = 0\n                row[right] = 0\n            left += 1\n            right -= 1\n    return max_fill"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    vowels = \"aeiouAEIOU\"\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char not in vowels)\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-1, 0, -1):\n        if word[i] in consonants and word[i-1] in consonants:\n            return vowels[vowels.find(word[i-1])+1]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    open_count = 0\n    for char in lst:\n        if char == '(':\n            open_count += 1\n        else:\n            if open_count <= 0:\n                return 'No'\n            open_count -= 1\n    return 'Yes' if open_count == 0 else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "    first_k_elements = arr[:k]\n    sum_of_two_digits = sum([num for num in first_k_elements if len(str(num)) <= 2])\n    return sum_of_two_digits"}
{"task_id": "HumanEval/123", "completion": "    def collatz(x):\n        if x % 2 == 0:\n            return x // 2\n        else:\n            return 3 * x + 1\n\n    def is_odd(x):\n        return x % 2 != 0\n\n    result = []\n    while n > 1:\n        n = collatz(n)\n        if is_odd(n):\n            result.append(n)\n    return sorted(result)"}
{"task_id": "HumanEval/124", "completion": "    if len(date) != 10:\n        return False\n\n    if date.isdigit() == False:\n        return False\n\n    month = date[0:2]\n    day = date[3:5]\n    year = date[6:10]\n\n    if int(month) < 1 or int(month) > 12:\n        return False\n\n    if int(day) < 1 or int(day) > 31:\n        if int(month) in [4,6,9,11] and int(day) < 1 or int(day) > 30:\n            return False\n        if int(month) in [2] and int(day) < 1 or int(day) > 29:\n            return False\n    if int(year) < 1900 or int(year) > 2023:\n        return False\n\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([char for char in txt if char.islower()])"}
{"task_id": "HumanEval/126", "completion": "    for i in range(1, len(lst)):\n        if lst[i] <= lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if isPrime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef isPrime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/128", "completion": "    if len(arr) == 0:\n        return None\n    \n    sum_magnitude = 0\n    product_signs = 1\n    for num in arr:\n        if num == 0:\n            return 0\n        elif num < 0:\n            product_signs *= -1\n        sum_magnitude += abs(num)\n\n    return sum_magnitude * product_signs"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    ans = []\n    for _ in range(k):\n        visited = [[False] * n for _ in range(n)]\n        visited[0][0] = True\n        queue = [(0, 0)]\n        while queue:\n            r, c = queue.pop(0)\n            for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < n and 0 <= nc < n and not visited[nr][nc]:\n                    visited[nr][nc] = True\n                    queue.append((nr, nc))\n        ans.append(grid[r][c])\n    return ans"}
{"task_id": "HumanEval/130", "completion": "    if n <= 1:\n        return [1] * (n + 1)\n    res = [0] * (n + 1)\n    res[0] = 1\n    res[1] = 1\n    a = 1\n    b = 1\n    c = 1\n    for i in range(2, n + 1):\n        res[i] = a + b + c\n        if i % 2 == 1:\n            a = b + c\n            b = c\n            c = res[i]\n        else:\n            a = c\n            b = res[i]\n            c = res[i - 1]\n    return res"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n = n // 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return False"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num ** 2)\n    return result"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        return not any(last_char in word for word in txt.split())\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i] <= arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    \n    if not negatives or not positives:\n        return None, None\n    \n    return max(negatives), min(positives)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str) and isinstance(b, str):\n        a = float(a)\n        b = float(b)\n    if isinstance(a, int) and isinstance(b, int):\n        if a == b:\n            return None\n        else:\n            return max(a, b)\n    elif isinstance(a, float) and isinstance(b, float):\n        if a == b:\n            return None\n        else:\n            return max(a, b)\n    elif isinstance(a, str) or isinstance(b, str):\n        return \"Invalid input\"\n    else:\n        return \"Invalid input\""}
{"task_id": "HumanEval/138", "completion": "    if n <= 0:\n        return False\n    if n % 2 != 0:\n        return False\n    return True"}
{"task_id": "HumanEval/139", "completion": "    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    i = 0\n    while i < len(text):\n        if text[i] == ' ':\n            result += \"_\"\n        else:\n            result += text[i]\n        i += 1\n        while i < len(text) and text[i] == ' ':\n            result += \"-\"\n            i += 1\n    return result"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) <= 3:\n        if file_name.count('.') == 1 and file_name.count('..') == 0:\n            if file_name.count('0') == 0 and file_name.count('1') == 0 and file_name.count('2') == 0 and file_name.count('3') == 0 and file_name.count('4') == 0 and file_name.count('5') == 0 and file_name.count('6') == 0 and file_name.count('7') == 0 and file_name.count('8') == 0 and file_name.count('9') == 0:\n                if file_name.startswith('a') or file_name.startswith('b') or file_name.startswith('c') or file_name.startswith('d') or file_name.startswith('e') or file_name.startswith('f') or file_name.startswith('g') or file_name.startswith('h') or file_name.startswith('i') or file_name.startswith('j') or file_name.startswith('k') or file_name.startswith('l') or file_name.startswith('m') or file_name.startswith('n') or file_name.startswith('o') or file_name.startswith('p') or file_name.startswith('q') or file_name.startswith('r') or file_name.startswith('s') or file_name.startswith('t') or file_name.startswith('u') or file_name.startswith('v') or file_name.startswith('w') or file_name.startswith('x') or file_name.startswith('y') or file_name.startswith('z') or file_name.startswith('A') or file_name.startswith('B') or file_name.startswith('C') or file_name.startswith('D') or file_name.startswith('E') or file_name.startswith('F') or file_name.startswith('G') or file_name.startswith('H') or file_name.startswith('I') or file_name.startswith('J') or file_name.startswith('K') or file_name.startswith('L') or file_name.startswith('M') or file_name.startswith('N') or file_name.startswith('O') or file_name.startswith('P') or file_name.startswith('Q') or file_name.startswith('R') or file_name.startswith('S') or file_name.startswith('T') or file_name.startswith('U') or file_name.startswith('V') or file_name.startswith('W') or file_name.startswith('X') or file_name.startswith('Y') or file_name.startswith('Z'):\n                    if file_name.endswith(('.txt', '.exe', '.dll')):\n                        return 'Yes'\n            else:\n                return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/142", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if (i % 3 == 0):\n            sum += lst[i] ** 2\n        elif (i % 4 == 0):\n            sum += lst[i] ** 3\n    return sum"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    primes = set()\n    for num in range(2, 100):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.add(num)\n    result = []\n    for word in words:\n        if len(word) in primes:\n            result.append(word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "completion": "    num_x, den_x = map(int, x.split(\"/\"))\n    num_n, den_n = map(int, n.split(\"/\"))\n\n    product = num_x * num_n\n    divisor = den_x * den_n\n\n    return product % divisor == 0"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            if num % 2 != 0 and num % 10 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(1, n-1):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    return tuple(planets[index1+1:index2])"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst)\n\n# Sorting words by length and alphabetical order\ndef list_sort(words):\n    return sorted(words, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n\t\tfor i in range(2, n):\n\t\t\tif (n % i == 0):\n\t\t\t\treturn x\n\telse:\n\t\treturn y"}
{"task_id": "HumanEval/151", "completion": "    odd_numbers = [x**2 for x in lst if isinstance(x, int) and x % 2 != 0]\n    return sum(odd_numbers)"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i]-game[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_ext = \"\"\n    for ext in extensions:\n        CAP = ext.count(ext.upper())\n        SM = ext.count(ext.lower())\n        strength = (CAP - SM) if CAP > SM else 0\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    return class_name + '.' + strongest_ext"}
{"task_id": "HumanEval/154", "completion": "    a = a.lower()\n    b = b.lower()\n    if b in a:\n        return True\n    rotations = set()\n    n = len(b)\n    for i in range(n):\n        rotations.add(b[i:] + b[:i])\n    for r in rotations:\n        if r in a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    if num < 0:\n        return (-1, -1)\n    else:\n        even_count = 0\n        odd_count = 0\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num = num // 10\n        return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    val = [\n        1000, 900, 800, 700,\n        600, 500, 400, 300,\n        200, 100, 90, 80,\n        70, 60, 50, 40,\n        30, 20, 19, 18,\n        17, 16, 15, 14,\n        13, 12, 11, 10,\n        9, 8, 7, 6,\n        5, 4, 3, 2,\n        1\n    ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"xc\", \"XC\", \"X\", \"XD\",\n        \"XXX\", \"XX\", \"XVI\", \"XIV\",\n        \"XXXI\", \"XXI\", \"XLIX\", \"XLI\",\n        \"XXXVII\", \"XXVII\", \"XCIV\", \"XCVI\",\n        \"X\", \"XI\", \"XCIII\", \"XCII\",\n        \"XCI\", \"XI\", \"XCIX\", \"XCII\",\n        \"XI\", \"XCIII\", \"XCII\", \"XCIV\",\n        \"X\", \"XI\", \"XCIII\", \"XCII\",\n        \"XCI\", \"XI\", \"XCIX\", \"XCII\",\n        \"XI\", \"XCIII\", \"XCII\", \"XCIV\",\n        \"X\", \"XI\", \"XCIII\", \"XCII\",\n        \"XCI\", \"XI\", \"XCIX\", \"XCII\",\n        \"XI\", \"XCIII\", \"XCII\", \"XCIV\"\n    ]\n\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n\n    return roman_num.lower()"}
{"task_id": "HumanEval/157", "completion": "    if a == b == c:\n        return True\n    elif a == b or b == c or c == a:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_word = word\n        elif len(set(word)) == max_chars:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            operand.append(operand.pop() + operand.pop())\n        elif operator[i] == '-':\n            operand.append(operand.pop() - operand.pop())\n        elif operator[i] == '*':\n            operand.append(operand.pop() * operand.pop())\n        elif operator[i] == '//':\n            operand.append(int(operand.pop() / operand.pop()))\n        elif operator[i] == '**':\n            operand.append(operand.pop() ** operand.pop())\n    return operand.pop()"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    return hashlib.md5(text.encode()).hexdigest() if text else None"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        if ''.join(str(num)) == ''.join(sorted(str(num), key=lambda x: x*3)):\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    groups = []\n    current_group = \"\"\n    stack = []\n    \n    for char in paren_string:\n        if char == \"(\":\n            if current_group:\n                groups.append(current_group)\n                current_group = \"\"\n            stack.append(char)\n        elif char == \")\":\n            stack.pop()\n            if stack:\n                current_group += char\n            else:\n                groups.append(current_group)\n                current_group = \"\"\n    \n    if current_group:\n        groups.append(current_group)\n    \n    return groups"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    return number - integer_part"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        if op > 0:\n            balance += op\n        else:\n            balance -= op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    numbers.sort()\n    n = len(numbers)\n    total = sum(abs(numbers[i] - numbers[n//2]) for i in range(n))\n    return total / n"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(0, len(numbers) - 1, 2):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    result = []\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                max_depth = max(max_depth, len(stack))\n    return [max_depth] * len(paren_string)"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    return sum(numbers), 1 if len(numbers) == 0 else numbers[0] * (numbers[0] * (sum(numbers[1:]) if len(numbers) > 1 else 1))"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n\n    i = 1\n    while True:\n        prefix = string + string[:i][::-1]\n        suffix = string + string[i:][::-1]\n        if is_palindrome(prefix) and is_palindrome(suffix):\n            return prefix\n        i += 1"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            result += str(int(a[i]) ^ int(b[i]))\n        else:\n            result += str(int(b[i]) ^ int(a[i]))\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    strings.sort(reverse=True)\n    for s in strings:\n        if len(s) > len(strings[0]):\n            return s\n    return strings[0]"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    prefix = \"\"\n    for char in string:\n        prefix += char\n        prefixes.append(prefix)\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(0, n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats = [4, 2, 1]  # whole note (4), half note (2), quater note (1)\n    result = []\n    for note in music_string:\n        if note in ['o', 'o|', '.|']:\n            result.append(beats[ord(note) - ord('o')])\n    return result"}
{"task_id": "HumanEval/18", "completion": "    if not string or not substring:\n        return 0\n\n    count = 0\n    len_substring = len(substring)\n    len_string = len(string)\n\n    for i in range(len_string - len_substring + 1):\n        if string[i:i + len_substring] == substring:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = list(map(int, numbers.split()))\n    num_list.sort()\n    return ' '.join(map(str, num_list))"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (numbers[0], numbers[0])\n    for i in range(len(numbers)-1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    unit = (max_val - min_val) / 1.0\n\n    return [(num - min_val) / unit for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def get_prime_factors(num):\n        factors = []\n        for i in range(2, num + 1):\n            if is_prime(i):\n                while num % i == 0:\n                    factors.append(i)\n                    num = num // i\n        if num > 1:\n            factors.append(num)\n        return factors\n\n    return get_prime_factors(n)"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    flipped = ''\n    for char in string:\n        if char.islower():\n            flipped += char.upper()\n        else:\n            flipped += char.lower()\n    return flipped"}
{"task_id": "HumanEval/28", "completion": "    if len(strings) == 0:\n        return \"\"\n    result = strings[0]\n    for s in strings[1:]:\n        result += s\n    return result"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds a zero of a polynomial in the interval (0, 1)\n    \"\"\"\n    zero = 0\n    for x in range(1, 1000):\n        if poly(xs, x) < 0:\n            zero = x\n            break\n    return zero"}
{"task_id": "HumanEval/33", "completion": "    for i in range(len(l)):\n        if i % 3 != 0:\n            continue\n        l[i] = sorted(l[i:i+3])[0]\n    return l"}
{"task_id": "HumanEval/34", "completion": "    seen = set()\n    result = []\n    for x in l:\n        if x not in seen:\n            result.append(x)\n            seen.add(x)\n    return result"}
{"task_id": "HumanEval/35", "completion": "    if len(l) == 1:\n        return l[0]\n    if len(l) == 0:\n        return None\n    max_so_far = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_so_far:\n            max_so_far = l[i]\n    return max_so_far"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).find('7') != -1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    return l[::-1]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string.\n    \"\"\"\n    n = len(s)\n    if n % 3 != 0:\n        return \"Incorrect length of encoded string\"\n    # Create groups of 3 elements\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((n + 2) // 3)]\n    # decode each group\n    decoded_groups = [encode_cyclic(group) for group in groups]\n    # join groups to get decoded string.\n    decoded_string = \"\".join(decoded_groups)\n    return decoded_string"}
{"task_id": "HumanEval/39", "completion": "    fib = [0, 1]\n    while fib[-1] < 10**9:\n        fib.append(fib[-1] + fib[-2])\n    prime = [True for i in range(len(fib))]\n    for i in range(2, int(fib[-1]**0.5) + 1):\n        if prime[i]:\n            for j in range(i*i, len(prime), i):\n                prime[j] = False\n    for i in range(len(fib)-1, -1, -1):\n        if prime[i]:\n            return fib[i]\n    return -1"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l)-2):\n        if l[i] + l[i+1] + l[i+2] == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return int((n*(n-1))/2)"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    s = set()\n    for num in l:\n        if -num in s:\n            return True\n        s.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    area = 0.5 * a * h\n\treturn area"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 2, 0\n    for _ in range(2, n+1):\n        a, b = b, c+d\n        c, d = b, a+c\n    return b"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    n = n % p\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * n) % p\n        n = n // 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return encode_shift(s)"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    while(y):\n        x, y = y, x + y\n    return x"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n# Example Usage\nprint(fib(10))  # Output: 55"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>' and stack:\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    n = len(l)\n    i = 1\n    while i < n and (increasing or decreasing):\n        if increasing and l[i] > l[i - 1]:\n            i += 1\n        elif decreasing and l[i] < l[i - 1]:\n            i += 1\n        else:\n            if increasing:\n                increasing = False\n            if decreasing:\n                decreasing = False\n            i += 1\n    return not (increasing and decreasing)"}
{"task_id": "HumanEval/58", "completion": "    s1 = set(l1)\n    s2 = set(l2)\n    return list(s1.intersection(s2))"}
{"task_id": "HumanEval/59", "completion": "    max_prime = 2\n    while n > 1:\n        for i in range(2, n+1):\n            if n % i == 0:\n                max_prime = max(max_prime, i)\n                n = n // i\n                break\n    return max_prime"}
{"task_id": "HumanEval/60", "completion": "    return (n*(n+1))//2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    res = [0] * n\n    for i in range(n):\n        res[i] = xs[i] * (i + 1)\n    return res"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        a, b = 0, 1\n        for _ in range(3, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/64", "completion": "    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    if shift == 0:\n        return str(x)\n    s = str(x)\n    shift = shift % len(s)\n    return s[shift:] + s[:shift] if shift != 0 else s[::-1]"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "    apples = 0\n\toranges = 0\n\tmango = 0\n\tcount = 0\n\tfor i in range(len(s)):\n\t\tif(s[i]=='a'):\n\t\t\tapples+=1\n\t\telif(s[i]=='o'):\n\t\t\toranges+=1\n\t\telif(s[i]=='m'):\n\t\t\tmango+=1\n\tcount = apples + oranges + mango\n\treturn n - count"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = min(arr)\n    min_val_index = arr.index(min_val)\n    return [min_val, min_val_index]"}
{"task_id": "HumanEval/69", "completion": "    n = len(lst)\n    maxFreq = 0\n    maxNum = -1\n    freq = {}\n    for i in range(n):\n        if lst[i] in freq:\n            freq[lst[i]] += 1\n        else:\n            freq[lst[i]] = 1\n        if freq[lst[i]] >= lst[i]:\n            if lst[i] > maxNum:\n                maxNum = lst[i]\n                maxFreq = freq[lst[i]]\n    return maxNum"}
{"task_id": "HumanEval/70", "completion": "    if len(lst) < 2:\n        return lst\n\n    result = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        result.append(min_val)\n        result.append(max_val)\n        lst.remove(min_val)\n        lst.remove(max_val)\n\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if (a + b > c and b + c > a and a + c > b):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    def is_balanced(lst):\n        return sum(lst) == sum(lst[::-1])\n    \n    if len(q) <= w and is_balanced(q):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    odd_count = 0\n    for i in range(n):\n        if arr[i] % 2 != arr[n - i - 1] % 2:\n            odd_count += 1\n    return min(odd_count, n - odd_count)"}
{"task_id": "HumanEval/74", "completion": "    def total_chars(s):\n        return sum(len(word) for word in s)\n    \n    if len(lst1) > len(lst2):\n        return lst2\n    elif len(lst1) < len(lst2):\n        return lst1\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            for j in range(2, i):\n                if i % j == 0:\n                    for k in range(2, j):\n                        if j % k == 0:\n                            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x < 0:\n        return False\n    elif x == 1:\n        return True\n    elif n == 0:\n        return x == 0\n    else:\n        return x == n**int(math.log(x, n))"}
{"task_id": "HumanEval/77", "completion": "    return (a > 0) and (a ** (1/3)) == int(a ** (1/3))"}
{"task_id": "HumanEval/78", "completion": "    hex_key = {'A': 1, 'B': 2, 'C': 3, 'D': 4,\n              'E': 5, 'F': 6, '1': 1, '2': 2,\n              '3': 3, '4': 4, '5': 5, '6': 6,\n              '7': 7, '8': 8, '9': 9, '0': 0}\n    return hex_key[num]\n\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef countPrimeHexadecimalDigits(num: str) -> int:\n    count = 0\n    for i in range(len(num)):\n        if is_prime(hex_key(num[i])):\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return 'db0db'\n    result = ''\n    while decimal > 0:\n        result = str(decimal % 2) + result\n        decimal = decimal // 2\n    return 'db' + result + 'db'"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i:i+3] == s[i+1:i+4]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for gpa in grades:\n        if gpa > 3.7:\n            letter_grades.append('A+')\n        elif gpa > 3:\n            letter_grades.append('A')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2:\n            letter_grades.append('B')\n        elif gpa > 1.7:\n            letter_grades.append('C+')\n        elif gpa > 1:\n            letter_grades.append('C')\n        else:\n            letter_grades.append('D')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length == 0:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    start_count = 9 if n == 1 else 10**(n-1)\n    end_count = 9 if n == 1 else 10**(n-1)\n    return start_count + end_count"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while (N > 0):\n        sum += N % 10\n        N = N // 10\n    binary_sum = bin(sum)[2:]\n    return binary_sum"}
{"task_id": "HumanEval/85", "completion": "    ans = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            ans += lst[i]\n    return ans"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = \"\"\n    for word in words:\n        if word:\n            result += ''.join(sorted(word))\n        else:\n            result += word\n    return result"}
{"task_id": "HumanEval/87", "completion": "    rows = []\n    for row in lst:\n        if x in row:\n            rows.append((lst.index(row), row.index(x)))\n    rows.sort(key=lambda tup: (tup[0], -tup[1]))\n    return rows"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return array\n    first_index_sum = sum(array[0])\n    last_index_sum = sum(array[-1])\n    if (first_index_sum + last_index_sum) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(((ord(char) - 32 - 'a' + 1) * 2) % 26 + 'a')\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for word in words:\n        if word[0] == 'I':\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char in vowels:\n            result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime_numbers = [x for x in lst if is_prime(x)]\n    if not prime_numbers:\n        return 0\n    \n    largest_prime = max(prime_numbers)\n    return sum(map(int, str(largest_prime)))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    \n    keys = set(dict.keys())\n    for key in keys:\n        if not (key.islower() or key.isupper()):\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    for num in range(2, n):\n        if all(num % i for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a * b) % 10"}
{"task_id": "HumanEval/98", "completion": "    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    rounded = round(num)\n    if abs(num - rounded) < abs(num - (rounded + 1)):\n        return rounded\n    else:\n        return rounded + 1"}
{"task_id": "HumanEval/100", "completion": "    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            pile.append(n + 2 * i)\n        else:\n            pile.append(n + 2 * (i + 1))\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -2):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    return bin(int((n + m) / 2))[2:]"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(num):\n        digit_set = set()\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                return True\n            digit_set.add(digit)\n            num //= 10\n        return False\n\n    unique_nums = []\n    for num in x:\n        if not has_even_digit(num):\n            unique_nums.append(num)\n    unique_nums.sort()\n    return unique_nums"}
{"task_id": "HumanEval/105", "completion": "    arr = sorted(arr, key=lambda x: (x >= 10, x < 10))\n    return arr\n\n\ndef convert_to_words(arr):\n    words = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n    for i in range(len(arr)):\n        if arr[i] == -1:\n            continue\n        elif arr[i] < 10:\n            result.append(words[arr[i]-1])\n        elif arr[i] >= 10:\n            temp = arr[i]\n            temp = list(map(int, str(temp)))\n            temp = by_length(temp)\n            temp = list(map(lambda x: words[x-1], temp))\n            result.append(\" \".join(temp))\n    return result"}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 0:\n            return 1\n        else:\n            return i * factorial(i-1)\n    \n    def sum_of_numbers(i):\n        return sum(range(1, i+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(num):\n        total = 0\n        while num > 0:\n            total += num % 10\n            num = num // 10\n        return total\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    stack = []\n    for i in arr:\n        while stack and i < stack[-1]:\n            stack.pop()\n        stack.append(i)\n    return len(stack) == len(arr)"}
{"task_id": "HumanEval/110", "completion": "    set1 = set(lst1)\n    for num in lst2:\n        if num % 2 != 0 and num in set1:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    histogram = {}\n    max_count = 0\n    max_char = \"\"\n    \n    for word in words:\n        count = word.count(max(word, key=word.count))\n        if count > max_count:\n            max_count = count\n            max_char = word\n        elif count == max_count:\n            histogram[word] = count\n    \n    histogram[max_char] = histogram.get(max_char, 0) + 1\n    return histogram"}
{"task_id": "HumanEval/112", "completion": "    for char in c:\n        s = s.replace(char, '')\n    return s, s == s[::-1]\n\ndef ask(s,c):\n    result, is_palindrome = reverse_delete(s,c)\n    return result, is_palindrome"}
{"task_id": "HumanEval/113", "completion": "    def count_odd_digits(s):\n        return sum(int(d) % 2 != 0 for d in s)\n\n    result = []\n    for s in lst:\n        result.append(\"the number of odd elements in the string {} of the input.\".format(count_odd_digits(s)))\n\n    return result"}
{"task_id": "HumanEval/114", "completion": "    n = len(nums)\n    min_sum = float('inf')\n    curr_sum = 0\n    for i in range(n):\n        curr_sum = min(nums[i], curr_sum + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    def is_valid_combination(grid, row, col, water, idx):\n        if idx == len(grid):\n            return True\n        if idx < len(grid) and grid[idx][col] == 1:\n            return False\n        grid[idx][col] = 1\n        valid = is_valid_combination(grid, row, col + 1, water + 1, idx + 1) or is_valid_combination(grid, row + 1, col, water, idx + 1)\n        grid[idx][col] = 0\n        return valid\n\n    total_water = sum(row.count(1) for row in grid)\n    return math.ceil(total_water / capacity)"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    count = [0] * 26\n    vowels = \"aeiou\"\n    result = []\n    \n    for word in words:\n        for char in word:\n            if char.isalpha():\n                count[ord(char) - ord('a')] += 1\n        if sum(1 for x in count if x == n) == len(count):\n            result.append(word)\n    \n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    n = len(word)\n    for i in range(n-1,0,-1):\n        if word[i] in consonants and word[i-1] in consonants:\n            for j in range(i-1,0,-1):\n                if word[j] in vowels:\n                    return word[j]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[::-1][:k]"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "    elements = arr[:k]\n    total = 0\n    for num in elements:\n        if len(str(num)) <= 2:\n            total += num\n    return total"}
{"task_id": "HumanEval/123", "completion": "    result = []\n    while n != 1:\n        if n % 2 != 0:\n            result.append(n)\n        n = (n * 3 + 1) if n % 2 != 0 else n / 2\n    return sorted(result)"}
{"task_id": "HumanEval/124", "completion": "    if len(date) == 0:\n        return False\n    month, day, year = map(int, date.split('-'))\n    days = [0, 31, 28, 31, 30, 31, 31, 30, 31, 31, 30, 31]\n    if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:\n        days[2] = 29\n    if month < 1 or month > 12 or day < 1 or day > 31:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    if len(words) == 0:\n        return [txt]\n    else:\n        return words"}
{"task_id": "HumanEval/126", "completion": "    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if isPrime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef isPrime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    \n    signs = 1\n    product = 1\n    \n    for num in arr:\n        if num < 0:\n            signs = -signs\n        product *= abs(num)\n        \n    return signs * product"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(x, y, k):\n        return 0 <= x < n and 0 <= y < m and k > 0 and grid[x][y] != -1\n    \n    def bfs(x, y, k):\n        queue = [(x, y, 1)]\n        visited = [[False for _ in range(m)] for _ in range(n)]\n        visited[x][y] = True\n        while queue:\n            cur_x, cur_y, dist = queue.pop(0)\n            if dist == k:\n                return visited\n            for dx, dy in directions:\n                nx, ny = cur_x + dx, cur_y + dy\n                if is_valid(nx, ny, k) and not visited[nx][ny]:\n                    visited[nx][ny] = True\n                    queue.append((nx, ny, dist + 1))\n\n    min_path = []\n    for i in range(n):\n        for j in range(m):\n            if not bfs(i, j, k):\n                return []\n    for i in range(n):\n        for j in range(m):\n            if bfs(i, j, k):\n                min_path.append(grid[i][j])\n                break\n    return min_path"}
{"task_id": "HumanEval/130", "completion": "    fib = [0] * (n + 1)\n    fib[1] = 1\n    for i in range(2, n + 1):\n        fib[i] = fib[i - 1] + fib[i - 2]\n    return fib"}
{"task_id": "HumanEval/131", "completion": "    prod = 1\n    while n:\n        if n % 2 == 0:\n            return 0\n        prod *= n % 10\n        n //= 10\n    return prod"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num**2)\n    return result"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if len(words) > 0:\n        last_word = words[-1]\n        last_char = last_word[-1]\n        return last_char.isalpha() and not any(char.isalpha() for char in last_word)\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    if n < 2:\n        return -1\n    for i in range(n - 1, 0, -1):\n        if arr[i] <= arr[i - 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    negative_integers = [i for i in lst if i < 0]\n    if negative_integers:\n        a = max(negative_integers)\n    else:\n        a = None\n    positive_integers = [i for i in lst if i > 0]\n    if positive_integers:\n        b = min(positive_integers)\n    else:\n        b = None\n    return (a, b)"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif isinstance(a, float) or isinstance(a, int):\n        return a if a > b else b\n    else:\n        return a if a > b else b"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/139", "completion": "    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        elif char == \"-\":\n            result += \" \"\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/141", "completion": "    file_name_parts = file_name.split('.')\n    if len(file_name_parts) != 2:\n        return 'No'\n    if not file_name_parts[0].isalpha() or not file_name_parts[1].lower() in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if (i+1)%3 == 0:\n            sum += lst[i]**2\n        elif (i+1)%4 == 0 and (i+1)%3 != 0:\n            sum += lst[i]**3\n    return sum"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word) > 1 and all(x % 2 != 0 for x in range(2, len(word) + 1)):\n            result.append(word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "completion": "    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    \n    num_product = num_x * num_n\n    den_product = den_x * den_n\n    \n    return (num_product % den_product == 0) or (den_product % num_product == 0)"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(1, n-1):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    if planet1 not in planets or planet2 not in planets:\n        return ()\n    p1_index = planets.index(planet1)\n    p2_index = planets.index(planet2)\n    if p1_index > p2_index:\n        p1_index, p2_index = p2_index, p1_index\n    return planets[p1_index + 1:p2_index]"}
{"task_id": "HumanEval/149", "completion": "    sorted_lst = sorted(lst, key=lambda x: (len(x), x))\n    return sorted_lst"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n        return x\n    elif n == 2:\n        return y\n    elif n == 3:\n        return x\n    elif n == 4:\n        return y\n    elif n == 5:\n        return x\n    elif n == 6:\n        return y\n    elif n == 7:\n        return x\n    elif n == 8:\n        return y\n    elif n == 9:\n        return x\n    elif n == 10:\n        return y\n    elif n == 11:\n        return x\n    elif n == 12:\n        return y\n    elif n == 13:\n        return x\n    elif n == 14:\n        return y\n    elif n == 15:\n        return x\n    elif n == 16:\n        return y\n    elif n == 17:\n        return x\n    elif n == 18:\n        return y\n    elif n == 19:\n        return x\n    elif n == 20:\n        return y\n    elif n == 21:\n        return x\n    elif n == 22:\n        return y\n    elif n == 23:\n        return x\n    elif n == 24:\n        return y\n    elif n == 25:\n        return x\n    elif n == 26:\n        return y\n    elif n == 27:\n        return x\n    elif n == 28:\n        return y\n    elif n == 29:\n        return x\n    elif n == 30:\n        return y\n    elif n == 31:\n        return x\n    elif n == 32:\n        return y\n    elif n == 33:\n        return x\n    elif n == 34:\n        return y\n    elif n == 35:\n        return x\n    elif n == 36:\n        return y\n    elif n == 37:\n        return x\n    elif n == 38:\n        return y\n    elif n == 39:\n        return x\n    elif n == 40:\n        return y\n    elif n == 41:\n        return x\n    elif n == 42:\n        return y\n    elif n == 43:\n        return x\n    elif n == 44:\n        return y\n    elif n == 45:\n        return x\n    elif n == 46:\n        return y\n    elif n == 47:\n        return x\n    elif n == 48:\n        return y\n    elif n == 49:\n        return x\n    elif n == 50:\n        return y\n    elif n == 51:\n        return x\n    elif n == 52:\n        return y\n    elif n == 53:\n        return x\n    elif n == 54:\n        return y\n    elif n == 55:\n        return x\n    elif n == 56:\n        return y\n    elif n == 57:\n        return x\n    elif n == 58:\n        return y\n    elif n == 59:\n        return x\n    elif n == 60:\n        return y\n    elif n == 61:\n        return x\n    elif n == 62:\n        return y\n    elif n == 63:\n        return x\n    elif n == 64:\n        return y\n    elif n == 65:\n        return x\n    elif n == 66:\n        return y\n    elif n == 67:\n        return x\n    elif n == 68:\n        return y\n    elif n == 69:\n        return x\n    elif n == 70:\n        return y\n    elif n == 71:\n        return x\n    elif n == 72:\n        return y\n    elif n == 73:\n        return x\n    elif n == 74:\n        return y\n    elif n == 75:\n        return x\n    elif n == 76:\n        return y\n    elif n == 77:\n        return x\n    elif n == 78"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int) and num % 2 != 0:\n            total += num * num\n    return total"}
{"task_id": "HumanEval/152", "completion": "    result=[]\n    for i in range(len(game)):\n        if game[i]==guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i]-game[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    strength_map = {}\n    for extension in extensions:\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = len(extension) - cap_count\n        strength = (cap_count - sm_count) / len(extension)\n        strength_map[extension] = strength\n    \n    max_strength = max(strength_map.values())\n    max_extensions = [extension for extension, strength in strength_map.items() if strength == max_strength]\n    return class_name + '.' + max_extensions[0]"}
{"task_id": "HumanEval/154", "completion": "    len1, len2 = len(a), len(b)\n    if len1<len2:\n        return False\n    for i in range(len2,len1):\n        if a[i:] == a[:i]:\n            return b in a[i:]\n    return False"}
{"task_id": "HumanEval/155", "completion": "    num_str = str(num)\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = len(num_str) - even_count\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    val = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    syms = [\"m\", \"cm\", \"d\", \"cd\", \"cx\", \"x\", \"xc\", \"o\", \"co\", \"xo\", \"c\", \"xc\", \"ix\", \"x\", \"ixc\", \"xci\", \"ix\", \"xi\"]\n    roman_num = \"\"\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()"}
{"task_id": "HumanEval/157", "completion": "    if a == 0 or b == 0 or c == 0:\n        return False\n    elif a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_chars = -1\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_word = word\n        elif len(set(word)) == max_chars and word < max_word:\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    if number + need <= remaining:\n        return [number + need, remaining]\n    else:\n        return [number + need, 0]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(1, len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result = result // operand[i]\n        elif operator[i] == '**':\n            result = result ** operand[i]\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result if result else s[::-1]"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                groups.append('')\n    while stack:\n        stack.pop()\n        groups.append('')\n    return groups"}
{"task_id": "HumanEval/2", "completion": "    integer = int(number)\n    return number - integer"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        else:\n            balance -= operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.append(delimeter)\n        result.append(number)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                max_depth = max(max_depth, len(stack))\n    return [max_depth] * len(paren_string)"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    sum_val = 0\n    product_val = 1\n    for num in numbers:\n        sum_val += num\n        product_val *= num\n    return sum_val, product_val"}
{"task_id": "HumanEval/9", "completion": "    n = len(numbers)\n    result = []\n    max_val = float('-inf')\n    for i in range(n):\n        max_val = max(max_val, numbers[i])\n        result.append(max_val)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the supplied string \"\"\"\n    if is_palindrome(string):\n        return string\n    i = 1\n    while not is_palindrome(string + string[::-i]):\n        i += 1\n    return string + string[::-i]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            result += str(int(a[i]) ^ int(b[i]))\n        else:\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    result = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    for char in music_string:\n        if char == 'o':\n            result.append(4)\n        elif char == 'o|':\n            result.append(2)\n        elif char == '.|':\n            result.append(1)\n    return result"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while start < len(string):\n        if string[start:start + len(substring)] == substring:\n            count += 1\n            start += len(substring)\n        else:\n            start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = numbers.split()\n    num_list.sort(key=lambda x: int(x))\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[0])\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    transform = lambda x: (x - min_num) / (max_num - min_num)\n    return [transform(num) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return list(filter(lambda x: isinstance(x, int), values))"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Returns zero of a polynomial represented by xs.\n    The polynomial is assumed to have even number of coefficients.\n    \"\"\"\n    x = 1e-6  # set initial value of x\n    while poly(xs, x) > 1e-9:  # consider only value of x which gives value close to zero\n        x *= 2  # multiply x by 2\n    return x"}
{"task_id": "HumanEval/33", "completion": "    result = [l[i] for i in range(len(l)) if i % 3 != 0]\n    result.sort()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result[i] = l[i]\n    return result"}
{"task_id": "HumanEval/34", "completion": "    seen = set()\n    result = []\n    for x in l:\n        if x not in seen:\n            seen.add(x)\n            result.append(x)\n    return result"}
{"task_id": "HumanEval/35", "completion": "    return max(l)"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(7) in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    sorted_even_indices = sorted(range(0, len(l), 2), key=lambda x: l[x])\n    result = [None] * len(l)\n    for i in sorted_even_indices:\n        result[i] = l[i]\n    for i in range(len(l)):\n        if i % 2 == 0 and result[i] is None:\n            result[i] = l[i]\n    return result"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from encoded with encode_cyclic function.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    for i in range(n):\n        if (fib[i] > 1 and all(fib[i] % j != 0 for j in range(2, int(fib[i]**0.5) + 1))):\n            return fib[i]"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n*(n-1)//2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = {}\n    for num in l:\n        if -num in seen:\n            return True\n        seen[num] = True\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 2, 0\n    for i in range(n):\n        a, b = b, (a+c) % 10\n        c, d = d, (a+b) % 10\n    return d"}
{"task_id": "HumanEval/47", "completion": "    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string from encoded string with shift.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(filter(lambda x: x not in vowels, text)))"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a+b\n        return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for bracket in brackets:\n        if bracket in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[bracket] != top_element:\n                return False\n        else:\n            stack.append(bracket)\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if not l:\n        return True\n    \n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            increasing = True\n        elif l[i] < l[i-1]:\n            decreasing = True\n        else:\n            return False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return factor"}
{"task_id": "HumanEval/60", "completion": "    return (n*(n+1))//2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = [0] * n\n    for i in range(n):\n        for j in range(i):\n            result[i] += xs[j] * (i - j)\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(3, n + 1):\n            c = a + b + fibfib(n - 3)\n            a, b = b, c\n        return c"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    digits = str(x)\n    shift = shift % len(digits)\n    return digits[-shift:] + digits[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/67", "completion": "    oranges = 0\n    apples = 0\n    mango = n\n    words = s.split()\n    for word in words:\n        if word.isdigit():\n            num = int(word)\n            if word.startswith('oranges'):\n                oranges = num\n            elif word.startswith('apples'):\n                apples = num\n            else:\n                mango = num\n    return n - oranges - apples"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    if min_index != -1:\n        return [min_val, min_index]\n    else:\n        return []"}
{"task_id": "HumanEval/69", "completion": "    max_freq = -1\n    result = -1\n    for num in lst:\n        if num > 0:\n            freq = lst.count(num)\n            if freq >= num and freq > max_freq:\n                max_freq = freq\n                result = num\n    return result"}
{"task_id": "HumanEval/70", "completion": "    if len(lst) <= 1:\n        return lst\n    low = 0\n    high = len(lst) - 1\n    result = []\n    while low <= high:\n        if lst[low] <= lst[high]:\n            result.append(lst[low])\n            low += 1\n        else:\n            result.append(lst[high])\n            high -= 1\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w:\n        if q == q[::-1]:\n            return True\n    return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    lps = [0]*n\n    j = 0\n\n    for i in range(1, n):\n        while j > 0 and arr[i] != arr[j]:\n            j = lps[j-1]\n\n        if arr[i] == arr[j]:\n            j += 1\n        lps[i] = j\n\n    ans = n\n    for i in range(n-1):\n        if lps[i] == i:\n            ans = min(ans, n-i-1)\n\n    return ans"}
{"task_id": "HumanEval/74", "completion": "    def calculate_total_chars(lst):\n        total = 0\n        for string in lst:\n            total += len(string)\n        return total\n\n    total_chars1 = calculate_total_chars(lst1)\n    total_chars2 = calculate_total_chars(lst2)\n\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 == total_chars2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if (primes[i] * primes[j] * primes[k]) == a:\n                    return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    return (x >= 0 and round(math.log(x, n)) ** n == x)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    if a == 0:\n        return True\n    for i in range(1, int(a ** (1/3)) + 1):\n        if i ** 3 == a:\n            return True\n    return False"}
{"task_id": "HumanEval/78", "completion": "    primes = {'A': 11, 'B': 13, 'C': 17, 'D': 19, 'E': 23, 'F': 29}\n    result = 0\n    for hex_digit in num:\n        decimal_digit = primes[hex_digit]\n        if decimal_digit in [2, 3, 5, 7]:\n            result += 1\n    return result"}
{"task_id": "HumanEval/79", "completion": "    result = \"\"\n    while decimal > 0:\n        result = str(decimal % 2) + result\n        decimal = decimal // 2\n    result = \"db\" + result + \"db\"\n    return result"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    result = []\n    for grade in grades:\n        if grade >= 4.0:\n            result.append('A+')\n        elif 4.0 > grade >= 3.7:\n            result.append('A')\n        elif 3.7 > grade >= 3.3:\n            result.append('A-')\n        elif 3.3 > grade >= 3:\n            result.append('B+')\n        elif 3 > grade >= 2.7:\n            result.append('B')\n        elif 2.7 > grade >= 2.3:\n            result.append('B-')\n        elif 2.3 > grade >= 2:\n            result.append('C+')\n        elif 2 > grade >= 1.7:\n            result.append('C')\n        elif 1.7 > grade >= 1.3:\n            result.append('C-')\n        elif 1.3 > grade >= 1.0:\n            result.append('D+')\n        elif 1.0 > grade >= 0.7:\n            result.append('D')\n        else:\n            result.append('E')\n    return result"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    start = 10**(n-1)\n    end = 10**n - 1\n    for i in range(start, end):\n        if i % 10 == 1 or i // 10 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "    res = \"\"\n    while N > 0:\n        res = str(N % 2) + res\n        N //= 2\n    return res"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    anti_words = [sorted(word) for word in words]\n    anti_s = ' '.join(anti_words)\n    return anti_s"}
{"task_id": "HumanEval/87", "completion": "    coordinates = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            col = lst[i].index(x)\n            coordinates.append((i, col))\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "    if len(array) < 2:\n        return array\n    \n    if sum(array) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    result = ''\n    for char in s:\n        result += chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    unique_nums = list(set(lst))\n    if len(unique_nums) < 2:\n        return None\n    unique_nums.sort()\n    return unique_nums[1]"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split(\".\")\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    return x == y + z or y == x + z or z == x + y"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                index = vowels.index(char)\n                result += chr(ord('A') + index + 2)\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n: int) -> bool: \n        if n <= 1: \n            return False\n        if n <= 3: \n            return True\n        if n % 2 == 0 or n % 3 == 0: \n            return False\n        \n        i = 5\n        while i * i <= n: \n            if n % i == 0 or n % (i + 2) == 0: \n                return False\n            i = i + 6\n        \n        return True\n    \n    def sumOfDigits(n: int) -> int:\n        return sum([int(x) for x in str(n)])\n    \n    maxPrime = -1\n    for num in lst:\n        if isPrime(num):\n            if num > maxPrime:\n                maxPrime = num\n    \n    if maxPrime != -1:\n        return sumOfDigits(maxPrime)\n    else:\n        return 0"}
{"task_id": "HumanEval/95", "completion": "    if len(dict)==0:\n        return False\n    case = dict[list(dict.keys())[0]]\n    for key in dict.keys():\n        if case != dict[key]:\n            if case.islower() != dict[key].islower():\n                return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    if n == 0:\n        return []\n    \n    primes = [True for i in range(n+1)]\n    p = 2\n    while p * p <= n:\n        if primes[p] == True:\n            for i in range(p * p, n+1, p):\n                primes[i] = False\n        p += 1\n    \n    result = []\n    for i in range(2, n):\n        if primes[i]:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/97", "completion": "    return (a * b) % 10"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(1, len(s), 2):\n        if s[i].upper() in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num.is_integer():\n        return int(num)\n    else:\n        closest_int = int(num)\n        next_int = int(num + 1)\n        prev_int = int(num - 1)\n        diff1 = abs(num - closest_int)\n        diff2 = abs(num - next_int)\n        diff3 = abs(num - prev_int)\n        if diff1 <= diff2 and diff1 <= diff3:\n            return closest_int\n        elif diff2 <= diff1 and diff2 <= diff3:\n            return next_int\n        else:\n            return prev_int"}
{"task_id": "HumanEval/100", "completion": "    res = []\n    res.append(n)\n    for i in range(1, n):\n        if n % 2 == 0:\n            res.append(n+1)\n            n += 1\n        else:\n            res.append(n+2)\n            n += 2\n    return res"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -2):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total_sum = 0\n    for i in range(n, m+1):\n        total_sum += i\n    avg = total_sum // (m - n + 1)\n    return bin(avg)[2:]"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for i in x:\n        temp = i\n        while temp > 0:\n            if temp % 2 == 0:\n                break\n            temp //= 10\n        if temp == 0:\n            result.append(i)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: (len(str(x)), x))\n\ndef replace_digits(arr):\n    digit_map = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    res = []\n    for num in arr:\n        if 1 <= num <= 9:\n            res.append(digit_map[num])\n    return res"}
{"task_id": "HumanEval/106", "completion": "    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            res.append(sum(range(1, i+1)))\n    return res\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(num):\n        if num == 0:\n            return 0\n        elif num < 0:\n            return -sum_of_digits(-num)\n        else:\n            return sum(int(digit) for digit in str(num))\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))"}
{"task_id": "HumanEval/110", "completion": "    even_lst1 = [x for x in lst1 if x % 2 == 0]\n    even_lst2 = [x for x in lst2 if x % 2 == 0]\n    if len(even_lst1) + len(even_lst2) == len(lst1) + len(lst2):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    histogram_dict = {}\n    max_count = 0\n    result_letters = []\n\n    for letter in test:\n        if letter.isalpha():\n            letter = letter.lower()\n            if letter in histogram_dict:\n                histogram_dict[letter] += 1\n            else:\n                histogram_dict[letter] = 1\n\n            if histogram_dict[letter] > max_count:\n                max_count = histogram_dict[letter]\n                result_letters = [letter]\n            elif histogram_dict[letter] == max_count:\n                result_letters.append(letter)\n\n    return {letter: histogram_dict[letter] for letter in result_letters}"}
{"task_id": "HumanEval/112", "completion": "    s = list(s)\n    for i in range(len(s)):\n        if s[i] in c:\n            s[i] = None\n    s = [x for x in s if x is not None]\n    rev_s = \"\".join(s[::-1])\n    if rev_s == rev_s[::-1]:\n        return rev_s, True\n    else:\n        return rev_s, False"}
{"task_id": "HumanEval/113", "completion": "    def count_odd(s):\n        return sum(1 for x in s if int(x) % 2 != 0)\n\n    result = []\n    for s in lst:\n        result.append(f\"the number of odd elements {count_odd(s)}n the str{count_odd(s)}ng {count_odd(s)} of the {count_odd(s)}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    m, n = len(grid), len(grid[0])\n    cnt = 0\n    for i in range(m):\n        for j in range(1, n):\n            if grid[i][j] == 1:\n                cnt += 1\n                left = j-1\n                while left >= 0 and grid[i][left] == 1:\n                    cnt += 1\n                    left -= 1\n                right = j+1\n                while right < n and grid[i][right] == 1:\n                    cnt += 1\n                    right += 1\n                left, right = j, j+1\n                while left >= 0 and right < n and (left+right) % 2 == 1:\n                    if grid[i][left] == 1:\n                        grid[i][left] = 0\n                        capacity -= 1\n                    if capacity < 0:\n                        return -1\n                    if grid[i][right] == 1:\n                        grid[i][right] = 0\n                        capacity -= 1\n                    if capacity < 0:\n                        return -1\n                    left -= 1\n                    right += 1\n    return cnt"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/117", "completion": "    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    words = s.split()\n    words_with_n_consonants = [word for word in words if word.isalpha() and sum(1 for char in word if char in consonants) == n]\n    return words_with_n_consonants"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    res = \"\"\n    i = len(word) - 1\n    while i >= 0:\n        if word[i] in vowels:\n            res = word[i]\n            break\n        i -= 1\n    if res == \"\":\n        return res\n    \n    res = \"\"\n    i = 0\n    while i < len(word):\n        if word[i] in vowels:\n            res = word[i]\n            break\n        i += 1\n    if res == \"\":\n        return res\n    \n    return res"}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return \"No\"\n            stack.pop()\n    return \"Yes\" if not stack else \"No\""}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[::-1][:k]"}
{"task_id": "HumanEval/121", "completion": "    total_sum = 0\n    for i in range(1, len(lst), 2):\n        total_sum += lst[i]\n    return total_sum"}
{"task_id": "HumanEval/122", "completion": "    total_sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total_sum += arr[i]\n    return total_sum"}
{"task_id": "HumanEval/123", "completion": "    def collatz(x):\n        if x % 2 == 0:\n            return x // 2\n        else:\n            return 3 * x + 1\n\n    odd_collatz = []\n    while n not in odd_collatz:\n        n = collatz(n)\n        if n % 2 != 0:\n            odd_collatz.append(n)\n    return sorted(odd_collatz)"}
{"task_id": "HumanEval/124", "completion": "    date_format = '%m-%d-%Y'\n    try:\n        if len(date) != 8:\n            return False\n        day = date[3:5]\n        month = date[0:2]\n        year = date[6:8]\n        if int(day) < 1 or int(day) > 31:\n            if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n                if int(day) < 1 or int(day) > 31:\n                    return False\n            elif int(month) in [4, 6, 9, 11]:\n                if int(day) < 1 or int(day) > 30:\n                    return False\n            elif int(month) == 2:\n                if int(day) < 1 or int(day) > 29:\n                    return False\n        if int(month) < 1 or int(month) > 12:\n            return False\n        if int(year) < 1900 or int(year) > 2900:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return len([c for c in txt if c.islower()])"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n        elif lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start, end = interval1\n    start_i, end_i = interval2\n    if start_i > end or start > end_i:\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    \n    result = 1\n    for num in arr:\n        result *= num\n    sign_product = 1\n    for num in arr:\n        if num < 0:\n            sign_product *= -1\n    return abs(result) * sign_product"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i==0 and j==0:\n                dp[i][j] = grid[i][j]\n            elif i==0:\n                dp[i][j] = dp[i][j-1] + grid[i][j]\n            elif j==0:\n                dp[i][j] = dp[i-1][j] + grid[i][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return [dp[n-1][m-1]]*k"}
{"task_id": "HumanEval/130", "completion": "    res = [0] * (n + 1)\n    res[0] = 0\n    res[1] = 1\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            res[i] = res[i - 1] + i // 2\n        else:\n            res[i] = res[i - 1] + res[i // 2] + res[i // 2]\n    return res"}
{"task_id": "HumanEval/131", "completion": "    result = 1\n    n = abs(n)\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            result *= digit\n        n //= 10\n    return result"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num**2)\n    return result"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if not words:\n        return False\n    last_word = words[-1]\n    if not last_word:\n        return False\n    last_char = last_word[-1]\n    if last_char.isalpha():\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1,0,-1):\n        if arr[i] > arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    min_positive = None\n    max_negative = None\n    for num in lst:\n        if num > 0 and (min_positive is None or num < min_positive):\n            min_positive = num\n        if num < 0 and (max_negative is None or num > max_negative):\n            max_negative = num\n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n    if a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/138", "completion": "    count = 0\n    for i in range(4, n, 2):\n        if i <= n:\n            count += 1\n            n -= i\n        else:\n            break\n    return count == 4"}
{"task_id": "HumanEval/139", "completion": "    if n <= 0:\n        return \"Invalid Input\"\n    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    i = 0\n    while i < len(text):\n        if text[i] != \" \":\n            result += text[i]\n        else:\n            result += \"_\"\n            while i < len(text) and text[i] == \" \":\n                i += 1\n        i += 1\n    return result"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count(\".\") != 1:\n        return \"No\"\n    if file_name.count(\"..\") != 0:\n        return \"No\"\n    if not file_name[:file_name.find(\".\")].isalpha():\n        return \"No\"\n    if len(file_name) > 3:\n        return \"No\"\n    if file_name[-3:] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i]**2\n        elif i % 4 == 0:\n            total += lst[i]**3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    primes = set()\n    for i in range(2, len(sentence)):\n        if all(i % j != 0 for j in range(2, i)):\n            primes.add(i)\n    \n    result = []\n    for word in words:\n        if len(word) in primes:\n            result.append(word)\n    \n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "completion": "    num1, den1 = map(int, x.split('/'))\n    num2, den2 = map(int, n.split('/'))\n    return (num1*num2)%den1 == 0"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    odd_first_last = lambda x: x % 2 != 0\n    return sum(1 for num in nums if num > 10 and odd_first_last(num))"}
{"task_id": "HumanEval/147", "completion": "    a = [0] * n\n    for i in range(n):\n        a[i] = i * i - i + 1\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\",\n              \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    return tuple(planets[index1+1:index2])"}
{"task_id": "HumanEval/149", "completion": "    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n    return sorted(result)"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n    else:\n        return x\n    return y"}
{"task_id": "HumanEval/151", "completion": "    sum_of_squares = 0\n    for num in lst:\n        if num >= 0 and int(num) % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares"}
{"task_id": "HumanEval/152", "completion": "    res = []\n    for i in range(len(game)):\n        if game[i]==guess[i]:\n            res.append(0)\n        else:\n            res.append(abs(game[i]-guess[i]))\n    return res"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = ''\n    for extension in extensions:\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = (cap_count - sm_count) / 2\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'"}
{"task_id": "HumanEval/154", "completion": "    if len(a)!=len(b):\n        return False\n    s = a + a\n    if b in s:\n        return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num != 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    val = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    syms = ['m', 'cm', 'd', 'cd', 'cx', 'Xc', 'X', 'Xl', 'Xxl', 'Ixxi', 'Ixil', 'Ixx', 'Ixi', 'Ix', 'XI', 'XlI', 'XlX', 'XLI', 'XLIX', 'XCII']\n    roman_num = \"\"\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num"}
{"task_id": "HumanEval/157", "completion": "    if a == b or b == c or c == a:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    if number + remaining < need:\n        return [number + remaining, remaining]\n    else:\n        return [number + need, 0]"}
{"task_id": "HumanEval/160", "completion": "    result = 0\n    for i in range(len(operand) - 1):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result if not result else result[::-1]"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if text == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for i in range(a, b + 1):\n        if str(i).isnumeric():\n            if int(str(i)[0]) % 2 == 0:\n                result.append(i)\n    return result"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    groups = []\n    current_group = \"\"\n    for char in paren_string:\n        if char.isdigit() or char in \"({[\":\n            current_group += char\n        else:\n            if current_group:\n                groups.append(current_group)\n                current_group = \"\"\n    if current_group:\n        groups.append(current_group)\n    return groups"}
{"task_id": "HumanEval/2", "completion": "    integer = int(number)\n    return number - integer"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        if op < 0:\n            balance += op\n        else:\n            balance -= op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    numbers.sort()\n    n = len(numbers)\n    total = 0\n    for i in range(1, n):\n        total += abs(numbers[i] - numbers[0])\n    return total / (n - 1)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                max_depth = max(max_depth, len(stack))\n    return [max_depth] * len(paren_string)"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    return (sum(numbers), 1) if numbers else (0, 1)"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_val = float('-inf')\n    for num in numbers:\n        max_val = max(max_val, num)\n        result.append(max_val)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n    i = len(string) - 1\n    while not is_palindrome(string[:i+1]):\n        i -= 1\n    return string[:i+1] + string[i+1:][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            result += a[i]\n        if i < len(b):\n            result += b[i]\n    return ''.join(['1' if x == '0' else '0' for x in result])"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n\n    max_len = -1\n    max_string = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_string = s\n\n    return max_string"}
{"task_id": "HumanEval/13", "completion": "    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "    result = []\n    for i in range(len(string) + 1):\n        result.append(string[:i])\n    return result"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats = [4, 2, 1]  # Legend for musical notes\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        result.append(beats[note.count('|')])\n    return result"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    n = len(string)\n    m = len(substring)\n    for i in range(n - m + 1):\n        if string[i:i+m] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = list(map(int, numbers.split()))\n    num_list.sort()\n    return ' '.join(map(str, num_list))"}
{"task_id": "HumanEval/20", "completion": "    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n    min_diff = float('inf')\n    result = (None, None)\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled_nums = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return rescaled_nums"}
{"task_id": "HumanEval/22", "completion": "    return [val for val in values if isinstance(val, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return \"\"\n    result = \"\"\n    for s in strings:\n        result += s\n    return result"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Returns x such that poly(x) = 0.\n    \"\"\"\n    if len(xs) % 2 == 0:\n        return -1  # Not possible to have even number of coefficients\n    x0 = 1  # Some arbitrary value of x to start with\n    while True:\n        if poly(xs, x0) < 0:\n            return x0  # x0 is root of the polynomial\n        else:\n            x0 += 0.0000001  # Increment x0 to find next root"}
{"task_id": "HumanEval/33", "completion": "    l.sort()\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            if str(7) in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[::2] = sorted(l[::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    return encode_cyclic(s)"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_perfect_square(num):\n        if num < 0:\n            return False\n        root = num ** 0.5\n        return int(root) ** 2 == num\n\n    def is_fibonacci(num):\n        return is_perfect_square(5 * num * num + 4) or is_perfect_square(5 * num * num - 4)\n\n    count = 0\n    for i in range(2, 10**10):  # 10^10 is just a big number, you can change it if you want\n        if is_fibonacci(i) and is_prime(i):\n            count += 1\n        if count == n:\n            return i\n    return -1"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n*(n-1)//2"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    res = ''\n    while x != 0:\n        res = str(x % base) + res\n        x //= base\n    return res"}
{"task_id": "HumanEval/45", "completion": "    area = 0.5 * a * h\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n < 0:\n        raise ValueError(\"Input should be a positive integer\")\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2] + l[n // 2 - 1]) / 2\n    else:\n        return l[n // 2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    result = 0\n\twhile (n > 0):\n\t\tif (n % 2 == 1):\n\t\t\tresult = (result + p) % p\n\t\tp = (p * p) % p\n\t\tn = n // 2\n\treturn result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n    if l[0] <= l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n        return all(l[i] >= l[i+1] for i in range(len(l)-1))"}
{"task_id": "HumanEval/58", "completion": "    l1.sort()\n    l2.sort()\n    n1, n2 = len(l1), len(l2)\n    j = 0\n    for i in range(n1):\n        if j == n2:\n            break\n        if l1[i] == l2[j]:\n            yield l1[i]\n            j += 1\n        elif l1[i] > l2[j]:\n            j += 1\n        else:\n            j += 1"}
{"task_id": "HumanEval/59", "completion": "    factor = 2\n    while n > 1:\n        while n % factor == 0:\n            n = n // factor\n        factor += 1\n    return factor - 1"}
{"task_id": "HumanEval/60", "completion": "    return n*(n+1)//2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    res = []\n    for i in range(1, n):\n        res.append(xs[i] * i)\n    return res"}
{"task_id": "HumanEval/63", "completion": "    fib_seq = [0, 0]\n    for i in range(2, n + 1):\n        fib_seq.append(fib_seq[i - 1] + fib_seq[i - 2])\n    return fib_seq[n]"}
{"task_id": "HumanEval/64", "completion": "    vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    if shift > len(num_str):\n        return num_str[::-1]\n    else:\n        return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    apples = 0\n    oranges = 0\n    mangoes = 0\n    \n    for word in s.split():\n        if word.endswith('apples'):\n            apples = int(word.replace('apples',''))\n        elif word.endswith('oranges'):\n            oranges = int(word.replace('oranges',''))\n        elif word.endswith('mangoes'):\n            mangoes = int(word.replace('mangoes',''))\n            \n    return n - (apples + oranges + mangoes)"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n\n    min_val = float('inf')\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_val:\n            min_val = val\n            min_index = i\n\n    return [min_val, min_index] if min_index != -1 else []"}
{"task_id": "HumanEval/69", "completion": "    frequency_map = {}\n    for num in lst:\n        if num in frequency_map:\n            frequency_map[num] += 1\n        else:\n            frequency_map[num] = 1\n    \n    max_val = -1\n    for key, value in frequency_map.items():\n        if key > 0 and value >= key:\n            max_val = key\n    \n    return max_val"}
{"task_id": "HumanEval/70", "completion": "    if len(lst) <= 1:\n        return lst\n    minimum = min(lst)\n    maximum = max(lst)\n    result = [minimum]\n    while maximum in lst:\n        lst.remove(maximum)\n        result.append(maximum)\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c))**0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if len(q)%2 != 0:\n        return False\n    if sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = float('inf')\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            ans = min(ans, 1 + smallest_change(arr[:i]+[arr[i]^arr[n-1-i]]+arr[i+1:n-1-i]))\n    return ans"}
{"task_id": "HumanEval/74", "completion": "    def total_chars(s):\n        return sum(len(x) for x in s)\n    \n    total1 = total_chars(lst1)\n    total2 = total_chars(lst2)\n    \n    if total1 < total2:\n        return lst1\n    elif total1 > total2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "    primes = [True] * (a + 1)\n    p = 2\n    while p * p <= a:\n        if primes[p]:\n            for i in range(p * p, a + 1, p):\n                primes[i] = False\n        p += 1\n\n    for i in range(2, a):\n        if primes[i]:\n            if (a % i) == 0 and (a / i) % 3 == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x < 0 or n < 0:\n        return False\n    while(x % n == 0):\n        x = x / n\n    return x == 1"}
{"task_id": "HumanEval/77", "completion": "    return (a >= 0 and round(a ** (1/3)) ** 3 == a)"}
{"task_id": "HumanEval/78", "completion": "    key = {'A': '1', 'B': '2', 'C': '3', 'D': '4', 'E': '5', 'F': '6', '0': '7', '1': '8', '2': '9'}\n    result = 0\n    n = len(num)\n    for i in range(n):\n        digit = num[i]\n        result += int(key[digit])\n    return result\n\ndef isPrime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef countPrimeDigits(num: str) -> int:\n    decimal_num = hex_key(num)\n    count = 0\n    while decimal_num > 0:\n        digit = decimal_num % 10\n        if isPrime(digit):\n            count += 1\n        decimal_num = decimal_num // 10\n    return count"}
{"task_id": "HumanEval/79", "completion": "    result = \"\"\n    while decimal > 0:\n        result = str(decimal % 2) + result\n        decimal = decimal // 2\n    return \"db\" + result + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif 3.7 <= grade < 4.0:\n            letter_grades.append(\"A\")\n        elif 3.3 <= grade < 3.7:\n            letter_grades.append(\"A-\")\n        elif 3.0 <= grade < 3.3:\n            letter_grades.append(\"B+\")\n        elif 2.7 <= grade < 3.0:\n            letter_grades.append(\"B\")\n        elif 2.3 <= grade < 2.7:\n            letter_grades.append(\"B-\")\n        elif 2.0 <= grade < 2.3:\n            letter_grades.append(\"C+\")\n        elif 1.7 <= grade < 2.0:\n            letter_grades.append(\"C\")\n        elif 1.3 <= grade < 1.7:\n            letter_grades.append(\"C-\")\n        elif 1.0 <= grade < 1.3:\n            letter_grades.append(\"D+\")\n        elif 0.7 <= grade < 1.0:\n            letter_grades.append(\"D\")\n        elif 0.0 <= grade < 0.7:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length // 2 + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 0\n    return 9 * (n - 1) // 2"}
{"task_id": "HumanEval/84", "completion": "    digit_sum = sum(int(x) for x in str(N))\n    return bin(digit_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    ordered_words = sorted(words, key=lambda word: ''.join(sorted(word)))\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "    rows = len(lst)\n    cols = len(lst[0])\n    coordinates = []\n    for i in range(rows):\n        for j in range(cols - 1, -1, -1):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return array\n    if sum(array[:2]) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = ord(char) + 2 * 2\n            if shift > ord('z'):\n                shift -= 26\n            result += chr(shift)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    unique_nums = set(lst)\n    if len(unique_nums) < 2:\n        return None\n    unique_nums = sorted(list(unique_nums))\n    return unique_nums[1]"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.')\n    count = 0\n    for sentence in sentences:\n        if sentence.lstrip().startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if x == y or x == z or y == z:\n        return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'AEIOUaeiou'\n    result = ''\n    for char in message:\n        if char in vowels:\n            result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n<=1:\n            return False\n        if n<=3:\n            return True\n        if n%2==0 or n%3==0:\n            return False\n        i = 5\n        while i*i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def sumOfDigits(n):\n        sum_digits = 0\n        while n:\n            sum_digits += n % 10\n            n //= 10\n        return sum_digits\n\n    max_prime = -1\n    for num in lst:\n        if num>=2 and isPrime(num):\n            if num>max_prime:\n                max_prime = num\n\n    return sumOfDigits(max_prime)"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n\n    if all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys()):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        if all(num % x != 0 for x in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return int(str(a)[-1]) * int(str(b)[-1])"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] in 'AEIOU':\n                count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num == int(num):\n        return int(num)\n    return int(num + 1) if num > 0 else int(num - 1)"}
{"task_id": "HumanEval/100", "completion": "    if n % 2 == 0:\n        return [n] + [n+2 for _ in range(2, n)]\n    else:\n        return [n] + [n+1 for _ in range(2, n)]"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "    max_even_num = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            max_even_num = max(max_even_num, i)\n    return max_even_num"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    sum = (m - n + 1) // 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/104", "completion": "    return sorted([int(x) for x in str(x) if all(int(d) % 2 != 0 for d in str(x))])"}
{"task_id": "HumanEval/105", "completion": "    nines = []\n    sevens = []\n    fives = []\n    threes = []\n    ones = []\n    for i in arr:\n        if i < 1:\n            continue\n        if i <= 9:\n            ones.append(i)\n        elif i <= 99:\n            threes.append(i)\n        elif i <= 999:\n            fives.append(i)\n        elif i <= 9999:\n            sevens.append(i)\n        else:\n            nines.append(i)\n    return ones + threes + fives + sevens + nines\n\ndef replace_by_name(arr):\n    def num2name(num):\n        num_str = str(num)\n        names = {\n            '1': 'One', '2': 'Two', '3': 'Three', '4': 'Four', '5': 'Five',\n            '6': 'Six', '7': 'Seven', '8': 'Eight', '9': 'Nine'\n        }\n        result = ''\n        for digit in num_str:\n            result += names[digit]\n        return result\n\n    result = []\n    for i in range(1, 10):\n        count = 0\n        for num in arr:\n            if num == i:\n                count += 1\n            elif num < i:\n                break\n        result.extend([num2name(i)] * count)\n    return result"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(1)\n            for j in range(2, i + 1):\n                result[i - 1] *= j\n        else:\n            result.append(0)\n            for j in range(1, i + 1):\n                result[i - 1] += j\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            count_even += 1\n        elif str(i) == str(i)[::-1] and i % 2 != 0:\n            count_odd += 1\n    \n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(num):\n        if num < 0:\n            return sum([int(x) for x in str(num)[1:]])\n        else:\n            return sum([int(x) for x in str(num)])\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    return not arr or all(arr[i] <= arr[i+1] for i in range(len(arr)-1))"}
{"task_id": "HumanEval/110", "completion": "    if len(lst1) != len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    hist = {}\n    words = test.split()\n    for word in words:\n        letters = word.split()\n        for letter in letters:\n            if letter in hist:\n                hist[letter] += 1\n            else:\n                hist[letter] = 1\n    max_repetition = max(hist.values())\n    result = [key for key, value in hist.items() if value == max_repetition]\n    return {letter: hist[letter] for letter in result}"}
{"task_id": "HumanEval/112", "completion": "    s = list(s)\n    for i in range(len(s)):\n        if s[i] in c:\n            s[i] = ''\n    s = ''.join(s)\n    return s, s==s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements in the string {} of the input.\".format(count))\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    wells = len(grid)\n    cols = len(grid[0])\n    result = 0\n    for c in range(cols):\n        count = 0\n        for r in range(wells):\n            if grid[r][c] == 1:\n                count += 1\n            else:\n                count = 0\n            if count > capacity:\n                result += math.ceil(count / capacity)\n                count = count % capacity\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou')\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in consonants and word[i+1] in consonants:\n            for j in range(i+2, len(word)):\n                if word[j] in vowels:\n                    return word[j]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(min(k, len(arr))):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    def collatz(x):\n        if x % 2 == 0:\n            return x // 2\n        else:\n            return 3 * x + 1\n\n    result = []\n    while n != 1:\n        n = collatz(n)\n        if n % 2 != 0:\n            result.append(n)\n        n = collatz(n)\n    result.append(n)\n    return sorted(result)"}
{"task_id": "HumanEval/124", "completion": "    if len(date)==0:\n        return False\n    month, day, year = map(int, date.split('-'))\n    if year<1000 or year>9999 or month<1 or month>12 or day<1 or day>31:\n        return False\n    if month in [1,3,5,7,8,10,12] and day<1 or day>31:\n        return False\n    if month in [4,6,9,11] and day<1 or day>30:\n        return False\n    if month==2 and day<1 or day>29:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for i in range(26) if i % 2 != 0)"}
{"task_id": "HumanEval/126", "completion": "    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if isPrime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    \n    signs = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        if num == 0:\n            signs = 0\n            break\n        elif num > 0:\n            signs *= 1\n        else:\n            signs *= -1\n            \n        magnitude_sum += abs(num)\n        \n    return signs * magnitude_sum"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = grid[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j - 1] + grid[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j] + grid[i][j]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n    values = []\n    for _ in range(k):\n        i, j = 0, 0\n        while i < n and j < n:\n            values.append(dp[i][j])\n            if i == 0:\n                j += 1\n            elif j == 0:\n                i += 1\n            else:\n                if dp[i - 1][j] < dp[i][j - 1]:\n                    i += 1\n                else:\n                    j += 1\n    return values\n\n# Example usage\ngrid = [ [1,2,3], [4,5,6], [7,8,9]]\nk = 3\nprint(minPath(grid, k))  # Output: [1, 2, 1]"}
{"task_id": "HumanEval/130", "completion": "    res = [0, 1]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            res.append(1 + (i // 2))\n        else:\n            res.append(res[i-1] + res[i-2] + 1)\n    return res"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return bool(stack)"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num**2)\n    return result"}
{"task_id": "HumanEval/134", "completion": "    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    return last_char.isalpha() and not last_char.isalnum()"}
{"task_id": "HumanEval/135", "completion": "    max_idx = -1\n    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i+1]:\n            max_idx = max(max_idx, i)\n    return max_idx"}
{"task_id": "HumanEval/136", "completion": "    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    \n    if not negatives or not positives:\n        return None, None\n    \n    return max(negatives), min(positives)"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    elif isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        a_num = float(a)\n        b_num = float(b)\n        if a_num == b_num:\n            return None\n        else:\n            return max(a_num, b_num)\n    else:\n        a_num = float(a)\n        b_num = float(b)\n        if a_num == b_num:\n            return None\n        else:\n            return max(a_num, b_num)"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    half_n = n // 2\n    count = 0\n    for i in range(1, half_n):\n        if i * i + (i + 1) * (i + 1) == n:\n            count += 1\n    return count == 4"}
{"task_id": "HumanEval/139", "completion": "    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    text = text.strip()\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        else:\n            result += char\n    while \"  \" in result:\n        result = result.replace(\"  \", \"-\")\n    return result"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 15:\n        return \"No\"\n    if file_name[0] == '.':\n        return \"No\"\n    if file_name[-4:] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    if not file_name[:file_name.find('.')].isalnum():\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            sum += lst[i] ** 3\n    return sum"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = map(int, x.split(\"/\"))\n    n_num, n_den = map(int, n.split(\"/\"))\n    \n    result = x_num * n_num\n    return result % n_den == 0"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    nums.sort(key=lambda x: (sum_of_digits(x), nums.index(x)))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            if num % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index == -1 or planet2_index == -1:\n        return ()\n    return tuple(sorted(planets[planet1_index+1:planet2_index]))"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst)\n\n# Test the function\nprint(sorted_list_sum(['banana', 'apple', 'cherry', 'date']))  # Output: ['apple', 'banana', 'cherry', 'date']\nprint(sorted_list_sum(['zebra', 'lion', 'gorilla', 'elephant']))  # Output: ['lion', 'zebra', 'elephant', 'gorilla']"}
{"task_id": "HumanEval/150", "completion": "    if (n == 1):\n\t\treturn y\n\telif (n % 2 == 0):\n\t\treturn x_or_y(n//2, x, y)\n\telse:\n\t\treturn x_or_y((n+1)//2, x, y)"}
{"task_id": "HumanEval/151", "completion": "    odd_numbers = [num for num in lst if num % 2 != 0 and num > 0 and num % 1 == 0]\n    if not odd_numbers:\n        return 0\n    return sum(num ** 2 for num in odd_numbers)"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = ''\n    for extension in extensions:\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = len(extension) - cap_count\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    b = b.lower()\n    n = len(a)\n    m = len(b)\n    if n == 0 or m == 0:\n        return False\n    if n < m:\n        a = a + a\n    for i in range(0, n - m + 1):\n        if a[i:i + m] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)"}
{"task_id": "HumanEval/156", "completion": "    val = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    syms = [\"m\", \"d\", \"c\", \"x\", \"v\", \"i\"]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()"}
{"task_id": "HumanEval/157", "completion": "    if a == b or b == c or c == a:\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/158", "completion": "    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    total_eaten = number + need\n    if total_eaten <= remaining:\n        return [total_eaten, remaining - total_eaten]\n    else:\n        return [total_eaten, 0]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            stack.append(operand.pop(0) + operand.pop(0))\n        elif operator[i] == '-':\n            stack.append(operand.pop(0) - operand.pop(0))\n        elif operator[i] == '*':\n            stack.append(operand.pop(0) * operand.pop(0))\n        elif operator[i] == '/':\n            stack.append(int(operand.pop(0) / operand.pop(0)))\n        elif operator[i] == '**':\n            stack.append(operand.pop(0) ** operand.pop(0))\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    vowels = \"aeiouAEIOU\"\n\tnew_string = \"\"\n\tfor char in s:\n\t\tif char.isalpha():\n\t\t\tif char in vowels:\n\t\t\t\tnew_string += char.swapcase()\n\t\t\telse:\n\t\t\t\tnew_string += char\n\t\telse:\n\t\t\tnew_string += char\n\treturn new_string[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    \n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        num_str = str(num)\n        if ''.join(filter(lambda x: int(x) % 2 == 0, num_str)) == '0':\n            continue\n        result.append(int(''.join(filter(lambda x: int(x) % 2 == 0, num_str))))\n    return result"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            if stack:\n                groups.append(''.join(stack))\n                stack = []\n            stack.append(char)\n        elif char == ')':\n            stack.append(char)\n            if stack:\n                group = ''.join(stack)\n                groups.append(group)\n                stack = []\n    if stack:\n        groups.append(''.join(stack))\n    return groups"}
{"task_id": "HumanEval/2", "completion": "    int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        if op > balance:\n            return True\n        balance += op\n    return False"}
{"task_id": "HumanEval/4", "completion": "    numbers.sort()\n    n = len(numbers)\n    mean = sum(numbers) / n\n    mad = 0\n    for num in numbers:\n        mad += abs(num - mean)\n    return mad / n"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i, num in enumerate(numbers):\n        if i % 2 == 0:\n            result.append(num)\n        else:\n            result.append(delimeter)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    result = []\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            if not stack:\n                max_depth += 1\n            result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    sum_val = 0\n    product_val = 1\n    for num in numbers:\n        sum_val += num\n        product_val *= num\n    return (sum_val, product_val)"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_so_far = float('-inf')\n    for i, num in enumerate(numbers):\n        max_so_far = max(num, max_so_far)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[:i][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            result += str(int(a[i]) ^ int(b[i]))\n        else:\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_length = -1\n    longest_string = None\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            longest_string = s\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "    if a == 0:\n        return b\n    return greatest_common_divisor(b % a, a)"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    music_list = music_string.split(' ')\n    beats = [4] * (len(music_list) - 1)\n    for i in range(len(music_list) - 1):\n        if music_list[i] == '.|':\n            beats[i] = 1\n        elif music_list[i] == 'o|':\n            beats[i] = 2\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    index = 0\n    while index < len(string):\n        if string.startswith(substring, index):\n            count += 1\n            index += len(substring)\n        else:\n            index += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = numbers.split()\n    num_list.sort(key=lambda x: int(x))\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/20", "completion": "    smallest_diff = float('inf')\n    result = (float('inf'), float('-inf'))\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < smallest_diff:\n            smallest_diff = diff\n            result = (numbers[i], numbers[i + 1])\n\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    transform = lambda x: (x - min_val) / (max_val - min_val)\n    return [transform(num) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n / divisor\n        divisor += 1\n        if divisor * divisor > n:\n            if n > 1:\n                factors.append(n)\n            break\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    unique_nums = []\n    for num in numbers:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"}
{"task_id": "HumanEval/27", "completion": "    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Return a zero point for the given polynomial.\n    \"\"\"\n    root = 0\n    while True:\n        if poly(xs, root) == 0:\n            return root\n        root += 0.0001  # Increasing step to find root"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l.sort(key=lambda x: (x % 3, x))\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = float('-inf')\n    for i in range(len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).find('7') != -1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l_sorted = sorted(l[1::2])\n    for i in range(1, len(l), 2):\n        l[i] = l_sorted.pop(0)\n    return l"}
{"task_id": "HumanEval/38", "completion": "    return encode_cyclic(s)"}
{"task_id": "HumanEval/39", "completion": "    if n <= 0:\n        return \"Invalid Input\"\n    elif n == 1:\n        return 2\n    else:\n        a, b = 0, 1\n        count = 2\n        while count < n:\n            a, b = b, a+b\n            count += 1\n        return b"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    if len(l) < 2:\n        return False\n    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    return str(x)\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result"}
{"task_id": "HumanEval/45", "completion": "    area = (a * h) / 2\n\treturn area"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 1, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    if n == 0:\n        return 0\n    if n < 0:\n        n = p - n\n    result = 0\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * 2 + 1) % p\n        else:\n            result = (result * 2) % p\n        n = n // 2\n    return result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"AEIOUaeiou\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "completion": "    while (y != 0):\n        a = x & y\n        x = x ^ y\n        y = a << 1\n    return x"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for bracket in brackets:\n        if bracket in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[bracket] != top_element:\n                return False\n        else:\n            stack.append(bracket)\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) <= 1:\n        return True\n    if l[0] > l[1]:\n        inc = False\n    else:\n        inc = True\n    for i in range(1, len(l)):\n        if inc and l[i] >= l[i-1]:\n            return False\n        elif not inc and l[i] <= l[i-1]:\n            return False\n        if l[i] > l[i-1]:\n            inc = True\n        else:\n            inc = False\n    return True"}
{"task_id": "HumanEval/58", "completion": "    return sorted(list(set(l1).intersection(l2)))"}
{"task_id": "HumanEval/59", "completion": "    max_prime = 2\n    while n > 2:\n        for i in range(2, n+1):\n            if n % i == 0:\n                max_prime = max(max_prime, i)\n                n = n / i\n                break\n    return max_prime"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for bracket in brackets:\n        if bracket in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[bracket] != top_element:\n                return False\n        else:\n            stack.append(bracket)\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = []\n    for i in range(n):\n        result.append(xs[i] * (i+1))\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(3, n+1):\n            a, b = b, a + b + fibfib(n-_-1)\n        return b"}
{"task_id": "HumanEval/64", "completion": "    s = s.lower()\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift] if shift != 0 else x_str"}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "    fruit = s.split(\" \")\n    apples = int(fruit[0])\n    oranges = int(fruit[1])\n    mangoes = n - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    smallest_even = float('inf')\n    smallest_even_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_even_index = i\n    return [smallest_even, smallest_even_index] if smallest_even_index != -1 else []"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    result = -1\n    for num, count in freq.items():\n        if num > 0 and count >= num:\n            result = num\n            break\n    \n    return result"}
{"task_id": "HumanEval/70", "completion": "    if len(lst) < 1:\n        return lst\n    result = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        result.append(min_val)\n        result.append(max_val)\n        lst.remove(min_val)\n        lst.remove(max_val)\n    return result"}
{"task_id": "HumanEval/71", "completion": "    sides = [a, b, c]\n    sides.sort()\n    if sides[0] + sides[1] > sides[2] and sides[1] + sides[2] > sides[0] and sides[0] + sides[2] > sides[1]:\n        s = (sides[0] + sides[1] + sides[2]) / 2\n        area = (s * (s - sides[0]) * (s - sides[1]) * (s - sides[2])) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and len(q)%2==0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    oddCount = 0\n    evenCount = 0\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            evenCount += 1\n        else:\n            oddCount += 1\n    if oddCount > evenCount:\n        return oddCount\n    else:\n        return evenCount"}
{"task_id": "HumanEval/74", "completion": "    def total_chars(s):\n        return sum(len(word) for word in s)\n    \n    total_count = {total_chars(lst1): lst1, total_chars(lst2): lst2}\n    \n    return total_count[min(total_count)] if total_count else []"}
{"task_id": "HumanEval/75", "completion": "    primes = [2, 3, 5, 7]\n    if a < 100:\n        for i in primes:\n            if a % i == 0:\n                prime1 = i\n                break\n        for i in primes:\n            if a % i == 0:\n                prime2 = i\n                break\n        for i in primes:\n            if a % i == 0:\n                prime3 = i\n                break\n        return prime1 * prime2 * prime3 == a\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    if x < 0:\n        return False\n    while x >= n:\n        x /= n\n    return x == 1"}
{"task_id": "HumanEval/77", "completion": "    return round(a ** (1/3)) ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = {'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    decimal_num = 0\n    for i in range(len(num)):\n        decimal_num = decimal_num * 16 + hex_digits[num[i]]\n\n    return decimal_num\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_prime_hex_digits(num):\n    hex_num = hex_key(num)\n    count = 0\n    while hex_num > 0:\n        last_digit = hex_num % 16\n        hex_num = hex_num // 16\n        if last_digit in [2, 3, 5, 7, 11, 13, 17]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    res = \"\"\n    while decimal > 0:\n        res = str(decimal % 2) + res\n        decimal = decimal // 2\n    return \"db\" + res + \"db\""}
{"task_id": "HumanEval/80", "completion": "    length = len(s)\n    if length < 3:\n        return False\n    for i in range(length - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A')\n        elif grade >= 3.7:\n            letter_grades.append('A-')\n        elif grade >= 3.3:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D')\n        elif grade >= 0.7:\n            letter_grades.append('D+')\n        elif grade >= 0.3:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('F')\n    return letter_grades\n\ndef grade_equation(grades):\n    return [numerical_letter_grade([grade])[0] for grade in grades]"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    start = 10**(n-1)\n    end = 10**n - 1\n    count = (end - start + 1) // 2\n    return count"}
{"task_id": "HumanEval/84", "completion": "    res = \"\"\n    while N > 0:\n        res = str(N % 2) + res\n        N = N // 2\n    return res"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = \"\"\n    for word in words:\n        chars = sorted(word)\n        result += ''.join(chars)\n    return result"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    if not lst:\n        return result\n    for row in lst:\n        for i in range(len(row)-1, -1, -1):\n            if row[i] == x:\n                result.append((lst.index(row), i))\n    return result"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return array\n    \n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    encrypted_string = ''\n    for char in s:\n        if char.isalpha():\n            rotated_char = chr((ord(char) - ord('a') + 2) * 2)\n            encrypted_string += rotated_char\n        else:\n            encrypted_string += char\n    return encrypted_string"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    \n    min_num = float('inf')\n    second_min_num = float('inf')\n    \n    for num in lst:\n        if num < min_num:\n            second_min_num = min_num\n            min_num = num\n        elif num < second_min_num and num != min_num:\n            second_min_num = num\n            \n    return second_min_num if second_min_num != float('inf') else None"}
{"task_id": "HumanEval/91", "completion": "    boredoms = 0\n    sentences = S.split('. ')\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "    return x == y or x == z or y == z"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiouAEIOU'\n    encoded_message = \"\"\n    for char in message:\n        if char in vowels:\n            index = vowels.find(char)\n            if index+2 < len(vowels):\n                encoded_message += vowels[index+2]\n            else:\n                encoded_message += char\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    def sumOfDigits(n):\n        if n == 0:\n            return 0\n        return n % 10 + sumOfDigits(n // 10)\n    \n    maxPrime = 0\n    for num in lst:\n        if num > maxPrime and isPrime(num):\n            maxPrime = num\n    \n    if maxPrime == 0:\n        return 0\n    else:\n        return sumOfDigits(maxPrime)"}
{"task_id": "HumanEval/95", "completion": "    if len(dict)==0:\n        return False\n    case = str(dict.keys())[1]\n    if case.islower() or case.isupper():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_nums = []\n    for num in range(2, n):\n        if is_prime(num):\n            prime_nums.append(num)\n    return prime_nums"}
{"task_id": "HumanEval/97", "completion": "    return (a * b) % 10"}
{"task_id": "HumanEval/98", "completion": "    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    rounded_num = round(num)\n    if abs(num - rounded_num) == abs(rounded_num - (-rounded_num)):\n        return int(num + 0.5)  # Round away from zero\n    else:\n        return int(num)"}
{"task_id": "HumanEval/100", "completion": "    result = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            result.append(n + 2 * i)\n        else:\n            result.append(n + (2 * i) + 1)\n    return result"}
{"task_id": "HumanEval/101", "completion": "    if ',' in s:\n        return s.split(',')\n    else:\n        return s.split()"}
{"task_id": "HumanEval/102", "completion": "    if y % 2 == 0:\n        return y\n    else:\n        for i in range(y, x-1, -2):\n            if i % 2 == 0:\n                return i\n        return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total_sum = sum(range(n, m+1))\n    total_numbers = m - n + 1\n    average = total_sum / total_numbers\n    return bin(int(average))[2:]"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        if len(set(str(num))) == len(str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: len(str(x)))\n\ndef between_one_and_nine(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(num)\n    return result\n\ndef replace_by_name(arr):\n    name_map = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    result = []\n    for num in arr:\n        result.append(name_map[num])\n    return result\n\ndef sortAndReplace(arr):\n    if not arr:\n        return []\n    \n    sorted_arr = by_length(arr)\n    between_one_nine_arr = between_one_and_nine(sorted_arr)\n    replaced_arr = replace_by_name(between_one_nine_arr)\n    \n    return replaced_arr"}
{"task_id": "HumanEval/106", "completion": "    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(1)\n            for j in range(2, i+1):\n                res[i] *= j\n        else:\n            res.append(sum(range(1, i+1)))\n    return res"}
{"task_id": "HumanEval/107", "completion": "    start = 1\n    end = n\n    even_palindromes = 0\n    odd_palindromes = 0\n    while start <= end:\n        if start % 2 == 0:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n        start += 1\n        end -= 1\n    return (even_palindromes, odd_palindromes)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    arr.sort()\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count_lst1 = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count_lst1 = len(lst1) - even_count_lst1\n    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    odd_count_lst2 = len(lst2) - even_count_lst2\n    if even_count_lst1 == even_count_lst2 and odd_count_lst1 == odd_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    histogram = {}\n    max_count = 0\n    max_letter = ''\n    \n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.isalpha():\n                if letter not in histogram:\n                    histogram[letter] = 1\n                else:\n                    histogram[letter] += 1\n                if histogram[letter] > count:\n                    count = histogram[letter]\n                    max_count = histogram[letter]\n                    max_letter = letter\n    return histogram"}
{"task_id": "HumanEval/112", "completion": "    s = list(s)\n    for i in range(len(s)):\n        if s[i] in c:\n            s[i] = None\n    s = [x for x in s if x]\n    s = ''.join(s)\n    return (s,s == s[::-1])"}
{"task_id": "HumanEval/113", "completion": "    def count_odd(s):\n        return sum(1 for x in s if int(x) % 2 != 0)\n    \n    result = []\n    for i, s in enumerate(lst):\n        result.append(\"the number of odd elements in the string {} of the input.\".format(count_odd(s)))\n    \n    return result"}
{"task_id": "HumanEval/114", "completion": "    if not nums:\n        return 0\n    min_sum = nums[0]\n    current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    def check(mid):\n        ans = 0\n        for row in grid:\n            cnt = 0\n            for val in row:\n                if val == 1:\n                    cnt += 1\n            ans += max(0, cnt - mid)\n        return ans <= capacity\n    \n    left, right = 1, 1000000007\n    while left < right:\n        mid = (left + right) // 2\n        if check(mid):\n            right = mid\n        else:\n            left = mid + 1\n    return left - 1"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = []\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    for word in s.split():\n        if sum(1 for c in word if c in consonants) == n:\n            words.append(word)\n    return words"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"AEIOUaeiou\"\n    consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n    vowel_index = -1\n    consonant_index = -1\n    for i in range(len(word) - 1):\n        if word[i] in consonants and word[i+1] in consonants:\n            consonant_index = i\n        elif word[i] in vowels:\n            vowel_index = i\n    if consonant_index != -1 and vowel_index != -1:\n        return word[vowel_index]\n    else:\n        return \"\""}
{"task_id": "HumanEval/119", "completion": "    def check_balance(string):\n        stack = []\n        for char in string:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            concatenated = lst[i] + lst[j]\n            if check_balance(concatenated):\n                return \"Yes\"\n    return \"No\""}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "completion": "    total_sum = 0\n    for i in range(k):\n        num = arr[i]\n        if num % 10 <= 2:\n            total_sum += num\n    return total_sum"}
{"task_id": "HumanEval/123", "completion": "    def collatz(x):\n        if x % 2 == 0:\n            return x // 2\n        else:\n            return 3 * x + 1\n    \n    result = []\n    for i in range(1, n+1):\n        if collatz(i) % 2 != 0:\n            result.append(collatz(i))\n    return sorted(result)"}
{"task_id": "HumanEval/124", "completion": "    if len(date) != 8:\n        return False\n    if date[0] == '0':\n        return False\n    month = int(date[0:2])\n    day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        else:\n            if day < 1 or day > 29:\n                return False\n    if year < 1000 or year > 9999:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        lower_case_letters = [chr(i) for i in range(123, 155) if chr(i).islower()]\n        odd_order_count = sum(1 for char in lower_case_letters if ord(char) % 2 != 0)\n        return odd_order_count"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if isPrime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef isPrime(n: int) -> bool:\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n**0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    signs = 1\n    prod = 1\n    for num in arr:\n        if num == 0:\n            continue\n        signs *= num\n        prod *= abs(num)\n    return signs * prod"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    for _ in range(k):\n        new_grid = [[-1] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                for dx, dy in dirs:\n                    ni, nj = i + dx, j + dy\n                    if 0 <= ni < n and 0 <= nj < n:\n                        new_grid[ni][nj] = max(new_grid[ni][nj],\n                                             grid[i][j])\n        grid = new_grid\n    return [grid[i][j] for i in range(n) for j in range(n)]"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    else:\n        a, b, c = 0, 1, 2\n        res = []\n        for _ in range(n):\n            res.append(c)\n            c = a + b + c\n            a = b\n            b = c\n        return res"}
{"task_id": "HumanEval/131", "completion": "    result = 1\n    while n:\n        digit = n % 10\n        if digit % 2 != 0:\n            result *= digit\n        n //= 10\n    return result"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in string:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    return sum(int(x**2) for x in lst)"}
{"task_id": "HumanEval/134", "completion": "    txt = txt.strip()\n    last_char = txt[-1]\n    if last_char.isalpha() and not last_char.isalnum():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] >= arr[i + 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    neg_integers = [num for num in lst if num < 0]\n    if not neg_integers:\n        return (None, None)\n    else:\n        a = max(neg_integers)\n    \n    pos_integers = [num for num in lst if num > 0]\n    if not pos_integers:\n        return (a, None)\n    else:\n        b = min(pos_integers)\n        return (a, b)"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    elif isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    elif isinstance(a, float) or isinstance(b, float):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        a = float(a)\n        b = float(b)\n        return max(a, b)\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 == 1:\n        return False\n    for i in range(4, n//2 + 1, 2):\n        if n - i <= 0:\n            return False\n        if n - i % 2 == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(\" \", \"_\")\n    result = \"\"\n    for char in text:\n        if char == \"_\":\n            result += \"-\"\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/141", "completion": "    conditions = {\n        'start_with_letter': False,\n        'dot_count': False,\n        'extension_valid': False\n    }\n\n    conditions['dot_count'] = (file_name.count('.') == 1)\n    conditions['start_with_letter'] = (file_name[0].isalpha())\n\n    file_extension = file_name.split('.')[1]\n    conditions['extension_valid'] = (file_extension in ['txt', 'exe', 'dll'])\n\n    if conditions['dot_count'] and conditions['start_with_letter'] and conditions['extension_valid']:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_length_words(words):\n        prime_words = []\n        for word in words:\n            if is_prime(len(word)):\n                prime_words.append(word)\n        return prime_words\n\n    words = sentence.split()\n    return ' '.join(prime_length_words(words))"}
{"task_id": "HumanEval/144", "completion": "    x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n    result = x_numerator * n_numerator\n    return result % n_denominator == 0"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(num):\n        total = 0\n        while num:\n            total += num % 10\n            num = num // 10\n        return total\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 2 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    index1, index2 = -1, -1\n    for i in range(len(planets)):\n        if planets[i] == planet1:\n            index1 = i\n        if planets[i] == planet2:\n            index2 = i\n    if index1 == -1 or index2 == -1:\n        return ()\n    return tuple(planets[index1+1:index2])"}
{"task_id": "HumanEval/149", "completion": "    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n    result.sort(key=lambda x: (len(x), x))\n    return result"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x if n % 2 == 0 else y"}
{"task_id": "HumanEval/151", "completion": "    result = 0\n    for num in lst:\n        if num >= 0 and int(num) % 2 != 0:\n            result += num ** 2\n    return result"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    extension_strengths = {}\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = (cap - sm) if cap > sm else 0\n        extension_strengths[extension] = strength\n    max_strength = max(extension_strengths.values())\n    strongest_extensions = [ext for ext, strength in extension_strengths.items() if strength == max_strength]\n    return f\"{class_name}.{strongest_extensions[0]}\""}
{"task_id": "HumanEval/154", "completion": "    if b in a:\n        return True\n    rot = b\n    while rot:\n        rot = rot[1:] + rot[0]\n        if rot in a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    str_num = str(num)\n    even_count = sum(1 for digit in str_num if int(digit) % 2 == 0)\n    odd_count = len(str_num) - even_count\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    val = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100]\n    syms = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'xd', 'x', 'ix', 'i']\n    roman_num = ''\n    i = 0\n    while number > 0 and i < len(val):\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num"}
{"task_id": "HumanEval/157", "completion": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2"}
{"task_id": "HumanEval/158", "completion": "    max_count = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_count:\n            max_count = len(set(word))\n            max_word = word\n        elif len(set(word)) == max_count and word < max_word:\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    eaten = number\n    while (need > 0 and remaining > 0):\n        if (remaining >= need):\n            eaten += need\n            need = 0\n            remaining -= need\n        else:\n            eaten += remaining\n            need -= remaining\n            remaining = 0\n    return [eaten, need]"}
{"task_id": "HumanEval/160", "completion": "    n = len(operator)\n    ans = operand[0]\n    for i in range(n):\n        if operator[i] == '+':\n            ans += operand[i + 1]\n        elif operator[i] == '-':\n            ans -= operand[i + 1]\n        elif operator[i] == '*':\n            ans *= operand[i + 1]\n        elif operator[i] == '//':\n            ans = ans // operand[i + 1]\n        elif operator[i] == '**':\n            ans = ans ** operand[i + 1]\n    return ans"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    \n    import hashlib\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        num_str = str(num)\n        if any(digit.isdigit() and int(digit) % 2 == 0 for digit in num_str):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    groups = []\n    group = \"\"\n    stack = []\n    for char in paren_string:\n        if char.isspace():\n            continue\n        if char == \"(\":\n            group += char\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                groups.append(group)\n                group = \"\"\n            else:\n                group += char\n                stack.pop()\n    if group:\n        groups.append(group)\n    return groups"}
{"task_id": "HumanEval/2", "completion": "    # Find the integer part of the number\n    integer_part = int(number)\n    \n    # Calculate the remaining part of the number\n    remaining_part = number - integer_part\n    \n    # Return the remaining part\n    return remaining_part"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        if op > 0:\n            balance += op\n        else:\n            balance -= abs(op)\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    n = len(numbers)\n    total_diff = 0\n    for num in numbers:\n        total_diff += abs(num - sum(numbers) / n)\n    return total_diff / n"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(0, len(numbers), 2):\n        result.append(numbers[i])\n        result.append(delimeter)\n    if numbers[-1] not in result:\n        result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_depth = 0\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            if stack:\n                max_depth = max(max_depth, len(stack))\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n    return [len(stack) + max_depth]"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    \n    sum_result = 0\n    product_result = 1\n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    \n    return sum_result, product_result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_val = numbers[0]\n    for i in range(1, len(numbers)):\n        max_val = max(max_val, numbers[i])\n        result.append(max_val)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    if not string:\n        return \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[:i+1]):\n            suffix = string[i+1:]\n            if not is_palindrome(suffix):\n                return string + string[:i][::-1] + suffix\n    return string"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            result += str(int(a[i]) ^ int(b[i]))\n        else:\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return next((s for s in strings if len(s) == max_length), None)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats = [4, 2, 1]  # 3rd is assumed to be one beat\n    result = []\n    for char in music_string:\n        if char == 'o':\n            result.append(beats[0])\n        elif char == '|':\n            result.append(beats[1])\n        else:\n            result.append(beats[2])\n    return result"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    index = 0\n    while index < len(string):\n        if string[index:index+len(substring)] == substring:\n            count += 1\n            index += len(substring)\n        else:\n            index += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = list(map(lambda x: num_dict[x], numbers.split()))\n    num_list.sort()\n    result = ' '.join(map(lambda x: list(num_dict.keys())[x], num_list))\n    return result"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    scale = 1 / (max_num - min_num)\n    return [(num - min_num) * scale for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return list(filter(lambda x: isinstance(x, int), values))"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in string:\n        if char.isalpha():\n            if char in vowels:\n                result += char.swapcase()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    if not strings:\n        return \"\"\n    result = strings[0]\n    for string in strings[1:]:\n        result += string\n    return result"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    result = [x for x in l if x > 0]\n    return result"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero of a polynomial with coefficients xs.\n    Zero is found using Bisection method.\n    Return zero point.\n    \"\"\"\n    a = 0\n    b = 10  # Starting from 10, increase the value of b if you get a message about function not being monotonic\n    while a <= b:\n        mid = (a + b) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) < 0:\n            a = mid + 0.0000000000000001  # Increase a by 0.0000000000000001 to make it monotonic\n        else:\n            b = mid\n    return round(a, 2)"}
{"task_id": "HumanEval/33", "completion": "    for i in range(len(l)):\n        if i % 3 != 0:\n            continue\n        l[i] = sorted(l[i:i+3])[0]\n    return l"}
{"task_id": "HumanEval/34", "completion": "    n = len(l)\n    if n==0:\n        return []\n    unst1 = l[:]\n    unst1.sort()\n    unst2 = list(set(unst1))\n    unst2.sort()\n    return unst2"}
{"task_id": "HumanEval/35", "completion": "    return max(l)"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(7) in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    for i in range(0, len(l)-1, 2):\n        if i+1 < len(l):\n            l[i], l[i+1] = l[i+1], l[i]\n            l[i+1] = sorted(l[i+1:])[i//2]\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from encoded cyclic string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode each group by cycling. Unless group has fewer elements than 3.\n    decoded_groups = [encode_cyclic(group) if len(group) == 3 else group for group in groups]\n    return \"\".join(decoded_groups)"}
{"task_id": "HumanEval/39", "completion": "    fib = [0] * (n + 1)\n    fib[0] = 0\n    fib[1] = 1\n    a, b = 0, 1\n    for i in range(2, n + 1):\n        fib[i] = a + b\n        a, b = b, fib[i]\n    for i in range(1, n + 1):\n        if fib[i] > 1 and all(fib[i] % j != 0 for j in range(2, int(fib[i] ** 0.5) + 1)):\n            return fib[i]\n    return -1"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return (n*(n-1))//2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = {}\n    for num in l:\n        if -num in seen:\n            return True\n        seen[num] = True\n    return False"}
{"task_id": "HumanEval/44", "completion": "    res = ''\n    while x > 0:\n        res = str(x % base) + res\n        x = x // base\n    return res"}
{"task_id": "HumanEval/45", "completion": "    area = (a * h) / 2\n    return area"}
{"task_id": "HumanEval/46", "completion": "    fib = [0, 0, 2, 0, 0, 4, 0, 0, 8, 0]\n    return fib[n]"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    if n<0:\n        n += p\n    return (2**n)%p"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"AEIOUaeiou\"\n    result = \"\".join([ch for ch in text if ch not in vowels])\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for i in l:\n        if i >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for bracket in brackets:\n        if bracket in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[bracket] != top_element:\n                return False\n        else:\n            stack.append(bracket)\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) <= 1:\n        return True\n    if l[0] > l[1]:\n        increasing = True\n    else:\n        increasing = False\n    for i in range(1, len(l)):\n        if increasing:\n            if l[i] < l[i-1]:\n                return False\n        else:\n            if l[i] > l[i-1]:\n                return False\n        if l[i] > l[i-1]:\n            increasing = True\n        else:\n            increasing = False\n    return True"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1 & set2)"}
{"task_id": "HumanEval/59", "completion": "    if n < 2:\n        return None\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n*(n+1))//2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    res = [0] * n\n    for i in range(n):\n        res[i] = xs[i] * (i + 1)\n    return res"}
{"task_id": "HumanEval/63", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/64", "completion": "    vowels = set(\"aeiouAEIOU\")\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    shift = shift % len(num_str)\n    return num_str[-shift:] + num_str[:-shift] if shift != 0 else num_str"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/67", "completion": "    apples = 0\n    oranges = 0\n    mango = 0\n    num_fruits = 0\n    words = s.split()\n    for word in words:\n        if 'apples' in word:\n            apples = int(word.replace('apples',''))\n        elif 'oranges' in word:\n            oranges = int(word.replace('oranges',''))\n    num_fruits = n - apples - oranges\n    mango = num_fruits\n    return mango"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    \n    min_val = float('inf')\n    min_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < min_val:\n            min_val = num\n            min_index = i\n    return [min_val, min_index] if min_index != -1 else []"}
{"task_id": "HumanEval/69", "completion": "    max_val = -1\n    for num in lst:\n        if num > 0:\n            if lst.count(num) >= num:\n                max_val = max(max_val, num)\n    return max_val"}
{"task_id": "HumanEval/70", "completion": "    if len(lst) <= 1:\n        return lst\n\n    min_val = min(lst)\n    max_val = max(lst)\n    result = [min_val, max_val]\n\n    lst.remove(min_val)\n    lst.remove(max_val)\n\n    return result + strange_sort_list(lst)"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    diff = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            diff += 1\n    return diff"}
{"task_id": "HumanEval/74", "completion": "    def count_chars(s):\n        return sum(len(word) for word in s.split())\n    \n    total_chars_lst1 = sum(count_chars(word) for word in lst1)\n    total_chars_lst2 = sum(count_chars(word) for word in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "    primes = [2, 3, 5]\n    count = 0\n    for prime in primes:\n        if a % prime == 0:\n            count += 1\n            if count >= 2:\n                return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x < 0 or n < 0:\n        return False\n    while(x % n == 0):\n        x //= n\n    return x == 1"}
{"task_id": "HumanEval/77", "completion": "    return (int(a ** (1/3)) ** 3) == a"}
{"task_id": "HumanEval/78", "completion": "    num = num.lower()\n    sum = 0\n    for i in range(len(num)):\n        if num[i] == 'a':\n            sum += 1\n        elif num[i] == 'b':\n            sum += 2\n        elif num[i] == 'c':\n            sum += 3\n        elif num[i] == 'd':\n            sum += 4\n        elif num[i] == 'e':\n            sum += 5\n        elif num[i] == 'f':\n            sum += 6\n    return sum\n\ndef count_prime_hexadecimal_digits(num):\n    sum = hex_key(num)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for i in range(len(primes)):\n        if sum % primes[i] == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary_rep = \"\"\n    while decimal > 0:\n        binary_rep = str(decimal % 2) + binary_rep\n        decimal = decimal // 2\n    return \"db\" + binary_rep + \"db\""}
{"task_id": "HumanEval/80", "completion": "    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        if s[i] == s[i + 1] and s[i] == s[i + 2]:\n            return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade >= 3.7:\n            letter_grades.append(\"A\")\n        elif grade >= 3.3:\n            letter_grades.append(\"A-\")\n        elif grade >= 3.0:\n            letter_grades.append(\"B+\")\n        elif grade >= 2.7:\n            letter_grades.append(\"B\")\n        elif grade >= 2.3:\n            letter_grades.append(\"B-\")\n        elif grade >= 2.0:\n            letter_grades.append(\"C+\")\n        elif grade >= 1.7:\n            letter_grades.append(\"C\")\n        elif grade >= 1.3:\n            letter_grades.append(\"C-\")\n        elif grade >= 1.0:\n            letter_grades.append(\"D+\")\n        elif grade >= 0.7:\n            letter_grades.append(\"D\")\n        elif grade >= 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(pow(10, n-1), pow(10, n)):\n        if str(i).startswith(\"1\") or str(i).endswith(\"1\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "    binary_sum = 0\n    while N:\n        binary_sum += N % 2\n        N //= 2\n    return bin(binary_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    coordinates = []\n    rows = len(lst)\n    cols = len(lst[0])\n    for i in range(rows):\n        for j in range(cols):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates.sort()\n    return coordinates"}
{"task_id": "HumanEval/88", "completion": "    if len(array) <= 1:\n        return array\n\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += rotated_alphabet[(ord(char) - ord('a') + 2) % 26]\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    \n    first_smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in lst:\n        if num < first_smallest:\n            second_smallest = first_smallest\n            first_smallest = num\n        elif num < second_smallest and num != first_smallest:\n            second_smallest = num\n            \n    return second_smallest if second_smallest != float('inf') else None"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for word in words:\n        if word.startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char in vowels:\n            result += chr((ord(char) + 2 - 97) % 26 + 97)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(n: int) -> int:\n        return sum(int(digit) for digit in str(n))\n\n    max_prime = -1\n    for num in lst:\n        if isPrime(num) and num > max_prime:\n            max_prime = num\n    if max_prime == -1:\n        return -1\n    return sumOfDigits(max_prime)"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n    key_case = dict.get(dict.keys()[0]).lower() if len(dict.keys())>0 else \"\"\n    for key in dict:\n        if key_case != key.lower():\n            return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "    if n <= 0:\n        return []\n    \n    primes = [True for _ in range(n+1)]\n    p = 2\n    while p*p <= n:\n        if primes[p]:\n            for i in range(p*p, n+1, p):\n                primes[i] = False\n        p += 1\n    \n    result = []\n    for i in range(2, n):\n        if primes[i]:\n            result.append(i)\n    \n    return result"}
{"task_id": "HumanEval/97", "completion": "    return (a * b) % 10"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num.is_integer():\n        return int(num)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return int(num + 0.5)"}
{"task_id": "HumanEval/100", "completion": "    if n % 2 == 0:\n        return [n] * (n + 1)\n    else:\n        return [n] * (n + 2)"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0 and i % 4 != 0:\n            max_even = max(max_even, i)\n    return max_even"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    return bin(total // (m - n + 1))[2:]"}
{"task_id": "HumanEval/104", "completion": "    res = []\n    for num in x:\n        if all(int(i) % 2 != 0 for i in str(num)):\n            res.append(num)\n    return sorted(res)"}
{"task_id": "HumanEval/105", "completion": "    n = len(arr)\n    arr.sort(key=lambda x: len(str(x)))\n    return arr\n\ndef by_number(arr):\n    n = len(arr)\n    arr.sort(key=lambda x: x%10)\n    return arr\n\ndef replace_by_name(arr):\n    result = []\n    for i in range(len(arr)):\n        if 1 <= arr[i] <= 9:\n            result.append(str(arr[i]).replace(str(arr[i]),\n                                   [\"One\", \"Two\", \"Three\", \"Four\",\n                                    \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][arr[i]-1]))\n        else:\n            result.append(str(arr[i]))\n    return result"}
{"task_id": "HumanEval/106", "completion": "    res = []\n    for i in range(1, n+1):\n        if i%2==0:\n            res.append(1)\n            for j in range(2, i+1):\n                res[i-1] *= j\n        else:\n            res.append(sum(range(1, i+1)))\n    return res"}
{"task_id": "HumanEval/107", "completion": "    count_even = n // 2\n    count_odd = n - count_even\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    def is_positive(n):\n        return n > 0\n\n    count = 0\n    for num in arr:\n        if is_positive(sum_of_digits(num)):\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if len(arr)==0:\n        return True\n    if len(arr)==1:\n        return True\n    flag = 1\n    for i in range(1,len(arr)):\n        if arr[i]<arr[i-1]:\n            flag = 0\n            break\n    if flag==1:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/110", "completion": "    if not lst1 or not lst2:\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            return \"NO\"\n    for i in range(len(lst2)):\n        if lst2[i] % 2 != 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/111", "completion": "    test = test.split()\n    histogram = {}\n    for char in test:\n        if char in histogram:\n            histogram[char] += 1\n        else:\n            histogram[char] = 1\n    max_occurrence = max(histogram.values())\n    result = {key: value for key, value in histogram.items() if value == max_occurrence}\n    return result"}
{"task_id": "HumanEval/112", "completion": "    result = \"\".join([i for i in s if i not in c])\n    return result, result == result[::-1]"}
{"task_id": "HumanEval/113", "completion": "    def count_odds(s):\n        count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                count += 1\n        return count\n\n    result = []\n    for s in lst:\n        result.append(\"the number of odd elements in the string {} of the input.\".format(count_odds(s)))\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    m, n = len(grid), len(grid[0])\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                count += 1\n    return int(math.ceil(count / capacity))"}
{"task_id": "HumanEval/116", "completion": "    arr = sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n\n    words = s.split()\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    selected_words = []\n    for word in words:\n        if sum(1 for c in word if c in consonants) == n:\n            selected_words.append(word)\n    return selected_words"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"AEIOUaeiou\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        else:\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return \"No\"\n    return \"Yes\" if not stack else \"No\""}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/121", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            total += arr[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    collatz = [n]\n    while collatz[-1] != 1:\n        if collatz[-1] % 2 == 0:\n            collatz.append(collatz[-1] // 2)\n        else:\n            collatz.append(collatz[-1] * 3 + 1)\n    \n    return sorted([x for x in collatz if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "    month, day, year = map(int, date.split('-'))\n    days_in_month = [0, 31, 28, 31, 31, 31, 30, 31, 31, 31, 30, 31]\n\n    if month < 1 or month > 12:\n        return False\n    if year % 4 != 0 and (month == 2 and day > 29):\n        return False\n    if year % 100 != 0 and (month == 2 and day > 28):\n        return False\n    if year % 400 != 0 and (month == 2 and day > 29):\n        return False\n\n    if day < 1 or day > days_in_month[month]:\n        return False\n\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for i in range(26):\n            if chr(i+97) in txt:\n                count += 1\n        return count"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n        elif lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if length < 2:\n        return \"NO\"\n    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    if isPrime(length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num == 0:\n            sign_product = 0\n            break\n        elif num > 0:\n            sign_product *= 1\n            magnitude_sum += num\n        else:\n            sign_product *= -1\n            magnitude_sum += -num\n    return magnitude_sum * sign_product"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for p in range(1, k + 1):\n                if i - 1 >= 0 and j - 1 >= 0:\n                    dp[i][p] = min(dp[i][p], dp[i - 1][p - 1] + abs(grid[i - 1][j - 1] - grid[i - 1][j]))\n                if i - 1 >= 0:\n                    dp[i][p] = min(dp[i][p], dp[i - 1][p] + abs(grid[i - 1][j] - grid[i - 1][j - 1]))\n                if j - 1 >= 0:\n                    dp[i][p] = min(dp[i][p], dp[i][p - 1] + abs(grid[i][j - 1] - grid[i - 1][j - 1]))\n    ans = []\n    for p in range(k, 0, -1):\n        ans.append(grid[dp[n][p] - 1])\n    return ans[::-1]"}
{"task_id": "HumanEval/130", "completion": "    a, b = 0, 1\n    res = [0, 1]\n    for i in range(2, n + 1):\n        c = a + b\n        a, b = b, c\n        res.append(c)\n    return res"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n = n // 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return True\n    return False"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        num = int(num + 0.5)\n        result += num * num\n    return result"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        return not any(word.isalpha() for word in txt.split())\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1,0,1):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    min_positive = float('inf')\n    max_negative = float('-inf')\n    for num in lst:\n        if num < 0:\n            max_negative = max(max_negative, num)\n        if num > 0:\n            min_positive = min(min_positive, num)\n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    even_numbers = [i for i in range(2, n, 2)]\n    if len(even_numbers) != 4:\n        return False\n    return sum(even_numbers) == n"}
{"task_id": "HumanEval/139", "completion": "    if n < 0:\n        return -1\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(2, n+1):\n            result *= i\n        return result"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"-  \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 12: \n        return \"No\"\n    if file_name.count(\".\") != 1: \n        return \"No\"\n    if not file_name.startswith(('.', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9')): \n        return \"No\"\n    if not file_name[file_name.find(\".\") + 1:] in ['txt', 'exe', 'dll']: \n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n    return total"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/144", "completion": "    x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n    result = x_numerator * n_denominator / x_denominator * n_numerator\n    return result.is_integer()"}
{"task_id": "HumanEval/145", "completion": "    def get_digit_sum(num):\n        sum = 0\n        while num:\n            sum += num % 10\n            num //= 10\n        return sum\n\n    nums.sort(key=lambda x: (get_digit_sum(x), nums.index(x)))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 2 != 0 or num % 10 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    dp = [0] * n\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            k = j + 1\n            while k < n:\n                total = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n                if total % 3 == 0:\n                    dp[k] = max(dp[k], dp[j] + dp[i] + 1)\n                k += 1\n    return max(dp)"}
{"task_id": "HumanEval/148", "completion": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    planet1_idx = planets.index(planet1)\n    planet2_idx = planets.index(planet2)\n    if planet1_idx > planet2_idx:\n        planet1_idx, planet2_idx = planet2_idx, planet1_idx\n    return tuple(sorted(planets[planet1_idx+1:planet2_idx]))"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst)\n\n# Test the function\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return y\n    else:\n        return x\n    return y"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if num > 0 and int(num) % 2 != 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap_count = extension.count(extension.upper())\n        sm_count = extension.count(extension.lower())\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "    b = b + b\n    n = len(a)\n    m = len(b)\n    for i in range(n):\n        if a[i:] + a[:i] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    count = [0, 0]  # 0 for even and 1 for odd\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            count[0] += 1\n        else:\n            count[1] += 1\n        num //= 10\n    return tuple(count)"}
{"task_id": "HumanEval/156", "completion": "    val = [1000, 900, 800, 700, 600, 500,\n          400, 300, 200, 100, 90, 80,\n          70, 60, 50, 40, 30, 20,\n          10, 9, 8, 7, 6, 5,\n          4, 3, 2, 1]\n\n    syms = [\"m\", \"cm\", \"d\", \"cd\", \"xc\",\n            \"x\", \"xx\", \"xl\", \"xd\", \"ix\",\n            \"i\", \"ii\", \"iv\", \"ix\", \"x\", \"ix\",\n            \"v\", \"vi\", \"ix\", \"x\"]\n\n    roman_number = ''\n    i = 0\n\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_number += syms[i]\n            number -= val[i]\n\n        i += 1\n\n    return roman_number.lower()"}
{"task_id": "HumanEval/157", "completion": "    if a == 0 or b == 0 or c == 0:\n        return False\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_chars or (len(set(word)) == max_chars and word < max_word):\n            max_chars = len(set(word))\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    if number < need:\n        return [number, need - number]\n    else:\n        if remaining >= need:\n            return [number + need, 0]\n        else:\n            return [number, remaining]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operand)-1):\n        num = operand[i]\n        op = operator[i]\n        if op == '+':\n            num = num + stack.pop() if stack else num\n        elif op == '-':\n            num = stack.pop() - num if stack else num\n        elif op == '*':\n            stack.append(num * stack.pop())\n        elif op == '/':\n            stack.append(stack.pop() // num)\n        elif op == '**':\n            stack.append(stack.pop() ** num)\n        stack.append(num)\n    return stack.pop()"}
{"task_id": "HumanEval/161", "completion": "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].swapcase()\n    return ''.join(s)"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    \n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return sorted(result)"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            if not stack:\n                result.append('(')\n        else:\n            result.append(char)\n    return ''.join(result) + ')' * len(stack)"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    return number - integer_part"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        if op < 0:\n            balance -= op\n        else:\n            balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(num - mean) for num in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    result = []\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        else:\n            if stack:\n                stack.pop()\n                max_depth = max(max_depth, len(stack))\n    result = [max_depth] * len(paren_string)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    return (sum(numbers), 1) if numbers else (0, 1)"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_val = float('-inf')\n    for i in range(len(numbers)):\n        max_val = max(max_val, numbers[i])\n        result.append(max_val)\n    return result"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Make a palindrome by adding characters from the beginning of the string \"\"\"\n    i = len(string) - 1\n    while not is_palindrome(string):\n        if i == 0:\n            string += string[::-1]\n            break\n        if is_palindrome(string[:i+1]):\n            string += string[i::-1]\n            break\n        i -= 1\n    return string"}
{"task_id": "HumanEval/11", "completion": "    res = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            res += str(int(a[i]) ^ int(b[i]))\n        else:\n            res += b[i]\n    return res"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    \n    max_len = 0\n    result = None\n    \n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n        elif len(s) == max_len:\n            result = result if result is not None else s\n    \n    return result"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefix = string[:i]\n        prefixes.append(prefix)\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/17", "completion": "    beats = 0\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats += 4\n        elif note == 'o|':\n            beats += 2\n        elif note == '.|':\n            beats += 1\n    return [beats] * len(notes)"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    while substring in string:\n        string = string.replace(substring, '', 1)\n        count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    nums = [int(num) for num in numbers.split()]\n    return ' '.join(str(num) for num in sorted(nums))"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = (numbers[0], numbers[0])\n    \n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i-1], numbers[i])\n    \n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    else:\n        return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n\tfor char in string:\n\t\tif char.islower():\n\t\t\tresult += char.upper()\n\t\telse:\n\t\t\tresult += char.lower()\n\treturn result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n\t\treturn False\n\tif n <= 3:\n\t\treturn True\n\tif n % 2 == 0 or n % 3 == 0:\n\t\treturn False\n\ti = 5\n\twhile i * i <= n:\n\t\tif n % i == 0 or n % (i + 2) == 0:\n\t\t\treturn False\n\t\ti = i + 6\n\treturn True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    finds zero point of a polynomial\n    polynomial must have even number of coefficients\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Exactly two roots\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    if max_coeff == 0:\n        raise ValueError(\"Coefficient of x^0 is 0\")\n    root = 0\n    while True:\n        if abs(poly(xs, root)) <= abs(max_coeff):\n            break\n        root += abs(max_coeff) / math.gcd(max_coeff, root)\n    return root"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    result = [0] * n\n    for i in range(n):\n        if i % 3 != 0:\n            result[i] = l[i]\n        else:\n            result[i] = l[i] - i\n    result.sort()\n    for i in range(n):\n        if i % 3 != 0:\n            result[i] = l[i]\n    return result"}
{"task_id": "HumanEval/34", "completion": "    n = len(l)\n    un = []\n    for i in range(n):\n        if l[i] not in un:\n            un.append(l[i])\n    un.sort()\n    return un"}
{"task_id": "HumanEval/35", "completion": "    return max(l)"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    l[::2] = sorted(l[::2])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    Returns decoded string from given encoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode each group. Unless group has fewer elements than 3.\n    groups = [encode_cyclic(group) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    a, b = 0, 1\n    if n == 0:\n        return a\n    if n == 1:\n        return b\n    while True:\n        c = a + b\n        if c > n:\n            return c\n        a, b = b, c"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        if l[i] == 0:\n            continue\n        j = i + 1\n        k = len(l) - 1\n        while j < k:\n            if l[i] + l[j] + l[k] == 0:\n                return True\n            if l[i] + l[j] + l[k] < 0:\n                j += 1\n            else:\n                k -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return (n*(n-1))//2"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    res = ''\n    while x:\n        res = str(x % base) + res\n        x //= base\n    return res"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        a, b, c = 0, 2, 0\n        for _ in range(3, n+1):\n            c = a + b\n            a, b = b, c\n        return c"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    while (n > 0):\n        if (n % 2 == 1):\n            result = (result * 2) % p\n        n = n // 2\n        result = (result * 2) % p\n    return result"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string from encoded with encode_shift function.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiouAEIOU'\n    return ''.join([c for c in text if c not in vowels])"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return len(s0) == len(s1) and all(c0 == c1 for c0, c1 in zip(s0, s1))"}
{"task_id": "HumanEval/55", "completion": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(3, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    l.sort()\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))"}
{"task_id": "HumanEval/58", "completion": "    s = set(l1)\n    return sorted(set(l2) & s)"}
{"task_id": "HumanEval/59", "completion": "    max_prime = -1\n    for i in range(2, n):\n        if n % i == 0:\n            max_prime = max(max_prime, i)\n    return max_prime"}
{"task_id": "HumanEval/60", "completion": "    return (n*(n+1))//2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    ans = []\n    for i in range(n):\n        ans.append(xs[i] * (i+1))\n    return ans"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = 0, 1, 1\n    for _ in range(3, n + 1):\n        a, b = b, a + b\n        c = c + b\n    return c"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    vowels = set(\"aeiou\")\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    str_x = str(x)\n    if shift >= len(str_x):\n        return str_x[::-1]\n    return str_x[-shift:] + str_x[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "    count =0\n    apples = 0\n    oranges = 0\n    mango = 0\n    for char in s:\n        if char == 'a':\n            apples+=1\n        elif char == 'o':\n            oranges+=1\n    for i in range(apples+oranges):\n        if i>=apples:\n            count+=1\n    return n-count"}
{"task_id": "HumanEval/68", "completion": "    if len(arr) == 0:\n        return []\n    \n    min_even = float('inf')\n    min_index = -1\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < min_even:\n            min_even = node\n            min_index = i\n            \n    if min_index != -1:\n        return [min_even, min_index]\n    else:\n        return []"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n            \n    result = -1\n    for num, count in freq.items():\n        if num > 0 and count >= num:\n            result = max(result, num)\n            \n    return result"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    \n    result = []\n    lst.sort()\n    \n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n        if lst:\n            result.append(lst.pop(0))\n    \n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and len(set(q))==len(q) and sorted(q)==q[::-1]:\n        return True\n    return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/74", "completion": "    if len(lst1) == len(lst2):\n        return lst1\n    return [s for s in lst1 if s.count('') < sum(len(s) for s in lst2)]"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            for j in range(2, int(i**0.5) + 1):\n                if i % j == 0:\n                    for k in range(2, int(j**0.5) + 1):\n                        if j % k == 0:\n                            return a == i * j * k\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x < 0:\n\t\treturn False\n\tfor i in range(2, int(x**0.5) + 1):\n\t\tif n**i == x:\n\t\t\treturn True\n\treturn False"}
{"task_id": "HumanEval/77", "completion": "    return round(a ** (1/3)) ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "    hex_dict = {'A': '1', 'B': '2', 'C': '3', 'D': '4', 'E': '5', 'F': '6'}\n    decimal_num = int(num.replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('A', hex_dict['A']).replace('B', hex_dict['B']).replace('C', hex_dict['C']).replace('D', hex_dict['D']).replace('E', hex_dict['E']).replace('F', hex_dict['F']))\n    count = 0\n    if decimal_num % 2 == 1:\n        count += 1\n    if decimal_num % 3 == 1:\n        count += 1\n    if decimal_num % 5 == 1:\n        count += 1\n    if decimal_num % 7 == 1:\n        count += 1\n    if decimal_num % 11 == 1:\n        count += 1\n    if decimal_num % 13 == 1:\n        count += 1\n    return count\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef countPrimeHexDigits(num: str) -> int:\n    count = 0\n    for i in range(len(num)):\n        if num[i] in ['A', 'B', 'C', 'D', 'E', 'F']:\n            count += hex_key(num[:i+1])\n        if i < len(num)-1 and num[i+1] in ['A', 'B', 'C', 'D', 'E', 'F']:\n            count += hex_key(num[i+1:])\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary_str = \"\"\n    while decimal > 0:\n        binary_str = str(decimal % 2) + binary_str\n        decimal = decimal // 2\n    binary_str = '0' * (32 - len(binary_str)) + binary_str\n    return \"db\" + binary_str + \"db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i:i+3] == s[i+1:i+3]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    def grade_to_letter(g):\n        if g >= 4.0:\n            return 'A+'\n        elif g >= 3.7:\n            return 'A'\n        elif g >= 3.3:\n            return 'A-'\n        elif g >= 3.0:\n            return 'B+'\n        elif g >= 2.7:\n            return 'B'\n        elif g >= 2.3:\n            return 'B-'\n        elif g >= 2.0:\n            return 'C+'\n        elif g >= 1.7:\n            return 'C'\n        elif g >= 1.3:\n            return 'C-'\n        elif g >= 1.0:\n            return 'D+'\n        elif g >= 0.7:\n            return 'D'\n        else:\n            return 'E'\n\n    return [grade_to_letter(g) for g in grades]"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(length)"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 5\n    else:\n        return (2*n) + 1"}
{"task_id": "HumanEval/84", "completion": "    ans = 0\n    while (N > 0):\n        ans += (N % 2)\n        N //= 2\n    return bin(ans)[2:]"}
{"task_id": "HumanEval/85", "completion": "    res = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 != 0:\n            res += lst[i]\n    return res"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for row in lst:\n        for i in range(len(row)):\n            if row[i] == x:\n                result.append((lst.index(row), i))\n    result.sort(key=lambda t: (t[0], -t[1]))\n    return result"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    s = s.lower()\n    encrypted_str = ''\n    for char in s:\n        if char.isalpha():\n            new_char = chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n            encrypted_str += new_char\n        else:\n            encrypted_str += char\n    return encrypted_str"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    count = 0\n    for word in words:\n        if word.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if x == 0 and y == 0 and z == 0:\n        return True\n    if x == 0 or y == 0 or z == 0:\n        return False\n    return True if (x+y == z) or (x+z == y) or (y+z == x) else False"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char in vowels:\n            result += chr(ord(char) + 2)\n        elif char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    def sumOfDigits(n):\n        return sum([int(x) for x in str(n)])\n    \n    max_prime = -1\n    max_digit_sum = -1\n    for num in lst:\n        if isPrime(num) and num > max_prime:\n            max_prime = num\n            max_digit_sum = sumOfDigits(num)\n    \n    return max_digit_sum"}
{"task_id": "HumanEval/95", "completion": "    if len(dict)==0:\n        return False\n    \n    key_case = all(isinstance(key, str) and key.islower() for key in dict.keys()) or all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    value_case = all(isinstance(value, str) and value.islower() for value in dict.values()) or all(isinstance(value, str) and value.isupper() for value in dict.values())\n    \n    return key_case and value_case"}
{"task_id": "HumanEval/96", "completion": "    result = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num % 1 == 0:  # If num is already an integer\n        return int(num)\n    else:  # If num is not an integer\n        return int(num + (1 if num > 0 else -1))"}
{"task_id": "HumanEval/100", "completion": "    pile = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n -= 1\n        else:\n            n += 1\n        pile.append(n)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 != 0:\n        x += 1\n    if x > y:\n        return -1\n    for i in range(x, y + 1, 2):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total_sum = (m - n + 1) * (n + m) // 2\n    total_div = (m - n + 1)\n    return bin(total_sum // total_div)[2:]"}
{"task_id": "HumanEval/104", "completion": "    digits = [d for num in x for d in str(num) if int(d) % 2 != 0]\n    return sorted(list(set(digits)))"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: len(str(x)))\n\ndef replaceWithNames(arr):\n    names = \"One Two Three Four Five Six Seven Eight Nine\".split()\n    return [names[int(x) - 1] for x in arr]\n\ndef sortAndReplace(arr):\n    if not arr:\n        return []\n\n    res = by_length(arr)\n    res.sort(reverse=True)\n    return replaceWithNames(res)"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(1)\n            for j in range(2, i+1):\n                result[-1] *= j\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = n // 2\n    count_odd = n - n // 2\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(n):\n        s = 0\n        while n:\n            s += n % 10\n            n //= 10\n        return s\n\n    def first_signed_digit(n):\n        return 0 if n >= 0 else -n // 10\n\n    def has_positive_sum(n):\n        sd = first_signed_digit(n)\n        return sum_of_digits(abs(sd)) > 0\n\n    count = 0\n    for num in arr:\n        if has_positive_sum(num):\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            if i == 0:\n                arr.insert(0, arr.pop())\n                continue\n            elif arr[i] < arr[i-1]:\n                arr.insert(0, arr.pop())\n                continue\n            else:\n                return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            if lst1[i] % 2 != 0 and lst2[j] % 2 != 0:\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    test = test.split()\n    result = {}\n    max_repetition = 0\n    for letter in test:\n        if letter in result:\n            result[letter] += 1\n        else:\n            result[letter] = 1\n        if result[letter] > max_repetition:\n            max_repetition = result[letter]\n    for key, value in result.items():\n        if value == max_repetition:\n            return {key: value}\n    return result"}
{"task_id": "HumanEval/112", "completion": "    res = s\n    for char in c:\n        res = res.replace(char,'')\n    return res, res == res[::-1]"}
{"task_id": "HumanEval/113", "completion": "    def count_odd_digits(s):\n        return sum(int(d) % 2 != 0 for d in s)\n    \n    result = []\n    for s in lst:\n        odd_count = count_odd_digits(s)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    row = [0]*n\n    col = [0]*m\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]==1:\n                row[i]+=1\n                col[j]+=1\n    answer = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]==1:\n                answer += min(math.ceil(max(row[i], col[j])/grid[i][j]), capacity)\n    return answer"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    consonant_words = []\n    for word in words:\n        consonants = sum(1 for char in word if char.isalpha() and char.lower() not in ['a', 'e', 'i', 'o', 'u'])\n        if consonants == n:\n            consonant_words.append(word)\n    return consonant_words"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    n = len(word)\n    for i in range(n-2, -1, -1):\n        if word[i] not in vowels:\n            if word[i+1] in vowels:\n                return word[i+1]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for p in lst:\n        if p == '(':\n            stack.append(p)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "    odd_elements = [lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0]\n    return sum(odd_elements)"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for num in arr[:k]:\n        digits = len(str(num))\n        if digits <= 2:\n            total += num\n    return total"}
{"task_id": "HumanEval/123", "completion": "    if n == 1:\n        return [1]\n    else:\n        result = []\n        while n > 1:\n            if n % 2 == 0:\n                n //= 2\n            else:\n                n = 3 * n + 1\n            result.append(n)\n        return [x for x in result if x % 2 != 0]"}
{"task_id": "HumanEval/124", "completion": "    months = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 31, 12: 31}\n    date_list = date.split('-')\n    if len(date_list) != 3:\n        return False\n    month, day, year = int(date_list[0]), int(date_list[1]), int(date_list[2])\n    if month < 1 or month > 12:\n        return False\n    if year < 1000:\n        year += 2000\n    if year < 1900 or year > 2100:\n        return False\n    if month == 2 and year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        days = 29\n    elif year % 4 != 0:\n        days = 30\n    else:\n        days = 28\n        if year % 100 != 0 or year % 400 == 0:\n            days = 29\n    if day < 1 or day > days:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    signs = [1 if num != 0 else 0 for num in arr]\n    signs_prod = 1\n    for sign in signs:\n        signs_prod *= sign\n    magnitudes_sum = sum([abs(num) for num in arr])\n    return magnitudes_sum * signs_prod"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = grid[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + grid[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + grid[i][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    result = []\n    for _ in range(k):\n        i, j = divmod(dp.index(min(dp)), n)\n        result.append(grid[i][j])\n        dp[i][j] = float('inf')\n    return result[::-1]"}
{"task_id": "HumanEval/130", "completion": "    if n == 1:\n        return [1]\n    res = [1, 3]\n    for i in range(2, n + 1):\n        res.append(res[i - 1] + res[i - 2] + (n - i + 1))\n    return res"}
{"task_id": "HumanEval/131", "completion": "    result = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            result *= digit\n        n = n // 10\n    return result"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        num = int(num)\n        result += num * num\n    return result"}
{"task_id": "HumanEval/134", "completion": "    last_char = txt[-1]\n    if not last_char.isalpha() or last_char.isspace():\n        return False\n    return True"}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] <= arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n    if not negative_integers and not positive_integers:\n        return None, None\n    elif not negative_integers:\n        return None, min(positive_integers)\n    elif not positive_integers:\n        return max(negative_integers), None\n    else:\n        return max(negative_integers), min(positive_integers)"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif type(a) == type(b):\n        return max(a, b)\n    elif type(a) != type(b):\n        if a.isnumeric() and b.isnumeric():\n            a = float(a)\n            b = float(b)\n        elif a.isnumeric() and b.endswith(\",\"):\n            a = float(a)\n            b = float(b[:-1])\n        elif a.endswith(\",\") and b.isnumeric():\n            a = float(a[:-1])\n            b = float(b)\n        a = float(a) if a.isnumeric() else int(a)\n        b = float(b) if b.isnumeric() else int(b)\n        return max(a, b)"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    if n == 0:\n        return True\n    for i in range(2, n//2):\n        if (n - i) % 2 == 0 and (n - i) // 2 % 2 == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/139", "completion": "    if n < 0:\n        raise ValueError(\"Input should be a positive integer\")\n    if n == 0 or n == 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for char in text:\n        if char != \" \":\n            result += char\n        else:\n            result += \"_\"\n    return result"}
{"task_id": "HumanEval/141", "completion": "    conditions = {\n        'one_digit': lambda x: len(x) <= 3,\n        'dot_exactly_one': lambda x: x.count('.') == 1,\n        'starts_with_letter': lambda x: x[0].isalpha(),\n        'extension_valid': lambda x: x.split('.')[1] in ['txt', 'exe', 'dll']\n    }\n\n    if all(conditions[k](file_name) for k, v in conditions.items()):\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total\n\n\n# Example usage\nlst = [1,2,3]\nprint(sum_squares(lst))"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return ' '.join(prime_words)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/144", "completion": "    num_x, den_x = map(int, x.split(\"/\"))\n    num_n, den_n = map(int, n.split(\"/\"))\n    return (num_x*num_n) % den_n == 0 or (den_x*den_n) % num_n == 0"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 2 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    if planet1 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"] or planet2 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return ()\n    planets_between = []\n    max_distance = 0\n    min_distance = float('inf')\n    for i in range(8):\n        distance = abs(ord(planets_list[i]) - ord(planet2))\n        if distance < min_distance:\n            min_distance = distance\n        elif distance > max_distance:\n            max_distance = distance\n    for i in range(min_distance, max_distance+1):\n        if ord(planets_list[i]) > ord(planet2):\n            planets_between.append(planets_list[i])\n    return tuple(planets_between)\n\nplanets_list = \"Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune\".split()"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst)"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n    else:\n        return x\n    return y"}
{"task_id": "HumanEval/151", "completion": "    result = 0\n    for num in lst:\n        if num > 0 and int(num) % 2 != 0:\n            result += num ** 2\n    return result"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    chosen_extension = ''\n    for extension in extensions:\n        cap = extension.count(uppercase)\n        sm = extension.count(lowercase)\n        strength = (cap - sm)\n        if strength > max_strength:\n            max_strength = strength\n            chosen_extension = extension\n    return f\"{class_name}.{chosen_extension}\""}
{"task_id": "HumanEval/154", "completion": "    b = b.lower()\n    a = a.lower()\n    n = len(a)\n    m = len(b)\n    if n > m:\n        return False\n    for i in range(m - n + 1):\n        if a[0:n] == a[i:i+n]:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    num_str = str(num)\n    even_count = sum(1 for char in num_str if int(char) % 2 == 0)\n    odd_count = len(num_str) - even_count\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    roman_map = {1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v', 6: 'vi', 7: 'vii', 8: 'viii', 9: 'ix', 10: 'x', 11: 'xi', 12: 'xii', 13: 'xiii', 14: 'xiv', 15: 'xv', 16: 'xvi', 17: 'xvii', 18: 'xviii', 19: 'xix', 20: 'xx', 30: 'xx', 40: 'xx', 50: 'xx', 60: 'xx', 70: 'xx', 80: 'xx', 90: 'xx', 100: 'xc', 200: 'xc', 300: 'xc'}\n    roman_num = ''\n    for key in sorted(roman_map, reverse=True):\n        if number >= key:\n            roman_num += roman_map[key]\n            number -= key\n    return roman_num"}
{"task_id": "HumanEval/157", "completion": "    if a**2 + b**2 == c**2:\n\t\treturn True\n\telse:\n\t\treturn False"}
{"task_id": "HumanEval/158", "completion": "    max_chars = 0\n    max_word = ''\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_word = word\n        elif len(set(word)) == max_chars and word < max_word:\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    total = number + need\n    if total > remaining:\n        return [total, 0]\n    else:\n        remaining -= need\n        return [total, remaining]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(1, len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    \n    hash_obj = hashlib.md5(text.encode())\n    return hash_obj.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    a_even = [int(x) for x in str(a) if int(x) % 2 == 0]\n    b_even = [int(x) for x in str(b) if int(x) % 2 == 0]\n    even_digits = []\n    for num in a_even:\n        if num in b_even and num not in even_digits:\n            even_digits.append(num)\n    even_digits.sort()\n    return even_digits"}
{"task_id": "HumanEval/0", "completion": "    min_diff = float('inf')\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff <= threshold"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            if stack:\n                groups.append(''.join(stack))\n                stack = []\n            stack.append(char)\n        else:\n            stack.append(char)\n    if stack:\n        groups.append(''.join(stack))\n    return groups"}
{"task_id": "HumanEval/2", "completion": "    number_str = str(number)\n    integer_part = int(number_str.split('.')[0])\n    return float(number_str[integer_part+1:])"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        if op > 0:\n            balance += op\n        else:\n            if balance - op < 0:\n                return True\n            balance += op\n    return False"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.extend([delimeter, numbers[i]])\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    level = 0\n    max_level = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                level += 1\n                max_level = max(max_level, level)\n            else:\n                level = 0\n    return [max_level] * len(paren_string)"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    return (sum(numbers), 1) if numbers[0] == 0 else (sum(numbers), 0) if numbers[0] == 1 else (sum(numbers), numbers[0])"}
{"task_id": "HumanEval/9", "completion": "    rolling_maxes = []\n    max_so_far = max_ending_here = numbers[0]\n    for i in range(1, len(numbers)):\n        max_ending_here = max(numbers[i], max_ending_here + numbers[i])\n        rolling_maxes.append(max_so_far)\n        max_so_far = max(max_so_far, max_ending_here)\n    rolling_maxes.append(max_so_far)\n    return rolling_maxes"}
{"task_id": "HumanEval/10", "completion": "    if is_palindrome(string):\n        return string\n    i = 0\n    while not is_palindrome(string[:len(string)-i]):\n        i += 1\n    return string + string[-i:][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            result += str(int(a[i]) ^ int(b[i]))\n        else:\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_length = 0\n    max_string = None\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            max_string = s\n    return max_string"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return \" \".join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    beats = 0\n    beats_list = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            beats += 1\n            beats_list.append(4)\n            i += 2\n        elif music_string[i] == 'o|':\n            beats += 1\n            beats_list.append(2)\n            i += 3\n        elif music_string[i] == '.|':\n            beats += 1\n            beats_list.append(1)\n            i += 3\n        else:\n            i += 1\n    return beats_list"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    len_substring = len(substring)\n    len_string = len(string)\n    for i in range(len_string - len_substring + 1):\n        if string[i:i+len_substring] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    nums = numbers.split()\n    return ' '.join(sorted(nums))"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    unit_range = (max_num - min_num) / (2**31 - 1)\n    result = [(num - min_num) / unit_range for num in numbers]\n    return result"}
{"task_id": "HumanEval/22", "completion": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    for i in range(2, int(n**0.5)+1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Returns x such that poly(x) = 0\n    xs is list of polynomial coefficients\n    \"\"\"\n    low, high = -10, 10\n    while abs(high - low) >= 0.001:\n        mid = (low + high) / 2\n        if poly(xs, mid) < 0:\n            high = mid\n        else:\n            low = mid\n    return low"}
{"task_id": "HumanEval/33", "completion": "    l.sort(key=lambda x: (x % 3, x))\n    return l"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    if not l:\n        return None\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).find('7') != -1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    for i in range(len(l)):\n        if i % 2 != 0:\n            l[i] = sorted(l[i])\n    return l"}
{"task_id": "HumanEval/38", "completion": "    # groups of 3\n    groups = [s[i:(i + 3)] for i in range(0, len(s), 3)]\n    # decode each group\n    decoded_groups = [encode_cyclic(group) for group in groups]\n    # join decoded groups\n    return \"\".join(decoded_groups)"}
{"task_id": "HumanEval/39", "completion": "    if n == 1:\n        return 2\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/40", "completion": "    s = set()\n    for x in l:\n        s.add(-x)\n\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if -l[i] - l[j] in s:\n                return True\n\n    return False"}
{"task_id": "HumanEval/41", "completion": "    return (n*(n-1))//2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 1, 1\n    while n > 0:\n        a, b, c, d = b, c, d, a + b + c + d\n        n -= 1\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    if len(text) < 2:\n        return True\n    left, right = 0, len(text) - 1\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n    return True"}
{"task_id": "HumanEval/49", "completion": "    res = 0\n    for i in range(0, n):\n        res = (res * 2 + 1) % p\n    return res"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by performing 5-step shift on encoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))"}
{"task_id": "HumanEval/58", "completion": "    l1.sort()\n    l2.sort()\n    result = []\n    i, j = 0, 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            result.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return result"}
{"task_id": "HumanEval/59", "completion": "    # Handle even numbers\n    if n % 2 == 0:\n        return 2\n    # Handle odd numbers\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    # If n is a prime number greater than 2\n    return n"}
{"task_id": "HumanEval/60", "completion": "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = []\n    for i in range(n):\n        result.append(xs[i] * (i + 1))\n    return result"}
{"task_id": "HumanEval/63", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"AEIOUaeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    if shift == 0:\n        return str(x)\n    elif shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "    count = 0\n    for i in range(len(s)):\n        if i%2==0:\n            count+=int(s[i])\n        else:\n            count-=int(s[i])\n    return count+n"}
{"task_id": "HumanEval/68", "completion": "    even_nodes = [node for node in arr if node % 2 == 0]\n    if not even_nodes:\n        return []\n    min_even_value = min(even_nodes)\n    min_even_index = arr.index(min_even_value)\n    return [min_even_value, min_even_index]"}
{"task_id": "HumanEval/69", "completion": "    result = -1\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    for i in range(1, len(lst) + 1):\n        if i in freq and freq[i] >= i:\n            result = i\n            break\n    return result"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    result = []\n    while lst:\n        min_val = min(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            result.append(max_val)\n            lst.remove(max_val)\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and is_palindrome(q):\n        return True\n    else:\n        return False\n\ndef is_palindrome(q):\n    return str(q) == str(q)[::-1]"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/74", "completion": "    if len(lst1) == len(lst2):\n        return lst1\n    total_chars = sum(len(s) for s in lst1)\n    other_total = sum(len(s) for s in lst2)\n    if total_chars < other_total:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "    primes = []\n    for i in range(2, a):\n        if a % i == 0:\n            primes.append(i)\n    if len(primes) == 3:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if x < 1:\n        return False\n    p = 1\n    while p <= x:\n        p *= n\n        if p == x:\n            return True\n    return False"}
{"task_id": "HumanEval/77", "completion": "    root = int(a ** (1/3))\n    return (root ** 3) == a"}
{"task_id": "HumanEval/78", "completion": "    hex_list = {'A': '1', 'B': '2', 'C': '3', 'D': '4', 'E': '5', 'F': '6'}\n    hex_num = \"\"\n    for i in range(0, len(num), 2):\n        hex_num += hex_list[num[i]]\n    return int(hex_num, 16)\n\ndef count_prime_hex_digits(num):\n    prime_digits = set(['2', '3', '5', '7', 'B', 'D'])\n    hex_num = hex_key(num)\n    count = 0\n    while hex_num > 0:\n        if str(hex_num)[0] in prime_digits:\n            count += 1\n        hex_num //= 10\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    while len(binary) < 8:\n        binary = '0' + binary\n    return 'db' + binary + 'db'"}
{"task_id": "HumanEval/80", "completion": "    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n-2):\n        if s[i:i+3] == s[i+1:i+3]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A')\n        elif grade >= 3.7:\n            letter_grades.append('A-')\n        elif grade >= 3.3:\n            letter_grades.append('B')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('C')\n        elif grade >= 2.3:\n            letter_grades.append('C-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('D')\n        elif grade >= 1.3:\n            letter_grades.append('D-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n\ndef grade_equation(gpas):\n    return numerical_letter_grade(gpas)\n\n# Example usage\ngpas = [3.5, 2.5, 3.8, 3.2, 3.9]\nprint(grade_equation(gpas))  # Output: ['A', 'A', 'A+', 'B+', 'A-']"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "completion": "    start = int(\"1\" * n)\n    end = int(\"1\" + \"0\" * (n-1))\n    count = (end - start) // 10 + 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "    sum_of_digits = 0\n\twhile (N > 0):\n\t\tsum_of_digits += N % 10\n\t\tN = N // 10\n\treturn bin(sum_of_digits).replace(\"0b\", \"\")"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(0, len(lst), 2):\n        result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "    return ' '.join(sorted(word)) if word else word for word in s.split())"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, len(lst[0])-j-1))\n    return sorted(result, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/88", "completion": "    if len(array) < 2:\n        return array\n    \n    first_last_sum = array[0] + array[-1]\n    if first_last_sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "    s = s.lower()\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n            result += shifted_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    unique_elements = list(set(lst))\n    unique_elements.sort()\n    if len(unique_elements) < 2:\n        return None\n    return unique_elements[1]"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    for word in S.split():\n        if word.startswith(\"I\"):\n            count += 1\n    return count > 0"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'AEIOUaeiou'\n    result = ''\n    for char in message:\n        if char in vowels:\n            result += chr(ord(char) + 2)\n        else:\n            result += char.swapcase()\n    return result"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digitSum(n):\n        return sum(int(digit) for digit in str(n))\n\n    max_prime = 0\n    for num in lst:\n        if num > 1 and isPrime(num):\n            max_prime = max(max_prime, num)\n    return digitSum(max_prime)"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    if not dict.keys() or not dict.values():\n        return False\n    return all(isinstance(key, str) for key in dict.keys()) and all(isinstance(value, str) for value in dict.values())"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a*b)%10"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num == int(num):\n        return int(num)\n    elif abs(num) > abs(num + 1):\n        return int(num + 1)\n    else:\n        return int(num)"}
{"task_id": "HumanEval/100", "completion": "    pile = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            pile.append(i + 2)\n        else:\n            pile.append(i + 1)\n    return pile"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -2):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    sum = (m - n + 1) // 2 * (n + m)\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/104", "completion": "    return sorted([i for i in x if '2' not in str(i) and '4' not in str(i) and '6' not in str(i) and '8' not in str(i)])"}
{"task_id": "HumanEval/105", "completion": "    arr.sort(key=len)\n    return arr\n\ndef reverse_arr(arr):\n    return arr[::-1]\n\ndef replace_by_name(arr):\n    return [{\"One\":1, \"Two\":2, \"Three\":3, \"Four\":4, \"Five\":5, \"Six\":6, \"Seven\":7, \"Eight\":8, \"Nine\":9}[x] for x in arr]\n\ndef transform_array(arr):\n    if not arr:\n        return []\n    \n    arr.sort(key=len)\n    arr = reverse_arr(arr)\n    result = replace_by_name(arr)\n    return result\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = transform_array(arr)\nprint(result)"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count = [0, 0]  # [even_count, odd_count]\n    for i in range(1, n+1):\n        num_str = str(i)\n        if int(num_str) == int(num_str[::-1]):\n            count[(i % 2) - 1] += 1\n    return count"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(n):\n        if n == 0:\n            return 0\n        elif n > 0:\n            return n % 10 + sum_of_digits(n // 10)\n        else:\n            return -n % 10 + sum_of_digits(n // 10)\n    \n    def is_negative(n):\n        return n < 0\n    \n    count = 0\n    for num in arr:\n        if is_negative(num) or sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    if arr == sorted(arr):\n        return True\n    for i in range(len(arr)):\n        temp = arr[i]\n        j = i\n        while j < len(arr) - 1:\n            if arr[j + 1] < temp:\n                arr[j + 1] = temp\n                break\n            j += 1\n        if j == len(arr) - 1:\n            return True\n        arr[j] = temp\n        arr = arr[j:] + arr[:j]\n    return False"}
{"task_id": "HumanEval/110", "completion": "    for i in range(min(len(lst1), len(lst2))):\n        if lst1[i] % 2 != 0 and lst2[i] % 2 == 0:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\""}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    hist = {}\n    words = test.split()\n    max_len = len(max(words, key=len))\n    for word in words:\n        for char in word:\n            if char in hist:\n                hist[char] += 1\n            else:\n                hist[char] = 1\n    return hist"}
{"task_id": "HumanEval/112", "completion": "    res = \"\"\n    for i in s:\n        if i not in c:\n            res += i\n    return res, res == res[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(\"the number of odd elements {}n the str{} of the {}nput.\".format(count, len(s), len(lst)))\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    result = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                result += min(capacity, math.ceil(i/2))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    binary_ones = {num: bin(num).count('1') for num in arr}\n    arr.sort(key=lambda x: (binary_ones[x], x))\n    return arr"}
{"task_id": "HumanEval/117", "completion": "    if len(s) == 0:\n        return []\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou')\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    vowel_index = -1\n    for i in range(len(word)):\n        if word[i] in consonants and vowel_index != -1:\n            return word[vowel_index]\n        if word[i] in vowels:\n            vowel_index = i\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for p in lst:\n        if p == '(':\n            stack.append(p)\n        elif p == ')':\n            if not stack:\n                return \"No\"\n            stack.pop()\n    return \"Yes\" if not stack else \"No\""}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[0:k]"}
{"task_id": "HumanEval/121", "completion": "    total_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total_sum += lst[i]\n    return total_sum"}
{"task_id": "HumanEval/122", "completion": "    num_sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            num_sum += arr[i]\n    return num_sum"}
{"task_id": "HumanEval/123", "completion": "    def collatz(x):\n        if x == 1:\n            return [1]\n        else:\n            result = collatz(x // 2) if x % 2 == 0 else collatz(3 * x + 1)\n            return result\n\n    def filter_odd(nums):\n        return [x for x in nums if x % 2 != 0]\n\n    return filter_odd(collatz(n))"}
{"task_id": "HumanEval/124", "completion": "    months = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 31, 12: 31}\n    if len(date) != 8:\n        return False\n    month, day, year = date.split('-')\n    if int(month) not in range(1, 13) or int(day) not in range(1, months[int(month)] + 1) or int(year) not in range(2020, 2035):\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                count += 1\n            if count % 2 != 0:\n                return count\n# Example Usage\nprint(split_words(\"abcde\"))  # Output: 2"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 >= end1 or start2 >= end2:\n        return \"NO\"\n    if start1 <= start2 <= end1 <= end2:\n        return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    signs = [1] * len(arr)\n    for i, num in enumerate(arr):\n        if num < 0:\n            signs[i] = -signs[i]\n        elif num == 0:\n            signs[i] = 0\n    result = sum(abs(num) * signs[i] for i, num in enumerate(arr))\n    return result"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    m = len(grid[0])\n    if k <= 0 or k > n * m:\n        return []\n    path = []\n    x = 0\n    y = 0\n    for i in range(1, k+1):\n        if i <= m:\n            x += 1\n        else:\n            y += 1\n            x = 1\n        path.append(grid[x-1][y-1])\n    return path"}
{"task_id": "HumanEval/130", "completion": "    res = [0] * (n + 1)\n    res[1] = 1\n    res[2] = 1\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            res[i] = 1 + i / 2\n        else:\n            res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n    return res"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n = n // 10\n    return product"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in string:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num + 0.5) ** 2\n    return result"}
{"task_id": "HumanEval/134", "completion": "    txt = txt.strip()  # remove leading and trailing spaces\n    last_char = txt[-1]  # get the last character\n    return last_char.isalpha() and not last_char.isalnum()"}
{"task_id": "HumanEval/135", "completion": "    largest_index = -1\n    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i + 1]:\n            largest_index = i\n    return largest_index"}
{"task_id": "HumanEval/136", "completion": "    min_positive = None\n    max_negative = None\n    for num in lst:\n        if num > 0:\n            if min_positive is None or num < min_positive:\n                min_positive = num\n        elif num < 0:\n            if max_negative is None or num > max_negative:\n                max_negative = num\n    return max_negative, min_positive"}
{"task_id": "HumanEval/137", "completion": "    if type(a) != type(b):\n        if a == b:\n            return None\n        else:\n            return max(a, b)\n    else:\n        if isinstance(a, float) and a == b:\n            return None\n        else:\n            return max(a, b)"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 == 0 and n % 4 == 0:\n\t\treturn True\n\treturn False"}
{"task_id": "HumanEval/139", "completion": "    if n <= 1:\n        return 1\n    else:\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 12:\n        return \"No\"\n    if file_name.count(\".\") != 1:\n        return \"No\"\n    if not file_name[:file_name.index(\".\")].isalnum() or not file_name[file_name.index(\".\") + 1:].lower() in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] * lst[i]\n        elif i % 4 == 0:\n            total += lst[i] * lst[i] * lst[i]\n    return total"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    return num_x * num_n == den_x * den_n"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 2 != 0) and (str(num)[0] != '0'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = \"Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune\".split()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    if idx1 == -1 or idx2 == -1:\n        return ()\n    return tuple(planets[idx1 + 1 : idx2])"}
{"task_id": "HumanEval/149", "completion": "    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n    result.sort(key=lambda x: (len(x), x))\n    return result"}
{"task_id": "HumanEval/150", "completion": "    if n == 1:\n        return x\n    elif n == 2:\n        return y\n    elif n % 2 == 0:\n        return x_or_y(n // 2, x, y)\n    else:\n        return x_or_y((n + 1) // 2, x, y)"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/152", "completion": "    result=[]\n    for i in range(len(game)):\n        diff = game[i]-guess[i]\n        if diff==0:\n            result.append(0)\n        else:\n            result.append(abs(diff))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    strongest = None\n    strength = -1\n    for extension in extensions:\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        current_strength = (cap_count - sm_count)\n        if current_strength > strength:\n            strongest = extension\n            strength = current_strength\n    return class_name + '.' + strongest"}
{"task_id": "HumanEval/154", "completion": "    if len(a)!=len(b):\n        return False\n    if a==b:\n        return True\n    for i in range(len(a)):\n        if a[i:]==b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    if num < 0:\n        return \"Invalid Input\"\n    even_count = 0\n    odd_count = 0\n    while num != 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    val = [1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    syms = ['m', 'cm', 'd', 'cd', 'xc', 'xd', 'xm', 'i', 'im', 'vi', 'vii', 'ix', 'x', 'g', 'gc', 'd', 'dc', 'c', 'xc', 'b', 'bx', 'a', 'ax']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num"}
{"task_id": "HumanEval/157", "completion": "    if a == b or b == c or c == a:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    max_count = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_count:\n            max_count = len(set(word))\n            max_word = word\n        elif len(set(word)) == max_count:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    if number + remaining <= need:\n        return [number + remaining, 0]\n    else:\n        return [number + remaining - need, need]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(1, len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result = result // operand[i]\n        elif operator[i] == '**':\n            result = result ** operand[i]\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1] if not any(char.isalpha() for char in result) else result"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    md5 = hashlib.md5(text.encode())\n    return md5.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        num_str = str(num)\n        if ''.join(num_str[i] for i in range(len(num_str)) if int(num_str[i]) % 2 == 0) == num_str:\n            result.append(int(''.join(num_str[i] for i in range(len(num_str)) if int(num_str[i]) % 2 == 0)))\n    return result"}
