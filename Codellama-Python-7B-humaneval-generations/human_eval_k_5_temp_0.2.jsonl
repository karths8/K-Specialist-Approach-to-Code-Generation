{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples = int(s.split(\" \")[0])\n    oranges = int(s.split(\" \")[2])\n    mangoes = n - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/78", "completion": "    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_prime_digits(num):\n    count = 0\n    for digit in num:\n        if is_prime(int(digit, 16)):\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(1, 10):\n        if i == 1 or i == 9:\n            count += 1\n    for i in range(10, 10**n):\n        if i % 10 == 1 or i % 10 == 9:\n            count += 1\n    return count"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.|?|!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if n % 2 == 0:\n            result.append(i*2)\n        else:\n            result.append(i*2-1)\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n        sum_digits = 0\n        while num > 0:\n            sum_digits += num % 10\n            num = num // 10\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    max_triples = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0:\n                    max_triples += 1\n    return max_triples"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples = int(s.split()[0])\n    oranges = int(s.split()[2])\n    mangoes = n - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/78", "completion": "    hex_key = {0: 0, 1: 0, 2: 1, 3: 1, 4: 0, 5: 1, 6: 1, 7: 1, 8: 0, 9: 0, 'A': 1, 'B': 1, 'C': 0, 'D': 1, 'E': 0, 'F': 0}\n    return hex_key[num]\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_prime_hex_digits(num: str) -> int:\n    count = 0\n    for digit in num:\n        if hex_key(digit) and is_prime(int(digit, 16)):\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(1, 10):\n        if i == 1 or i == 9:\n            count += 1\n    for i in range(10, 10**n):\n        if i % 10 == 1 or i % 10 == 9:\n            count += 1\n    return count"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('. | ? | !')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i*2)\n        else:\n            result.append(i*2-1)\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            first_digit = -1\n        else:\n            first_digit = 1\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    max_count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0:\n                    max_count += 1\n    return max_count"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples = int(s.split()[0])\n    oranges = int(s.split()[2])\n    mango = n - apples - oranges\n    return mango"}
{"task_id": "HumanEval/78", "completion": "    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_prime_hex_digits(num: str) -> int:\n    count = 0\n    for digit in num:\n        if digit.isdigit():\n            if int(digit) > 1 and is_prime(int(digit)):\n                count += 1\n        elif digit.upper() in ['A', 'B', 'C', 'D', 'E', 'F']:\n            if is_prime(int(digit, 16)):\n                count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(1, 10):\n        if i == 1 or i == 9:\n            count += 1\n        if i == 1 or i == 9:\n            count += 1\n    return count"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.|?|!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    if n % 2 == 0:\n        next_even = n + 2\n        for i in range(1, n+1):\n            result.append(next_even)\n            next_even += 2\n    else:\n        next_odd = n + 1\n        for i in range(1, n+1):\n            result.append(next_odd)\n            next_odd += 2\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            first_digit = -1\n        else:\n            first_digit = 1\n        sum_digits = 0\n        num_str = str(abs(num))\n        for digit in num_str:\n            sum_digits += int(digit)\n        if sum_digits > 0:\n            count += first_digit\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    for note in music_string.split():\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples = int(s.split()[0])\n    oranges = int(s.split()[2])\n    mango = n - apples - oranges\n    return mango"}
{"task_id": "HumanEval/78", "completion": "    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_prime_digits(num: str) -> int:\n    count = 0\n    for digit in num:\n        if is_prime(int(digit, 16)):\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(1, 10):\n        if i == 1 or i == 9:\n            count += 1\n    for i in range(1, n):\n        count *= 10\n    return count"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.|?|!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    if n % 2 == 0:\n        return [n//2+1] + [n//2+1] * (n//2)\n    else:\n        return [n//2+1] + [n//2+2] * (n//2)"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n        sum_digits = 0\n        while num > 0:\n            sum_digits += num % 10\n            num = num // 10\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    max_triples = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0:\n                    max_triples += 1\n    return max_triples"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples = int(s.split()[0])\n    oranges = int(s.split()[2])\n    mango = n - apples - oranges\n    return mango"}
{"task_id": "HumanEval/78", "completion": "    primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key_alternative(num):\n    count = 0\n    for digit in num:\n        if digit in {'A', 'B', 'C', 'D', 'E', 'F'}:\n            if is_prime(int(digit, 16)):\n                count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(1, 10):\n        if i % 10 == 1:\n            count += 1\n    for i in range(1, n):\n        count *= 10\n    return count"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.|?|!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    if n % 2 == 0:\n        next_number = n + 2\n    else:\n        next_number = n + 1\n    for i in range(1, n+1):\n        result.append(next_number)\n        next_number += 2 if next_number % 2 != 0 else 1\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            first_digit = -1\n        else:\n            first_digit = 1\n        sum_digits = 0\n        num_str = str(abs(num))\n        for digit in num_str:\n            sum_digits += int(digit)\n        if sum_digits > 0:\n            count += first_digit\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    text = text.lower()  # Convert text to lowercase for case-insensitive comparison\n    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return False\n    if l[0] == l[1]:\n        return True\n    if l[0] < l[1]:\n        for i in range(1, len(l)):\n            if l[i] < l[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(l)):\n            if l[i] > l[i-1]:\n                return False\n        return True"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    return x == n**int(math.log(x, n))"}
{"task_id": "HumanEval/77", "completion": "    return a == round(a ** (1/3))"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    return (x == y + z or x == z + y or y == z + x or y == x + z or z == x + y) and all(isinstance(num, int) for num in [x, y, z])"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = dict.keys()\n    lower_case = all(key.islower() for key in keys)\n    upper_case = all(key.isupper() for key in keys)\n    return lower_case or upper_case"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    return arr[-1] >= max(arr[:-1])"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    if even_count == len(lst1):\n        return \"YES\"\n    elif even_count + len(lst2) >= len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) < 2:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\ndef has_duplicate(lst):\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start + 1\n        if length < 2:\n            return \"NO\"\n        for i in range(2, length):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return True\n            stack.pop()\n    return False"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return n == sum(range(2, n+2, 2))"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 8:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name[0].isdigit():\n        return 'No'\n    if file_name[file_name.find('.') + 1:].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    x_num = int(x.split('/')[0])\n    x_den = int(x.split('/')[1])\n    n_num = int(n.split('/')[0])\n    n_den = int(n.split('/')[1])\n    \n    if (x_num * n_num) % x_den == 0 and (x_num * n_num) % n_den == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    if a == b:\n        return True\n    a += a\n    return b in a"}
{"task_id": "HumanEval/157", "completion": "    if a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)-1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n    if l[1] > l[0]:\n        for i in range(2, len(l)):\n            if l[i] < l[i-1]:\n                return False\n        return True\n    elif l[1] < l[0]:\n        for i in range(2, len(l)):\n            if l[i] > l[i-1]:\n                return False\n        return True\n    else:\n        return True"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    return x == n**int(math.log(x, n))"}
{"task_id": "HumanEval/77", "completion": "    return a == round(a ** (1/3))"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or y == z + x or z == x + y:\n        return all(isinstance(num, int) for num in [x, y, z])\n    else:\n        return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    else:\n        keys = list(dict.keys())\n        if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n            return True\n        else:\n            return False"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    if odd_count == 0:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) < 2:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True\n\ndef has_duplicate(lst):\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start + 1\n        if length < 2:\n            return \"NO\"\n        for i in range(2, length):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return True\n            stack.pop()\n    return False"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return n == sum(range(2, n+2, 2))"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 8:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') == len(file_name) - 4:\n        return 'No'\n    if file_name[file_name.find('.') - 1].isdigit():\n        return 'No'\n    if file_name[file_name.find('.') + 1:].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    x_numerator = int(x.split(\"/\")[0])\n    x_denominator = int(x.split(\"/\")[1])\n    n_numerator = int(n.split(\"/\")[0])\n    n_denominator = int(n.split(\"/\")[1])\n    return (x_numerator * n_denominator) % (x_denominator * n_denominator) == 0"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    if a == b:\n        return True\n    return b in a + a"}
{"task_id": "HumanEval/157", "completion": "    if a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    return x == n**int(math.log(x, n))"}
{"task_id": "HumanEval/77", "completion": "    return a == round(a ** (1/3))"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length == 0:\n        return False\n    for i in range(2, length + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or x == z + y or y == z + x or y == x + z or z == x + y:\n        return all(isinstance(num, int) for num in [x, y, z])\n    else:\n        return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(isinstance(key, str) and key.islower() or key.isupper() for key in keys)"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    if odd_count == 0:\n        return \"YES\"\n    odd_count = sum(1 for num in lst2 if num % 2 != 0)\n    return \"YES\" if odd_count == 0 else \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\ndef has_duplicate(lst):\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start + 1\n        if length <= 1:\n            return \"NO\"\n        for i in range(2, length):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return True\n            stack.pop()\n    return False"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return n == sum(range(2, n+2, 2))"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('0') > 3 or file_name.count('1') > 3 or file_name.count('2') > 3 or file_name.count('3') > 3 or file_name.count('4') > 3 or file_name.count('5') > 3 or file_name.count('6') > 3 or file_name.count('7') > 3 or file_name.count('8') > 3 or file_name.count('9') > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name[file_name.find('.') + 1:].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    x_numerator = int(x.split('/')[0])\n    x_denominator = int(x.split('/')[1])\n    n_numerator = int(n.split('/')[0])\n    n_denominator = int(n.split('/')[1])\n    \n    if (x_numerator * n_denominator == x_denominator * n_numerator):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    a += a\n    return b in a"}
{"task_id": "HumanEval/157", "completion": "    if a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)-1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    text = text.lower()  # Convert string to lowercase for case-insensitive comparison\n    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n    direction = l[1] - l[0]\n    for i in range(1, len(l)):\n        if l[i] - l[i-1] != direction:\n            return False\n    return True"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    return x == n**int(math.log(x, n))"}
{"task_id": "HumanEval/77", "completion": "    return a == round(a ** (1/3))"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if (x + y == z) and (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = dict.keys()\n    lower_case = all(key.islower() for key in keys)\n    upper_case = all(key.isupper() for key in keys)\n    return lower_case or upper_case"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    return arr[-1] >= max(arr[:-1])"}
{"task_id": "HumanEval/110", "completion": "    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) < 2:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start + 1\n        if length <= 1:\n            return \"NO\"\n        else:\n            for i in range(2, length):\n                if length % i == 0:\n                    return \"NO\"\n            return \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return True\n            stack.pop()\n    return False"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return n == sum(range(2, n+2, 2))"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 10:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name.find('.') > 3:\n        return 'No'\n    if file_name[0].isalpha() == False:\n        return 'No'\n    if file_name[file_name.find('.')+1:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    x_numerator = int(x.split('/')[0])\n    x_denominator = int(x.split('/')[1])\n    n_numerator = int(n.split('/')[0])\n    n_denominator = int(n.split('/')[1])\n\n    if (x_numerator * n_denominator == n_numerator * x_denominator):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    return b in a or b in a[::-1]"}
{"task_id": "HumanEval/157", "completion": "    return a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)-1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return False\n    if l[0] == l[1]:\n        return False\n    if l[0] < l[1]:\n        for i in range(1, len(l)):\n            if l[i] < l[i-1]:\n                return False\n    else:\n        for i in range(1, len(l)):\n            if l[i] > l[i-1]:\n                return False\n    return True"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    return x == n**int(math.log(x, n))"}
{"task_id": "HumanEval/77", "completion": "    return a == round(a ** (1/3))"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or x == z + y or y == z + x or y == x + z or z == x + y:\n        return all(isinstance(num, int) for num in [x, y, z])\n    else:\n        return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(isinstance(keys[0], str) and keys[0].islower() or keys[0].isupper() for key in keys)"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    odd_count = 0\n    for num in lst1:\n        if num % 2 != 0:\n            odd_count += 1\n    if odd_count % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) < 2:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start + 1\n        if length < 2:\n            return \"NO\"\n        for i in range(2, length):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return n == sum(range(2, n+2, 2))"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('0') > 3 or file_name.count('1') > 3 or file_name.count('2') > 3 or file_name.count('3') > 3 or file_name.count('4') > 3 or file_name.count('5') > 3 or file_name.count('6') > 3 or file_name.count('7') > 3 or file_name.count('8') > 3 or file_name.count('9') > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if file_name.find('.') == 0:\n        return 'No'\n    if file_name[file_name.find('.')+1:].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    x_numerator = int(x.split('/')[0])\n    x_denominator = int(x.split('/')[1])\n    n_numerator = int(n.split('/')[0])\n    n_denominator = int(n.split('/')[1])\n    \n    if (x_numerator * n_denominator == n_numerator * x_denominator):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    if a == b:\n        return True\n    return b in a + a"}
{"task_id": "HumanEval/157", "completion": "    return a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)-1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    return sum(numbers), numbers[0] * (1 if len(numbers) == 1 else reduce(lambda x, y: x * y, numbers[1:]))"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds the zero point of a polynomial with coefficients xs.\n    return x such that poly(x) = 0\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0 or xs[-1] != 0:\n        return \"Invalid coefficients for a polynomial\"\n    a, b = xs[0], xs[1]\n    x = -b / a\n    return x"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l1 = [l[i] for i in range(n) if i % 3 != 0]\n    l2 = [l[i] for i in range(n) if i % 3 == 0]\n    l2.sort()\n    l3 = [l[i] for i in range(n) if i % 3 != 0]\n    return l1 + l2 + l3"}
{"task_id": "HumanEval/37", "completion": "    l1 = l[::2]\n    l2 = l[1::2]\n    l2.sort()\n    return l1 + l2"}
{"task_id": "HumanEval/39", "completion": "    a, b = 0, 1\n    count = 0\n    while True:\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    area = (a * h) / 2\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 2, 0, 2\n        for _ in range(4, n+1):\n            a, b, c, d = b, c, d, a+b+c+d\n        return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    res = pow(n, p-2, p)\n    return res"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a+b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    s1 = set(l1)\n    s2 = set(l2)\n    return list(s1.intersection(s2))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(2, n+1):\n        while n % i == 0:\n            n = n // i\n        if n == 1:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = [0] * n\n    for i in range(n):\n        for j in range(i, n):\n            result[j] += xs[i] * (j - i)\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    if shift < len(num_str):\n        return num_str[shift:] + num_str[:shift]\n    else:\n        return num_str[len(num_str) - shift:] + num_str[:len(num_str) - shift]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    if a < 3:\n        return False\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    result = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            result.append('A+')\n        elif gpa >= 3.7:\n            result.append('A')\n        elif gpa >= 3.3:\n            result.append('A-')\n        elif gpa >= 3.0:\n            result.append('B+')\n        elif gpa >= 2.7:\n            result.append('B')\n        elif gpa >= 2.3:\n            result.append('B-')\n        elif gpa >= 2.0:\n            result.append('C+')\n        elif gpa >= 1.7:\n            result.append('C')\n        elif gpa >= 1.3:\n            result.append('C-')\n        elif gpa >= 1.0:\n            result.append('D+')\n        elif gpa >= 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result"}
{"task_id": "HumanEval/84", "completion": "    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 2\n        N = N // 2\n    return binary_sum"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    for num in range(2, n+1):\n        if all(num%i != 0 for i in range(2, int(num**0.5)+1)):\n            primes.append(num)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    unit_a = a % 10\n    unit_b = b % 10\n    return unit_a * unit_b"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return 0"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -2):\n        if i <= y and i >= x:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)[2:]"}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        else:\n            return i * factorial(i - 1)\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    if n == 1:\n        return [1]\n    else:\n        seq = [n]\n        while n != 1:\n            if n % 2 != 0:\n                n = 3 * n + 1\n            else:\n                n //= 2\n            seq.append(n)\n        return [x for x in seq if x % 2 != 0]"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        product *= num\n        sum_of_magnitudes += abs(num)\n    return product * (-1 if sum_of_magnitudes % 2 == 0 else 1)"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        trib = [1, 3, 2]\n        for i in range(3, n + 1):\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 3])\n        return trib"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n = n // 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num**2)\n    return result"}
{"task_id": "HumanEval/136", "completion": "    min_positive = None\n    max_negative = None\n    for num in lst:\n        if num > 0 and (min_positive is None or num < min_positive):\n            min_positive = num\n        elif num < 0 and (max_negative is None or num > max_negative):\n            max_negative = num\n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a == b:\n        return None\n    return max(a, b)"}
{"task_id": "HumanEval/139", "completion": "    if n < 0:\n        return -1\n    if n == 0 or n == 1:\n        return 1\n    if n == 2:\n        return 2\n    fact = 1\n    for i in range(2, n+1):\n        fact *= i\n    return fact"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/145", "completion": "    def get_sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    nums.sort(key=lambda x: (get_sum_of_digits(x), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = int(str(num)[0])\n            last_digit = int(str(num)[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 < 0 or index2 < 0:\n        return ()\n    return sorted(planets[index1+1:index2])"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            if num % 2 != 0:\n                total += num * num\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)"}
{"task_id": "HumanEval/159", "completion": "    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    i = 1\n    while i < len(operand):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n        i += 1\n    return result"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        even_digits = [int(digit) for digit in str(num) if int(digit) % 2 == 0]\n        if even_digits:\n            result.append(int(''.join(map(str, even_digits))))\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    else:\n        sum_of_numbers = sum(numbers)\n        product_of_numbers = 1\n        for num in numbers:\n            product_of_numbers *= num\n        return sum_of_numbers, product_of_numbers"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds the zero point of the polynomial represented by xs.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0 or xs[-1] != 0:\n        raise ValueError(\"Coefficients should have even number of elements and largest non-zero coefficient\")\n    a, b = xs[0], xs[-2]\n    c = b - a\n    d = a * a - c * c\n    return -a + math.sqrt(d) if d >= 0 else -a - math.sqrt(d)"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l1 = [l[i] for i in range(n) if i % 3 != 0]\n    l2 = [l[i] for i in range(n) if i % 3 == 0]\n    l2.sort()\n    l3 = [l[i] for i in range(n) if i % 3 != 0]\n    return l1 + l2 + l3"}
{"task_id": "HumanEval/37", "completion": "    l_even = [l[i] for i in range(0, len(l), 2)]\n    l_even.sort()\n    l_odd = [l[i] for i in range(1, len(l), 2)]\n    return l_even + l_odd"}
{"task_id": "HumanEval/39", "completion": "    a, b = 0, 1\n    count = 0\n    while True:\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b \n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    area = (a * h) / 2\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 2, 0, 2\n        for _ in range(4, n+1):\n            a, b, c, d = b, c, d, a+b+c+d\n        return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    return pow(n, p-2, p)"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a+b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(2, n+1):\n        while n % i == 0:\n            n = n // i\n        if n == 1:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = [0] * n\n    for i in range(n):\n        for j in range(i, n):\n            result[j] += xs[i] * (j - i)\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    num_len = len(num_str)\n    shift = shift % num_len\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    if a < 3:\n        return False\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    result = []\n    for grade in grades:\n        if grade >= 4.0:\n            result.append('A+')\n        elif grade >= 3.7:\n            result.append('A')\n        elif grade >= 3.3:\n            result.append('A-')\n        elif grade >= 3.0:\n            result.append('B+')\n        elif grade >= 2.7:\n            result.append('B')\n        elif grade >= 2.3:\n            result.append('B-')\n        elif grade >= 2.0:\n            result.append('C+')\n        elif grade >= 1.7:\n            result.append('C')\n        elif grade >= 1.3:\n            result.append('C-')\n        elif grade >= 1.0:\n            result.append('D+')\n        elif grade >= 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result"}
{"task_id": "HumanEval/84", "completion": "    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 2\n        N = N // 2\n    return binary_sum"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j in range(len(row) - 1, -1, -1):\n            if row[j] == x:\n                result.append((i, j))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    if n <= 0:\n        return []\n    primes = []\n    for num in range(2, n+1):\n        if all(num%i != 0 for i in range(2, int(num**0.5)+1)):\n            primes.append(num)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num == 0:\n        return 0\n    elif num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x - 1, -2):\n        if i <= y and i >= x:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)[2:]"}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        else:\n            return i * factorial(i - 1)\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    if n == 1:\n        return [1]\n    else:\n        result = []\n        while n != 1:\n            if n % 2 != 0:\n                result.append(n)\n            n = 3 * n + 1\n        return result"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        product *= num\n        sum_of_magnitudes += abs(num)\n    return product * sum_of_magnitudes"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 3\n        dp[2] = 2\n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n        return dp"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n = n // 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num**2)\n    return result"}
{"task_id": "HumanEval/136", "completion": "    min_positive = None\n    max_negative = None\n    for num in lst:\n        if num > 0 and (min_positive is None or num < min_positive):\n            min_positive = num\n        elif num < 0 and (max_negative is None or num > max_negative):\n            max_negative = num\n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/139", "completion": "    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i]**3\n    return total"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    nums.sort(key=lambda x: (sum_of_digits(x), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = int(str(num)[0])\n            last_digit = int(str(num)[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 < 0 or index2 < 0:\n        return ()\n    return sorted(planets[index1+1:index2])"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    odd_sum = 0\n    for num in lst:\n        if num >= 0 and isinstance(num, int) and num % 2 != 0:\n            odd_sum += num * num\n    return odd_sum"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)"}
{"task_id": "HumanEval/159", "completion": "    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    i = 0\n    for op in operator:\n        if op == '+':\n            result += operand[i+1]\n        elif op == '-':\n            result -= operand[i+1]\n        elif op == '*':\n            result *= operand[i+1]\n        elif op == '//':\n            result //= operand[i+1]\n        elif op == '**':\n            result **= operand[i+1]\n        i += 1\n    return result"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    return sum(numbers), numbers[0] * (1 if len(numbers) == 1 else reduce(lambda x, y: x * y, numbers[1:]))"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds the zero point of a polynomial with coefficients xs.\n    The zero point is the point at which the polynomial evaluates to 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0 or xs[-1] != 0:\n        raise ValueError(\"Coefficients should have even number of elements and largest non-zero coefficient\")\n    x = 0\n    while True:\n        if poly(xs, x) == 0:\n            return x\n        x += 0.0001"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l1 = [l[i] for i in range(n) if i % 3 != 0]\n    l2 = [l[i] for i in range(n) if i % 3 == 0]\n    l2.sort()\n    l3 = [l[i] for i in range(n) if i % 3 != 0]\n    return l1 + l2 + l3"}
{"task_id": "HumanEval/37", "completion": "    l1 = [l[i] for i in range(1, len(l), 2)]\n    l2 = [l[i] for i in range(0, len(l), 2)]\n    l2.sort()\n    l1.extend(l2)\n    return l1"}
{"task_id": "HumanEval/39", "completion": "    a, b = 0, 1\n    count = 0\n    while True:\n        if is_prime(a) and is_prime(b):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    area = (a * h) / 2\n    return area"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n):\n        a, b, c, d = b, c, d, a+b+c+d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    return pow(n, p-2, p)"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(2, n+1):\n        if n % i == 0:\n            while n % i == 0:\n                n = n // i\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = [0] * n\n    for i in range(n):\n        for j in range(i, n):\n            result[j] += xs[i] * (j - i)\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    num_len = len(num_str)\n    shift = shift % num_len\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    if a < 3:\n        return False\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    result = []\n    for grade in grades:\n        if grade >= 4.0:\n            result.append('A+')\n        elif grade >= 3.7:\n            result.append('A')\n        elif grade >= 3.3:\n            result.append('A-')\n        elif grade >= 3.0:\n            result.append('B+')\n        elif grade >= 2.7:\n            result.append('B')\n        elif grade >= 2.3:\n            result.append('B-')\n        elif grade >= 2.0:\n            result.append('C+')\n        elif grade >= 1.7:\n            result.append('C')\n        elif grade >= 1.3:\n            result.append('C-')\n        elif grade >= 1.0:\n            result.append('D+')\n        elif grade >= 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result"}
{"task_id": "HumanEval/84", "completion": "    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 2\n        N = N // 2\n    return binary_sum"}
{"task_id": "HumanEval/85", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/96", "completion": "    if n <= 0:\n        return []\n    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    unit_a = a % 10\n    unit_b = b % 10\n    return unit_a * unit_b"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return 0"}
{"task_id": "HumanEval/102", "completion": "    for num in range(y, x-1, -2):\n        if num >= x and num <= y:\n            return num\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)[2:]"}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        else:\n            return i * factorial(i - 1)\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    if n == 1:\n        return [1]\n    else:\n        odd_numbers = []\n        while n != 1:\n            if n % 2 != 0:\n                odd_numbers.append(n)\n            n = 3 * n + 1\n        return odd_numbers"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        product *= num\n        sum_of_magnitudes += abs(num)\n    return sum_of_magnitudes * product"}
{"task_id": "HumanEval/130", "completion": "    if n <= 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 3]\n    else:\n        dp = [0] * (n + 1)\n        dp[1] = 3\n        dp[2] = 3\n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n        return dp"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    total = 0\n    for num in lst:\n        total += int(num+0.5)**2\n    return total"}
{"task_id": "HumanEval/136", "completion": "    min_positive = None\n    max_negative = None\n    for num in lst:\n        if num > 0 and (min_positive is None or num < min_positive):\n            min_positive = num\n        elif num < 0 and (max_negative is None or num > max_negative):\n            max_negative = num\n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/139", "completion": "    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i]**3\n    return total"}
{"task_id": "HumanEval/145", "completion": "    def get_sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    nums.sort(key=lambda x: (get_sum_of_digits(x), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = int(str(num)[0])\n            last_digit = int(str(num)[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 < 0 or index2 < 0:\n        return ()\n    return sorted(planets[index1+1:index2])"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            if num % 2 != 0:\n                total += num * num\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    i = 1\n    while i < len(operand):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n        i += 1\n    return result"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        num_str = str(num)\n        even_digits = [int(digit) for digit in num_str if int(digit) % 2 == 0]\n        if even_digits:\n            result.append(int(''.join(map(str, even_digits))))\n    return result"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)-1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    return sum(numbers), numbers[0] * (1 if len(numbers) == 1 else reduce(lambda x, y: x * y, numbers[1:]))"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero point of a polynomial with coefficients xs.\n    return x such that poly(x) = 0\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0 or xs[-1] != 0:\n        return \"Invalid coefficients\"\n    a, b = xs[0], xs[-2]\n    c = xs[1]\n    d = poly(xs, 0)\n    e = poly(xs, 1)\n    return (-d + math.sqrt(d**2 - 4*a*c))/(2*a)"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l1 = [l[i] for i in range(n) if i % 3 != 0]\n    l2 = [l[i] for i in range(n) if i % 3 == 0]\n    l2.sort()\n    l3 = [l[i] for i in range(n) if i % 3 != 0]\n    return l1 + l2 + l3"}
{"task_id": "HumanEval/37", "completion": "    l1 = [l[i] for i in range(1, len(l), 2)]\n    l2 = [l[i] for i in range(0, len(l), 2)]\n    l2.sort()\n    return l1 + l2"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def is_fibonacci(num):\n        return is_prime(5 * num * num + 4) or is_prime(5 * num * num - 4)\n    \n    a, b = 0, 1\n    count = 0\n    while True:\n        if is_fibonacci(a) and is_prime(a):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    area = (a * h) / 2\n    return area"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n):\n        a, b, c, d = b, c, d, a+b+c+d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    result = pow(n, p-2, p)\n    return result"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(2, n+1):\n        while n % i == 0:\n            n = n // i\n        if n == 1:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = [0] * n\n    for i in range(n):\n        for j in range(i, n):\n            result[j] += xs[i] * (j - i)\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(3, n+1):\n            a, b = b, a+b+b\n        return b"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    num_len = len(num_str)\n    shift = shift % num_len\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, a):\n        if is_prime(i) and is_prime(a - i):\n            return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    result = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            result.append('A+')\n        elif gpa >= 3.7:\n            result.append('A')\n        elif gpa >= 3.3:\n            result.append('A-')\n        elif gpa >= 3.0:\n            result.append('B+')\n        elif gpa >= 2.7:\n            result.append('B')\n        elif gpa >= 2.3:\n            result.append('B-')\n        elif gpa >= 2.0:\n            result.append('C+')\n        elif gpa >= 1.7:\n            result.append('C')\n        elif gpa >= 1.3:\n            result.append('C-')\n        elif gpa >= 1.0:\n            result.append('D+')\n        elif gpa >= 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result"}
{"task_id": "HumanEval/84", "completion": "    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 2\n        N = N // 2\n    return binary_sum"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/96", "completion": "    if n <= 1:\n        return []\n    primes = []\n    for num in range(2, n+1):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    unit_a = a % 10\n    unit_b = b % 10\n    return unit_a * unit_b"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return 0"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x - 1, -2):\n        if i <= y and i >= x:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)[2:]"}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        else:\n            return i * factorial(i - 1)\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    if n == 1:\n        return [1]\n    else:\n        result = []\n        while n != 1:\n            if n % 2 != 0:\n                result.append(n)\n            n = 3 * n + 1\n        return result"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        product *= num\n        sum_of_magnitudes += abs(num)\n    return sum_of_magnitudes * product"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        a, b, c = 1, 3, 2\n        d = a + b + c\n        result = [1, 3, 2]\n        for _ in range(3, n + 1):\n            a, b, c = b, c, d\n            d = a + b + c\n            result.append(d)\n        return result"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num**2)\n    return result"}
{"task_id": "HumanEval/136", "completion": "    min_positive = None\n    max_negative = None\n    for num in lst:\n        if num > 0 and (min_positive is None or num < min_positive):\n            min_positive = num\n        elif num < 0 and (max_negative is None or num > max_negative):\n            max_negative = num\n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, float) and isinstance(b, float):\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        return a if float(a) > float(b) else b\n    else:\n        return None"}
{"task_id": "HumanEval/139", "completion": "    if n <= 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i]**3\n    return total"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n\n    nums.sort(key=lambda x: (digit_sum(x), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = int(str(num)[0])\n            last_digit = int(str(num)[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    if idx1 < 0 or idx2 < 0:\n        return ()\n    return sorted(planets[idx1+1:idx2])"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            if num % 2 != 0:\n                total += num * num\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)"}
{"task_id": "HumanEval/159", "completion": "    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    i = 1\n    while i < len(operand):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n        i += 1\n    return result"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        even_digits = [int(digit) for digit in str(num) if int(digit) % 2 == 0]\n        if even_digits:\n            result.append(int(''.join(map(str, even_digits))))\n    return result"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    else:\n        sum_of_numbers = sum(numbers)\n        product_of_numbers = 1\n        for num in numbers:\n            product_of_numbers *= num\n        return sum_of_numbers, product_of_numbers"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = (0.0, 0.0)\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds the zero point of the polynomial represented by xs.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0 or xs[-1] != 0:\n        raise ValueError(\"Coefficients should have even number of elements and the largest non-zero coefficient\")\n    x = 0\n    for i in range(n//2):\n        x += xs[i] * (xs[i+1] / (xs[i] - x))\n    return x"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l_new = [0]*n\n    for i in range(n):\n        if i % 3 != 0:\n            l_new[i] = l[i]\n        else:\n            l_new[i] = l[i+1]\n    l_new.sort()\n    return l_new"}
{"task_id": "HumanEval/37", "completion": "    l1 = l[::2]\n    l2 = l[1::2]\n    l2.sort()\n    l1.extend(l2)\n    return l1"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fibonacci(num):\n        return is_prime(5 * num * num + 4) or is_prime(5 * num * num - 4)\n\n    a, b = 0, 1\n    count = 0\n    while True:\n        if is_fibonacci(a) and is_prime(a):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    area = (a * h) / 2\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 2, 0, 2\n        for _ in range(4, n+1):\n            a, b, c, d = b, c, d, a+b+c+d\n        return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    result = pow(n, p-2, p)\n    return result"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(2, n+1):\n        while n % i == 0:\n            n = n // i\n        if n == 1:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = [0] * n\n    for i in range(n):\n        for j in range(i+1):\n            result[j] += xs[i] * (i - j + 1)\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    shift = shift % len(num_str)\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    if a < 3:\n        return False\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/84", "completion": "    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 2\n        N = N // 2\n    return binary_sum"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j in range(len(row) - 1, -1, -1):\n            if row[j] == x:\n                result.append((i, j))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    for num in range(2, n+1):\n        if all(num%i != 0 for i in range(2, int(num**0.5)+1)):\n            primes.append(num)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    unit_a = a % 10\n    unit_b = b % 10\n    return unit_a * unit_b"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return 0"}
{"task_id": "HumanEval/102", "completion": "    for num in range(y, x-1, -2):\n        if num >= x and num <= y:\n            return num\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)[2:]"}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        else:\n            return i * factorial(i - 1)\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    if n == 1:\n        return [1]\n    else:\n        odd_numbers = []\n        while n > 1:\n            if n % 2 != 0:\n                odd_numbers.append(n)\n            n = 3 * n + 1\n        return odd_numbers"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        product *= num\n        sum_of_magnitudes += abs(num)\n    return product * (-1 if sum_of_magnitudes % 2 == 0 else 1)"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        trib = [1, 3, 2]\n        for i in range(3, n + 1):\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 3])\n        return trib"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num**2)\n    return result"}
{"task_id": "HumanEval/136", "completion": "    min_positive = None\n    max_negative = None\n    for num in lst:\n        if num > 0 and (min_positive is None or num < min_positive):\n            min_positive = num\n        elif num < 0 and (max_negative is None or num > max_negative):\n            max_negative = num\n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a == b:\n        return None\n    return max(a, b)"}
{"task_id": "HumanEval/139", "completion": "    if n <= 0:\n        return 0\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i]**3\n    return total"}
{"task_id": "HumanEval/145", "completion": "    def get_sum(num):\n        return sum(int(digit) for digit in str(num))\n\n    nums.sort(key=lambda x: (get_sum(x), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = int(str(num)[0])\n            last_digit = int(str(num)[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 == -1 or index2 == -1:\n        return ()\n    return sorted(planets[index1+1:index2])"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            if num % 2 != 0:\n                total += num * num\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)"}
{"task_id": "HumanEval/159", "completion": "    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    i = 1\n    while i < len(operand):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n        i += 1\n    return result"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(num, max_so_far)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    result = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return result"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_val:\n            min_val = val\n            min_index = i\n    if min_val == float('inf'):\n        return []\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq = max(freq.values())\n    for num, freq in freq.items():\n        if freq >= num and freq > max_freq:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return lst\n    result = []\n    min_val = min(lst)\n    max_val = max(lst)\n    result.append(min_val)\n    result.append(max_val)\n    lst.remove(min_val)\n    lst.remove(max_val)\n    result.extend(sorted(lst))\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n):\n        if arr[i] != arr[n - i - 1]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    next_smallest = None\n    for num in lst:\n        if num < min_val:\n            min_val = num\n        elif num < next_smallest:\n            next_smallest = num\n    return next_smallest"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(n):\n        s = 0\n        while n > 0:\n            s += n % 10\n            n //= 10\n        return s\n\n    max_prime = -1\n    for num in lst:\n        if isPrime(num) and num > max_prime:\n            max_prime = num\n\n    if max_prime == -1:\n        return 0\n    else:\n        return sumOfDigits(max_prime)"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(num):\n        num_str = str(num)\n        for digit in num_str:\n            if int(digit) % 2 == 0:\n                return True\n        return False\n\n    result = []\n    for num in x:\n        if not has_even_digit(num):\n            result.append(num)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef replace_with_names(arr):\n    num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(num_to_name[num])\n        else:\n            result.append(str(num))\n    result.sort(key=by_length, reverse=True)\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                res += 1\n    return min(res, math.ceil(res / capacity))"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/122", "completion": "    count = 0\n    total = 0\n    for num in arr[:k]:\n        if num < 100:\n            total += num\n            count += 1\n    return total if count <= 2 else -1"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[float('inf')] * n for _ in range(n)]\n    dp[0][0] = 0\n    for i in range(n):\n        for j in range(n):\n            for x, y in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                r, c = i + x, j + y\n                if 0 <= r < n and 0 <= c < n:\n                    dp[r][c] = min(dp[r][c], dp[i][j] + (0 if grid[i][j] == grid[r][c] else 1))\n    ans = []\n    r, c = 0, 0\n    for _ in range(k):\n        ans.append(grid[r][c])\n        r, c = r + (1 if r < n - 1 else -1), c + (1 if c < n - 1 else -1)\n    return ans"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    max_index = -1\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            max_index = i\n    if max_index != -1:\n        return max_index\n    else:\n        return -1"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_val = float('-inf')\n    for num in numbers:\n        max_val = max(num, max_val)\n        result.append(max_val)\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return rescaled_numbers"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_val:\n            min_val = val\n            min_index = i\n    if min_val == float('inf'):\n        return []\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq = max(freq.values())\n    for num, freq in freq.items():\n        if freq >= num and freq > max_freq:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return lst\n    lst.sort()\n    result = []\n    i, j = 0, len(lst) - 1\n    while i <= j:\n        if i != j:\n            result.append(lst[i])\n            result.append(lst[j])\n        else:\n            result.append(lst[i])\n        i += 1\n        j -= 1\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    arr_str = ''.join(map(str, arr))\n    rev_str = arr_str[::-1]\n    diff = 0\n    for i in range(n):\n        if arr_str[i] != rev_str[i]:\n            diff += 1\n    return diff"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    next_smallest = None\n    for num in lst:\n        if num < min_val:\n            min_val = num\n        elif num < next_smallest:\n            next_smallest = num\n    return next_smallest"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(n):\n        s = 0\n        while n > 0:\n            s += n % 10\n            n //= 10\n        return s\n\n    max_prime = -1\n    for num in lst:\n        if isPrime(num) and num > max_prime:\n            max_prime = num\n\n    if max_prime == -1:\n        return 0\n    else:\n        return sumOfDigits(max_prime)"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(num):\n        num_str = str(num)\n        for digit in num_str:\n            if int(digit) % 2 == 0:\n                return True\n        return False\n    \n    result = []\n    for num in x:\n        if not has_even_digit(num):\n            result.append(num)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef replace_digits(arr):\n    digit_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(digit_to_name[num])\n        else:\n            result.append(str(num))\n    return result\n\ndef sort_between_1_and_9(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(num)\n    result.sort(reverse=True)\n    return replace_digits(result)"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                res += 1\n    return min(res, math.ceil(res / capacity))"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/122", "completion": "    count = 0\n    sum = 0\n    for num in arr:\n        if count < k:\n            sum += num\n            count += 1\n        else:\n            break\n    return sum"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[float('inf')] * n for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    for i in range(n):\n        for j in range(n):\n            for dx, dy in directions:\n                x, y = i + dx, j + dy\n                if 0 <= x < n and 0 <= y < n:\n                    dp[i][j] = min(dp[i][j], dp[x][y] + grid[i][j])\n    res = []\n    for _ in range(k):\n        min_val = float('inf')\n        for i in range(n):\n            for j in range(n):\n                if dp[i][j] < min_val:\n                    min_val = dp[i][j]\n                    res.append(grid[i][j])\n    return res"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_so_far = float('-inf')\n    for i, num in enumerate(numbers):\n        max_so_far = max(num, max_so_far)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    result = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return result"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_val:\n            min_val = val\n            min_index = i\n    if min_val == float('inf'):\n        return []\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n    max_freq = max(freq_map.values())\n    for num, freq in freq_map.items():\n        if freq >= num and freq > max_freq:\n            max_freq = freq\n            max_num = num\n    return max_num if max_freq > 1 else -1"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    result = []\n    i, j = 0, len(lst) - 1\n    while i <= j:\n        if i != j:\n            result.append(lst[i])\n            result.append(lst[j])\n        else:\n            result.append(lst[i])\n        i += 1\n        j -= 1\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    next_smallest = None\n    for num in lst:\n        if num < min_val:\n            min_val = num\n        elif num < next_smallest:\n            next_smallest = num\n    return next_smallest"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(n):\n        s = 0\n        while n > 0:\n            s += n % 10\n            n //= 10\n        return s\n\n    max_prime = -1\n    for num in lst:\n        if isPrime(num) and num > max_prime:\n            max_prime = num\n\n    return sumOfDigits(max_prime)"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(num):\n        num_str = str(num)\n        for digit in num_str:\n            if int(digit) % 2 == 0:\n                return True\n        return False\n\n    result = []\n    for num in x:\n        if not has_even_digit(num):\n            result.append(num)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: len(str(x)))\n\ndef replace_digits_with_names(arr):\n    digit_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(digit_to_name[num])\n        else:\n            result.append(str(num))\n    return result\n\ndef sort_between_1_and_9(arr):\n    between_1_and_9 = [x for x in arr if 1 <= x <= 9]\n    between_1_and_9.sort()\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(between_1_and_9.pop(0))\n        else:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                res += 1\n    return min(res, math.ceil(res / capacity))"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/122", "completion": "    count = 0\n    total = 0\n    for num in arr:\n        if count < k:\n            total += num\n            count += 1\n        else:\n            break\n    return total"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[float('inf')] * n for _ in range(n)]\n    dp[0][0] = 0\n    for i in range(n):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + 1)\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + 1)\n    ans = []\n    for _ in range(k):\n        ans.append(min(dp[i][j] for i in range(n) for j in range(n)))\n    return ans"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    max_val = arr[0]\n    max_index = 0\n    for i in range(1, n):\n        if arr[i] <= max_val:\n            return max_index\n        max_val = max(max_val, arr[i])\n        max_index = i\n    return -1"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_val = float('-inf')\n    for num in numbers:\n        max_val = max(num, max_val)\n        result.append(max_val)\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return rescaled_numbers"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = float('-inf')\n    for val in l:\n        if val > max_val:\n            max_val = val\n    return max_val"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_val:\n            min_val = val\n            min_index = i\n    if min_val == float('inf'):\n        return []\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n    max_freq = max(freq_map.values())\n    result = -1\n    for num, freq in freq_map.items():\n        if freq >= num and num > 0 and freq > result:\n            result = freq\n    return result"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return lst\n    lst.sort()\n    result = []\n    i, j = 0, len(lst) - 1\n    while i <= j:\n        if i != j:\n            result.append(lst[i])\n            result.append(lst[j])\n        else:\n            result.append(lst[i])\n        i += 1\n        j -= 1\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    next_smallest = None\n    for num in lst:\n        if num < min_val:\n            min_val = num\n        elif num < next_smallest:\n            next_smallest = num\n    return next_smallest"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(n):\n        s = 0\n        while n > 0:\n            s += n % 10\n            n //= 10\n        return s\n\n    max_prime = -1\n    for num in lst:\n        if isPrime(num) and num > max_prime:\n            max_prime = num\n\n    if max_prime == -1:\n        return 0\n    else:\n        return sumOfDigits(max_prime)"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(num):\n        num_str = str(num)\n        for digit in num_str:\n            if int(digit) % 2 == 0:\n                return True\n        return False\n\n    result = []\n    for num in x:\n        if not has_even_digit(num):\n            result.append(num)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef replace_with_names(arr):\n    if not arr:\n        return []\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(names[num-1])\n        else:\n            result.append(str(num))\n    result.sort(key=by_length, reverse=True)\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                res += 1\n    return min(res, math.ceil(res / capacity))"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(min(k, len(arr))):\n        if len(str(arr[i])) <= 2:\n            total += arr[i]\n    return total"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[float('inf')] * n for _ in range(n)]\n    dp[0][0] = 0\n    for i in range(n):\n        for j in range(n):\n            for x, y in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                r, c = i + x, j + y\n                if 0 <= r < n and 0 <= c < n:\n                    dp[r][c] = min(dp[r][c], dp[i][j] + 1)\n    ans = []\n    for _ in range(k):\n        ans.append(min(dp[i][j] for i in range(n) for j in range(n)))\n    return ans"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_val = float('-inf')\n    for num in numbers:\n        max_val = max(num, max_val)\n        result.append(max_val)\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return rescaled_numbers"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_val:\n            min_val = val\n            min_index = i\n    if min_val == float('inf'):\n        return []\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq = max(freq.values())\n    for num, freq in freq.items():\n        if freq >= num and freq > max_freq:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return lst\n    lst.sort()\n    result = []\n    i, j = 0, len(lst) - 1\n    while i <= j:\n        if i != j:\n            result.append(lst[i])\n            result.append(lst[j])\n        else:\n            result.append(lst[i])\n        i += 1\n        j -= 1\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(n):\n        return sum(int(digit) for digit in str(n))\n\n    max_prime = max(lst)\n    if isPrime(max_prime):\n        return sumOfDigits(max_prime)\n    else:\n        return 0"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(num):\n        num_str = str(num)\n        for digit in num_str:\n            if int(digit) % 2 == 0:\n                return True\n        return False\n\n    result = []\n    for num in x:\n        if not has_even_digit(num):\n            result.append(num)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef replace_with_names(arr):\n    num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(num_to_name[num])\n        else:\n            result.append(str(num))\n    result.sort(key=by_length, reverse=True)\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                res += 1\n    return min(res, (n * m) - res)"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/122", "completion": "    result = 0\n    for i in range(min(k, len(arr))):\n        result += arr[i]\n    return result"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[float('inf')] * n for _ in range(1 << n)]\n    dp[1][0] = 0\n    for mask in range(1 << n):\n        for i in range(n):\n            for j in range(n):\n                if mask & (1 << i):\n                    continue\n                for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n                    if 0 <= x < n and 0 <= y < n and not (mask & (1 << x)):\n                        dp[mask][i] = min(dp[mask][i], dp[mask ^ (1 << i)][x] + 1)\n    res = []\n    for _ in range(k):\n        mask = max(dp[1])\n        res.append(grid[0][0])\n        for i in range(n):\n            for j in range(n):\n                if mask & (1 << i):\n                    continue\n                for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n                    if 0 <= x < n and 0 <= y < n and not (mask & (1 << x)):\n                        dp[mask][i] = min(dp[mask][i], dp[mask ^ (1 << i)][x] + 1)\n        mask = max(dp[1])\n    return res"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    max_index = -1\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            max_index = i\n    if max_index != -1:\n        return max_index\n    else:\n        return -1"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            if not stack:\n                result.append('')\n        elif not stack:\n            result[-1] += char\n    return result"}
{"task_id": "HumanEval/6", "completion": "    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_level = 0\n        level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[i:] + string[:i][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a) and i < len(b):\n            if a[i] == b[i]:\n                result += '0'\n            else:\n                result += '1'\n        elif i < len(a):\n            result += a[i]\n        else:\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    result = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = list(map(int, filter(lambda x: x.isdigit(), numbers.split())))\n    num_list.sort()\n    result = ''\n    for num in numbers.split():\n        if num.isdigit():\n            result += str(num_list.pop(0))\n        else:\n            result += num\n    return result"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing the encoding process.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [group[::-1] if len(group) == 3 else group for group in groups]\n    # join groups and return decoded string\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the opposite direction.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/79", "completion": "    binary_str = bin(decimal)[2:]\n    return \"db\" + binary_str + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if word:\n            result.append(''.join(sorted(word)))\n        else:\n            result.append('')\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr((((ord(char) - ord('a') + 2) * 2) % 26) + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded_message += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                encoded_message += chr((ord(char) - ord('a') + 26) % 26 + ord('a'))\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOUaeiou'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    histogram = {}\n    for word in words:\n        if word in histogram:\n            histogram[word] += 1\n        else:\n            histogram[word] = 1\n    return histogram"}
{"task_id": "HumanEval/112", "completion": "    s = ''.join(i for i in s if i not in c)\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for i, s in enumerate(lst):\n        count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{i}ng {i} of the {i}nput.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    vowels = \"aeiouAEIOU\"\n    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for char in word if char.isalpha() and char not in vowels) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels and word[i+1].isalpha() and word[i+2].isalpha():\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if len(date) != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n        return False\n    month = int(date[0:2])\n    day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return False\n        if month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        if month == 2:\n            if day < 1 or day > 29:\n                return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [txt]"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if len(words) == 0:\n        return False\n    last_word = words[-1]\n    if len(last_word) == 0:\n        return False\n    return last_word[-1].isalpha()"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for char in text:\n        if char == \" \":\n            if result and result[-1] == \" \":\n                result += \"-\"\n            else:\n                result += \"_\"\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word) in prime_lengths:\n            result.append(word)\n    return ' '.join(result)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_lengths():\n    result = set()\n    for i in range(2, 100):\n        if is_prime(i):\n            result.add(i)\n    return result"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + \".\" + strongest_extension"}
{"task_id": "HumanEval/156", "completion": "    roman_map = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c'}\n    result = ''\n    while number > 0:\n        if number >= 100:\n            result = roman_map[100] + result\n            number -= 100\n        elif number >= 50:\n            result = roman_map[50] + result\n            number -= 50\n        elif number >= 10:\n            result = roman_map[10] + result\n            number -= 10\n        elif number >= 5:\n            result = roman_map[5] + result\n            number -= 5\n        elif number >= 4:\n            result = roman_map[4] + result\n            number -= 4\n        elif number >= 1:\n            result = roman_map[1] + result\n            number -= 1\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result if result else s[::-1]"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            if not stack:\n                result.append('')\n            else:\n                result[-1] += ')'\n        elif not stack:\n            result[-1] += char\n    return result"}
{"task_id": "HumanEval/6", "completion": "    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_level = 0\n        level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[::-1] + string[i:]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    result = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = list(map(int, numbers.split()))\n    num_list.sort()\n    return ' '.join(map(str, num_list))"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing the encoding process.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [group[::-1] if len(group) == 3 else group for group in groups]\n    # concatenate groups and return the result.\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by reversing the encoding process of encode_shift function.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/79", "completion": "    binary_str = bin(decimal)[2:]\n    return f\"db{binary_str}db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if word:\n            result.append(''.join(sorted(word)))\n        else:\n            result.append(word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('a') + 26) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    hist = {}\n    for word in words:\n        if word in hist:\n            hist[word] += 1\n        else:\n            hist[word] = 1\n    return hist"}
{"task_id": "HumanEval/112", "completion": "    s = ''.join(set(s) - set(c))\n    return s[::-1], s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for i in range(len(lst)):\n        count = 0\n        for char in lst[i]:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, i, lst[i], i))\n    return result"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for char in word if char.isalpha() and char.islower()) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels and i < len(word)-1 and word[i+1] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if len(date) != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n        return False\n    month = int(date[:2])\n    day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return False\n        if month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        if month == 2:\n            if day < 1 or day > 29:\n                return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [txt]"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if len(words) == 0:\n        return False\n    last_word = words[-1]\n    if len(last_word) == 0:\n        return False\n    return last_word[-1].isalpha()"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for char in text:\n        if char == ' ':\n            if result and result[-1] == ' ':\n                result += '-'\n            else:\n                result += '_'\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word) in prime_numbers:\n            result.append(word)\n    return ' '.join(result)\n\ndef prime_numbers(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/156", "completion": "    roman_map = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for key, value in roman_map.items():\n        while number >= key:\n            result += value\n            number -= key\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result if result else s[::-1]"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            if not stack:\n                result.append('')\n        elif not stack:\n            result[-1] += char\n    return result"}
{"task_id": "HumanEval/6", "completion": "    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_level = 0\n        level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[i:] + string[:i][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    result = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = list(map(int, numbers.split()))\n    num_list.sort()\n    return ' '.join(map(str, num_list))"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing the encoding process.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [group[::-1] if len(group) == 3 else group for group in groups]\n    # join groups and return decoded string.\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by reversing the encoding process.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(filter(lambda x: x not in vowels, text))"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if word:\n            result.append(''.join(sorted(word)))\n        else:\n            result.append(word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('a') + 26) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    hist = {}\n    for word in words:\n        if word in hist:\n            hist[word] += 1\n        else:\n            hist[word] = 1\n    return hist"}
{"task_id": "HumanEval/112", "completion": "    s = ''.join(i for i in s if i not in c)\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for i in range(len(lst)):\n        count = 0\n        for char in lst[i]:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, i+1, lst[i], len(lst)))\n    return result"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.isalpha() and char.islower())\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels and word[i+2] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if len(date) != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n        return False\n    month = int(date[0:2])\n    day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return False\n        if month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        if month == 2:\n            if day < 1 or day > 29:\n                return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [txt]"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if len(words) == 0:\n        return False\n    last_word = words[-1]\n    if not last_word:\n        return False\n    if last_word[-1].isalpha():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for char in text:\n        if char == ' ':\n            if result and result[-1] == ' ':\n                result += '-'\n            else:\n                result += '_'\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word) in prime_lengths:\n            result.append(word)\n    return ' '.join(result)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_lengths(sentence):\n    result = set()\n    for word in sentence.split():\n        if is_prime(len(word)):\n            result.add(len(word))\n    return result"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + \".\" + strongest_extension"}
{"task_id": "HumanEval/156", "completion": "    roman_map = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    result = ''\n    while number > 0:\n        if number >= 1000:\n            result = roman_map[1000] + result\n            number -= 1000\n        elif number >= 900:\n            result = roman_map[900] + result\n            number -= 900\n        elif number >= 500:\n            result = roman_map[500] + result\n            number -= 500\n        elif number >= 400:\n            result = roman_map[400] + result\n            number -= 400\n        elif number >= 100:\n            result = roman_map[100] + result\n            number -= 100\n        elif number >= 90:\n            result = roman_map[90] + result\n            number -= 90\n        elif number >= 50:\n            result = roman_map[50] + result\n            number -= 50\n        elif number >= 40:\n            result = roman_map[40] + result\n            number -= 40\n        elif number >= 10:\n            result = roman_map[10] + result\n            number -= 10\n        elif number >= 9:\n            result = roman_map[9] + result\n            number -= 9\n        elif number >= 5:\n            result = roman_map[5] + result\n            number -= 5\n        elif number >= 4:\n            result = roman_map[4] + result\n            number -= 4\n        elif number >= 1:\n            result = roman_map[1] + result\n            number -= 1\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result if result else s[::-1]"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            if not stack:\n                result.append('')\n    return result"}
{"task_id": "HumanEval/6", "completion": "    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_level = 0\n        level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            return string + string[:i-1:-1]\n    return string + string[:-1:-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    result = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = list(map(int, numbers.split()))\n    num_list.sort()\n    return ' '.join(map(str, num_list))"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing the encoding process of encode_cyclic function.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the opposite direction.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(filter(lambda x: x not in vowels, text))"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if word:\n            result.append(''.join(sorted(word)))\n        else:\n            result.append(word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = (ord(char) - ord('a') + 2) * 2\n            if char.islower():\n                result += chr(ord('a') + shift % 26)\n            else:\n                result += chr(ord('A') + shift % 26)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded_message += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                encoded_message += chr((ord(char) - ord('a') + 26) % 26 + ord('a'))\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    hist = {}\n    for word in words:\n        if word in hist:\n            hist[word] += 1\n        else:\n            hist[word] = 1\n    return hist"}
{"task_id": "HumanEval/112", "completion": "    s = ''.join(set(s) - set(c))\n    return s[::-1], s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, len(s), s, len(lst)))\n    return result"}
{"task_id": "HumanEval/117", "completion": "    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for char in word if char in consonants) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels and i < len(word)-1 and word[i+1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if len(date) != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n        return False\n    month = int(date[:2])\n    day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return False\n        if month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        if month == 2:\n            if day < 1 or day > 29:\n                return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [txt]"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if len(words) == 0:\n        return False\n    last_word = words[-1]\n    if len(last_word) == 0:\n        return False\n    return last_word[-1].isalpha()"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for char in text:\n        if char == ' ':\n            if result and result[-1] == ' ':\n                result += '-'\n            else:\n                result += '_'\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word) in prime_lengths:\n            result.append(word)\n    return ' '.join(result)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_lengths(sentence):\n    return [len(word) for word in sentence.split() if is_prime(len(word))]"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/156", "completion": "    roman_map = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c'}\n    result = ''\n    while number > 0:\n        if number in roman_map:\n            result = roman_map[number] + result\n            break\n        else:\n            for key in roman_map:\n                if number % key == 0:\n                    result = roman_map[key] + result\n                    number = number // key\n                    break\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result if result else s"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            if not stack:\n                result.append('')\n    return result"}
{"task_id": "HumanEval/6", "completion": "    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_level = 0\n        level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            return string + string[:i-1:-1]\n    return string + string[:-1:-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    result = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = list(map(int, numbers.split()))\n    num_list.sort()\n    return ' '.join(map(str, num_list))"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing the encoding process.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [group[::-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the opposite direction.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if word:\n            result.append(''.join(sorted(word)))\n        else:\n            result.append(word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += chr(ord(char) + 32)\n            else:\n                result += chr(ord(char) - 32)\n        elif char.isdigit():\n            result += char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOUaeiou\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    histogram = {}\n    for word in words:\n        if word in histogram:\n            histogram[word] += 1\n        else:\n            histogram[word] = 1\n    return histogram"}
{"task_id": "HumanEval/112", "completion": "    s = ''.join(i for i in s if i not in c)\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for i, s in enumerate(lst):\n        count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, i, s, i))\n    return result"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    vowels = \"aeiouAEIOU\"\n    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for char in word if char.isalpha() and char not in vowels) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i-1, -1, -1):\n                if word[j] not in vowels:\n                    return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if len(date) != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n        return False\n    month = int(date[:2])\n    day = int(date[3:5])\n    year = int(date[6:])\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [txt]"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if len(words) == 0:\n        return False\n    last_word = words[-1]\n    if len(last_word) == 0:\n        return False\n    if last_word[-1].isalpha():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for char in text:\n        if char == ' ':\n            if result and result[-1] == ' ':\n                result += '-'\n            else:\n                result += '_'\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word) in prime_lengths:\n            result.append(word)\n    return ' '.join(result)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_lengths(sentence):\n    result = set()\n    for word in sentence.split():\n        if is_prime(len(word)):\n            result.add(len(word))\n    return result"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + \".\" + strongest_extension"}
{"task_id": "HumanEval/156", "completion": "    roman_map = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    result = ''\n    while number > 0:\n        if number in roman_map:\n            result = roman_map[number] + result\n            break\n        else:\n            for key in roman_map:\n                if number >= key:\n                    result = roman_map[key] + result\n                    number -= key\n                    break\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result if result else s[::-1]"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
