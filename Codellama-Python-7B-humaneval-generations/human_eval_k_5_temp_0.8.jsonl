{"task_id": "HumanEval/17", "completion": "    result = []\n    for token in music_string.strip().split():\n        if token == 'o':\n            result.append(4)\n        elif token == 'o|':\n            result.append(2)\n        elif token == '.|':\n            result.append(1)\n    return result"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples = int(s.split(\" \")[0])\n    oranges = int(s.split(\" \")[2])\n    mangoes = n - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/78", "completion": "    # Convert hexadecimal number to decimal\n    dec_num = int(num, 16)\n\n    # Check if the number is prime\n    is_prime = True\n    if dec_num <= 1:\n        is_prime = False\n    for i in range(2, dec_num):\n        if dec_num % i == 0:\n            is_prime = False\n            break\n    if is_prime:\n        return 1\n    return 0\n\ndef count_primes_hexadecimal_digits(num: str) -> int:\n    count = 0\n    for ch in num:\n        if ch in {'A', 'B', 'C', 'D', 'E', 'F'}:\n            count += hex_key(ch)\n    return count"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 2\n    start = 2\n    end = 10\n    for _ in range(2, n):\n        start *= 5\n        end *= 5\n    return start + end - 2"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('. ')\n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words[0] == \"I\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if n % 2 == 0:\n            result.append(i*2)\n        else:\n            result.append(i*2+1)\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        temp = i\n        reverse = 0\n        while temp > 0:\n            last_digit = temp % 10\n            reverse = reverse * 10 + last_digit\n            temp = temp // 10\n        if i == reverse:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = 0\n\tarr = [0] * n\n\tfor i in range(1, n):\n\t\tarr[i] = i * i - i + 1\n\t\n\tfor i in range(1, n):\n\t\tfor j in range(i + 1, n):\n\t\t\tfor k in range(j + 1, n):\n\t\t\t\tif arr[i] + arr[j] + arr[k] % 3 == 0:\n\t\t\t\t\tcount += 1\n\treturn count"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for char in music_string:\n        if char == 'o':\n            beats.append(4)\n        elif char == 'o|':\n            beats.append(2)\n        elif char == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    total_apples = 0\n    total_oranges = 0\n    total_mango = 0\n    for i in range(len(s)):\n        if s[i] == \" \":\n            continue\n        if s[i].isalpha():\n            continue\n        if s[i] == \"a\":\n            total_apples += int(s[i+2:len(s)])\n        elif s[i] == \"o\":\n            total_oranges += int(s[i+2:len(s)])\n        elif s[i] == \"m\":\n            total_mango += int(s[i+2:len(s)])\n    return n - total_apples - total_oranges - total_mango"}
{"task_id": "HumanEval/78", "completion": "    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for i in num:\n        if i in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    def is_one_start(num: int) -> bool:\n        s = str(num)\n        return s[0] == '1'\n\n    def is_one_end(num: int) -> bool:\n        s = str(num)\n        return s[-1] == '1'\n\n    count = 0\n    for num in range(10**(n-1), 10**n):\n        if is_one_start(num) or is_one_end(num):\n            count += 1\n    return count"}
{"task_id": "HumanEval/91", "completion": "    boredom_count = 0\n    sentences = S.split('.|?|!')\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            boredom_count += 1\n    return boredom_count"}
{"task_id": "HumanEval/100", "completion": "    if n % 2 == 0:\n        base = n - 1\n    else:\n        base = n - 2\n    res = []\n    for i in range(n):\n        res.append(base+2*i+1)\n    return res"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n            continue\n        signed_digits = []\n        num = abs(num)\n        while num > 0:\n            digit = num % 10\n            if digit > 0:\n                signed_digits.append(digit)\n            num = num // 10\n        if sum(signed_digits) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    max_triples = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0:\n                    max_triples += 1\n    return max_triples"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    for note in music_string.split():\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(7) in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apple = int(s.split('apples')[0].strip())\n    orange = int(s.split('oranges')[0].strip())\n    mango = n - apple - orange\n    return mango"}
{"task_id": "HumanEval/78", "completion": "    hex_dict = {'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    for ch in num:\n        if ch.isalpha():\n            yield hex_dict[ch]\n        else:\n            yield int(ch)\n\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\ndef count_prime_hex_digits(num: str) -> int:\n    count = 0\n    for digit in hex_key(num):\n        if is_prime(digit):\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('. | ? | !')\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    if n % 2 == 0:\n        return [n//2+1] * (n//2+1)\n    else:\n        return [n//2+1, (n+1)//2+1]"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if i == i[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            signed_digits = [-int(char) for char in str(num)]\n        else:\n            signed_digits = [int(char) for char in str(num)]\n        total_sum = sum(signed_digits)\n        if total_sum > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/17", "completion": "    music_string = music_string.replace(' ', '')\n    beats = [4] * len(music_string)\n    i = 1\n    while i < len(music_string):\n        if music_string[i] == '|':\n            beats[i-1] = 2\n            i += 1\n        elif music_string[i] == '.':\n            beats[i-1] = 1\n        i += 1\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n\tfor i in range(1, n):\n\t\tif i % 11 == 0 or i % 13 == 0:\n\t\t\tstr_i = str(i)\n\t\t\tif '7' in str_i:\n\t\t\t\tcount += 1\n\treturn count"}
{"task_id": "HumanEval/67", "completion": "    apples = int(s.split()[0])\n    oranges = int(s.split()[2])\n    mango = n - apples - oranges\n    return mango"}
{"task_id": "HumanEval/78", "completion": "    primes = [2, 3, 5, 7, 11, 13, 17]\n    count = 0\n    for digit in num:\n        if digit.upper() in primes:\n            count += 1\n    return count\n\n# Example usage\nprint(hex_key(\"AB\"))  # Output: 1\nprint(hex_key(\"1077E\"))  # Output: 2\nprint(hex_key(\"ABED1A33\"))  # Output: 4\nprint(hex_key(\"123456789ABCDEF0\"))  # Output: 6\nprint(hex_key(\"2020\"))  # Output: 2"}
{"task_id": "HumanEval/83", "completion": "    start_one = 10**(n-1) + 1\n    end_one = 10**n - 1\n    count = end_one - start_one + 1\n    return count"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split(\".\") + S.split(\"?\") + S.split(\"!\")\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == \"I\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if n % 2 == 0:\n            next_level = 2 * i\n        else:\n            next_level = 2 * i + 1\n        result.append(next_level)\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    def get_sum_of_digits(num):\n        sum = 0\n        while num > 0:\n            sum += num % 10\n            num = num // 10\n        return sum\n    \n    def is_positive(num):\n        return num > 0\n    \n    count = 0\n    for num in arr:\n        if is_positive(get_sum_of_digits(num)):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n - 1):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    beat_size = 4  # default beat size\n    for char in music_string:\n        if char == 'o':\n            result.append(beat_size)\n        elif char == 'o|':\n            result.append(beat_size // 2)\n        elif char == '.|':\n            result.append(beat_size // 4)\n    return result"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples = int(s.split()[0])\n    oranges = int(s.split()[2])\n    total = apples + oranges + n\n    return total - apples - oranges"}
{"task_id": "HumanEval/78", "completion": "    hex_key = {0: 0, 1: 0, 2: 1, 3: 1, 4: 0, 5: 1, 6: 1, 7: 1, 8: 0, 9: 0, 'A': 1, 'B': 11, 'C': 0, 'D': 13, 'E': 0, 'F': 0}\n    return hex_key[num]\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef countPrimeDigits(num: str) -> int:\n    count = 0\n    for char in num:\n        digit = hex_key(char)\n        if is_prime(digit):\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    start_one = [0] * 10\n    end_one = [0] * 10\n    start_one[1] = 1\n    end_one[1] = 1\n    for i in range(2, 10):\n        start_one[i] = start_one[i // 10] + end_one[i // 10]\n        end_one[i] = start_one[i // 10]\n    for i in range(1, 10):\n        count += start_one[i] * end_one[i]\n    return count"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    sentences = S.split(\".\") + S.split(\"?\") + S.split(\"!\")\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if n % 2 == 0:\n            next_level = 2 * i\n        else:\n            next_level = 2 * i + 1\n        result.append(next_level)\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    def get_sum_of_digits(n):\n        sum = 0\n        abs_n = abs(n)\n        while abs_n > 0:\n            sum += abs_n % 10\n            abs_n //= 10\n        return sum\n\n    count = 0\n    for num in arr:\n        if get_sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    ans = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    ans += 1\n    return ans"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for token in music_string.split():\n        if token == 'o':\n            beats.append(4)\n        elif token == 'o|':\n            beats.append(2)\n        elif token == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples = 0\n    oranges = 0\n    mango = 0\n    for i in s.split():\n        if i.isdigit():\n            if \"apples\" in i:\n                apples = int(i)\n            if \"oranges\" in i:\n                oranges = int(i)\n            if \"mango\" in i:\n                mango = int(i)\n    return n - apples - oranges - mango"}
{"task_id": "HumanEval/78", "completion": "    if num == 'A':\n        return 10\n    if num == 'B':\n        return 11\n    if num == 'C':\n        return 12\n    if num == 'D':\n        return 13\n    if num == 'E':\n        return 14\n    if num == 'F':\n        return 15\n    return int(num)\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef countPrimesHexDigits(num):\n    count = 0\n    for digit in num:\n        if hex_key(digit) in {2, 3, 5, 7, 11, 13}:\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    total = 0\n    start_one = int(\"1\" + \"0\"*(n-1))\n    end_one = int(\"1\" + \"0\"*n)\n    \n    for i in range(start_one, end_one):\n        if str(i).startswith(\"1\") or str(i).endswith(\"1\"):\n            total += 1\n    return total"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    for sentence in S.split('.|?|!'):\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    current_level = n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            current_level += 2\n        else:\n            current_level += 2 * (i + 1)\n        result.append(current_level)\n    return result"}
{"task_id": "HumanEval/107", "completion": "    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def count_palindromes(nums):\n        even, odd = 0, 0\n        for num in nums:\n            if num % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        return (even, odd)\n\n    nums = [i for i in range(1, n+1) if is_palindrome(i)]\n    return count_palindromes(nums)"}
{"task_id": "HumanEval/108", "completion": "    def has_positive_sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num))) > 0\n\n    count = 0\n    for num in arr:\n        if has_positive_sum_of_digits(num):\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(7) in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    count = 0\n\tfor i in range(len(s)-1):\n\t\tif s[i] == ' ':\n\t\t\tcontinue\n\t\tif s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u':\n\t\t\tcount += int(s[i+1])\n\treturn n - count"}
{"task_id": "HumanEval/78", "completion": "    if num=='A':\n        return 10\n    elif num=='B':\n        return 11\n    elif num=='C':\n        return 12\n    elif num=='D':\n        return 13\n    elif num=='E':\n        return 14\n    elif num=='F':\n        return 15\n    else:\n        return int(num)\n    \ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_prime_hexadecimal_digits(hex_num: str) -> int:\n    count = 0\n    for hex_digit in hex_num:\n        digit = hex_key(hex_digit)\n        if digit in [2,3,5,7,11,13] or is_prime(digit):\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(1, 10):\n        if str(i) in set(str(x) for x in range(10**(n-1), 10**n)):\n            count += 1\n    return count\n\n\ndef count_ones(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    if n % 2 == 0:\n        return [n//2+1] + [x+1 for x in range(n//2)]\n    else:\n        return [n//2+1] + [x+1 for x in range(n//2+1)]"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n        elif num < 0:\n            num_str = str(num)\n            first_digit = int(num_str[0])\n            if first_digit < 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    for note in music_string.split():\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples = int(s.split('apples')[0])\n    oranges = int(s.split('oranges')[1])\n    return n - apples - oranges"}
{"task_id": "HumanEval/78", "completion": "    return {0: 0, 1: 0, 2: 1, 3: 1, 4: 2, 5: 1, 6: 2, 7: 1, 8: 3, 9: 1, \"A\": 2, \"B\": 3, \"C\": 1, \"D\": 3, \"E\": 1, \"F\": 2}\n\ndef is_prime(n):\n\tif n <= 1:\n\t\treturn False\n\tif n <= 3:\n\t\treturn True\n\tif n % 2 == 0 or n % 3 == 0:\n\t\treturn False\n\ti = 5\n\twhile i * i <= n:\n\t\tif n % i == 0 or n % (i + 2) == 0:\n\t\t\treturn False\n\t\ti += 6\n\treturn True\n\ndef count_hex_prime_digits(num: str) -> int:\n    count = 0\n    hex_digits = hex_key(num)\n    for char in num:\n        if hex_digits.get(char) is not None and is_prime(hex_digits.get(char)):\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 0\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 9\n        else:\n            count += 1\n    return count\n\ndef starts_one(n):\n    if n == 1:\n        return 1\n    count = 0\n    for i in range(1, 10):\n        count += 1\n    return count\n\ndef ends_one(n):\n    if n == 1:\n        return 1\n    count = 0\n    for i in range(1, 10):\n        count += 1\n    return count\n\ndef count_ones(n):\n    count = 0\n    count += starts_one_ends(n-1) * 2\n    count += starts_one(n-1)\n    count += ends_one(n-1)\n    return count"}
{"task_id": "HumanEval/91", "completion": "    boredom = 0\n    sentences = S.split(\".\")\n    for sentence in sentences:\n        if sentence.startswith(\"I \"):\n            boredom += 1\n    return boredom"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    if n % 2 == 0:\n        base = 2\n    else:\n        base = 1\n    for i in range(n):\n        result.append(base + (i * 2))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return count_even, count_odd"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    max_count = 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    max_count += 1\n    return max_count"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples = int(s.split('apples')[0].strip())\n    oranges = int(s.split('oranges')[0].strip())\n    mangoes = n - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/78", "completion": "    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits = '0123456789ABCDEF'\n    count = 0\n    for digit in num:\n        if digit in hex_digits:\n            if int(digit) in primes:\n                count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split(\".\") + S.split(\"?\") + S.split(\"!\")\n    count = 0\n    for sentence in sentences:\n        if sentence.strip() and sentence.strip().startswith(\"I\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    if n % 2 == 0:\n        for i in range(1, n+1, 2):\n            result.append(i)\n    else:\n        for i in range(1, n+1, 2):\n            result.append(i+1)\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            count_even += 1\n        elif str(i) == str(i)[::-1] and i % 2 != 0:\n            count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for num in range(n):\n        if num % 11 == 0 or num % 13 == 0:\n            if '7' in str(num):\n                count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    fruits = s.split(\" \")\n    apples = int(fruits[0])\n    oranges = int(fruits[2])\n    mango = n - apples - oranges\n    return mango"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    return hex_digits[num]\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef countPrimeHexDigits(hex_num: str) -> int:\n    count = 0\n    for digit in hex_num:\n        if hex_key(digit) in [2, 3, 5, 7, 11, 13]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(1, 10):\n        if i % 10 == 1:\n            count += 1\n    for i in range(1, 10):\n        if i % 10 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.|?|!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append((i//2)*(i+1))\n        else:\n            result.append((i//2)*i)\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    def sum_of_digits(n):\n        return sum([int(d) for d in str(n)])\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    max_count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    max_count += 1\n    return max_count"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    for note in music_string.split():\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n        else:\n            raise ValueError('Invalid note format')\n    return result"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for num in range(1, n):\n        if num % 11 == 0 or num % 13 == 0:\n            str_num = str(num)\n            if '7' in str_num:\n                count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples = int(s.split()[0])\n    oranges = int(s.split()[2])\n    mango = n - apples - oranges\n    return mango"}
{"task_id": "HumanEval/78", "completion": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\n    count = 0\n    for digit in num:\n        if int(digit, 16) in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    for i in range(len(S)):\n        if S[i] == 'I':\n            count += 1\n            if i < len(S) - 1 and (S[i+1] == '.' or S[i+1] == '?' or S[i+1] == '!'):\n                count -= 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    if n % 2 == 0:\n        current_number = n\n    else:\n        current_number = n + 1\n    for i in range(n):\n        result.append(current_number)\n        if current_number % 2 == 0:\n            current_number += 2\n        else:\n            current_number += 1\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        temp = i\n        reverse = 0\n        while i > 0:\n            last_digit = i % 10\n            reverse = reverse * 10 + last_digit\n            i = i // 10\n        if temp == reverse:\n            if temp % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            first_digit = -1\n        else:\n            first_digit = 1\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/17", "completion": "    music_list = music_string.split(' ')\n    beats = []\n    for note in music_list:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(2, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/67", "completion": "    fruit_count = {\"apple\": 0, \"orange\": 0, \"mango\": 0}\n    for word in s.split():\n        if word.endswith(\"apples\"):\n            fruit_count[\"apple\"] += int(word.replace(\"apples\", \"\"))\n        elif word.endswith(\"oranges\"):\n            fruit_count[\"orange\"] += int(word.replace(\"oranges\", \"\"))\n        elif word.endswith(\"mangoes\"):\n            fruit_count[\"mango\"] += int(word.replace(\"mangoes\", \"\"))\n    return n - fruit_count[\"apple\"] - fruit_count[\"orange\"] - fruit_count[\"mango\"]"}
{"task_id": "HumanEval/78", "completion": "    hex_key = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    return hex_key[num]\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_prime_digits(hex_num):\n    count = 0\n    for digit in hex_num:\n        decimal_val = hex_key(digit)\n        if is_prime(decimal_val):\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    start = 10**(n-1)\n    end = 10**n\n    for i in range(start, end):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.|?|!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    stones_in_level = n\n    for _ in range(n):\n        result.append(stones_in_level)\n        if stones_in_level % 2 == 0:\n            stones_in_level += 2\n        else:\n            stones_in_level += 1\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even = 0\n\todd = 0\n\tfor i in range(1, n+1):\n\t\tif i == int(str(i)[::-1]):\n\t\t\tif i % 2 == 0:\n\t\t\t\teven += 1\n\t\t\telse:\n\t\t\t\todd += 1\n\treturn (even, odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = 0\n\tfor i in range(1, n):\n\t\tfor j in range(i + 1, n):\n\t\t\tfor k in range(j + 1, n):\n\t\t\t\tif ((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0:\n\t\t\t\t\tcount += 1\n\treturn count"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples = int(s.split()[0])\n    oranges = int(s.split()[2])\n    mango = n - apples - oranges\n    return mango"}
{"task_id": "HumanEval/78", "completion": "    hex_digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    hex_key_dict = {hex_digit: i for i, hex_digit in enumerate(hex_digits)}\n    return hex_key_dict\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_prime_digits(hex_num: str) -> int:\n    hex_key_dict = hex_key(hex_num)\n    count = 0\n    for i in range(len(hex_num)):\n        if hex_num[i] in hex_key_dict:\n            hex_digit = hex_key_dict[hex_num[i]]\n            if is_prime(hex_digit):\n                count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.|?|!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    if n % 2 == 0:\n        num_stones = n + 2\n    else:\n        num_stones = n + 1\n    result.append(num_stones)\n    while num_stones >= 1:\n        if num_stones % 2 == 0:\n            num_stones += 2\n        else:\n            num_stones += 1\n        result.append(num_stones)\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for num in range(1, n+1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            digit_sum = -sum(int(digit) for digit in str(num))\n        else:\n            digit_sum = sum(int(digit) for digit in str(num))\n        if digit_sum > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    max_count = 0\n    count = 0\n    array = [i*i-i+1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (array[i] + array[j] + array[k]) % 3 == 0:\n                    count += 1\n    max_count = count\n    return max_count"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(7) in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples = int(s.split(\" \")[0])\n    oranges = int(s.split(\" \")[2])\n    return n - apples - oranges"}
{"task_id": "HumanEval/78", "completion": "    primes = [2, 3, 5, 7, 11, 13, 17, 19]\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count\n\ndef countPrimeDigits(num: str) -> int:\n    return hex_key(num)"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    start = 10 ** (n-1)\n    end = 10 ** n - 1\n    for i in range(start, end+1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split(\".\") + S.split(\"?\") + S.split(\"!\")\n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    if n % 2 == 0:\n        next_number = n\n    else:\n        next_number = n + 1\n    result.append(next_number)\n    for i in range(1, n):\n        if i % 2 == 0:\n            next_number += 2\n        else:\n            next_number += 1\n        result.append(next_number)\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n + 1):\n        temp = i\n        rev = 0\n        while temp > 0:\n            rev = rev * 10 + temp % 10\n            temp = temp // 10\n        if i == rev:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return count_even, count_odd"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num < 0:\n            continue\n        sum_digits = sum(int(digit) for digit in str(num))\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    if n % 3 != 0:\n\t\treturn 0\n\tcount = 0\n\tarr = [0] * 3\n\tarr[0] = 1\n\tfor i in range(1, n // 3 + 1):\n\t\tarr[1] = i * i - i + 1\n\t\tarr[2] = (n - i) * (n - i) + 1\n\t\tfor j in range(1, 3):\n\t\t\tfor k in range(j + 1, 3):\n\t\t\t\tif arr[j] + arr[k] % 3 == 0:\n\t\t\t\t\tcount += arr[j] + arr[k] // 3\n\treturn count"}
{"task_id": "HumanEval/17", "completion": "    music_string = music_string.replace('\\n', '')\n    music_list = music_string.split(' ')\n    beats = []\n    for item in music_list:\n        if item == 'o':\n            beats.append(4)\n        elif item == 'o|':\n            beats.append(2)\n        elif item == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for num in range(n):\n        if num % 11 == 0 or num % 13 == 0:\n            count += str(num).count('7')\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples = int(s.split(\" \")[0])\n    oranges = int(s.split(\" \")[2])\n    mangoes = n - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/78", "completion": "    primes = [2, 3, 5, 7, 11, 13, 17]\n    count = 0\n    for hex_digit in num:\n        hex_value = int(hex_digit, 16)\n        if hex_value in primes:\n            count += 1\n    return count\n\nprint(hex_key(\"AB\"))  # returns 1\nprint(hex_key(\"1077E\"))  # returns 2\nprint(hex_key(\"ABED1A33\"))  # returns 4\nprint(hex_key(\"123456789ABCDEF0\"))  # returns 6\nprint(hex_key(\"2020\"))  # returns 2"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    start_one = [0]*10\n    end_one = [0]*10\n    start_one[1] = 1\n    end_one[1] = 1\n    for i in range(2, 10):\n        start_one[i] = start_one[i-1] + end_one[i-1]\n        end_one[i] = start_one[i-1]\n    for i in range(1, n):\n        count += start_one[i] + end_one[i]\n    return count"}
{"task_id": "HumanEval/91", "completion": "    words = S.split()\n    boredom_count = 0\n    for word in words:\n        if word == \"I\":\n            boredom_count += 1\n            sentence_finish = False\n            for i in range(1, len(words)):\n                if words[i] in [\".\", \"!\", \"?\"]:\n                    sentence_finish = True\n                    break\n                if words[i] == \"I\":\n                    boredom_count += 1\n            if not sentence_finish:\n                boredom_count -= 1\n    return boredom_count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i*2)\n        else:\n            result.append((i+1)*2)\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        digit_sum = sum(int(digit) for digit in str(abs(num)))\n        if digit_sum > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    for ch in music_string:\n        if ch == 'o':\n            beats.append(4)\n        elif ch == 'o|':\n            beats.append(2)\n        elif ch == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            num_str = str(i)\n            if '7' in num_str:\n                count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples = int(s.split()[0])\n    oranges = int(s.split()[2])\n    mangoes = n - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/78", "completion": "    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for digit in num:\n        if digit in ['A', 'B', 'C', 'D', 'E', 'F']:\n            digit = 15\n        else:\n            digit = int(digit, 16)\n        if digit in primes:\n            count += 1\n    return count\n\n\n# Example Usage\nnum = \"AB\"\nprint(hex_key(num))  # Output: 1\n\nnum = \"1077E\"\nprint(hex_key(num))  # Output: 2\n\nnum = \"ABED1A33\"\nprint(hex_key(num))  # Output: 4\n\nnum = \"123456789ABCDEF0\"\nprint(hex_key(num))  # Output: 6\n\nnum = \"2020\"\nprint(hex_key(num))  # Output: 2"}
{"task_id": "HumanEval/83", "completion": "    start_one = [1] + [0]*9\n    end_one = [0]*10\n    start_one[1] = 1\n    end_one[1] = 1\n    for i in range(2, n+1):\n        temp = start_one\n        start_one = [0]*10\n        for j in range(1, 10):\n            start_one[j] = temp[j-1] + temp[j]\n        temp = end_one\n        end_one = [0]*10\n        for j in range(1, 10):\n            end_one[j] = temp[j-1] + temp[j]\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i%10 == 1 or i%10 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    for i in range(len(S)):\n        if S[i] == 'I':\n            end = i\n            while end < len(S) and S[end] != '.' and S[end] != '?' and S[end] != '!':\n                end += 1\n            if end - i > 1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(i*2)\n        else:\n            result.append(i*2+1)\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        sum_of_digits = sum(int(digit) for digit in str(abs(num)))\n        if sum_of_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    max_triples = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0:\n                    max_triples += 1\n    return max_triples"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    for i in range(0, len(music_string), 3):\n        if music_string[i] == 'o':\n            result.append(4)\n        elif music_string[i] == '.':\n            result.append(1)\n        elif music_string[i] == 'o' and music_string[i+1] == '|':\n            result.append(2)\n    return result"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    total_apples = 0\n    total_oranges = 0\n    total_mango = 0\n    for word in s.split():\n        if word.isdigit():\n            num = int(word)\n            if \"apples\" in word:\n                total_apples += num\n            elif \"oranges\" in word:\n                total_oranges += num\n            elif \"mango\" in word:\n                total_mango += num\n    return n - total_apples - total_oranges + total_mango"}
{"task_id": "HumanEval/78", "completion": "    hex_map = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    hex_num = int(num, 16)\n    decimal_num = int(str(hex_num), 2)\n    primes = [2, 3, 5, 7, 11, 13, 17]\n    for prime in primes:\n        if decimal_num % prime == 0:\n            return hex_map[num]\n    return 0"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i % 10 == 1 or (i // 10) % 10 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    for sentence in S.split('. | ? | !'):\n        if sentence.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(n):\n        if i%2 == 0:\n            result.append((i+1)*(i+2))//2)\n        else:\n            result.append((i+1)*(i+2)*(i+3))//6)\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for num in range(1, n+1):\n        temp = num\n        reverse = 0\n        while num > 0:\n            last_digit = num % 10\n            reverse = reverse * 10 + last_digit\n            num = num // 10\n        if temp == reverse:\n            if temp % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = 0\n    arr = []\n    for i in range(1, n + 1):\n        arr.append(i * i - i + 1)\n    \n    for i in range(1, n - 1):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    for note in music_string.split():\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n        else:\n            raise ValueError('Unexpected note: ' + note)\n    return result"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    apples = int(s.split(\"apples\")[0])\n    oranges = int(s.split(\"oranges\")[1])\n    total_fruits = apples + oranges\n    mango = n - total_fruits\n    return mango"}
{"task_id": "HumanEval/78", "completion": "    primes = {2, 3, 5, 7, 11, 13}\n    count = 0\n    for digit in num:\n        if digit.isdigit() and int(digit) in primes:\n            count += 1\n        elif digit in {'A', 'B', 'C', 'D', 'E', 'F'}:\n            count += 1\n    return count\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_primes_hex(s: str) -> int:\n    hex_digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    if not all(digit in hex_digits for digit in s):\n        return 0\n    count = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] in {'A', 'B', 'C', 'D', 'E', 'F'}:\n            count += 1\n        elif s[i].isdigit() and int(s[i]) > 1 and is_prime(int(s[i])):\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(1, 10):\n        if i % 10 == 1:\n            count += 1\n        for j in range(n - 1):\n            i = i * 10\n            if i % 10 == 1:\n                count += 1\n    return count"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('.|?|!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    if n % 2 == 0:\n        current = n\n    else:\n        current = n + 1\n    result.append(current)\n    for _ in range(1, n):\n        current += 2\n        result.append(current)\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    def sum_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sum(1 for num in arr if sum_digits(num) > 0)"}
{"task_id": "HumanEval/147", "completion": "    result = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0:\n                    result += 1\n    return result"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    for token in music_string.split():\n        if token == 'o':\n            result.append(4)\n        elif token == 'o|':\n            result.append(2)\n        elif token == '.|':\n            result.append(1)\n    return result"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(7) in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    total_fruits = n\n    apple_count = 0\n    orange_count = 0\n    mango_count = 0\n\n    parts = s.split()\n    for part in parts:\n        if part.isdigit():\n            if 'apples' in part.lower():\n                apple_count = int(part)\n            elif 'oranges' in part.lower():\n                orange_count = int(part)\n            elif 'mango' in part.lower():\n                mango_count = int(part)\n\n    return total_fruits - apple_count - orange_count - mango_count"}
{"task_id": "HumanEval/78", "completion": "    primes = [2, 3, 5, 7, 11, 13]\n    hex_digits = \"0123456789ABCDEF\"\n    count = 0\n    for digit in num:\n        if hex_digits.index(digit) in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(1, 10):\n        num = i\n        for j in range(1, n):\n            num = num * 10\n        if num % 10 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/91", "completion": "    sentences = S.split('. ')\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    stones = n\n    for i in range(1, n+1):\n        result.append(stones)\n        stones += 2 if stones % 2 == 1 else 1\n    return result"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for num in range(1, n+1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    max_count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0:\n                    max_count += 1\n    return max_count"}
{"task_id": "HumanEval/17", "completion": "    result = []\n    for note in music_string.split():\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n        else:\n            raise ValueError('Invalid musical note')\n    return result"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/67", "completion": "    count = 0\n    for i in s.split(' '):\n        if i.isdigit():\n            count += int(i)\n    return n - count"}
{"task_id": "HumanEval/78", "completion": "    if num == 'A':\n        return 10\n    elif num == 'B':\n        return 11\n    elif num == 'C':\n        return 12\n    elif num == 'D':\n        return 13\n    elif num == 'E':\n        return 14\n    elif num == 'F':\n        return 15\n    else:\n        return int(num, 16)\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_prime_hexadecimal_digits(num: str) -> int:\n    count = 0\n    for digit in num:\n        hex_val = hex_key(digit)\n        if is_prime(hex_val):\n            count += 1\n    return count"}
{"task_id": "HumanEval/83", "completion": "    start_one = 10**(n-1) + 1\n    end_one = 10**n - 1\n    count = start_one + end_one\n    return count\n\ndef starts_or_ends(n):\n    start_one = 10**(n-1) + 1\n    end_one = 10**n - 1\n    count = start_one + end_one\n    return count"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    sentence_start = False\n    for char in S:\n        if char in {'?', '!', '.'}:\n            sentence_start = False\n        elif char == 'I':\n            if sentence_start:\n                count += 1\n        else:\n            sentence_start = True\n    return count"}
{"task_id": "HumanEval/100", "completion": "    result = []\n    for i in range(1, n+1):\n        if n % 2 == 0:\n            result.append(i*2)\n        else:\n            result.append(i*2 - 1)\n    return result"}
{"task_id": "HumanEval/107", "completion": "    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            even_count += 1\n        elif str(i) == str(i)[::-1] and i % 2 != 0:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        total_sum = 0\n        num_str = str(abs(num))\n        for digit in num_str:\n            total_sum += int(digit)\n        if total_sum > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)-2):\n        if l[i] + l[i+1] + l[i+2] == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/48", "completion": "    text = ''.join(e for e in text if e.isalnum()).lower()\n    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for b in brackets:\n        if b == '<':\n            stack.append(b)\n        elif b == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return False\n    if l[0] == l[1]:\n        return False\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n        if not increasing and not decreasing:\n            return False\n    return True"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    return x % n == 0"}
{"task_id": "HumanEval/77", "completion": "    return a > 0 and a == round(a ** (1 / 3))"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return length in primes"}
{"task_id": "HumanEval/92", "completion": "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x == y + z"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n    \n    case = dict[list(dict.keys())[0]]\n    \n    for key in dict:\n        if dict[key].islower() != case.islower():\n            return False\n    \n    return True"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    return arr[-1] >= arr[-2]"}
{"task_id": "HumanEval/110", "completion": "    # Your code to determine whether lst1 can be made even goes here\n    return \"YES\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst[0] + lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    duplicates = set()\n    for num in lst:\n        if num in duplicates:\n            return False\n        duplicates.add(num)\n    lst.sort()\n    return lst == lst[:-1]"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    \n    if length <= 1:\n        return \"NO\"\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return bool(stack)"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    for i in range(1, n):\n        if (n - i) % 2 == 0 and i > 0:\n            return True\n    return False"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name[:file_name.find('.')].isalpha():\n        return 'No'\n    if file_name[file_name.find('.')+1:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    \n    if int(x_num)*int(n_num) % int(x_den) != 0:\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    if a == b:\n        return True\n    rotations = [a[i:] + a[:i] for i in range(len(a))]\n    return any(rot in a for rot in rotations)"}
{"task_id": "HumanEval/157", "completion": "    if a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    seen = set()\n    for i in range(len(l) - 2):\n        if -l[i] in seen:\n            return True\n        seen.add(l[i])\n    return False"}
{"task_id": "HumanEval/43", "completion": "    s = set()\n    for num in l:\n        if -num in s:\n            return True\n        s.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = decreasing = True\n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            decreasing = False\n        elif l[i] < l[i+1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/72", "completion": "    total_sum = sum(q)\n    if total_sum <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    return x == n**int(pow(x, 1/n))"}
{"task_id": "HumanEval/77", "completion": "    return a > 0 and (a ** (1/3)) == int(a ** (1/3))"}
{"task_id": "HumanEval/80", "completion": "    if len(s)<3:\n        return False\n    else:\n        for i in range(len(s)-2):\n            if s[i]==s[i+1]==s[i+2]:\n                return False\n        return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, length + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or y == z + x or z == x + y:\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            return True\n    return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    else:\n        keys = list(dict.keys())\n        is_lower = all(key.islower() for key in keys)\n        is_upper = all(key.isupper() for key in keys)\n        return is_lower or is_upper"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    odd_elements = [element for element in lst1 if element % 2 != 0]\n    for element in odd_elements:\n        if element in lst2:\n            lst1.remove(element)\n            lst2.remove(element)\n    return \"YES\" if all(element % 2 == 0 for element in lst1) else \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) < 2:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True\n\ndef has_duplicate_numbers(lst):\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start <= end:\n        length = end - start + 1\n        if length > 1:\n            for num in range(2, length):\n                if length % num == 0:\n                    return \"NO\"\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"}
{"task_id": "HumanEval/138", "completion": "    return n % 2 == 0 and n > 0"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 8:\n        return 'No'\n    if file_name.count('.') > 1:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if file_name[0].isdigit():\n        return 'No'\n    if not file_name[:file_name.find('.')].isalnum():\n        return 'No'\n    if file_name[file_name.find('.')+1:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    x_numerator = int(x.split(\"/\")[0])\n    x_denominator = int(x.split(\"/\")[1])\n    \n    n_numerator = int(n.split(\"/\")[0])\n    n_denominator = int(n.split(\"/\")[1])\n    \n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n    \n    if result_numerator % result_denominator == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    if a == b:\n        return True\n    return any(a.find(b[i:] + b[:i]) != -1 for i in range(len(b)))"}
{"task_id": "HumanEval/157", "completion": "    if a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    s = set()\n    for num in l:\n        complement = -num\n        if complement in s:\n            return True\n        s.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    text = text.lower()\n    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if not l:\n        return False\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    def is_palindromic(q):\n        return q == q[::-1]\n    if not is_palindromic(q):\n        return False\n    if sum(q) <= w:\n        return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x < 0:\n        return False\n    if n == 1 or x == 1:\n        return True\n    if x % n != 0:\n        return False\n    return is_simple_power(x // n, n)"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    for i in range(a+1):\n        if (i*i*i == a):\n            return True\n    return False"}
{"task_id": "HumanEval/80", "completion": "    if len(s)<3:\n        return False\n    for i in range(len(s)-2):\n        if s[i]==s[i+1] or s[i]==s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    def isprime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return isprime(length)"}
{"task_id": "HumanEval/92", "completion": "    return (x == y + z or x == z + y or y == x + z or y == z + x or z == x + y) and all(isinstance(num, int) for num in [x, y, z])"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n    else:\n        keys = list(dict.keys())\n        lower_keys = [key.lower() for key in keys]\n        upper_keys = [key.upper() for key in keys]\n        return lower_keys == upper_keys or lower_keys == keys or upper_keys == keys"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    if len(arr)==1:\n        return True\n    arr.sort()\n    return True if arr[0]==min(arr) else False"}
{"task_id": "HumanEval/110", "completion": "    odd_count = 0\n    for num in lst1:\n        if num % 2 != 0:\n            odd_count += 1\n    if odd_count % 2 != 0:\n        return \"NO\"\n    else:\n        return \"YES\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst[0] + lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    # Remove any duplicates\n    lst = list(set(lst))\n    \n    # Check if there are more than 1 duplicates\n    if len(lst) != len(set(lst)):\n        return False\n    \n    # Check if all numbers are in ascending order\n    return lst == sorted(lst)"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    return \"YES\" if length > 1 and isprime(length) else \"NO\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return n == sum(range(2, n+2, 2))"}
{"task_id": "HumanEval/141", "completion": "    file_name_split = file_name.split('.')\n    if len(file_name_split) != 2:\n        return 'No'\n    if not file_name_split[0].isalpha() or file_name_split[0].isdigit():\n        return 'No'\n    if file_name_split[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    num_x, den_x = int(x.split('/')[0]), int(x.split('/')[1])\n    num_n, den_n = int(n.split('/')[0]), int(n.split('/')[1])\n\n    new_den = den_x * den_n\n    new_num = num_x * den_n + num_n * den_x\n\n    return new_num % new_den == 0"}
{"task_id": "HumanEval/154", "completion": "    if a.find(b) != -1:\n        return True\n    for i in range(len(b)):\n        new_str = b[i:] + b[:i]\n        if a.find(new_str) != -1:\n            return True\n    return False"}
{"task_id": "HumanEval/157", "completion": "    if a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)-1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    s = set()\n    for i in range(len(l)-2):\n        if -l[i] in s:\n            return True\n        s.add(l[i])\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if not l:\n        return False\n    if len(l) == 1:\n        return True\n    \n    if l[1] > l[0]:\n        return all(l[i] < l[i+1] for i in range(len(l)-1))\n    elif l[1] < l[0]:\n        return all(l[i] > l[i+1] for i in range(len(l)-1))\n    else:\n        return True"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if n == 1:\n        return True\n    if x == n:\n        return True\n    return False"}
{"task_id": "HumanEval/77", "completion": "    if a == 0:\n        return True\n    n = int((a ** (1/3)))\n    return n ** 3 == a"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length == 0:\n        return False\n    if length == 1:\n        return False\n    if length == 2:\n        return True\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if x == y + z or y == z + x or z == x + y:\n        return all(isinstance(i, int) for i in [x, y, z])\n    return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    case = dict[next(iter(dict))]\n    if case.islower():\n        return all(key.islower() for key in dict)\n    elif case.isupper():\n        return all(key.isupper() for key in dict)\n    else:\n        return False"}
{"task_id": "HumanEval/109", "completion": "    if len(arr)==0:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    if len(lst1) != len(lst2):\n        return \"NO\"\n    else:\n        even_numbers = [num for num in lst1 if num % 2 == 0]\n        return \"YES\" if set(lst1).issubset(even_numbers) else \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) < 2:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start + 1\n        if length <= 1:\n            return \"NO\"\n        for i in range(2, length):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/138", "completion": "    for i in range(1, n):\n        if (i + 2) % 4 == 0 and i % 2 == 0 and (i + 2) / 2 % 2 == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    start, end = file_name.split('.')\n    if start == '' or start[0].isdigit():\n        return 'No'\n    if end not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    num_x = int(x.split(\"/\")[0])\n    den_x = int(x.split(\"/\")[1])\n    num_n = int(n.split(\"/\")[0])\n    den_n = int(n.split(\"/\")[1])\n    \n    if (num_x * num_n) % den_n == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    if len(a)!=len(b):\n        return False\n    return any(a.find(b+b[::-1][i:])!=-1 for i in range(len(b)))"}
{"task_id": "HumanEval/157", "completion": "    return a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        if op < 0:\n            return True\n        balance += op\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    s = set()\n    for num in l:\n        if -num in s:\n            return True\n        s.add(num)\n    return False"}
{"task_id": "HumanEval/43", "completion": "    s = set()\n    for num in l:\n        complement = -num\n        if complement in s:\n            return True\n        s.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    if not l:\n        return True\n    if len(l) == 1:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    \n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    power = 1\n    while power < x:\n        power *= n\n    return power == x"}
{"task_id": "HumanEval/77", "completion": "    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length == 0:\n        return False\n    for i in range(2, length + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if type(x) is int and type(y) is int and type(z) is int:\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    else:\n        for key in dict:\n            if not isinstance(key, str):\n                return False\n            else:\n                if not key.islower() and not key.isupper():\n                    return False\n        return True"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    total = 0\n    for num in lst1:\n        total += num\n    for num in lst2:\n        total -= num\n    return \"YES\" if total % 2 == 0 else \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return 'No'\n            else:\n                stack.pop()\n    if stack:\n        return 'No'\n    else:\n        return 'Yes'"}
{"task_id": "HumanEval/126", "completion": "    dups = set()\n    for num in lst:\n        if num in dups:\n            return False\n        dups.add(num)\n    return lst == sorted(lst)"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        return \"YES\" if length_is_prime(length) else \"NO\"\n    else:\n        return \"NO\"\n\ndef length_is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return True\n            stack.pop()\n    return False"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    for i in range(1, n):\n        if (n - i) % 2 == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/141", "completion": "    # Check if there are more than three digits in the file's name\n    if sum(1 for char in file_name if char.isdigit()) > 3:\n        return 'No'\n    # Check if the file's name contains exactly one dot '.'\n    if file_name.count('.') != 1:\n        return 'No'\n    # Check if the substring before the dot starts with a letter and is not empty\n    if not file_name.split('.')[0] or not file_name.split('.')[0][0].isalpha():\n        return 'No'\n    # Check if the substring after the dot is one of these: ['txt', 'exe', 'dll']\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    x_numerator, x_denominator = x.split(\"/\")\n    n_numerator, n_denominator = n.split(\"/\")\n    \n    product_numerator = int(x_numerator) * int(n_numerator)\n    product_denominator = int(x_denominator) * int(n_denominator)\n    \n    return product_numerator % product_denominator == 0"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    return b in a + a"}
{"task_id": "HumanEval/157", "completion": "    if a**2 == b**2 + c**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l) - 2):\n        if l[i] + l[i + 1] + l[i + 2] == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/48", "completion": "    filtered_text = ''.join(e for e in text if e.isalnum()).lower()\n    return filtered_text == filtered_text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    n = len(l)\n    i = 0\n    while i < n-1 and (l[i] < l[i+1] or l[i] > l[i+1]):\n        i += 1\n    return i == n-1"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    return sum(q) <= w and q == q[::-1]"}
{"task_id": "HumanEval/76", "completion": "    return x > 0 and n > 0 and x == n**int(math.log(x, n))"}
{"task_id": "HumanEval/77", "completion": "    n = int((a ** (1/3)) + 0.5)\n    return a == n ** 3"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    \n    # Check if length is a prime number\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(length)"}
{"task_id": "HumanEval/92", "completion": "    return x == y + z or y == z + x or z == x + y  and all(isinstance(num, int) for num in [x, y, z])"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    return all(isinstance(key, str) and key.islower() or key.isupper() for key in dict.keys())"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    arr.append(arr[0])\n    del arr[0]\n    return arr == sorted(arr)"}
{"task_id": "HumanEval/110", "completion": "    odd_numbers = [x for x in lst1 if x % 2 != 0]\n    even_numbers = [x for x in lst1 if x % 2 == 0]\n    if len(odd_numbers) != len(lst2):\n        return \"NO\"\n    for odd, even in zip(odd_numbers, even_numbers):\n        lst1.remove(odd)\n        lst1.remove(even)\n        lst2.remove(odd)\n        lst2.remove(even)\n        lst1.append(odd)\n        lst1.append(even)\n        lst2.append(odd)\n        lst2.append(even)\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            else:\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\ndef has_duplicate(lst):\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if length > 1:\n            for num in range(2, length):\n                if length % num == 0:\n                    return \"NO\"\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return stack"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 == 1:\n        return False\n    target = n // 2\n    return target % 2 == 0 and target >= 0"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('0') > 3 or file_name.count('1') > 3 or file_name.count('2') > 3 or file_name.count('3') > 3 or file_name.count('4') > 3 or file_name.count('5') > 3 or file_name.count('6') > 3 or file_name.count('7') > 3 or file_name.count('8') > 3 or file_name.count('9') > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name.split('.')[0][0].isalpha() or file_name.split('.')[0].isdigit():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    num1 = int(x.split('/')[0])\n\tden1 = int(x.split('/')[1])\n\tnum2 = int(n.split('/')[0])\n\tden2 = int(n.split('/')[1])\n\tif (num1 * num2) % den2 == 0 and (num1 * num2) % den2 != 0:\n\t\treturn True\n\telse:\n\t\treturn False"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    if a == b:\n        return True\n    rotations = [a[i:] + a[:i] for i in range(len(a))]\n    return any(word in a for word in rotations)"}
{"task_id": "HumanEval/157", "completion": "    if a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n\t\treturn False\n\tfor i in range(2, int(n**0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True"}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return False\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n        return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    power = int(math.log(x, n))\n    return power > 0 and n ** power == x"}
{"task_id": "HumanEval/77", "completion": "    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    else:\n        for i in range(len(s) - 2):\n            if s[i] == s[i + 1] or s[i] == s[i + 2]:\n                return False\n        return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, length+1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    return x == y + z or y == x + z or z == x + y"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    return all(isinstance(key, str) and key.islower() or key.isupper() for key in dict.keys())"}
{"task_id": "HumanEval/109", "completion": "    if len(arr)==0:\n\t\treturn True\n\tfor i in range(len(arr)-1):\n\t\tif arr[i] > arr[i+1]:\n\t\t\treturn False\n\treturn True"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = len(lst1) - even_count\n    \n    if even_count == len(lst1) and odd_count == len(lst2):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    return is_sorted(lst[1:])"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start + 1\n        if length < 2:\n            return \"NO\"\n        for i in range(2, length):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return True\n    return False"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 == 1:\n        return False\n    half = n // 2\n    even_sum = 0\n    for i in range(1, half + 1, 2):\n        even_sum += i\n    return even_sum == n"}
{"task_id": "HumanEval/141", "completion": "    # Your code to check the file name validity goes here\n    pass"}
{"task_id": "HumanEval/144", "completion": "    x_numerator = int(x.split(\"/\")[0])\n    x_denominator = int(x.split(\"/\")[1])\n    \n    n_numerator = int(n.split(\"/\")[0])\n    n_denominator = int(n.split(\"/\")[1])\n    \n    if (x_numerator * n_denominator == x_denominator * n_numerator):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n\t\treturn False\n\treturn b in a or b in a[::-1]"}
{"task_id": "HumanEval/157", "completion": "    if a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        if operation < 0 and balance < 0:\n            return True\n        elif operation < 0 and balance == 0:\n            return True\n        balance += operation\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "    l.sort()\n    for i in range(len(l) - 2):\n        if l[i] + l[i+1] + l[i+2] == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    if len(l) < 2:\n        return False\n    s = set()\n    for num in l:\n        complement = -num\n        if complement in s:\n            return True\n        s.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    if len(l) <= 1:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/72", "completion": "    return sum(q) <= w and q == q[::-1]"}
{"task_id": "HumanEval/76", "completion": "    return n**int(math.log(x, n)) == x"}
{"task_id": "HumanEval/77", "completion": "    b = a ** (1/3)\n    return b.is_integer()"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(length)"}
{"task_id": "HumanEval/92", "completion": "    return (x == y + z) or (y == z + x) or (z == x + y) and (isinstance(x, int) and isinstance(y, int) and isinstance(z, int))"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if type(key) != str:\n            return False\n        if key.islower() or key.isupper():\n            continue\n        else:\n            return False\n    return True"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    return arr == sorted(set(arr))"}
{"task_id": "HumanEval/110", "completion": "    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return 'No'\n                else:\n                    stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) < 2:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    for i in range(1, len(lst)):\n        if lst[i-1] > lst[i]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start + 1\n        if length <= 1:\n            return \"NO\"\n        else:\n            for i in range(2, length):\n                if length % i == 0:\n                    return \"NO\"\n            return \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return True\n            stack.pop()\n    return False"}
{"task_id": "HumanEval/138", "completion": "    return n % 2 == 0 and n > 0"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('0') > 3 or file_name.count('1') > 3 or file_name.count('2') > 3 or file_name.count('3') > 3 or file_name.count('4') > 3 or file_name.count('5') > 3 or file_name.count('6') > 3 or file_name.count('7') > 3 or file_name.count('8') > 3 or file_name.count('9') > 3:\n        return 'No'\n    else:\n        if file_name.count('.') != 1:\n            return 'No'\n        else:\n            if file_name[:file_name.find('.')].isalpha() == False:\n                return 'No'\n            else:\n                if file_name[file_name.find('.')+1:] in ['txt', 'exe', 'dll']:\n                    return 'Yes'\n                else:\n                    return 'No'"}
{"task_id": "HumanEval/144", "completion": "    x_numerator = int(x.split(\"/\")[0])\n    x_denominator = int(x.split(\"/\")[1])\n    n_numerator = int(n.split(\"/\")[0])\n    n_denominator = int(n.split(\"/\")[1])\n    \n    if (x_numerator * n_denominator == x_denominator * n_numerator):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    return b in a or b in a[::-1]"}
{"task_id": "HumanEval/157", "completion": "    return a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True"}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    s = set()\n    for num in l:\n        complement = -num\n        if complement in s:\n            return True\n        s.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    text = text.replace(' ', '').lower()\n    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    if len(l) <= 1:\n        return True\n    if l[0] == l[1]:\n        return False\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for b in brackets:\n        if b == '(':\n            stack.append(b)\n        elif b == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    return sum(q) <= w and q == q[::-1]"}
{"task_id": "HumanEval/76", "completion": "    return x > 0 and n > 0 and (x == n or x % n == 0)"}
{"task_id": "HumanEval/77", "completion": "    n = int((a ** (1 / 3)) + 0.5)\n    return n ** 3 == a"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    else:\n        return len(set(s[i:i+3])) == 3"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length == 0:\n        return False\n    elif length == 1:\n        return False\n    else:\n        i = 2\n        while i * i <= length:\n            if length % i == 0:\n                return False\n            i += 1\n        return True"}
{"task_id": "HumanEval/92", "completion": "    if type(x) == int and type(y) == int and type(z) == int:\n        return x == y + z or y == z + x or z == x + y\n    else:\n        return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    return all(isinstance(key, str) and key.islower() or key.isupper() for key in dict.keys())"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    arr.sort()\n    for i in range(n - 1):\n        if arr[i] != i + 1:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = len(lst1) - even_count\n    \n    if even_count < len(lst1):\n        return \"NO\"\n    \n    if even_count % 2 != 0 and odd_count % 2 != 0:\n        return \"NO\"\n    \n    return \"YES\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst[0] + lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True\n\ndef has_duplicates(lst):\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start + 1\n        if length < 2:\n            return \"NO\"\n        for i in range(2, length):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/138", "completion": "    even_sum = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            even_sum += i\n            if even_sum == n:\n                return True\n    return False"}
{"task_id": "HumanEval/141", "completion": "    file_name_split = file_name.split('.')\n    if len(file_name_split) != 2:\n        return 'No'\n    name, extension = file_name_split[0], file_name_split[1]\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if not name.isalpha() or len(name) == 0:\n        return 'No'\n    count = 0\n    for char in name:\n        if char.isdigit():\n            count += 1\n    if count > 3:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    x_numerator = int(x.split(\"/\")[0])\n\tx_denominator = int(x.split(\"/\")[1])\n\tn_numerator = int(n.split(\"/\")[0])\n\tn_denominator = int(n.split(\"/\")[1])\n\t\n\tproduct = x_numerator * n_numerator\n\tdivision = product / (x_denominator * n_denominator)\n\treturn division.is_integer()"}
{"task_id": "HumanEval/154", "completion": "    if b in a:\n        return True\n    if len(b) > len(a):\n        return False\n    b += b\n    for i in range(len(a)):\n        if a[i:i + len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/157", "completion": "    if (a**2) == (b**2) + (c**2):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    s = set()\n    for num in l:\n        complement = -num - num\n        if complement in s:\n            return True\n        s.add(num)\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    text = text.lower()\n    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for b in brackets:\n        if b == '<':\n            stack.append(b)\n        elif b == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    return n**int(log(x, n)) == x"}
{"task_id": "HumanEval/77", "completion": "    root = a ** (1/3)\n    return root.is_integer()"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    def isprime(n):\n        if n < 2:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    return isprime(length)"}
{"task_id": "HumanEval/92", "completion": "    if (x + y == z) and (x == int(x)) and (y == int(y)) and (z == int(z)):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n\t\treturn False\n\t\n\tkey_case = None\n\tfor key in dict:\n\t\tif key_case is None:\n\t\t\tkey_case = type(key)\n\t\telse:\n\t\t\tif key_case != type(key):\n\t\t\t\treturn False\n\treturn True"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    arr.sort()\n    return arr == [arr[-1]] * len(arr)"}
{"task_id": "HumanEval/110", "completion": "    odd_count1 = 0\n    odd_count2 = 0\n    for num in lst1:\n        if num % 2 != 0:\n            odd_count1 += 1\n    for num in lst2:\n        if num % 2 != 0:\n            odd_count2 += 1\n    if odd_count1 == 0 or odd_count2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/119", "completion": "    count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                count -= 1\n        if count < 0:\n            return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/126", "completion": "    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n    return True\n\ndef has_duplicates(lst):\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start + 1\n        if length < 2:\n            return \"NO\"\n        return \"YES\" if length_is_prime(length) else \"NO\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return True\n            stack.pop()\n    return False"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return n == sum(i for i in range(2, n + 1) if i % 2 == 0)"}
{"task_id": "HumanEval/141", "completion": "    valid_extensions = ['txt', 'exe', 'dll']\n    count_of_digits = 0\n    dot_count = 0\n    valid_starts = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    \n    for char in file_name:\n        if char.isdigit():\n            count_of_digits += 1\n        elif char == '.':\n            dot_count += 1\n    if count_of_digits > 3:\n        return 'No'\n    elif dot_count != 1:\n        return 'No'\n    elif dot_count == 1 and file_name[0] not in valid_starts:\n        return 'No'\n    elif file_name[dot_count + 1:] not in valid_extensions:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    x_num = int(x.split('/')[0])\n    x_den = int(x.split('/')[1])\n    n_num = int(n.split('/')[0])\n    n_den = int(n.split('/')[1])\n    return (x_num * n_num) % x_den == 0 and (n_num * x_den) % n_den == 0"}
{"task_id": "HumanEval/154", "completion": "    if b in a or b[::-1] in a:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/157", "completion": "    if a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    s = set()\n    for num in l:\n        complement = -num\n        if complement in s:\n            return True\n        s.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for i in l:\n        if i >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    if len(l) <= 2:\n        return True\n    if l[1] > l[0]:\n        for i in range(2, len(l)):\n            if l[i] < l[i-1]:\n                return False\n    else:\n        for i in range(2, len(l)):\n            if l[i] > l[i-1]:\n                return False\n    return True"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w:\n        if q == q[::-1]:\n            return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "    if x <= 0 or n <= 0:\n        return False\n    while x % n == 0:\n        x /= n\n    return x == 1"}
{"task_id": "HumanEval/77", "completion": "    n = round(a ** (1/3))\n    return n * n * n == a"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    return len(set(s)) >= 3"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(length)"}
{"task_id": "HumanEval/92", "completion": "    return (x + y == z) and (x == int(x)) and (y == int(y)) and (z == int(z))"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n\t\treturn False\n\treturn all(isinstance(key, str) and key.islower() or key.isupper() for key in dict.keys())"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if n==0:\n        return True\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst[0] + lst[1]:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if length < 2:\n        return \"NO\"\n    for i in range(2, length+1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return True\n            else:\n                stack.pop()\n    return False"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return n == sum(range(2, n+2, 2))"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if file_name[:file_name.find('.')].isalnum() == False or file_name[:file_name.find('.')][0].isalpha() == False:\n        return 'No'\n    if file_name[file_name.find('.')+1:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    x_num, x_den = int(x.split('/')[0]), int(x.split('/')[1])\n    n_num, n_den = int(n.split('/')[0]), int(n.split('/')[1])\n    \n    if x_den == 0 or n_den == 0:\n        return False\n    \n    result = (x_num * n_num) / (x_den * n_den)\n    \n    return result.is_integer()"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n\t\treturn False\n\tfor i in range(len(a)):\n\t\tif a.find(b) == -1:\n\t\t\treturn False\n\treturn True"}
{"task_id": "HumanEval/157", "completion": "    return a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)-1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    s = set()\n    for i in l:\n        complement = -i\n        if complement in s:\n            return True\n        s.add(i)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if not l:\n        return False\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for b in brackets:\n        if b == '(':\n            stack.append(b)\n        elif b == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    return x == n ** int(x ** 0.5)"}
{"task_id": "HumanEval/77", "completion": "    x = a ** (1/3)\n    return x.is_integer()"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(2, len(s)):\n        if s[i] == s[i-1] or s[i] == s[i-2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    prime = True\n    if length <= 1:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            prime = False\n            break\n    return prime"}
{"task_id": "HumanEval/92", "completion": "    return (x + y == z) and all(isinstance(num, int) for num in [x, y, z])"}
{"task_id": "HumanEval/95", "completion": "    keys = list(dict.keys())\n    if len(keys) == 0:\n        return False\n    case_type = keys[0].islower() or keys[0].isupper()\n    for key in keys:\n        if key.islower() != case_type or key.isupper() != case_type:\n            return False\n    return True"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    return \"YES\" if even_count == len(lst1) else \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst[0] + lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) < 2:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    return is_sorted(lst[1:])"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if length < 2:\n        return \"NO\"\n    for i in range(2, length):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return True\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/138", "completion": "    return n % 2 == 0 and (n % 4 != 0)"}
{"task_id": "HumanEval/141", "completion": "    digits_count = 0\n    dot_count = 0\n    extension = None\n    for char in file_name:\n        if char.isdigit():\n            digits_count += 1\n        elif char == '.':\n            dot_count += 1\n            extension = file_name.split('.')[1]\n    if digits_count > 3:\n        return 'No'\n    elif dot_count != 1:\n        return 'No'\n    elif not file_name[0].isalpha() and file_name[0] != '_':\n        return 'No'\n    elif extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    x_num = int(x.split('/')[0])\n    x_den = int(x.split('/')[1])\n    \n    n_num = int(n.split('/')[0])\n    n_den = int(n.split('/')[1])\n    \n    return (x_num * n_num) % x_den == 0 and (x_den * n_den) % 2 == 0"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    if a == b:\n        return True\n    rotations = [a[i:] + a[:i] for i in range(len(a))]\n    return b in rotations"}
{"task_id": "HumanEval/157", "completion": "    return (a**2 == b**2 + c**2) or (b**2 == a**2 + c**2) or (c**2 == a**2 + b**2)"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)-1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    seen = set()\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    return x == n**int(x**0.5)"}
{"task_id": "HumanEval/77", "completion": "    b = int(a ** (1/3))\n    return b ** 3 == a"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length <= 1:\n        return False\n    if length == 2:\n        return True\n    if length % 2 == 0:\n        return False\n    for i in range(3, int(length**0.5) + 1, 2):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    return x == y + z or x == z + y or y == z + x or y == x + z or z == x + y or z == y + x \n\n    # You can add more conditions here if needed"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n    else:\n        is_lower = all(key.islower() for key in dict)\n        is_upper = all(key.isupper() for key in dict)\n        return is_lower or is_upper"}
{"task_id": "HumanEval/109", "completion": "    if len(arr)==0:\n        return True\n    if arr[0]>=arr[1]:\n        return True\n    return False"}
{"task_id": "HumanEval/110", "completion": "    even_count = 0\n    odd_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    for num in lst2:\n        if num % 2 == 0:\n            even_count -= 1\n        else:\n            odd_count -= 1\n    return \"YES\" if even_count >= 0 and odd_count >= 0 else \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if length <= 1:\n        return \"NO\"\n    if length > 1 and length % 2 == 0:\n        return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return True\n            stack.pop()\n    return False"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return n == sum(range(2, n+1, 2))"}
{"task_id": "HumanEval/141", "completion": "    num_count = 0\n    dot_count = 0\n    valid_extensions = ['txt', 'exe', 'dll']\n    \n    for char in file_name:\n        if char.isdigit():\n            num_count += 1\n            if num_count > 3:\n                return 'No'\n        elif char == '.':\n            dot_count += 1\n            if dot_count > 1:\n                return 'No'\n        elif not (char.isalpha() or char.isdigit() or char == '.'):\n            return 'No'\n            \n    if dot_count != 1:\n        return 'No'\n    \n    if file_name[0].isdigit():\n        return 'No'\n    \n    if file_name[file_name.find('.') + 1:] not in valid_extensions:\n        return 'No'\n    \n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    x_numerator = int(x.split('/')[0])\n    x_denominator = int(x.split('/')[1])\n    n_numerator = int(n.split('/')[0])\n    n_denominator = int(n.split('/')[1])\n\n    if (x_numerator * n_denominator == n_numerator * x_denominator):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n\t\treturn False\n\tword = a + a\n\tif b in a or b in word:\n\t\treturn True\n\telse:\n\t\treturn False"}
{"task_id": "HumanEval/157", "completion": "    return a**2 == b**2 + c**2 or b**2 == c**2 + a**2 or c**2 == a**2 + b**2"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    for i in range(len(l) - 1):\n        if l[i] + l[i + 1] == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/48", "completion": "    text = text.lower()  # Convert text to lowercase for case-insensitive comparison\n    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    n = len(l)\n    i = 0\n    while (i + 1 < n and (l[i] < l[i + 1])):\n        i += 1\n    if (i == n - 1):\n        return True\n    while (i + 1 < n and (l[i] > l[i + 1])):\n        i += 1\n    return i == n - 1"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    if x < 0 or n < 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x"}
{"task_id": "HumanEval/77", "completion": "    x = int((a ** (1 / 3)) + 0.5)\n    return x ** 3 == a"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    if s == s[::-1]:\n        return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(length)"}
{"task_id": "HumanEval/92", "completion": "    if (x + y == z and isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) or (y + z == x and isinstance(y, int) and isinstance(z, int) and isinstance(x, int)):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    else:\n        if all(isinstance(key, str) and key.islower() for key in dict) or all(isinstance(key, str) and key.isupper() for key in dict):\n            return True\n        else:\n            return False"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    diff = [x for x in lst1 if x % 2 != 0]\n    return \"YES\" if set(diff).issubset(set(lst2)) else \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    if not stack:\n        return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/126", "completion": "    dups = set()\n    for num in lst:\n        if num in dups:\n            return False\n        dups.add(num)\n    return lst == sorted(lst)"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        return \"YES\" if isprime(length) else \"NO\"\n    else:\n        return \"NO\"\n\n\ndef isprime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return sum(range(2, n + 2, 2)) == n"}
{"task_id": "HumanEval/141", "completion": "    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name[:file_name.find('.')].isalpha():\n        return 'No'\n    if file_name[file_name.find('.')+1:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if any(char.isdigit() for char in file_name[:file_name.find('.')]):\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    num_x, den_x = x.split('/')\n    num_n, den_n = n.split('/')\n    \n    if (int(num_x) * int(num_n)) % int(den_x) == 0 and (int(num_n) * int(num_x)) % int(den_n) == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    if a.find(b) != -1:\n        return True\n    else:\n        for i in range(len(a)-1):\n            if a[i:i+len(b)] == b:\n                return True\n            if a[i+1:i+1+len(b)] == b:\n                return True\n    return False"}
{"task_id": "HumanEval/157", "completion": "    if a == b or a == c or b == c:\n        return True\n    return False"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(sqrt(n) + 1), 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    s = set()\n    for num in l:\n        complement = -num\n        if complement in s:\n            return True\n        s.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    cleaned_text = text.replace(' ', '').lower()\n    return cleaned_text == cleaned_text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if not l:\n        return True\n    if len(l) == 1:\n        return True\n    increase = decrease = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decrease = False\n        elif l[i] < l[i-1]:\n            increase = False\n    return increase or decrease"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    return sum(q) <= w and q == q[::-1]"}
{"task_id": "HumanEval/76", "completion": "    return n**int(math.log(x)/math.log(n)) == x"}
{"task_id": "HumanEval/77", "completion": "    return a == round(a ** (1 / 3))"}
{"task_id": "HumanEval/80", "completion": "    if len(s)<3:\n        return False\n    if len(s)%3!=0:\n        return False\n    return sorted(s)==sorted(s[3:]) and sorted(s[:3])!=sorted(s[3:])"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    def isprime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    return isprime(length)"}
{"task_id": "HumanEval/92", "completion": "    sum = x + y + z\n    if x == sum or y == sum or z == sum and all(isinstance(num, int) for num in [x, y, z]):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    return all(isinstance(key, str) and key.islower() or key.isupper() for key in dict.keys())"}
{"task_id": "HumanEval/109", "completion": "    if len(arr) == 0:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    arr.append(arr[0])\n    arr.pop(0)\n    return move_one_ball(arr)"}
{"task_id": "HumanEval/110", "completion": "    if len(lst1) != len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            if lst2[i] % 2 != 0:\n                lst1[i] = lst2[i]\n                lst2[i] = lst1[i]\n            else:\n                return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    for i in range(1, len(lst)):\n        if lst[i-1] > lst[i]:\n            return False\n    return True\n\ndef has_duplicates(lst):\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if length < 2:\n        return \"NO\"\n    if length == 2:\n        return \"YES\"\n    for i in range(2, length):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    target = n // 2\n    for i in range(1, target+1):\n        if target - i >= i:\n            return True\n    return False"}
{"task_id": "HumanEval/141", "completion": "    conditions = [\n        sum(1 for char in file_name if char.isdigit()) <= 3,\n        file_name.count('.') == 1,\n        file_name.split('.')[0][0].isalpha(),\n        file_name.split('.')[1] in ['txt', 'exe', 'dll']\n    ]\n    return 'Yes' if all(conditions) else 'No'"}
{"task_id": "HumanEval/144", "completion": "    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    \n    if (num_x * den_n) % den_x == 0 and (num_n * den_x) % den_n == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    if a.find(b) != -1:\n        return True\n    n = len(b)\n    for i in range(n):\n        x = b[i:] + b[:i]\n        if a.find(x) != -1:\n            return True\n    return False"}
{"task_id": "HumanEval/157", "completion": "    if a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)-1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n\t\treturn False\n\tfor i in range(2, int(n**0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True"}
{"task_id": "HumanEval/40", "completion": "    seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        seen.add(i)\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for i in l:\n        if i > t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if not l:\n        return True\n    \n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    \n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for b in brackets:\n        if b == '(':\n            stack.append(b)\n        elif b == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/76", "completion": "    if x < 0 or n < 0:\n        return False\n    if n == 1:\n        return x == 1\n    return x % n == 0"}
{"task_id": "HumanEval/77", "completion": "    root = a ** (1/3)\n\treturn root.is_integer()"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    s = s.lower()\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if (x == z - y) and (x > 0) and (y > 0) and (z > 0):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    lower_case = all(key.islower() for key in dict.keys())\n    upper_case = all(key.isupper() for key in dict.keys())\n    return lower_case or upper_case"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    if all(x % 2 == 0 for x in lst1) and all(x % 2 == 0 for x in lst2):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n        length = end - start + 1\n        if length < 2:\n            return \"NO\"\n        for i in range(2, length):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return n == sum([2]*4)"}
{"task_id": "HumanEval/141", "completion": "    count = 0\n    for char in file_name:\n        if char.isdigit():\n            count += 1\n    if count > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name.split('.')[0][0].isalpha():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    x_numerator = int(x.split('/')[0])\n    x_denominator = int(x.split('/')[1])\n    n_numerator = int(n.split('/')[0])\n    n_denominator = int(n.split('/')[1])\n\n    x_value = x_numerator * n_denominator\n    n_value = n_numerator * x_denominator\n\n    if x_value % 1 == 0 and n_value % 1 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    if a == b:\n        return True\n    else:\n        # Rotate b by 1 position\n        rotated = b[1:] + b[:1]\n        if rotated in a:\n            return True\n        else:\n            return False"}
{"task_id": "HumanEval/157", "completion": "    return a**2 == b**2 + c**2"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)-1):\n        if abs(numbers[i] - numbers[i+1]) <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        if operation < 0 and balance < 0:\n            return True\n        balance += operation\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    s = set()\n    for num in l:\n        if -num in s:\n            return True\n        s.add(num)\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) > w:\n        return False\n    if q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    power = int(math.log(x, n))\n\treturn power > 0 and n ** power == x"}
{"task_id": "HumanEval/77", "completion": "    n = int(a ** (1/3))\n    return n ** 3 == a"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    if len(s) % 3 != 0:\n        return False\n    for i in range(0, len(s), 3):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    def isprime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return isprime(length)"}
{"task_id": "HumanEval/92", "completion": "    if type(x) is int and type(y) is int and type(z) is int:\n        if x == y + z or y == z + x or z == x + y:\n            return True\n    return False"}
{"task_id": "HumanEval/95", "completion": "    if len(dict) == 0:\n        return False\n    \n    lower = all(key.islower() for key in dict)\n    upper = all(key.isupper() for key in dict)\n    \n    return lower or upper"}
{"task_id": "HumanEval/109", "completion": "    if len(arr)==0:\n        return True\n    else:\n        last = arr[-1]\n        arr = arr[:-1]\n        arr.insert(0, last)\n        if arr == sorted(arr):\n            return True\n        else:\n            return False"}
{"task_id": "HumanEval/110", "completion": "    odd_elements_in_lst1 = [num for num in lst1 if num % 2 != 0]\n    if len(odd_elements_in_lst1) == 0:\n        return \"YES\"\n    elif len(lst2) >= len(odd_elements_in_lst1):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            else:\n                stack.pop()\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) < 2:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    return is_sorted(lst[1:])"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start + 1\n        if length < 2:\n            return \"NO\"\n        else:\n            for i in range(2, length):\n                if length % i == 0:\n                    return \"NO\"\n            return \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return stack"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return n == sum(4 * [2])"}
{"task_id": "HumanEval/141", "completion": "    # Extract the substring before the dot\n    part1 = file_name.split('.')[0]\n    # Extract the substring after the dot\n    part2 = file_name.split('.')[1]\n\n    # Check if the conditions are met\n    if len(part1) > 3:\n        return 'No'\n    elif file_name.count('.') != 1:\n        return 'No'\n    elif part1[0].isdigit():\n        return 'No'\n    elif part2 not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    x_num = int(x.split('/')[0])\n    x_den = int(x.split('/')[1])\n    n_num = int(n.split('/')[0])\n    n_den = int(n.split('/')[1])\n\n    return (x_num * n_num) % x_den == 0 and (n_num * x_den) % n_den == 0"}
{"task_id": "HumanEval/154", "completion": "    if a.find(b) != -1:\n        return True\n    else:\n        for i in range(len(b)):\n            temp = b[i:] + b[:i]\n            if a.find(temp) != -1:\n                return True\n        return False"}
{"task_id": "HumanEval/157", "completion": "    if a**2 == b**2 + c**2 or b**2 == c**2 + a**2 or c**2 == a**2 + b**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)+1), 6):\n        if n % i == 0 or n %(i + 2) == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    seen = set()\n    for a in l:\n        if a == 0 and len(l) >= 3:\n            return True\n        for b in seen:\n            if -a - b == 0:\n                return True\n        seen.add(a)\n    return False"}
{"task_id": "HumanEval/43", "completion": "    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for b in brackets:\n        if b == '<':\n            stack.append(b)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if not l:\n        return True\n    direction = -1\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            if direction == 1:\n                return False\n            direction = 1\n        elif l[i] < l[i - 1]:\n            if direction == -1:\n                return False\n            direction = -1\n    return True"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"}
{"task_id": "HumanEval/72", "completion": "    return sum(q) <= w and q == q[::-1]"}
{"task_id": "HumanEval/76", "completion": "    if x <= 0:\n        return False\n    if x == 1:\n        return True\n    if x == n:\n        return True\n    return False"}
{"task_id": "HumanEval/77", "completion": "    if a <= 0:\n        return True\n    for i in range(1, a+1):\n        if i*i*i == a:\n            return True\n    return False"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    else:\n        for i in range(len(s)-2):\n            if s[i] == s[i+1] or s[i+1] == s[i+2]:\n                return False\n        return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    if length == 2:\n        return True\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    return (x == y + z) or (y == z + x) or (z == x + y) and all(isinstance(n, int) for n in [x, y, z])"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    keys = dict.keys()\n    lower_case = all(key.islower() for key in keys)\n    upper_case = all(key.isupper() for key in keys)\n    return lower_case or upper_case"}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    even_elements = [elem for elem in lst1 if elem % 2 == 0]\n    return \"YES\" if all(elem % 2 == 0 for elem in lst1) else \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) < 2:\n        return True\n    if lst[0] > lst[1]:\n        return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start + 1\n        if length <= 1:\n            return \"NO\"\n        if length > 1:\n            return \"YES\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) > 0"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    return n == sum(4 for _ in range(n // 2))"}
{"task_id": "HumanEval/141", "completion": "    # Your code to check the validity of the file name goes here\n    pass"}
{"task_id": "HumanEval/144", "completion": "    x_numerator = int(x.split('/')[0])\n    x_denominator = int(x.split('/')[1])\n    n_numerator = int(n.split('/')[0])\n    n_denominator = int(n.split('/')[1])\n    \n    result = x_numerator * n_denominator - x_denominator * n_numerator\n    \n    return result == 0"}
{"task_id": "HumanEval/154", "completion": "    if len(a) < len(b):\n        return False\n    for i in range(len(a)-len(b)+1):\n        if a[i:i+len(b)] == b or a[i+len(b):i+len(b)+len(b)] == b or a[i+len(b)+len(b):i+len(b)+len(b)+len(b)] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/157", "completion": "    if a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n\t\treturn False\n\tfor i in range(2, n):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True"}
{"task_id": "HumanEval/40", "completion": "    n = len(l)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    text = text.lower()  # Convert string to lowercase for case-insensitive comparison\n    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "    if not l:\n        return True\n    flag = 1\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            if flag < 0:\n                return False\n            flag = 1\n        elif l[i] < l[i - 1]:\n            if flag > 0:\n                return False\n            flag = -1\n        else:\n            return False\n    return True"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "completion": "    y = x\n    i = 1\n    while y >= n:\n        if y % n == 0:\n            if y == n:\n                return True\n        i += 1\n        y = y - n\n    return False"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    else:\n        cube_root = a ** (1/3)\n        return cube_root.is_integer()"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/92", "completion": "    if (x == y + z or x == z + y or y == x + z or y == z + x or z == x + y or z == y + x):\n        return all(isinstance(num, int) for num in [x, y, z])\n    return False"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    return all(isinstance(key, str) and key.islower() or key.isupper() for key in dict)"}
{"task_id": "HumanEval/109", "completion": "    if len(arr)==0:\n\t\treturn True\n\tif arr[len(arr)-1]<=arr[0]:\n\t\treturn True\n\treturn False"}
{"task_id": "HumanEval/110", "completion": "    if len(lst1) == 0 or len(lst2) == 0:\n        return \"NO\"\n\n    odd_elements = [x for x in lst1 if x % 2 != 0]\n    odd_elements += [x for x in lst2 if x % 2 != 0]\n\n    return \"YES\" if len(odd_elements) == 0 else \"NO\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            else:\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "completion": "    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start + 1\n    if length <= 1:\n        return \"NO\"\n    if length > 1:\n        return length % 2 == 1 and \"YES\" or \"NO\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return True\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/138", "completion": "    return n % 2 == 0"}
{"task_id": "HumanEval/141", "completion": "    count = 0\n    dot_pos = -1\n    for i in range(len(file_name)):\n        if file_name[i] == '.':\n            dot_pos = i\n            break\n        if file_name[i].isdigit():\n            count += 1\n    if count > 3:\n        return 'No'\n    if dot_pos == -1 or dot_pos == len(file_name) - 1 or not file_name[:dot_pos].isalpha() or file_name[dot_pos+1:].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/144", "completion": "    x_numerator = int(x.split(\"/\")[0])\n    x_denominator = int(x.split(\"/\")[1])\n    n_numerator = int(n.split(\"/\")[0])\n    n_denominator = int(n.split(\"/\")[1])\n\n    if (x_numerator * n_denominator == n_numerator * x_denominator):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n        return False\n    if a == b:\n        return True\n    rotations = a + a\n    return b in rotations"}
{"task_id": "HumanEval/157", "completion": "    return a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2"}
{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)-1):\n        if abs(numbers[i] - numbers[i+1]) <= threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/3", "completion": "    for operation in operations:\n        if operation < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n    seen = set()\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/43", "completion": "    s = set()\n    for num in l:\n        if -num in s:\n            return True\n        s.add(num)\n    return False"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/72", "completion": "    if sum(q) > w:\n        return False\n    return q == q[::-1]"}
{"task_id": "HumanEval/76", "completion": "    return x > 0 and x == n**int(math.log(x, n))"}
{"task_id": "HumanEval/77", "completion": "    x = a ** (1 / 3)\n    return x.is_integer()"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i+2] == s[i]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "completion": "    length = len(string)\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(length)"}
{"task_id": "HumanEval/92", "completion": "    return (x == z - y or y == z - x or z == x + y) and all(isinstance(num, int) for num in [x, y, z])"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n    return all(isinstance(key, str) and key.islower() or key.isupper() for key in dict)"}
{"task_id": "HumanEval/109", "completion": "    if len(arr)==0:\n        return True\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "completion": "    odd_numbers = []\n    for num in lst1 + lst2:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return \"NO\" if odd_numbers else \"YES\""}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        else:  # char == ')'\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/126", "completion": "    duplicates = set()\n    for num in lst:\n        if num in duplicates:\n            return False\n        duplicates.add(num)\n    return lst == sorted(lst)"}
{"task_id": "HumanEval/127", "completion": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        return \"YES\" if length > 1 and length % 2 == 1 else \"NO\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return True\n            else:\n                stack.pop()\n    return False"}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n        return False\n    total = n\n    for i in range(1, n+1, 2):\n        if total - i < 0 or total - i > n:\n            break\n        if total - i == 0:\n            return True\n    return False"}
{"task_id": "HumanEval/141", "completion": "    # Add your code here\n    pass"}
{"task_id": "HumanEval/144", "completion": "    x_num = int(x.split('/')[0])\n    x_den = int(x.split('/')[1])\n    n_num = int(n.split('/')[0])\n    n_den = int(n.split('/')[1])\n    \n    if (x_num * n_num) % x_den == 0 and (x_num * n_num) % n_den == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/154", "completion": "    if b in a:\n        return True\n    n = len(b)\n    for i in range(n):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    return False"}
{"task_id": "HumanEval/157", "completion": "    if a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)-1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    return (sum(numbers), (numbers[0] * (1 if len(numbers) == 1 else product(numbers[1:]))))\n\ndef product(numbers: List[int]) -> int:\n    result = numbers[0]\n    for num in numbers[1:]:\n        result *= num\n    return result"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [val for val in values if isinstance(val, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero of polynomial defined by its coefficients xs.\n    Returns only one zero point, even if there are multiple.\n    \"\"\"\n    n = len(xs)\n    a, b = xs[0], xs[1]\n    for i in range(2, n):\n        a, b = b, a * (xs[i] - b) / (a - b)\n    return -b / a"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    for i in range(0, n, 3):\n        if i+2 < n:\n            l[i], l[i+2] = l[i+2], l[i]\n    l.sort()\n    return l"}
{"task_id": "HumanEval/37", "completion": "    l1 = l[::2]\n    l1.sort()\n    l2 = l[1::2]\n    l3 = l1 + l2\n    return l3"}
{"task_id": "HumanEval/39", "completion": "    a, b = 0, 1\n    count = 0\n    while True:\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    s = (a + h) / 2\n    area = (s * (s - a) * (s - h)) / 4\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c = 0, 2, 0\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]"}
{"task_id": "HumanEval/49", "completion": "    res = pow(n, p - 2, p)\n    return res"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    s1, s2 = set(l1), set(l2)\n    return list(s1.intersection(s2))"}
{"task_id": "HumanEval/59", "completion": "    max_prime = 0\n    while n % 2 == 0:\n        max_prime = 2\n        n = n // 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n // i\n    if n > 2:\n        max_prime = n\n    return max_prime"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/62", "completion": "    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    digits = list(map(int, num_str))\n    if shift < len(digits):\n        digits = digits[shift:] + digits[:shift]\n    elif shift == len(digits):\n        digits = digits[shift:] + digits[:shift]\n    else:\n        digits = digits[len(digits)-shift:] + digits[:len(digits)-shift]\n    return ''.join(map(str, digits))"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n\t\tif a % i == 0:\n\t\t\tprime1 = i\n\t\t\twhile (prime1 <= a):\n\t\t\t\tif a % prime1 == 0:\n\t\t\t\t\tprime2 = a // prime1\n\t\t\t\t\twhile (prime2 > 1):\n\t\t\t\t\t\tif (a % prime2 == 0):\n\t\t\t\t\t\t\tprime3 = a // prime2\n\t\t\t\t\t\t\twhile (prime3 > 1):\n\t\t\t\t\t\t\t\tif (a % prime3 == 0):\n\t\t\t\t\t\t\t\t\treturn True\n\t\t\t\t\t\t\t\tprime3 -= 1\n\t\t\t\t\t\t\tprime3 = a // prime2\n\t\t\t\t\t\tprime2 -= 1\n\t\t\t\t\treturn False\n\t\t\t\tprime1 += 1\n\treturn False"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/84", "completion": "    total_sum = 0\n    while N > 0:\n        digit = N % 10\n        total_sum += digit\n        N = N // 10\n    return bin(total_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(1, len(lst), 2):\n        result += lst[i]\n    return result"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    row_index = 0\n    for row in lst:\n        col_index = 0\n        for col in row:\n            if col == x:\n                result.append((row_index, col_index))\n            col_index += 1\n        row_index += 1\n    return sorted(result, key=lambda item: (item[0], -item[1]))"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    return unit_digit_a * unit_digit_b"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + (num > 0 and 0.5 or -0.5))"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -2):\n        if i <= y and i >= x:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    rounded_avg = round(avg)\n    return bin(rounded_avg)[2:]"}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 0:\n            return 1\n        else:\n            return i * factorial(i-1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    result = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/123", "completion": "    if n == 1:\n        return [1]\n    seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n not in seq:\n            seq.append(n)\n    return [x for x in seq if x % 2 != 0]"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    signs = [1, -1, 0]\n    arr.sort()\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= signs[num + 1]\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [0]\n    if n == 1:\n        return [0, 1]\n    if n == 2:\n        return [0, 1, 1]\n    a, b, c = 0, 1, 1\n    res = [0, 1, 1]\n    for i in range(3, n + 1):\n        d = a + b + c\n        res.append(d)\n        a, b, c = b, c, d\n    return res"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num + 0.5) ** 2\n    return result"}
{"task_id": "HumanEval/136", "completion": "    min_positive = float('inf')\n    max_negative = float('-inf')\n    for num in lst:\n        if num > 0 and num < min_positive:\n            min_positive = num\n        if num < 0 and num > max_negative:\n            max_negative = num\n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a == b:\n        return None\n    return max(a, b)"}
{"task_id": "HumanEval/139", "completion": "    if n < 0:\n        return -1\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result"}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += lst[i] ** 3\n    return result"}
{"task_id": "HumanEval/145", "completion": "    def get_sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    nums.sort(key=lambda x: (get_sum_of_digits(x), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 != 0 and (num % 100) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1, index2 = -1, -1\n    for i in range(len(planets)):\n        if planets[i] == planet1:\n            index1 = i\n        elif planets[i] == planet2:\n            index2 = i\n    if index1 == -1 or index2 == -1:\n        return ()\n    if index1 > index2:\n        return planets[index2 + 1:index1 + 1]\n    else:\n        return planets[index1 + 1:index2 + 1]"}
{"task_id": "HumanEval/150", "completion": "    if n % 2 != 0 and n % 3 != 0:\n\t\treturn x\n\telse:\n\t\treturn y"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if num > 0 and num % 2 != 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    while num:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)"}
{"task_id": "HumanEval/159", "completion": "    if need <= remaining:\n        return [number + need, 0]\n    else:\n        return [number + remaining, need - remaining]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    i = 1\n    while i < len(operand):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n        i += 1\n    return result"}
{"task_id": "HumanEval/163", "completion": "    min_num = min(a, b)\n    max_num = max(a, b)\n    return [i for i in range(min_num, max_num + 1) if all(int(digit) % 2 == 0 for digit in str(i)) and i >= min_num]"}
{"task_id": "HumanEval/2", "completion": "    return number % 1"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers), 2):\n        result.append(delimeter)\n        result.append(numbers[i])\n    if len(numbers) % 2 == 1:\n        result.append(delimeter)\n        result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    sum = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    return sum, product"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds x such that poly(x) = 0.\n    \"\"\"\n    n = len(xs)\n    for i in range(1, n, 2):\n        x = -xs[i] / xs[i - 1]\n        if poly(xs, x) == 0:\n            return x\n    return None"}
{"task_id": "HumanEval/33", "completion": "    result = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            result.append(l[i])\n        else:\n            result.append(l[i])\n    return result"}
{"task_id": "HumanEval/37", "completion": "    n = len(l)\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(l[i])\n        else:\n            result.append(l[i] if i == 0 else sorted(result)[i-1])\n    return result"}
{"task_id": "HumanEval/39", "completion": "    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        a, b = 2, 3\n        for _ in range(3, n+1):\n            a, b = b, a+b\n        return b"}
{"task_id": "HumanEval/41", "completion": "    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    area = 0.5 * a * h\n    return area"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 2, 0\n    if n == 0:\n        return a\n    for _ in range(2, n+1):\n        a, b, c, d = b, c, d, a+b+c+d\n    return b"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n\tl.sort()\n\tif n % 2 == 0:\n\t\treturn (l[n//2 - 1] + l[n//2]) / 2.0\n\telse:\n\t\treturn l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    result = pow(n, p-2, p)\n    return result"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = set1.intersection(set2)\n    return sorted(common_elements)"}
{"task_id": "HumanEval/59", "completion": "    for i in range(n, 0, -1):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/62", "completion": "    if len(xs) < 2:\n        return []\n    result = [xs[1]]\n    for i in range(1, len(xs)):\n        result.append(result[-1] + xs[i] * i)\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    num_len = len(num_str)\n    shift = shift % num_len\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    if a < 3:\n        return False\n    for i in range(2, int(a**0.5)+1):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    grade_points = {\n        'A': 4.0, 'A+': 4.0,\n        'B': 3.7, 'B+': 3.7,\n        'C': 3.3, 'C-': 3.3,\n        'D': 2.7, 'D+': 2.7,\n        'E': 2.3, 'F': 2.0, 'F+': 2.0, 'F-': 1.7,\n        'G': 1.3, 'H': 1.0, 'I': 0.7, 'J': 0.0\n    }\n\n    letter_grades = []\n    for gpa in grades:\n        for grade, points in grade_points.items():\n            if gpa >= points:\n                letter_grades.append(grade)\n                break\n    return letter_grades"}
{"task_id": "HumanEval/84", "completion": "    result = bin(N)[2:]\n    return result"}
{"task_id": "HumanEval/85", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            result.append((i, lst[i].index(x)))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    if n <= 1:\n        return []\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    return [i for i in range(2, n) if primes[i]]"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    number = float(value)\n    if number < 0:\n        return -int(-number + 0.5)\n    else:\n        return int(number + 0.5)"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x - 1, -2):\n        if i <= 0:\n            return -1\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = n + m\n    average = total // 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:]\n    return binary_average"}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        else:\n            return i * factorial(i - 1)\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    odd_sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            odd_sum += lst[i]\n    return odd_sum"}
{"task_id": "HumanEval/123", "completion": "    if n <= 0:\n        return []\n    odd_numbers = []\n    while n > 0:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3 * n + 1\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    signs = [1 if num != 0 else 0 for num in arr]\n    prod = 1\n    for sign in signs:\n        prod *= sign\n    return abs(sum(arr)) * prod"}
{"task_id": "HumanEval/130", "completion": "    if n <= 2:\n        return [1, 3]\n    if n == 3:\n        return [1, 3, 2, 8]\n    t = [1, 3, 2, 8]\n    for i in range(4, n + 1):\n        t.append(t[i - 1] + t[i - 2] + t[i - 3])\n    return t"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    even_count = 0\n    while n:\n        digit = n % 10\n        n = n // 10\n        if digit % 2 != 0:\n            product *= digit\n        else:\n            even_count += 1\n    return product if even_count == 0 else 0"}
{"task_id": "HumanEval/133", "completion": "    sum = 0\n    for num in lst:\n        num = round(num)\n        sum += num * num\n    return sum"}
{"task_id": "HumanEval/136", "completion": "    min_positive = None\n    max_negative = None\n    \n    for num in lst:\n        if num > 0 and (min_positive is None or num < min_positive):\n            min_positive = num\n        elif num < 0 and (max_negative is None or num > max_negative):\n            max_negative = num\n    \n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, float) and isinstance(b, float):\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        a_num = float(a.replace(',', '.'))\n        b_num = float(b.replace(',', '.'))\n        return a_num if a_num > b_num else b_num\n    else:\n        return None"}
{"task_id": "HumanEval/139", "completion": "    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact"}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += lst[i]**3\n    return result"}
{"task_id": "HumanEval/145", "completion": "    def get_sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    nums.sort(key=lambda x: (get_sum_of_digits(x), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            digits = list(str(num))\n            first = digits[0]\n            last = digits[-1]\n            if first % 2 != 0 and last % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 < 0 or index2 < 0:\n        return ()\n    return planets[index1+1:index2]"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    odd_numbers = [num for num in lst if isinstance(num, int) and num % 2 != 0]\n    squared_sum = sum([num**2 for num in odd_numbers])\n    return squared_sum"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    if remaining < need:\n        return [remaining + number, 0]\n    else:\n        return [remaining + need, remaining - need]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for num in range(a, b+1):\n        num_str = str(num)\n        for digit in num_str:\n            if int(digit) % 2 == 0:\n                even_digits.append(int(digit))\n    return sorted(even_digits)"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum([abs(x - mean) for x in numbers]) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce((lambda x, y: x * y), numbers)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = None\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    n = len(xs)\n    if n % 2 != 0 or xs[n - 1] != 0:\n        return None  # No solution exists\n    left, right = 0, 1\n    epsilon = 0.0001\n    while right - left > epsilon:\n        mid = (left + right) / 2\n        if poly(xs, mid) > 0:\n            left = mid\n        else:\n            right = mid\n    return round(mid, 2)"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    result = []\n    for i in range(n):\n        if i % 3 != 0:\n            result.append(l[i])\n        else:\n            result.append(l[i % 3])\n    return result"}
{"task_id": "HumanEval/37", "completion": "    res = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            res.append(l[i])\n        else:\n            res.append(l[i])\n    res.sort()\n    return res"}
{"task_id": "HumanEval/39", "completion": "    a, b = 0, 1\n    for _ in range(2):\n        a, b = b, a + b\n    for _ in range(n-1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    area = (a * h) / 2\n    return area"}
{"task_id": "HumanEval/46", "completion": "    a = 0\n    b = 1\n    c = 2\n    d = 3\n    if n == 0:\n        return a\n    if n == 1:\n        return b\n    if n == 2:\n        return c\n    if n == 3:\n        return d\n    for _ in range(4, n+1):\n        a, b, c, d = b, c, d, a+b+c+d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    return pow(n, p-2, p)"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(n, 2, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = [0] * n\n    for i in range(n - 1):\n        result[i] = xs[i + 1] * (i + 1)\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 0\n\telif n == 2:\n\t\treturn 1\n\telse:\n\t\ta, b = 0, 1\n\t\tfor _ in range(3, n+1):\n\t\t\ta, b = b, a + b + b\n\t\treturn b"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    n = len(num_str)\n    shift = shift % n\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    if a < 4:\n        return False\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    result = []\n    for grade in grades:\n        if grade >= 4.0:\n            result.append('A+')\n        elif grade >= 3.7:\n            result.append('A')\n        elif grade >= 3.3:\n            result.append('A-')\n        elif grade >= 3.0:\n            result.append('B+')\n        elif grade >= 2.7:\n            result.append('B')\n        elif grade >= 2.3:\n            result.append('B-')\n        elif grade >= 2.0:\n            result.append('C+')\n        elif grade >= 1.7:\n            result.append('C')\n        elif grade >= 1.3:\n            result.append('C-')\n        elif grade >= 1.0:\n            result.append('D+')\n        elif grade >= 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result"}
{"task_id": "HumanEval/84", "completion": "    sum = 0\n    while (N > 0):\n        sum = sum + N % 2\n        N = N // 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            result.append((i, lst[i].index(x)))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    for num in range(2, n+1):\n        if all(num % x != 0 for x in range(2, int(num**0.5)+1)):\n            primes.append(num)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return 0"}
{"task_id": "HumanEval/102", "completion": "    while x <= y:\n        mid = (x + y) // 2\n        if mid % 2 != 0:\n            x = mid + 1\n        else:\n            y = mid - 1\n    if x > y:\n        return -1\n    else:\n        return x"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = (n + m) * (m - n + 1) // 2\n    average = total // (m - n + 1)\n    return bin(average)[2:]"}
{"task_id": "HumanEval/106", "completion": "    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    odd_sum = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 != 0:\n            odd_sum += lst[i]\n    return odd_sum"}
{"task_id": "HumanEval/123", "completion": "    def collatz(x):\n        if x == 1:\n            return [1]\n        if x % 2 == 0:\n            return [x] + collatz(x // 2)\n        else:\n            return [x] + collatz(3 * x + 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            result += collatz(i)\n    return sorted(result)"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign = 1\n    result = 0\n    for num in arr:\n        sign *= num // abs(num)\n        result += abs(num)\n    return sign * result"}
{"task_id": "HumanEval/130", "completion": "    a = [0] * (n + 1)\n\ta[0] = 1\n\ta[1] = 3\n\ta[2] = 2\n\tfor i in range(3, n + 1):\n\t\ta[i] = a[i - 1] + a[i - 2] + a[i - 3]\n\treturn a"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    sum_of_squares = 0\n    for num in lst:\n        rounded_num = int(num + 0.5)\n        sum_of_squares += rounded_num**2\n    return sum_of_squares"}
{"task_id": "HumanEval/136", "completion": "    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num >= 0]\n    \n    if negative_integers:\n        a = min(negative_integers)\n    else:\n        a = None\n    \n    if positive_integers:\n        b = max(positive_integers)\n    else:\n        b = None\n    \n    return (a, b)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, float) and isinstance(b, float):\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        return a if a > b else b\n    else:\n        return None"}
{"task_id": "HumanEval/139", "completion": "    if n <= 1:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        return fact"}
{"task_id": "HumanEval/142", "completion": "    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total_sum += lst[i] ** 3\n    return total_sum"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(num):\n        return sum(map(int, str(num)))\n\n    nums.sort(key=lambda x: (sum_of_digits(x), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        first_digit = int(str(num)[0])\n        last_digit = int(str(num)[-1])\n        if num > 10 and first_digit % 2 != 0 and last_digit % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 == -1 or index2 == -1:\n        return ()\n    return tuple(planets[index1+1:index2])"}
{"task_id": "HumanEval/150", "completion": "    if n < 1:\n        return \"Invalid input\"\n    if n == 1:\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    result = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            if num % 2 != 0:\n                result += num**2\n    return result"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)"}
{"task_id": "HumanEval/159", "completion": "    if number + need <= remaining:\n        return [number + need, 0]\n    else:\n        return [remaining, remaining - (number + need)]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/2", "completion": "    integer_part, decimals = str(number).split('.')\n    return float('0.' + decimals)"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    total_sum = sum(numbers) if numbers else 0\n    product = 1 if numbers else 1\n    for num in numbers:\n        product *= num\n    return (total_sum, product)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = None\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    n = len(xs)\n    if n % 2 != 0 or xs[-1] == 0:\n        return None\n    start, end = 0, 1000\n    while start < end:\n        mid = (start + end) / 2\n        if poly(xs, mid) > 0:\n            end = mid\n        else:\n            start = mid\n    return start"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    for i in range(n):\n        if i % 3 == 0:\n            l[i] = (l[i], l[i], l[i])\n    l.sort()\n    return l"}
{"task_id": "HumanEval/37", "completion": "    l1 = []\n    l2 = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l1.append(l[i])\n        else:\n            l2.append(l[i])\n    l1.sort()\n    l = l1 + l2\n    return l"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fibonacci(num):\n        a, b = 0, 1\n        if num == 0:\n            return True\n        while b < num:\n            a, b = b, a + b\n        return b == num\n\n    count = 0\n    num = 0\n    while True:\n        if is_fibonacci(num) and is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1"}
{"task_id": "HumanEval/41", "completion": "    return n*(n-1)//2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    s = (a * h) / 2\n    area = (s * (s - a) * (s - h) * (s - 2 * a)) ** 0.5\n    return area"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n    return c"}
{"task_id": "HumanEval/47", "completion": "    l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    res = pow(n, p-2, p)\n\treturn res"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n < 0:\n        return -1\n    elif n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(2, n+1):\n        if n % i == 0:\n            is_prime = True\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                return i\n    return None"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/62", "completion": "    result = []\n    for i in range(len(xs) - 1):\n        result.append(xs[i] * (i + 1))\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    num_str = num_str[shift:] + num_str[:shift]\n    return num_str"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for b in range(2, a):\n        if a % b == 0:\n            c = a // b\n            if c <= 100:\n                if is_prime(b) and is_prime(c):\n                    return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    grades_list = [\n        (4.0, 'A+'),\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-'),\n        (0.0, 'E')\n    ]\n    result = []\n    for grade in grades:\n        for gpa, letter in grades_list:\n            if grade >= gpa:\n                result.append(letter)\n                break\n    return result"}
{"task_id": "HumanEval/84", "completion": "    res = bin(N)[2:]\n\treturn res"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        j = 0\n        while j < len(row) and row[j] == x:\n            result.append((i, j))\n            j += 1\n    return sorted(result)"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def count_primes(num):\n        primes = []\n        for i in range(2, num + 1):\n            if is_prime(i):\n                primes.append(i)\n        return primes\n\n    return count_primes(n)"}
{"task_id": "HumanEval/97", "completion": "    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    product = unit_digit_a * unit_digit_b\n    return product"}
{"task_id": "HumanEval/99", "completion": "    number = float(value)\n    if number % 1 == 0:\n        return int(number)\n    else:\n        return int(number + 0.5) * (1 if number > 0 else -1)"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 != 0 or y % 2 != 0:\n        return -1\n    for num in range(x, y+1):\n        if num % 2 == 0:\n            return num\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    sum = n + m\n    avg = sum // 2\n    rounded_avg = 0\n    if (sum % 2) == 0:\n        rounded_avg = avg\n    else:\n        rounded_avg = avg + 1\n    return bin(rounded_avg)[2:]"}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        else:\n            return i * factorial(i - 1)\n\n    res = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            res.append(sum(range(1, i + 1)))\n    return res"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    collatz = []\n    while n != 1:\n        if n % 2 != 0:\n            n *= 3 + 1\n        else:\n            n = n // 2\n        collatz.append(n)\n    return sorted(collatz)"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    \n    product = 1\n    total_sum = 0\n    \n    for num in arr:\n        sign = 1 if num > 0 else -1 if num < 0 else 0\n        product *= sign\n        total_sum += abs(num)\n        \n    return product * total_sum"}
{"task_id": "HumanEval/130", "completion": "    if n <= 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 2]\n    else:\n        result = [3, 2, 8]\n        a, b, c = 3, 2, 8\n        for i in range(3, n + 1):\n            d = a + b + c\n            result.append(d)\n            a, b, c = b, c, d\n        return result"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += round(num**2)\n    return result"}
{"task_id": "HumanEval/136", "completion": "    min_positive = None\n    max_negative = None\n\n    for num in lst:\n        if num > 0 and (min_positive is None or num < min_positive):\n            min_positive = num\n        elif num < 0 and (max_negative is None or num > max_negative):\n            max_negative = num\n\n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, float) and isinstance(b, float):\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        a = float(a)\n        b = float(b)\n        return a if a > b else b\n    else:\n        return None"}
{"task_id": "HumanEval/139", "completion": "    if n <= 0:\n        return None\n    else:\n        fact = 1\n        for i in range(1, n+1):\n            fact *= i\n        return fact"}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += lst[i]**3\n    return result\n\n# Example Usage\nlst = [1, 2, 3, 4, 5]\nresult = sum_squares(lst)\nprint(result)"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(n):\n        if n < 0:\n            return -1 * digit_sum(-n)\n        return sum(int(digit) for digit in str(n))\n\n    nums.sort(key=lambda x: (digit_sum(x), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            digits = [int(digit) for digit in str(num)]\n            if digits[0] % 2 != 0 and digits[-1] % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 == -1 or index2 == -1:\n        return ()\n    return sorted(planets[index1+1:index2])"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    odd_numbers = [x for x in lst if isinstance(x, int) and x % 2 != 0]\n    total = sum(odd_numbers ** 2)\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)"}
{"task_id": "HumanEval/159", "completion": "    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    i = 1\n    while i < len(operand):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n        i += 1\n    return result"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        even_digits = [int(digit) for digit in str(num) if int(digit) % 2 == 0]\n        if even_digits:\n            result.append(int(\"\".join(map(str, even_digits))))\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number % 1"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    abs_deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return abs_deviation"}
{"task_id": "HumanEval/5", "completion": "    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), numbers[0] * 0)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n\t\ta, b = b, a % b\n\treturn a"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero point of a polynomial.\n    The function assumes that the coefficients are even numbers and the largest non-zero number is at the center of the list.\n    The function uses bisection method to approximate the zero point.\n    return x such that poly(x) = 0.\n    \"\"\"\n    # A bisection method to find zero point of a polynomial.\n    # It assumes that the coefficients are even numbers and the largest non-zero number is at the center of the list.\n    start = xs[0] / -2\n    end = xs[-1] / 2\n    epsilon = 0.0001\n    while end - start > epsilon:\n        mid = (start + end) / 2\n        if poly(xs, mid) > 0:\n            end = mid\n        else:\n            start = mid\n    return round(mid, 5)"}
{"task_id": "HumanEval/33", "completion": "    l = l + l[::-2]\n    l.sort()\n    return l[::2]"}
{"task_id": "HumanEval/37", "completion": "    l_even = [l[i] for i in range(0, len(l), 2)]\n    l_even.sort()\n    l_odd = [l[i] for i in range(1, len(l), 2)]\n    return l_even + l_odd"}
{"task_id": "HumanEval/39", "completion": "    a, b = 0, 1\n    for _ in range(2):\n        a, b = b, a + b\n    for _ in range(n - 2):\n        a, b = b, a + b\n    return a if is_prime(a) else b\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/41", "completion": "    return n - 1"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    area = (a * h) / 2\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a = 0\n        b = 2\n        for i in range(4, n+1):\n            c = a + b + (a + b) + (a + b + c)\n            a = b\n            b = c\n        return c"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    l.sort()\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    result = pow(n, p-2, p)\n\treturn result"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a+b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    s1, s2 = set(l1), set(l2)\n    return list(s1.intersection(s2))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(2, n + 1):\n        if n % i == 0:\n            while n % i == 0:\n                n //= i\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/62", "completion": "    if len(xs) == 0:\n        return []\n    if len(xs) == 1:\n        return []\n    if len(xs) == 2:\n        return [xs[1]]\n    \n    dxs = [0] * (len(xs)-1)\n    dxs[0] = xs[1]\n    \n    for i in range(1, len(xs)-1):\n        dxs[i] = xs[i+1] * (i+1) + dxs[i-1]\n    \n    dxs[-1] = xs[-1] * len(xs)\n    \n    return dxs"}
{"task_id": "HumanEval/63", "completion": "    if n <= 2:\n        return n\n    a, b, c = 0, 1, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, b + c\n    return c"}
{"task_id": "HumanEval/65", "completion": "    digits = [int(d) for d in str(x)]\n    shift = shift % len(digits)\n    reversed_digits = digits[shift:] + digits[:shift]\n    return ''.join(str(d) for d in reversed_digits)"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    if a < 3:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\ndef grade_equation(grades):\n    return numerical_letter_grade(grades)"}
{"task_id": "HumanEval/84", "completion": "    total_sum = 0\n    while N:\n        total_sum += N % 10\n        N //= 10\n    return bin(total_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/87", "completion": "    res = []\n    for i, row in enumerate(lst):\n        if x in row:\n            res.append((i, row.index(x)))\n    res.sort(key=lambda x: (x[0], -x[1]))\n    return res"}
{"task_id": "HumanEval/96", "completion": "    if n <= 1:\n        return []\n    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num == int(num):\n        return int(num)\n    else:\n        return int(num + 0.5) * (1 if num > 0 else -1)"}
{"task_id": "HumanEval/102", "completion": "    for num in range(y, x - 1, -2):\n        if x <= num <= y:\n            return num\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    sum = (n + m) // 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/106", "completion": "    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num-1)\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[::2])"}
{"task_id": "HumanEval/123", "completion": "    collatz_sequence = [n]\n    while n != 1:\n        if n % 2 != 0:\n            n = n * 3 + 1\n        else:\n            n //= 2\n        collatz_sequence.append(n)\n    return [x for x in collatz_sequence if x % 2 != 0]"}
{"task_id": "HumanEval/128", "completion": "    if len(arr) == 0:\n        return None\n    \n    sign = 1\n    result = 0\n    for num in arr:\n        sign *= (1 if num == 0 else (-1 if num < 0 else 1))\n        result += num * sign\n        \n    return result"}
{"task_id": "HumanEval/130", "completion": "    res = [0, 1, 1]\n    if n > 1:\n        a, b, c = 1, 1, 1\n        for _ in range(2, n + 1):\n            a, b, c = b, c, a + b + c\n            res.append(c)\n    return res"}
{"task_id": "HumanEval/131", "completion": "    odd_product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            odd_product = odd_product * digit\n        n = n // 10\n    return odd_product if odd_product > 0 else 0"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num ** 2)\n    return result"}
{"task_id": "HumanEval/136", "completion": "    max_neg = None\n    min_pos = None\n    \n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        elif num >= 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    \n    return (max_neg, min_pos)"}
{"task_id": "HumanEval/137", "completion": "    a = str(a).replace(',', '.')\n    b = str(b).replace(',', '.')\n    if a == b:\n        return None\n    elif float(a) > float(b):\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/139", "completion": "    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    if n <= 2:\n        return factorial(n)\n    else:\n        result = 1\n        for i in range(1, n):\n            result *= (i + 1) * factorial(i)\n        return result"}
{"task_id": "HumanEval/142", "completion": "    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            total_sum += lst[i]**3\n    return total_sum\n\n\ndef sum_squares_cube(lst):\n    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            total_sum += lst[i]**3\n    return total_sum"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(x):\n        return sum(map(int, str(x)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), x))"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 != 0 and num % 10 != 2:\n                count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets_sorted = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    idx1 = planets_sorted.index(planet1)\n    idx2 = planets_sorted.index(planet2)\n    if idx1 == -1 or idx2 == -1:\n        return ()\n    return tuple(planets_sorted[idx1+1:idx2])"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if num >= 0 and isinstance(num, int) and num % 2 != 0:\n            total += num * num\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    total = number + need\n    result = [total, remaining]\n    if remaining < need:\n        result = [total, 0]\n    return result"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    for i in range(len(operand)):\n        stack.append(operand[i])\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            stack.append(stack.pop() + stack.pop())\n        elif operator[i] == '-':\n            stack.append(stack.pop() - stack.pop())\n        elif operator[i] == '*':\n            stack.append(stack.pop() * stack.pop())\n        elif operator[i] == '//':\n            stack.append(stack.pop() // stack.pop())\n        elif operator[i] == '**':\n            stack.append(stack.pop() ** stack.pop())\n    return stack[0]"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for num in range(a, b+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(digit % 2 == 0 for digit in digits):\n            even_digits.append(num)\n    return even_digits"}
{"task_id": "HumanEval/2", "completion": "    return number % 1"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    return sum(numbers), numbers[0] * reduce(lambda x, y: x * y, numbers[1:])"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds a zero point of the polynomial defined by its coefficients xs.\n    \"\"\"\n    n = len(xs)\n    assert n % 2 == 0  # Even number of coefficients\n    assert xs[-1] != 0  # Non-zero largest coefficient\n    x = 0\n    epsilon = 0.001\n    while abs(poly(xs, x)) > epsilon:\n        x -= poly(xs, x) / (n * xs[n - 1])\n    return x"}
{"task_id": "HumanEval/33", "completion": "    result = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            result.append(l[i])\n        else:\n            result.append(l[i-1])\n    return result"}
{"task_id": "HumanEval/37", "completion": "    l_even = [l[i] for i in range(1, len(l), 2)]\n    l_even.sort()\n    l_odd = [l[i] for i in range(0, len(l), 2)]\n    return l_even + l_odd[1:]"}
{"task_id": "HumanEval/39", "completion": "    a, b = 0, 1\n    for _ in range(2):\n        a, b = b, a + b\n    for _ in range(n-1):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    result = []\n    for num in l:\n        result.append(num + 1)\n    return result"}
{"task_id": "HumanEval/45", "completion": "    area = (a * h) / 2\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c = 0, 2, 0\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    l.sort()\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    res = pow(n, p - 2, p)\n    return res"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(2, n):\n\t\tif n % i == 0:\n\t\t\treturn i\n\treturn n"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = [xs[0]]\n    for i in range(1, n):\n        result.append(result[i-1] * i + xs[i])\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(3, n+1):\n            a, b = b, a + b + b\n        return b"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    shift = shift % len(num_str)\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    result = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            result.append('A+')\n        elif gpa >= 3.7:\n            result.append('A')\n        elif gpa >= 3.3:\n            result.append('A-')\n        elif gpa >= 3.0:\n            result.append('B+')\n        elif gpa >= 2.7:\n            result.append('B')\n        elif gpa >= 2.3:\n            result.append('B-')\n        elif gpa >= 2.0:\n            result.append('C+')\n        elif gpa >= 1.7:\n            result.append('C')\n        elif gpa >= 1.3:\n            result.append('C-')\n        elif gpa >= 1.0:\n            result.append('D+')\n        elif gpa >= 0.7:\n            result.append('D')\n        else:\n            result.append('D-')\n    return result"}
{"task_id": "HumanEval/84", "completion": "    sum_of_digits = 0\n\twhile N > 0:\n\t\tremainder = N % 10\n\t\tsum_of_digits += remainder\n\t\tN = N // 10\n\treturn bin(sum_of_digits)[2:]"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        result.extend([(i, j) for j in range(len(row) - 1, -1, -1) if row[j] == x])\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    if n < 1:\n        return []\n    is_prime = [True] * (n+1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n+1, i):\n                is_prime[j] = False\n    return [i for i in range(2, n+1) if is_prime[i]]"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num == 0:\n        return 0\n    elif num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 != 0 or y % 2 != 0:\n        return -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    rounded_avg_bin = bin(avg)[2:]\n    return rounded_avg_bin"}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        else:\n            return i * factorial(i-1)\n    \n    def sum_of_numbers(i):\n        return sum(range(1, i+1))\n    \n    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            res.append(sum_of_numbers(i))\n    return res"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/123", "completion": "    if n == 1:\n        return [1]\n    else:\n        odd_numbers = []\n        while n != 1:\n            if n % 2 != 0:\n                odd_numbers.append(n)\n            n = 3 * n + 1\n        return odd_numbers"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    prod = 1\n    sum_magnitudes = 0\n    for num in arr:\n        if num == 0:\n            continue\n        if num > 0:\n            prod *= 1\n            sum_magnitudes += num\n        else:\n            prod *= -1\n            sum_magnitudes += -num\n    return prod * sum_magnitudes"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 3\n        dp[2] = 2\n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n        return dp\n\n\n# Test the function\nprint(tri(6))"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product > 0 else 0"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num ** 2)\n    return result"}
{"task_id": "HumanEval/136", "completion": "    min_positive = None\n    max_negative = None\n    for num in lst:\n        if num < 0 and max_negative is None:\n            max_negative = num\n        elif num < 0 and num > max_negative:\n            max_negative = num\n        elif num > 0 and min_positive is None:\n            min_positive = num\n        elif num > 0 and num < min_positive:\n            min_positive = num\n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a == b:\n        return None\n    return max(a, b)"}
{"task_id": "HumanEval/139", "completion": "    if n <= 0:\n        return 0\n    res = 1\n    for i in range(1, n + 1):\n        res *= i\n    return res"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num * num\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num * num * num\n        else:\n            total += num\n    return total"}
{"task_id": "HumanEval/145", "completion": "    points = {}\n    for i, num in enumerate(nums):\n        point = sum(int(digit) for digit in str(num))\n        if point in points:\n            points[point].append(i)\n        else:\n            points[point] = [i]\n    result = []\n    for point in sorted(points):\n        result.extend(points[point])\n    return [nums[i] for i in result]"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = int(str(num)[0])\n            last_digit = int(str(num)[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    if idx1 < 0 or idx2 < 0:\n        return ()\n    result = sorted(planets[idx1+1:idx2], key=lambda x: x + x)\n    return tuple(result)"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return y\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            total += (num ** 2)\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    if number >= need:\n\t\treturn [number, 0]\n\telse:\n\t\treturn [number, remaining - (need - number)]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    i = 1\n    for op in operator:\n        if op == '+':\n            result += operand[i]\n        elif op == '-':\n            result -= operand[i]\n        elif op == '*':\n            result *= operand[i]\n        elif op == '//':\n            result //= operand[i]\n        elif op == '**':\n            result **= operand[i]\n        i += 1\n    return result"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    return (sum(numbers), 1 * numbers[0])"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds zero point of a polynomial with coefficients xs.\n    \"\"\"\n    for x in range(1, len(xs)):\n        if poly(xs, x) == 0:\n            return x\n    return None"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l1 = [l[i] for i in range(1, n) if i % 3 != 0]\n    l2 = [l[i] for i in range(1, n) if i % 3 == 0]\n    l2.sort()\n    l3 = [l[i] for i in range(1, n) if i % 3 != 0]\n    return l1 + l2 + l3"}
{"task_id": "HumanEval/37", "completion": "    l1 = [l[i] for i in range(0, len(l), 2)]\n    l2 = [l[i] for i in range(1, len(l), 2)]\n    l2.sort()\n    l1.extend(l2)\n    return l1"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def is_perfect_square(num):\n        root = int(num ** 0.5)\n        return root * root == num\n    \n    a, b = 0, 1\n    count = 0\n    while True:\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b\n        a, b = b, a + b"}
{"task_id": "HumanEval/41", "completion": "    return n - 1"}
{"task_id": "HumanEval/42", "completion": "    result = []\n    for i in range(len(l)):\n        result.append(l[i] + 1)\n    return result"}
{"task_id": "HumanEval/45", "completion": "    area = (a * h) / 2\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c = 0, 2, 0\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return b"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    res = n\n    while (res >= p):\n        res -= p\n    return res"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(2, n+1):\n        if n % i == 0:\n            is_prime = True\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    derivatives = [0] * (n-1)\n    for i in range(1, n):\n        derivatives[i-1] = xs[i] * i\n    return derivatives"}
{"task_id": "HumanEval/63", "completion": "    if n <= 2:\n        return n\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return b"}
{"task_id": "HumanEval/65", "completion": "    digits = [int(d) for d in str(x)]\n    shift = shift % len(digits)\n    return ''.join(digits[-shift:] + digits[:-shift])"}
{"task_id": "HumanEval/71", "completion": "    if (a + b > c and b + c > a and c + a > b):\n\t\ts = (a + b + c) / 2\n\t\tarea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\t\treturn round(area, 2)\n\telse:\n\t\treturn -1"}
{"task_id": "HumanEval/75", "completion": "    if a < 100:\n        for i in range(2, int(a**0.5)+1):\n            if a % i == 0:\n                return False\n        return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    grade_points = [4.0, 3.7, 3.3, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n    grade_letters = ['A+', 'A', 'A-', 'B', 'B-', 'C', 'C+', 'D', 'D+', 'F', 'F']\n    return [grade_letters[idx] for idx, g in enumerate(grades) if g >= grade_points[idx]]"}
{"task_id": "HumanEval/84", "completion": "    result = 0\n    while N > 0:\n        result += N % 2\n        N = N // 2\n    return bin(result)[2:]"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            result.append((i, row.index(x)))\n    return sorted(result, key=lambda x: (x[0], -x[1]))"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    result = []\n    num = 2\n    count = 0\n    while count < n:\n        if is_prime(num):\n            result.append(num)\n            count += 1\n        num += 1\n    return result"}
{"task_id": "HumanEval/97", "completion": "    unit_a = a % 10\n    unit_b = b % 10\n    return unit_a * unit_b"}
{"task_id": "HumanEval/99", "completion": "    number = float(value)\n    if number % 1 == 0:\n        return int(number)\n    else:\n        return int(number + 0.5)"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg).replace(\"0b\", \"\")"}
{"task_id": "HumanEval/106", "completion": "    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    odd_sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            odd_sum += lst[i]\n    return odd_sum"}
{"task_id": "HumanEval/123", "completion": "    def collatz(x):\n        if x == 1:\n            return [1]\n        if x % 2 != 0:\n            return [x] + collatz(3 * x + 1)\n        return [x] + collatz(x // 2)\n    \n    odd_collatz = [x for x in collatz(n) if x % 2 != 0]\n    odd_collatz.sort()\n    return odd_collatz"}
{"task_id": "HumanEval/128", "completion": "    if len(arr) == 0:\n        return None\n    product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num != 0:\n            product *= num\n            magnitude_sum += num\n    return magnitude_sum * product"}
{"task_id": "HumanEval/130", "completion": "    res = [0] * (n + 1)\n    res[1] = 1\n    res[2] = 3\n    for i in range(3, n + 1):\n        res[i] = res[i - 1] + res[i - 2] + res[i - 3]\n    return res"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product != 1 else 0"}
{"task_id": "HumanEval/133", "completion": "    total_sum = 0\n    for num in lst:\n        total_sum += int(num + 0.5)**2\n    return total_sum"}
{"task_id": "HumanEval/136", "completion": "    min_positive = None\n    max_negative = None\n\n    for num in lst:\n        if num < 0:\n            max_negative = max(max_negative, num)\n        elif num > 0:\n            min_positive = min(min_positive, num)\n\n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, float) and isinstance(b, float):\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        return a if a > b else b\n    else:\n        return None"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i]**3\n    return total"}
{"task_id": "HumanEval/145", "completion": "    nums.sort(key=lambda x: (sum_of_digits(x), x))\n    return nums\n\ndef sum_of_digits(num):\n    if num == 0:\n        return 0\n    return num % 10 + sum_of_digits(num // 10)"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = int(str(num)[0])\n            last_digit = int(str(num)[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 == -1 or index2 == -1:\n        return ()\n    return tuple(planets[index1+1:index2])"}
{"task_id": "HumanEval/150", "completion": "    if n % 2 != 0 and n % 3 != 0:\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    result = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            result += num**2\n    return result"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    if number >= need:\n\t\treturn [number + remaining, 0]\n\telse:\n\t\treturn [number, need - number]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    i = 1\n    while i < len(operand):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n        i += 1\n    return result"}
{"task_id": "HumanEval/163", "completion": "    a_str = str(a)\n    b_str = str(b)\n    common_str = ''\n    for i in range(min(len(a_str), len(b_str))):\n        if a_str[i] == b_str[i]:\n            common_str += a_str[i]\n        else:\n            break\n    res = []\n    for i in range(len(common_str), len(a_str)):\n        res.append(int(common_str + '0'*i + '2'*i))\n    for i in range(len(common_str)+1, len(b_str)+1):\n        res.append(int(common_str + '0'*i + '2'*i))\n    return res"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    abs_diff = [abs(x - mean) for x in numbers]\n    return sum(abs_diff) / len(abs_diff)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)-1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return sum, product"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [val for val in values if isinstance(val, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds root of polynomial with coefficients xs.\n    Guaranteed to return only one root.\n    xs should have even number of coefficients and largest non-zero coefficient.\n    \"\"\"\n    if len(xs) % 2 != 0 or xs[-1] == 0:\n        raise ValueError(\"Coefficients should have even number of terms and largest non-zero coefficient\")\n    x = 1\n    epsilon = 0.0001\n    while abs(poly(xs, x)) > epsilon:\n        x = (x + xs[-1] / poly(xs, x)) / 2\n    return x"}
{"task_id": "HumanEval/33", "completion": "    l = l[:len(l)//3] + sorted(l[len(l)//3:])\n    return l"}
{"task_id": "HumanEval/37", "completion": "    n = len(l)\n    for i in range(1, n, 2):\n        l[i] = sorted(l[i:])[-1]\n    return l"}
{"task_id": "HumanEval/39", "completion": "    a, b = 0, 1\n    count = 0\n    while count < n:\n        if is_prime(a):\n            count += 1\n        a, b = b, a+b\n    return b\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n+1):\n        a, b, c, d = b, c, d, a+b+c+d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    result = 1\n    n = n % p\n    while n > 0:\n        result = (result * n) % p\n        n = n // 2\n    return result"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    l1_set = set(l1)\n    l2_set = set(l2)\n    return list(l1_set.intersection(l2_set))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(2, n+1):\n        while n % i == 0:\n            n //= i\n        if n == 1:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = [0] * n\n    for i in range(n-1):\n        result[i+1] = xs[i+1] * (i + 1)\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    if shift == 0:\n        return num_str\n    if shift < 0:\n        shift = -shift\n    if shift > len(num_str):\n        return num_str[::-1]\n    return num_str[shift:] + num_str[:shift]"}
{"task_id": "HumanEval/71", "completion": "    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    if a < 4:\n        return False\n    for i in range(2, int(a**0.5)+1):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    grade_points = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n    letter_grades = ['A+', 'A', 'A-', 'B', 'B', 'B-', 'C', 'C', 'C+', 'D', 'D', 'E']\n    result = []\n    for g in grades:\n        for i, x in enumerate(grade_points):\n            if g >= x:\n                result.append(letter_grades[i])\n                break\n    return result"}
{"task_id": "HumanEval/84", "completion": "    result = 0\n    while N > 0:\n        result += N % 10\n        N = N // 2\n    return bin(result)[2:]"}
{"task_id": "HumanEval/85", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    for num in range(2, n+1):\n        if all(num%i != 0 for i in range(2, int(num**0.5)+1)):\n            primes.append(num)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    product = 0\n\tunit_a = a % 10\n\tunit_b = b % 10\n\tproduct = unit_a * unit_b\n\treturn product"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num) if num % 1 != 0 else int(num) if num > 0 else int(num)"}
{"task_id": "HumanEval/102", "completion": "    for num in range(y, x - 1, -2):\n        if num > 0 and (num % 10) == 0:\n            return num\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    average = (n + m) // 2\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)[2:]\n    return binary_average"}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        else:\n            return i * factorial(i - 1)\n    \n    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            res.append(sum(range(1, i+1)))\n    \n    return res"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/123", "completion": "    result = []\n    while n > 1:\n        if n % 2 != 0:\n            result.append(n)\n        n = 3 * n + 1\n    return result"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    signs = [1 if x != 0 else 0 for x in arr]\n    product = 1\n    for sign in signs:\n        product *= sign\n    result = 0\n    for i, num in enumerate(arr):\n        result += (abs(num) * product) if signs[i] != 0 else 0\n    return result"}
{"task_id": "HumanEval/130", "completion": "    d = {0: 0, 1: 1, 2: 1}\n    def f(n):\n        if n in d:\n            return d[n]\n        d[n] = f(n - 1) + f(n - 2) + f(n - 3)\n        return d[n]\n    return [f(i) for i in range(n + 1)]"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n = n // 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += (num**2)\n    return result\n\ndef round_and_sum(lst):\n    result = 0\n    for num in lst:\n        result += round(num**2)\n    return result\n\ndef square_sum(lst):\n    sum_of_squares = sum_squares(lst)\n    return round_and_sum([sum_of_squares])\n\n# Test the function\nlst = [1,4,9]\nprint(square_sum(lst))"}
{"task_id": "HumanEval/136", "completion": "    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    if len(negatives) == 0:\n        a = None\n    else:\n        a = min(negatives)\n\n    if len(positives) == 0:\n        b = None\n    else:\n        b = max(positives)\n\n    return (a, b)"}
{"task_id": "HumanEval/137", "completion": "    a = str(a).replace(',', '.')\n    b = str(b).replace(',', '.')\n    \n    if a.isdigit() and b.isdigit():\n        a = int(a)\n        b = int(b)\n        if a == b:\n            return None\n        return max(a, b)\n    elif not a.isdigit() and not b.isdigit():\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        if a == b:\n            return None\n        return max(a, b)\n    else:\n        return None"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n+1):\n            fact *= i\n        return fact\n\n# Test the function\nprint(special_factorial(4))  # Output: 288"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i]**3\n    return total"}
{"task_id": "HumanEval/145", "completion": "    nums.sort(key=lambda x: (sum(int(digit) for digit in str(x)), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            if (int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0):\n                count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 == -1 or index2 == -1:\n        return ()\n    return sorted(planets[index1+1:index2])"}
{"task_id": "HumanEval/150", "completion": "    if n % 2 == 0 or n % 3 == 0:\n        return y\n    else:\n        return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            if num % 2 != 0:\n                total += num**2\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)"}
{"task_id": "HumanEval/159", "completion": "    if need > remaining:\n        return [remaining, 0]\n    else:\n        return [need, remaining - need]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    start = int(str(a)[-1])\n    end = int(str(b)[-1])\n    return [i for i in range(start, end + 1) if i % 2 == 0]"}
{"task_id": "HumanEval/2", "completion": "    return number % 1"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        if i < len(numbers) - 1:\n            result.append(numbers[i])\n            result.append(delimeter)\n        else:\n            result.append(numbers[i])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    total_sum = sum(numbers) if numbers else 0\n    product = 1\n    for num in numbers:\n        product *= num\n    return (total_sum, product)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds a zero of the polynomial represented by xs.\n    Assumes xs has even number of coefficients and largest non-zero coefficient.\n    return x such that poly(x) = 0\n    \"\"\"\n    n = len(xs)\n    x = - xs[0] / xs[1]\n    return x"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l2 = [l[i] for i in range(n) if i % 3 != 0]\n    l3 = [l[i] for i in range(n) if i % 3 == 0]\n    l3.sort()\n    l2.extend(l3)\n    return l2"}
{"task_id": "HumanEval/37", "completion": "    l = l.copy()\n    for i in range(0, len(l)-1, 2):\n        if i+1 < len(l):\n            l[i], l[i+1] = l[i+1], l[i]\n    return l"}
{"task_id": "HumanEval/39", "completion": "    a, b = 0, 1\n    for _ in range(2):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b = 0, 2\n        for _ in range(3, n + 1):\n            a, b = b, a + b + 2\n        return b"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    return pow(n, p-2, p)"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    return list(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(2, n+1):\n        if n % i == 0:\n            is_prime = True\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    if n <= 0:\n        return 0\n    else:\n        return n * (n + 1) // 2"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    dxs = [0] * n\n    for i in range(n):\n        dxs[i] = xs[i] * i\n    return dxs"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(3, n+1):\n            a, b = b, a + b + b\n        return b"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    num_len = len(num_str)\n    shift %= num_len\n    if shift == 0:\n        return num_str\n    else:\n        return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    grade_points = {\n        'A+': 4.0, 'A': 3.7, 'A-': 3.3,\n        'B+': 2.7, 'B': 2.3, 'B-': 2.0,\n        'C+': 1.7, 'C': 1.3, 'C-': 1.0,\n        'D+': 0.7, 'D': 0.0, 'D-': 0.0,\n        'E': 0.0\n    }\n    letter_grades = []\n    for grade in grades:\n        for key, value in grade_points.items():\n            if grade >= value:\n                letter_grades.append(key)\n                break\n    return letter_grades"}
{"task_id": "HumanEval/84", "completion": "    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 2\n        N //= 2\n    return str(binary_sum)"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, len(row) - j - 1))\n    return sorted(result, key=lambda tup: (tup[0], -tup[1]))"}
{"task_id": "HumanEval/96", "completion": "    if n <= 0:\n        return []\n    result = []\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    number = float(value)\n    if number > 0:\n        return int(number + 0.5)\n    elif number < 0:\n        return int(number - 0.5)\n    else:\n        return 0"}
{"task_id": "HumanEval/102", "completion": "    for num in range(y, x - 1, -2):\n        if num >= x and num <= y:\n            return num\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n\t\treturn -1\n\tavg = (n + m) // 2\n\treturn bin(avg).replace(\"0b\", \"\")"}
{"task_id": "HumanEval/106", "completion": "    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    if n == 1:\n        return [1]\n    else:\n        odd_numbers = []\n        while n != 1:\n            if n % 2 != 0:\n                odd_numbers.append(n)\n            n = 3*n + 1\n        return sorted(odd_numbers)"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    \n    signs = [1 if x != 0 else 0 for x in arr]\n    magnitudes = [abs(x) for x in arr]\n    product = 1\n    for sign, magnitude in zip(signs, magnitudes):\n        product *= sign * magnitude\n    \n    return product"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n    a = [1, 3, 2]\n    b = [1, 3, 2]\n    c = [1, 3, 2]\n    for i in range(3, n + 1):\n        a = [1, 3, 2]\n        b = [1, 3, 2]\n        c = [1, 3, 2]\n        for j in range(3, i + 1):\n            if j % 2 == 0:\n                a[j] = a[j - 1] + j / 2\n            else:\n                b[j] = a[j - 1] + b[j - 2] + c[j - 3]\n            c[j] = b[j - 1] + a[j - 2] + c[j - 3]\n        a.extend(b)\n        a.extend(c)\n    return a"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n = n // 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    total_sum = 0\n    for num in lst:\n        total_sum += int(num ** 2)\n    return total_sum"}
{"task_id": "HumanEval/136", "completion": "    max_neg = None\n    min_pos = None\n\n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        elif num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n\n    return (max_neg, min_pos)"}
{"task_id": "HumanEval/137", "completion": "    a = str(a).replace(',', '.')\n    b = str(b).replace(',', '.')\n    a = float(a)\n    b = float(b)\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/139", "completion": "    if n < 0:\n        return \"Invalid input\"\n    else:\n        res = 1\n        for i in range(1, n+1):\n            res *= i\n        return res"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n    return total\n\ndef sum_squares_cubes(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n    return total\n\nlst = [1,2,3,4,5]\nprint(sum_squares(lst))\nprint(sum_squares_cubes(lst))"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(n):\n        return sum(int(i) for i in str(n))\n\n    nums.sort(key=lambda x: (sum_of_digits(x), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = num % 10\n            last_digit = num % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    return sorted(planets[(planets.index(planet1)+1):planets.index(planet2)])"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if num > 0 and num % 2 != 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    total_carrots = number + need\n    if total_carrots <= remaining:\n        return [total_carrots, 0]\n    else:\n        return [remaining, total_carrots - remaining]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    i = 0\n    while i < len(operand) - 1:\n        stack.append(operand[i])\n        if operator[i] == '+':\n            stack[-1] += operand[i + 1]\n        elif operator[i] == '-':\n            stack[-1] -= operand[i + 1]\n        elif operator[i] == '*':\n            stack[-1] *= operand[i + 1]\n        elif operator[i] == '//':\n            stack[-1] //= operand[i + 1]\n        elif operator[i] == '**':\n            stack[-1] **= operand[i + 1]\n        i += 2\n    return stack[-1]"}
{"task_id": "HumanEval/163", "completion": "    a_str = str(a)\n    b_str = str(b)\n    min_str = min(a_str, b_str)\n    max_str = max(a_str, b_str)\n    result = []\n    for i in range(len(min_str)):\n        if min_str[i] == max_str[i]:\n            continue\n        if min_str[i] % 2 != 0:\n            min_str = min_str[:i] + str(int(min_str[i]) + 1) + min_str[i + 1:]\n        if max_str[i] % 2 != 0:\n            max_str = max_str[:i] + str(int(max_str[i]) - 1) + max_str[i + 1:]\n        even_num = int(min_str)\n        while even_num <= int(max_str):\n            result.append(even_num)\n            even_num += 2\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number % 1"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    sum_val = 0\n    product_val = 1\n    for num in numbers:\n        sum_val += num\n        product_val *= num\n    return (sum_val, product_val)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds x such that poly(x) = 0\n    \"\"\"\n    n = len(xs)\n    assert n % 2 == 0\n    m = n // 2\n    for i in range(1, m + 1):\n        x = -xs[i] / poly(xs, i)\n        if poly(xs, x) == 0:\n            return x\n    return None"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l_new = []\n    for i in range(n):\n        if i % 3 != 0:\n            l_new.append(l[i])\n        else:\n            l_new.append(l[i])\n    l_new.sort()\n    return l_new"}
{"task_id": "HumanEval/37", "completion": "    return l[::2] + sorted(l[1::2])"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fib(num):\n        return is_prime(5 * num * num + 4) or is_prime(5 * num * num - 4)\n\n    count = 0\n    num = 1\n    while count < n:\n        if is_fib(num):\n            count += 1\n        num += 1\n    return num - 1"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a = 0\n        b = 2\n        c = 0\n        d = 0\n        for i in range(4, n + 1):\n            a, b, c, d = b, c + d + a, d, a + b + c\n        return b + d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    res = (n ** p) % p\n    return res"}
{"task_id": "HumanEval/53", "completion": "    while y != 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(2, n+1):\n        if n % i == 0:\n            is_prime = True\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                return i\n    return -1"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/62", "completion": "    if len(xs) < 2:\n        return []\n    result = [0] * (len(xs) - 1)\n    for i in range(len(xs) - 1):\n        result[i] = xs[i + 1] * (i + 1)\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n <= 1:\n        return n\n    if n == 2:\n        return 1\n    a, b = 0, 1\n    for _ in range(3, n + 1):\n        a, b = b, a + b + b\n    return b"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    num_str = num_str[-shift:] + num_str[:-shift]\n    return num_str"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    result = []\n    for grade in grades:\n        if grade >= 4.0:\n            result.append(\"A+\")\n        elif grade >= 3.7:\n            result.append(\"A\")\n        elif grade >= 3.3:\n            result.append(\"A-\")\n        elif grade >= 3.0:\n            result.append(\"B+\")\n        elif grade >= 2.7:\n            result.append(\"B\")\n        elif grade >= 2.3:\n            result.append(\"B-\")\n        elif grade >= 2.0:\n            result.append(\"C+\")\n        elif grade >= 1.7:\n            result.append(\"C\")\n        elif grade >= 1.3:\n            result.append(\"C-\")\n        elif grade >= 1.0:\n            result.append(\"D+\")\n        elif grade >= 0.7:\n            result.append(\"D\")\n        elif grade >= 0.0:\n            result.append(\"D-\")\n        else:\n            result.append(\"E\")\n    return result"}
{"task_id": "HumanEval/84", "completion": "    total_sum = 0\n    while N > 0:\n        total_sum += N % 2\n        N = N // 2\n    return bin(total_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        col = 0\n        while col < len(row) and row[col] == x:\n            result.append((i, col))\n            col += 1\n    return sorted(result, key=lambda coord: (coord[0], -coord[1]))"}
{"task_id": "HumanEval/96", "completion": "    prime_count = 0\n    num = 2\n    result = []\n    while (prime_count < n):\n        if (is_prime(num)):\n            result.append(num)\n            prime_count += 1\n        num += 1\n    return result\n\ndef is_prime(num):\n    if (num < 2):\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if (num % i == 0):\n            return False\n    return True"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num == 0:\n        return 0\n    elif num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x, -2):\n        if i <= y:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    sum = (n + m) // 2\n    avg = sum // 2\n    if (sum % 2) == 0:\n        return f\"0b{avg}\"\n    else:\n        return f\"0b{(avg + 1)}\""}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        else:\n            return i * factorial(i - 1)\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    even_position_sum = 0\n    for i in range(0, len(lst), 2):\n        if i + 1 < len(lst) and lst[i+1] % 2 != 0:  # odd element in even position\n            even_position_sum += lst[i+1]\n    return even_position_sum"}
{"task_id": "HumanEval/123", "completion": "    def collatz(n):\n        if n == 1:\n            return [1]\n        elif n % 2 == 0:\n            return [n] + collatz(n // 2)\n        else:\n            return [n] + collatz(3 * n + 1)\n\n    odd_numbers = [x for x in collatz(n) if x % 2 != 0]\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        if num != 0:\n            product *= num\n            sum_of_magnitudes += abs(num)\n    return product * sum_of_magnitudes"}
{"task_id": "HumanEval/130", "completion": "    if n <= 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        tri_list = [1, 3]\n        a, b, c = 1, 3, 2\n        for i in range(3, n + 1):\n            d = a + b + c\n            tri_list.append(d)\n            a, b, c = b, c, d\n        return tri_list"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    total_sum = 0\n    for num in lst:\n        total_sum += int(num) ** 2\n    return total_sum"}
{"task_id": "HumanEval/136", "completion": "    min_positive = float('inf')\n    max_negative = float('-inf')\n    for num in lst:\n        if num < 0:\n            max_negative = max(max_negative, num)\n        elif num > 0:\n            min_positive = min(min_positive, num)\n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "    a = str(a).replace(',', '.')\n    b = str(b).replace(',', '.')\n    if a.isdigit() and b.isdigit():\n        a = int(a)\n        b = int(b)\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        else:\n            return b\n    elif a.isdigit() or b.isdigit():\n        return max(a, b)\n    else:\n        a = float(a)\n        b = float(b)\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        else:\n            return b"}
{"task_id": "HumanEval/139", "completion": "    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num-1)\n\n    res = factorial(n)\n    for i in range(2, n):\n        res //= factorial(i)\n    return res"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] * lst[i]\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] * lst[i] * lst[i]\n        else:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    nums.sort(key=lambda x: (sum_of_digits(x), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 != 0 or num % 10 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets_order = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n    try:\n        p1_idx = planets_order[planet1]\n        p2_idx = planets_order[planet2]\n        if p1_idx < p2_idx:\n            return sorted(planets_order, key=lambda x: planets_order[x],\n                          reverse=True)[p1_idx:p2_idx + 1]\n        else:\n            return sorted(planets_order, key=lambda x: planets_order[x],\n                          reverse=True)[p2_idx:p1_idx + 1]\n    except KeyError:\n        return ()"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return y\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x"}
{"task_id": "HumanEval/151", "completion": "    total_sum = 0\n    for num in lst:\n        if num >= 0 and isinstance(num, int) and num % 2 != 0:\n            total_sum += num * num\n    return total_sum"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n\todd_count = 0\n\twhile num > 0:\n\t\trem = num % 10\n\t\tif rem % 2 == 0:\n\t\t\teven_count += 1\n\t\telse:\n\t\t\todd_count += 1\n\t\tnum = num // 10\n\treturn (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    if need <= remaining:\n        return [number + need, 0]\n    else:\n        return [number + remaining, need - remaining]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        num_str = str(num)\n        even_digits = [int(digit) for digit in num_str if int(digit) % 2 == 0]\n        if even_digits:\n            result.append(int(\"\".join(map(str, even_digits))))\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(absolute_deviations)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    total_sum = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    return (total_sum, product)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = (0.0, 0.0)\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [val for val in values if isinstance(val, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    result = [num for num in l if num > 0]\n    return result"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    find zero point of polynomial represented by xs\n    return zero point, if exists\n    else return None\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0:\n        return \"Invalid input. Number of coefficients should be even.\"\n    max_non_zero = max([xs[i] for i in range(1, n, 2)])\n    start = max_non_zero * 2\n    end = -max_non_zero * 2\n    while start > end:\n        mid = (start + end) / 2\n        if poly(xs, mid) > 0:\n            start = mid\n        else:\n            end = mid\n    if start == end:\n        return start\n    else:\n        return None"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    result = []\n    for i in range(n):\n        if i % 3 == 0:\n            result.append(l[i])\n        else:\n            result.append(l[i])\n    result.sort()\n    return result"}
{"task_id": "HumanEval/37", "completion": "    l2 = [0]*len(l)\n    for i in range(len(l)):\n        l2[i] = l[i] if i%2==0 else sorted(l)[i]\n    return l2"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a if is_prime(a) else b if is_prime(b) else -1"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    s = (a + h) * 0.5\n    area = 0.5 * a * h\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b = 0, 2\n        for _ in range(3, n+1):\n            a, b = b, a + b + fib4(n-1)\n        return b"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    l.sort()\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    result = pow(n, p - 2, p)\n    return result"}
{"task_id": "HumanEval/53", "completion": "    carry = 0\n    result = 0\n    while (y != 0):\n        carry = carry + x & y\n        result = result << 1\n        result = result + carry\n        x = x << 1\n        y = y << 1\n    return result"}
{"task_id": "HumanEval/55", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/58", "completion": "    s1 = set(l1)\n    s2 = set(l2)\n    common_elements = s1.intersection(s2)\n    return list(common_elements)"}
{"task_id": "HumanEval/59", "completion": "    for i in range(2, n+1):\n        if n % i == 0:\n            is_prime = True\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                return i\n    return 1"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/62", "completion": "    if len(xs) == 0:\n        return []\n    result = [xs[0]]\n    for i in range(1, len(xs)):\n        result.append(result[i - 1] + xs[i])\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    shift = shift % len(num_str)\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for i in range(2, 100):\n        if a % i == 0 and is_prime(i) and a % (i*i) == 0 and is_prime(i*i):\n            return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/84", "completion": "    result = \"\"\n    while N > 0:\n        result = str(N % 2) + result\n        N = N // 2\n    return result"}
{"task_id": "HumanEval/85", "completion": "    even_sum = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            even_sum += lst[i]\n    return even_sum"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            result.append((i, lst[i].index(x)))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    if n <= 1:\n        return []\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/97", "completion": "    unit_a = a % 10\n    unit_b = b % 10\n    return unit_a * unit_b"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return 0"}
{"task_id": "HumanEval/102", "completion": "    while x <= y:\n        num = (x + y) // 2\n        if num % 2 == 0:\n            x = num + 1\n        else:\n            y = num - 1\n    if x > y:\n        return -1\n    return x - 1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    average = total // (m - n + 1)\n    rounded_avg = round(average)\n    return bin(rounded_avg)[2:]"}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        else:\n            return i * factorial(i - 1)\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    odd_sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            odd_sum += lst[i]\n    return odd_sum"}
{"task_id": "HumanEval/123", "completion": "    if n == 1:\n        return [1]\n    else:\n        odd_numbers = []\n        while n != 1:\n            if n % 2 != 0:\n                odd_numbers.append(n)\n            n = 3 * n + 1\n        return odd_numbers"}
{"task_id": "HumanEval/128", "completion": "    if len(arr) == 0:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num\n        sum_magnitudes += abs(num)\n    return sum_magnitudes * product"}
{"task_id": "HumanEval/130", "completion": "    if n <= 2:\n        return [1, 3]\n    if n == 3:\n        return [1, 3, 2]\n    trib = [1, 3, 2]\n    for i in range(3, n + 1):\n        trib.append(trib[i - 1] + trib[i - 2] + trib[i - 3])\n    return trib"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product > 1 else 0"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num**2)\n    return result"}
{"task_id": "HumanEval/136", "completion": "    negative_min = None\n    positive_max = None\n    \n    for num in lst:\n        if num < 0 and (negative_min is None or num < negative_min):\n            negative_min = num\n        elif num > 0 and (positive_max is None or num > positive_max):\n            positive_max = num\n    \n    return (negative_min, positive_max)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a == b:\n        return None\n    if a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    return n * special_factorial(n-1)"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] * lst[i]\n        elif i % 4 == 0:\n            total += lst[i] * lst[i] * lst[i]\n    return total"}
{"task_id": "HumanEval/145", "completion": "    nums.sort(key=lambda x: (sum(int(digit) for digit in str(x)), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 != 0 or num % 10 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\tp1, p2 = 0, 0\n\t\n\tfor i in range(len(planets)):\n\t\tif planets[i] == planet1:\n\t\t\tp1 = i\n\t\tif planets[i] == planet2:\n\t\t\tp2 = i\n\t\n\tif p1 == 0 or p2 == 0:\n\t\treturn ()\n\t\n\tresult = []\n\tfor i in range(p1 + 1, p2):\n\t\tresult.append(planets[i])\n\tfor i in range(p1 - 1, p2 - 1, -1):\n\t\tresult.append(planets[i])\n\treturn tuple(result)"}
{"task_id": "HumanEval/150", "completion": "    if n < 1:\n\t\treturn \"Invalid Input\"\n\ti = 2\n\twhile i <= n/2:\n\t\tif n % i == 0:\n\t\t\treturn y\n\t\ti += 1\n\treturn x"}
{"task_id": "HumanEval/151", "completion": "    total_sum = 0\n    for num in lst:\n        if num > 0 and num % 2 != 0:\n            total_sum += num * num\n    return total_sum"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num != 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    if (number + remaining >= need):\n\t\treturn [need, 0]\n\telse:\n\t\treturn [number + remaining, need - (number + remaining)]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    start = int(a/2)\n    end = int(b/2)\n    result = []\n    for i in range(start, end + 1):\n        num = 2*i\n        if num >= a and num <= b:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    return number - integer_part"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = None\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Returns zero point of the given polynomial represented by xs.\n    The polynomial is guaranteed to have an even number of coefficients and a non-zero largest coefficient.\n    If multiple zero points exist, return any one of them.\n    \"\"\"\n    # Check if the polynomial satisfies the conditions\n    if len(xs) % 2 != 0 or xs[-1] == 0:\n        return \"Invalid polynomial\"\n\n    # Find the range where the polynomial reaches its minimum\n    x_start = 0\n    x_end = 1\n    while poly(xs, x_end) > 0:\n        x_end *= 2\n\n    # Use Bisection method to find the zero point\n    epsilon = 0.001  # arbitary small value\n    while x_end - x_start > epsilon:\n        x_mid = (x_start + x_end) / 2\n        if poly(xs, x_mid) < 0:\n            x_end = x_mid\n        else:\n            x_start = x_mid\n    return (x_start + x_end) / 2"}
{"task_id": "HumanEval/33", "completion": "    l_third = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_third.append(l[i])\n        else:\n            l_third.append(l[i])\n    return sorted(l_third)"}
{"task_id": "HumanEval/37", "completion": "    l_even = [l[i] for i in range(0, len(l), 2)]\n    l_even.sort()\n    l_odd = [l[i] for i in range(1, len(l), 2)]\n    return l_even + l_odd"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def is_fibonacci(num):\n        return (5*num*num + 4) % 7 == 0 or (5*num*num - 4) % 7 == 0\n    \n    def find_fibonacci_prime(n):\n        num = 0\n        while True:\n            if is_fibonacci(num) and is_prime(num):\n                n -= 1\n                if n == 0:\n                    return num\n            num += 1\n    \n    return find_fibonacci_prime(n)"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    area = (a * h) / 2\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c = 0, 2, 4\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return b"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    l.sort()\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    res = pow(n, p-2, p)\n\treturn res"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(n, 1, -1):\n        if n % i == 0:\n            is_prime = True\n            for j in range(2, int(i**0.5) + 1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                return i\n    return -1"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/62", "completion": "    res = []\n    for i in range(len(xs)):\n        res.append(xs[i] * (i + 1))\n    return res"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/65", "completion": "    digits = [int(d) for d in str(x)]\n    n = len(digits)\n    if shift < n:\n        digits = digits[shift:] + digits[:shift]\n    else:\n        shift = shift - n\n        digits = digits[-shift:] + digits[:-shift]\n    return ''.join(map(str, digits))"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    if a < 4:\n        return False\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    result = []\n    for grade in grades:\n        if grade >= 4.0:\n            result.append('A+')\n        elif grade >= 3.7:\n            result.append('A')\n        elif grade >= 3.3:\n            result.append('A-')\n        elif grade >= 3.0:\n            result.append('B+')\n        elif grade >= 2.7:\n            result.append('B')\n        elif grade >= 2.3:\n            result.append('B-')\n        elif grade >= 2.0:\n            result.append('C+')\n        elif grade >= 1.7:\n            result.append('C')\n        elif grade >= 1.3:\n            result.append('C-')\n        elif grade >= 1.0:\n            result.append('D+')\n        elif grade >= 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result"}
{"task_id": "HumanEval/84", "completion": "    res = bin(N)[2:]\n    return res"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/87", "completion": "    coords = []\n    for i, row in enumerate(lst):\n        j = 0\n        while j < len(row):\n            if row[j] == x:\n                coords.append((i, j))\n            j += 1\n    return sorted(coords, key=lambda coord: (coord[0], -coord[1]))"}
{"task_id": "HumanEval/96", "completion": "    if n <= 1:\n        return []\n    sieve = [True] * (n + 1)\n    sieve[0], sieve[1] = False, False\n    for i in range(2, int(n**0.5) + 1):\n        if sieve[i]:\n            for j in range(i*i, n + 1, i):\n                sieve[j] = False\n    primes = [x for x in range(2, n + 1) if sieve[x]]\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a%10) * (b%10)"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num - int(num) == 0:\n        return int(num)\n    else:\n        return int(num) + 1 if num > 0 else int(num)"}
{"task_id": "HumanEval/102", "completion": "    while x <= y:\n        mid = (x + y) // 2\n        if mid % 2 == 0:\n            y = mid - 1\n        else:\n            x = mid + 1\n    if x > y:\n        return -1\n    return x"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    average = (n + m) // 2\n    return bin(average)[2:]"}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        else:\n            return i * factorial(i-1)\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[::2])"}
{"task_id": "HumanEval/123", "completion": "    odd_numbers = []\n    while n > 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3 * n + 1\n    odd_numbers.append(1)\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    total_sum = 0\n    for num in arr:\n        product *= num\n        total_sum += abs(num)\n    return total_sum * product"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        a, b, c = 1, 3, 2\n        sequence = [1, 3, 2]\n        for i in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n            sequence.append(c)\n        return sequence"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    total = 0\n    for num in lst:\n        total += int(num + 0.5) ** 2\n    return total"}
{"task_id": "HumanEval/136", "completion": "    min_pos = float('inf')\n    max_neg = float('-inf')\n    for num in lst:\n        if num < 0:\n            max_neg = max(max_neg, num)\n        if num > 0:\n            min_pos = min(min_pos, num)\n    return (max_neg, min_pos)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, int) and isinstance(b, int):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str):\n        a_float = float(a.replace(',', '.'))\n        b_float = float(b.replace(',', '.'))\n        if a_float > b_float:\n            return a\n        elif a_float < b_float:\n            return b\n        else:\n            return None\n    else:\n        return None"}
{"task_id": "HumanEval/139", "completion": "    if n <= 0:\n        return 0\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/142", "completion": "    total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n            total_sum += value**2\n        elif index % 4 == 0 and index % 3 != 0:\n            total_sum += value**3\n    return total_sum"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(num):\n        total = 0\n        while num > 0:\n            total += num % 10\n            num //= 10\n        return total\n    \n    nums.sort(key=lambda x: (sum_of_digits(x), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 != 0 or num % 10 != 1):\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    if planet1 == \"Mercury\" and planet2 == \"Venus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Earth\" and planet2 == \"Mercury\":\n        return (\"Venus\", \"Uranus\", \"Neptune\")\n    elif planet1 == \"Venus\" and planet2 == \"Mars\":\n        return (\"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Mars\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return ()\n    elif planet1 == \"Uranus\" and planet2 == \"Neptune\":\n        return ()\n    else:\n        return \"Wrong Planet Names\""}
{"task_id": "HumanEval/150", "completion": "    if n < 1:\n        return \"Wrong input\"\n    if n == 1:\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int) and num % 2 != 0:\n            total += num * num\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)"}
{"task_id": "HumanEval/159", "completion": "    total_eaten = min(number+need, remaining)\n    return [total_eaten, max(0, remaining - total_eaten)]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    i = 0\n    while i < len(operator):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n        i += 2\n    return result"}
{"task_id": "HumanEval/163", "completion": "    a = int(str(a)[::-2])\n    b = int(str(b)[::-2])\n    result = []\n    while a <= b:\n        result.append(a)\n        a += 1\n    return result"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimals = number - integer_part\n    return decimals"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)-1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    return (sum(numbers), reduce((lambda x, y: x * y), numbers))"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = (None, None)\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds the zero point of the polynomial given the coefficients\n    xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    return the zero point x such that poly(x) = 0\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0:\n        raise ValueError(\"Length of the coefficients list should be even\")\n    a = xs[0]\n    for i in range(1, n, 2):\n        a = a * xs[i] + xs[i + 1]\n    return -a / (a + math.pow(xs[0], n - 1))"}
{"task_id": "HumanEval/33", "completion": "    result = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            result.append(l[i])\n        else:\n            result.append(l[i % 3])\n    return result"}
{"task_id": "HumanEval/37", "completion": "    l1 = [l[i] for i in range(len(l)) if i % 2 == 0]\n    l1.sort()\n    l2 = [l[i] for i in range(len(l)) if i % 2 != 0]\n    return l1 + l2"}
{"task_id": "HumanEval/39", "completion": "    a, b = 0, 1\n\tcount = 0\n\twhile True:\n\t\tif is_prime(a):\n\t\t\tcount += 1\n\t\t\tif count == n:\n\t\t\t\treturn a\n\t\ta, b = b, a + b"}
{"task_id": "HumanEval/41", "completion": "    return n - 1"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    area = (a * h) / 2\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c = 0, 0, 2\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2-1]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    if n < 0:\n        n = -n\n    res = pow(n, p - 2, p)\n    return res"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    a = 0\n    b = 1\n    if n < 0:\n        return \"Incorrect input\"\n    elif n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    factor = 2\n    while factor * factor <= n:\n        while n % factor == 0:\n            n = n // factor\n        factor += 1\n    if n > 1:\n        return n\n    else:\n        return factor - 1"}
{"task_id": "HumanEval/60", "completion": "    return n*(n+1)//2"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [xs[1]]\n    result = [xs[1]]\n    for i in range(2, n):\n        result.append(xs[i] * i + result[i - 1])\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n <= 3:\n        return [0, 0, 1, 1, 1, 2, 3, 5][n]\n    a, b, c = 0, 0, 1\n    for _ in range(4, n+1):\n        a, b, c = b, c, a+b+c\n    return c"}
{"task_id": "HumanEval/65", "completion": "    digits = [int(d) for d in str(x)]\n    n = len(digits)\n    shift = shift % n\n    if shift == 0:\n        return ''.join(map(str, digits))\n    if shift < 0:\n        shift = n + shift\n    return ''.join(map(str, digits[-shift:] + digits[:-shift]))"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    if a < 3:\n\t\treturn False\n\t\n\tfor i in range(3, a//2 + 1):\n\t\tif a % i == 0:\n\t\t\tj = i * i\n\t\t\twhile j <= a:\n\t\t\t\tif a % j == 0:\n\t\t\t\t\tk = j * j\n\t\t\t\t\twhile k <= a:\n\t\t\t\t\t\tif a % k == 0:\n\t\t\t\t\t\t\treturn True\n\t\t\t\t\t\tk *= j\n\t\t\t\tj += 2\n\treturn False"}
{"task_id": "HumanEval/81", "completion": "    grades = [round(grade, 1) for grade in grades]\n    return [grade_to_letter(gpa) for gpa in grades]\n\ndef grade_to_letter(gpa):\n    if gpa >= 4.0:\n        return 'A+'\n    elif gpa >= 3.7:\n        return 'A'\n    elif gpa >= 3.3:\n        return 'A-'\n    elif gpa >= 3.0:\n        return 'B+'\n    elif gpa >= 2.7:\n        return 'B'\n    elif gpa >= 2.3:\n        return 'B-'\n    elif gpa >= 2.0:\n        return 'C+'\n    elif gpa >= 1.7:\n        return 'C'\n    elif gpa >= 1.3:\n        return 'C-'\n    elif gpa >= 1.0:\n        return 'D+'\n    elif gpa >= 0.7:\n        return 'D'\n    elif gpa >= 0.0:\n        return 'D-'\n    else:\n        return 'E'"}
{"task_id": "HumanEval/84", "completion": "    res = 0\n    while N:\n        res = res * 2 + N % 2\n        N = N // 2\n    return bin(res)[2:]"}
{"task_id": "HumanEval/85", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    if n <= 2:\n        return []\n    sieve = [False] * (n + 1)\n    sieve[2] = True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if sieve[i]:\n            for j in range(i*i, n+1, i):\n                sieve[j] = False\n    result = [x for x in range(2, n) if sieve[x]]\n    return result"}
{"task_id": "HumanEval/97", "completion": "    unit_a = a % 10\n    unit_b = b % 10\n    return unit_a * unit_b"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num == 0:\n        return 0\n    elif num > 0:\n        return int(num) + 1\n    else:\n        return int(num)"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x, -2):\n        if i <= y and i >= x:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    average = (n + m) // 2\n    binary = bin(average)[2:]\n    return binary"}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        else:\n            return i * factorial(i-1)\n        \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    odd_sum = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            odd_sum += lst[i]\n    return odd_sum"}
{"task_id": "HumanEval/123", "completion": "    if n == 1:\n        return [1]\n    else:\n        result = []\n        while n != 1:\n            if n % 2 != 0:\n                result.append(n)\n            n = 3 * n + 1\n        return result"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (num > 0) - (num < 0)  # converting 0 to 1\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum"}
{"task_id": "HumanEval/130", "completion": "    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n    return dp"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n = n // 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    total = 0\n    for num in lst:\n        total += int(num**2)\n    return total"}
{"task_id": "HumanEval/136", "completion": "    min_positive = float('inf')\n    max_negative = float('-inf')\n    for num in lst:\n        if num < 0:\n            max_negative = max(max_negative, num)\n        elif num > 0:\n            min_positive = min(min_positive, num)\n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/139", "completion": "    if n <= 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    nums.sort(key=lambda x: (sum_of_digits(x), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        first_digit = int(str(num)[0])\n        last_digit = int(str(num)[-1])\n        if num > 10 and first_digit % 2 != 0 and last_digit % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 < index2:\n        return planets[index1+1:index2]\n    elif index1 > index2:\n        return planets[index2+1:index1]\n    else:\n        return ()"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    sum_of_squares = 0\n    for num in lst:\n        if num > 0 and num % 2 != 0:\n            sum_of_squares += num * num\n    return sum_of_squares"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n\todd_count = 0\n\twhile num > 0:\n\t\tlast_digit = num % 10\n\t\tif last_digit % 2 == 0:\n\t\t\teven_count += 1\n\t\telse:\n\t\t\todd_count += 1\n\t\tnum = num // 10\n\treturn (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    if (number + need) > remaining:\n        return [remaining, 0]\n    else:\n        return [number + need, remaining - (number + need)]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    i = 1\n    while i < len(operator):\n        if operator[i] == \"+\":\n            result += operand[i+1]\n        elif operator[i] == \"-\":\n            result -= operand[i+1]\n        elif operator[i] == \"*\":\n            result *= operand[i+1]\n        elif operator[i] == \"//\":\n            result //= operand[i+1]\n        elif operator[i] == \"**\":\n            result **= operand[i+1]\n        i += 2\n    return result"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        num_str = str(num)\n        even_digits = [int(digit) for digit in num_str if int(digit) % 2 == 0]\n        if even_digits:\n            result.append(int(''.join(map(str, even_digits))))\n    return result"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    return number - integer_part"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(absolute_deviations)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)-1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    else:\n        sum = sum(numbers)\n        product = 1\n        for num in numbers:\n            product *= num\n        return sum, product"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    if len(numbers) < 2:\n        raise ValueError(\"Input list should have at least two elements\")\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds roots of a polynomial with coefficients xs.\n    return x such that poly(x) = 0\n    \"\"\"\n    n = len(xs)\n    assert n % 2 == 0\n    largest_non_zero_coeff = max([coeff for coeff in xs if coeff != 0])\n    return -largest_non_zero_coeff / (xs[0] + xs[1] + xs[2])"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l = [l[i] for i in range(n) if i % 3 != 0]\n    l.sort()\n    res = []\n    for i in range(n):\n        if i % 3 == 0:\n            res.append(l[i//3])\n        else:\n            res.append(l[i//3])\n    return res"}
{"task_id": "HumanEval/37", "completion": "    res = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            res.append(sorted(l[i:]))\n        else:\n            res.append(l[i])\n    return res"}
{"task_id": "HumanEval/39", "completion": "    a, b = 0, 1\n    for _ in range(2):\n        if is_prime(a):\n            return a\n        a, b = b, a + b\n    return -1\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/41", "completion": "    return n*(n-1)//2"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 2, 2, 0\n    for _ in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n\tn = len(l)\n\tif n % 2 == 0:\n\t\treturn (l[n//2 - 1] + l[n//2]) / 2.0\n\telse:\n\t\treturn l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    res = pow(n, p-2, p)  # pow(n, x, p) returns x-th power of n in p\n    return res"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n\t\treturn n\n\telse:\n\t\ta, b = 0, 1\n\t\tfor _ in range(2, n + 1):\n\t\t\ta, b = b, a + b\n\t\treturn b"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            n = n // divisor\n        else:\n            divisor += 1\n    return divisor - 1"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    ans = [0] * (n-1)\n    for i in range(1, n):\n        ans[i-1] = xs[i] * i\n    return ans"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a = 0\n        b = 1\n        c = a + b + fibfib(n-3)\n        return c"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    num_length = len(num_str)\n    shift = shift % num_length\n    return num_str[-shift:] + num_str[:-shift] if shift != 0 else num_str[::-1]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n\t\ts = (a + b + c) / 2\n\t\tarea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\t\treturn round(area, 2)\n\telse:\n\t\treturn -1"}
{"task_id": "HumanEval/75", "completion": "    if a < 3:\n        return False\n    for i in range(2, a//2):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    grade_points = {\n        4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-',\n        2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-',\n        0.0: 'E'\n    }\n    return [grade_points.get(gpa, 'Invalid GPA') for gpa in grades]"}
{"task_id": "HumanEval/84", "completion": "    ans = bin(N)[2:]\n\tsumm = 0\n\tfor i in ans:\n\t\tsumm += int(i)\n\treturn str(summ)"}
{"task_id": "HumanEval/85", "completion": "    res = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            res += lst[i]\n    return res"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            result.append((i, lst[i].index(x)))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    result = []\n    for num in range(2, n+1):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/97", "completion": "    unit_a = a % 10\n    unit_b = b % 10\n    return unit_a * unit_b"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num == 0:\n        return 0\n    elif num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"task_id": "HumanEval/102", "completion": "    for i in range(y, x, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = n + m\n    return bin(total // 2)[2:]"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/123", "completion": "    def collatz(x):\n        if x == 1:\n            return [1]\n        seq = [x]\n        while x != 1:\n            if x % 2 == 0:\n                x = x // 2\n            else:\n                x = 3 * x + 1\n            seq.append(x)\n        return seq\n\n    odd_numbers = [x for x in collatz(n) if x % 2 != 0]\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num\n    result = 0\n    for num in arr:\n        result += abs(num) * (1 if num > 0 else -1 if num < 0 else 0)\n    return product * result"}
{"task_id": "HumanEval/130", "completion": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    else:\n        seq = [1, 3, 2, 8]\n        for i in range(4, n + 1):\n            seq.append(seq[i - 1] + seq[i - 2] + seq[i - 3])\n        return seq"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    return sum(round(x**2) for x in lst)"}
{"task_id": "HumanEval/136", "completion": "    min_positive = None\n    max_negative = None\n\n    for num in lst:\n        if num > 0 and (min_positive is None or num < min_positive):\n            min_positive = num\n        elif num < 0 and (max_negative is None or num > max_negative):\n            max_negative = num\n\n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "    if isinstance(a, str) and isinstance(b, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n    elif isinstance(a, int) and isinstance(b, int):\n        pass\n    elif isinstance(a, float) and isinstance(b, float):\n        pass\n    else:\n        return \"Invalid Input\"\n    \n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/139", "completion": "    if n < 0:\n        return -1\n    if n == 0 or n == 1:\n        return 1\n    result = 1\n    for i in range(2, n+1):\n        result *= i\n    for i in range(2, n-1):\n        result *= (n-i+1)\n    return result"}
{"task_id": "HumanEval/142", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n            sum += lst[i]**3\n    return sum"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(num):\n        result = 0\n        while num > 0:\n            result += num % 10\n            num = num // 10\n        return result\n\n    nums.sort(key=lambda x: (sum_of_digits(x), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = min(planets[planet1], planets[planet2])\n    end = max(planets[planet1], planets[planet2])\n    result = []\n    for planet, orbit in planets.items():\n        if start < orbit < end:\n            result.append(planet)\n    return tuple(result)"}
{"task_id": "HumanEval/150", "completion": "    if n % 2 != 0:\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            if num % 2 != 0:\n                total += num * num\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    if (number + remaining) < need:\n        return [number + remaining, 0]\n    else:\n        return [need, (number + remaining) - need]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    i = 0\n    while i < len(operator):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n        i += 1\n    return result"}
{"task_id": "HumanEval/163", "completion": "    return [i for i in range(a, b+1) if any(c.isdigit() and int(c) % 2 == 0 for c in str(i))]"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimals = number - integer_part\n    return decimals"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    abs_deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return abs_deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce((lambda x, y: x * y), numbers)"}
{"task_id": "HumanEval/13", "completion": "    if b == 0:\n\t\treturn a\n\telse:\n\t\treturn greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/20", "completion": "    closest = float('inf')\n    result = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < closest:\n                closest = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds the zero point of the given polynomial using bisection method.\n    \"\"\"\n    a, b = -1, 1\n    eps = 0.0001\n    while (b - a > eps):\n        mid = (a + b) / 2\n        if poly(xs, mid) > 0:\n            b = mid\n        else:\n            a = mid\n    return round(mid, 2)"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    result = []\n    for i in range(n):\n        if i % 3 != 0:\n            result.append(l[i])\n        else:\n            result.append(l[i//3])\n    return result"}
{"task_id": "HumanEval/37", "completion": "    sorted_even_values = sorted(l[::2])\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(sorted_even_values.pop(0))\n        else:\n            result.append(l[i])\n    return result"}
{"task_id": "HumanEval/39", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    if is_prime(b):\n        return b\n    else:\n        return -1\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/41", "completion": "    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    area = (a * h) / 2\n    return area"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 1, 0, 1\n    for _ in range(n):\n        a, b, c, d = b, c, d, a+b+c+d\n    return a"}
{"task_id": "HumanEval/47", "completion": "    n = len(l)\n    l.sort()\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    result = pow(n, p-2, p)\n\treturn result"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    l1_set = set(l1)\n    l2_set = set(l2)\n    return l1_set.intersection(l2_set)"}
{"task_id": "HumanEval/59", "completion": "    # Count the number of 2s that divide n\n    count = 0\n    while n % 2 == 0:\n        n //= 2\n        count += 1\n    \n    # n must be odd at this point, so a skip of 2 is used\n    for i in range(3, int(n**0.5)+1, 2):\n        # While i divides n, append i and divide n\n        while n % i == 0:\n            count += 1\n            n //= i\n    \n    # If n is a prime number greater than 2\n    if n > 2:\n        count += 1\n    \n    return count"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    ans = [0] * (n-1)\n    for i in range(1, n):\n        ans[i-1] = xs[i] * i\n    return ans"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    num_len = len(num_str)\n    shift = shift % num_len\n    if shift == 0:\n        return num_str\n    else:\n        return num_str[shift:] + num_str[:shift]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n\t\treturn round((a * b * c) / 6, 2)\n\telse:\n\t\treturn -1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    result = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            result.append('A+')\n        elif gpa >= 3.7:\n            result.append('A')\n        elif gpa >= 3.3:\n            result.append('A-')\n        elif gpa >= 3.0:\n            result.append('B+')\n        elif gpa >= 2.7:\n            result.append('B')\n        elif gpa >= 2.3:\n            result.append('B-')\n        elif gpa >= 2.0:\n            result.append('C+')\n        elif gpa >= 1.7:\n            result.append('C')\n        elif gpa >= 1.3:\n            result.append('C-')\n        elif gpa >= 1.0:\n            result.append('D+')\n        elif gpa >= 0.7:\n            result.append('D')\n        else:\n            result.append('D-')\n    return result"}
{"task_id": "HumanEval/84", "completion": "    return bin(N)[2:]"}
{"task_id": "HumanEval/85", "completion": "    res = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            res += lst[i]\n    return res"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        col_index = 0\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n            col_index += 1\n    return sorted(result, key=lambda item: (item[0], -item[1]))"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_numbers = []\n    num = 2\n    while len(prime_numbers) < n:\n        if is_prime(num):\n            prime_numbers.append(num)\n        num += 1\n    return prime_numbers"}
{"task_id": "HumanEval/97", "completion": "    return a % 10 * b % 10"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"task_id": "HumanEval/102", "completion": "    while x <= y:\n        mid = x + (y - x) // 2\n        if mid % 2 == 0:\n            y = mid - 1\n        else:\n            x = mid + 1\n    if x > y:\n        return -1\n    else:\n        return x"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    rounded_avg = round(avg)\n    bin_avg = bin(rounded_avg)[2:]\n    return bin_avg"}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 0:\n            return 1\n        else:\n            return i * factorial(i - 1)\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/123", "completion": "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return get_odd_collatz(n//2)\n    else:\n        return get_odd_collatz(3*n + 1)"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    \n    product = 1\n    magnitude_sum = 0\n    for num in arr:\n        product *= num\n        magnitude_sum += abs(num)\n        \n    if arr[-1] < 0:\n        magnitude_sum *= -1\n        \n    return magnitude_sum * product"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        a, b, c = 1, 3, 2\n        result = [1, 3]\n        for i in range(2, n + 1):\n            d = a + b + c\n            result.append(d)\n            a, b, c = b, c, d\n        return result"}
{"task_id": "HumanEval/131", "completion": "    odd_product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            odd_product *= digit\n        n //= 10\n    return odd_product"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += (int(num) ** 2)\n    return result"}
{"task_id": "HumanEval/136", "completion": "    min_pos = None\n    max_neg = None\n    \n    for num in lst:\n        if num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n        elif num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    \n    return (max_neg, min_pos)"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif isinstance(a, int):\n        return max(a, int(b.replace(',', '.')))\n    elif isinstance(a, float):\n        return max(a, float(b.replace(',', '.')))\n    else:\n        return max(float(a.replace(',', '.')), float(b.replace(',', '.')))"}
{"task_id": "HumanEval/139", "completion": "    if n <= 1:\n        return 1\n    res = 1\n    for i in range(2, n+1):\n        res *= i\n    return res"}
{"task_id": "HumanEval/142", "completion": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n    return sum"}
{"task_id": "HumanEval/145", "completion": "    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    nums.sort(key=lambda x: (sum_of_digits(x), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = int(str(num)[0])\n            last_digit = int(str(num)[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1) + 1\n    end = planets.index(planet2)\n    return sorted(planets[start:end+1])"}
{"task_id": "HumanEval/150", "completion": "    if n % 2 != 0 and n % 3 != 0:\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    result = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            result += (num * num)\n    return result"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num != 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    if need > remaining:\n        return [remaining, 0]\n    else:\n        return [need, remaining - need]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(1, len(operand), 2):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    for num in range(a, b+1):\n        num_str = str(num)\n        for digit in num_str:\n            if int(digit) % 2 == 0:\n                even_digits.append(int(digit))\n    return even_digits"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimals = number - integer_part\n    return decimals"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers), 2):\n        result.append(delimeter)\n        result.append(numbers[i])\n    if len(numbers) % 2 == 1:\n        result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), numbers[0] * (1 if len(numbers) == 1 else reduce(lambda x, y: x * y, numbers[1:], 1))"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds a zero of the given polynomial using the Lagrange formula.\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0 or max([abs(coeff) for coeff in xs[:n//2]]) != xs[n//2]:\n        raise ValueError(\"Only polynomials with even number of non-zero coefficients and largest non-zero coefficient are supported.\")\n\n    x = 0\n    for i in range(n):\n        x += xs[i] / (math.factorial(i) * math.factorial(n - i - 1))\n    return x"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    res = [0]*n\n    for i in range(n):\n        res[(i+1)%3] = l[i]\n    res = sorted(res)\n    for i in range(n):\n        res[i] = res[i%3]\n    return res"}
{"task_id": "HumanEval/37", "completion": "    n = len(l)\n    l1 = [l[i] for i in range(1, n, 2)]\n    l2 = [l[i] for i in range(0, n, 2)]\n    l2.sort()\n    return l1 + l2"}
{"task_id": "HumanEval/39", "completion": "    a, b = 0, 1\n    count = 0\n    while count < n:\n        if is_prime(a + b):\n            count += 1\n        a, b = b, a + b\n    return a + b - 1\n\ndef is_prime(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    area = (a * h) / 2\n    return area"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 2, 0, 2\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c + d, a + b + c, a + b + c + d\n        return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    return pow(n, p-2, p)"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a+b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(2, n+1):\n        if n % i == 0:\n            while n % i == 0:\n                n = n // i\n            return i\n    return 1"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/62", "completion": "    result = []\n    for i in range(len(xs)):\n        if i == 0:\n            result.append(xs[0])\n        else:\n            result.append(result[i-1] + xs[i] * (i+1))\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(3, n+1):\n            a, b = b, a+b\n        return a"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    num_len = len(num_str)\n    shift = shift % num_len\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 2:\n        return False\n\n    for i in range(2, a):\n        if is_prime(i) and is_prime(a // i):\n            return True\n\n    return False"}
{"task_id": "HumanEval/81", "completion": "    def find_letter(num):\n        if num >= 4.0:\n            return 'A+'\n        elif num >= 3.7:\n            return 'A'\n        elif num >= 3.3:\n            return 'A-'\n        elif num >= 2.7:\n            return 'B+'\n        elif num >= 2.3:\n            return 'B'\n        elif num >= 2.0:\n            return 'C+'\n        elif num >= 1.7:\n            return 'C'\n        elif num >= 1.3:\n            return 'C-'\n        elif num >= 1.0:\n            return 'D+'\n        elif num >= 0.7:\n            return 'D'\n        elif num >= 0.0:\n            return 'F'\n        else:\n            return 'E'\n\n    result = []\n    for grade in grades:\n        result.append(find_letter(grade))\n    return result"}
{"task_id": "HumanEval/84", "completion": "    total_sum = 0\n    while N > 0:\n        total_sum += N % 2\n        N = N // 2\n    return bin(total_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j in range(len(row)-1, -1, -1):\n            if row[j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    if n <= 1:\n        return []\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num > 0:\n        return int(num)\n    elif num < 0:\n        return int(num) - 1\n    else:\n        return 0"}
{"task_id": "HumanEval/102", "completion": "    max_even_num = -1\n    for i in range(x, y+1):\n        if i % 2 == 0 and max_even_num < i:\n            max_even_num = i\n    return max_even_num"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    binary = bin(avg)[2:]\n    return binary"}
{"task_id": "HumanEval/106", "completion": "    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/123", "completion": "    def collatz(num):\n        if num == 1:\n            return [num]\n        sequence = [num]\n        while num != 1:\n            if num % 2 == 0:\n                num = num // 2\n            else:\n                num = 3 * num + 1\n            sequence.append(num)\n        return sequence\n    \n    odd_numbers = [x for x in collatz(n) if x % 2 != 0]\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    signs = [1 if num != 0 else 0 for num in arr]\n    result = 0\n    for i in range(len(arr)):\n        result += abs(arr[i]) * signs[i]\n    return result"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(3, n + 1):\n            result.append(result[i - 1] + result[i - 2] + result[i - 3])\n        return result"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n = n // 10\n    return product if product > 1 else 0"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num + 0.5) ** 2\n    return result"}
{"task_id": "HumanEval/136", "completion": "    min_positive = None\n    max_negative = None\n\n    for num in lst:\n        if num < 0 and (min_positive is None or num < min_positive):\n            min_positive = num\n        elif num > 0 and (max_negative is None or num > max_negative):\n            max_negative = num\n\n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "    try:\n        a = float(a)\n    except (ValueError, TypeError):\n        pass\n    try:\n        b = float(b)\n    except (ValueError, TypeError):\n        pass\n\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/139", "completion": "    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/142", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/145", "completion": "    def get_digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    nums.sort(key=lambda x: (get_digit_sum(x), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = num % 10\n            last_digit = num // 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    return sorted(planets[start_index + 1:end_index], key=lambda x: (x != \"Earth\", x))"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if num > 0 and num % 2 != 0:\n            total += num * num\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n\todd_count = 0\n\twhile num > 0:\n\t\tdigit = num % 10\n\t\tif digit % 2 == 0:\n\t\t\teven_count += 1\n\t\telse:\n\t\t\todd_count += 1\n\t\tnum = num // 10\n\treturn (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers), 2):\n        result.append(delimeter)\n        result.append(numbers[i])\n    if len(numbers) % 2 != 0:\n        result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/8", "completion": "    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = (float('inf'), float('inf'))\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    n = len(xs)\n    if n % 2 != 0:\n        return \"Not a polynomial\"\n    xs.pop(0)  # remove leading 1 coefficient\n    x = -xs[0] / xs[1]  # calculate first zero\n    return x"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    l2 = [l[i] for i in range(n) if i % 3 != 0]\n    l3 = [l[i] for i in range(n) if i % 3 == 0]\n    l3.sort()\n    l2.extend(l3)\n    return l2"}
{"task_id": "HumanEval/37", "completion": "    odd_indicies = [l[i] for i in range(1, len(l), 2)]\n    even_indicies = [l[i] for i in range(0, len(l), 2)]\n    even_indicies.sort()\n    return odd_indicies + even_indicies"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    count = 0\n    while True:\n        if a > n:\n            return -1\n        if is_prime(a) and is_prime(b):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b"}
{"task_id": "HumanEval/41", "completion": "    return n-1"}
{"task_id": "HumanEval/42", "completion": "    return [x+1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    area = (a * h) / 2\n    return area"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d + c, d\n    return c"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2-1] + l[n//2]) / 2.0\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    return (n % p) ** 2 % p"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a+b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    s1 = set(l1)\n    s2 = set(l2)\n    return list(s1.intersection(s2))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/62", "completion": "    if len(xs) < 2:\n        return []\n    res = [xs[1]]\n    for i in range(1, len(xs) - 1):\n        res.append(xs[i + 1] * (i + 1))\n    return res"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    shift = shift % len(num_str)\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n\t\ts = (a + b + c) / 2\n\t\tarea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\t\treturn round(area, 2)\n\telse:\n\t\treturn -1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('F')\n    return letter_grades"}
{"task_id": "HumanEval/84", "completion": "    res = 0\n    while N > 0:\n        res += N % 2\n        N = N // 2\n    return bin(res)[2:]"}
{"task_id": "HumanEval/85", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])-1, -1, -1):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    for num in range(2, n+1):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    val = float(value)\n    if val > 0:\n        return int(val)\n    elif val < 0:\n        return int(val) - 1\n    else:\n        return 0"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 != 0 or y % 2 != 0:\n        return -1\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            return num\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    average = (n + m) // 2\n    return bin(average)[2:]"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(1)\n            for j in range(2, i + 1):\n                result[i - 1] *= j\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/123", "completion": "    if n == 1:\n        return [1]\n    else:\n        result = []\n        while n != 1:\n            if n % 2 != 0:\n                n = 3 * n + 1\n            else:\n                n = n // 2\n            result.append(n)\n        return result"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    total_sum = sum(arr)\n    product_of_signs = 1\n    for num in arr:\n        product_of_signs *= num // abs(num)\n    return total_sum * product_of_signs"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    else:\n        dp = [1, 3, 2, 8]\n        for i in range(3, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2] + dp[i - 3])\n        return dp"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n = n // 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += int(num ** 2)\n    return result"}
{"task_id": "HumanEval/136", "completion": "    min_positive = None\n    max_negative = None\n    for num in lst:\n        if num > 0 and (min_positive is None or num < min_positive):\n            min_positive = num\n        elif num < 0 and (max_negative is None or num > max_negative):\n            max_negative = num\n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n    elif isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    elif isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    else:\n        return max(float(a), float(b))"}
{"task_id": "HumanEval/139", "completion": "    if n == 0 or n == 1:\n        return 1\n    else:\n        res = 1\n        for i in range(2, n+1):\n            res *= i\n        return res"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i]**3\n    return total"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n\n    nums.sort(key=lambda x: (digit_sum(x), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = int(str(num)[0]) % 2\n            last_digit = int(str(num)[-1]) % 2\n            if first_digit != 0 and last_digit != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    if idx1 == -1 or idx2 == -1:\n        return ()\n    return sorted(planets[idx1+1:idx2])"}
{"task_id": "HumanEval/150", "completion": "    if n <= 1:\n        return y\n    else:\n        return x_or_y(n - 1, x, y)"}
{"task_id": "HumanEval/151", "completion": "    sum_of_squares = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            if num % 2 != 0:\n                sum_of_squares += num**2\n    return sum_of_squares"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)"}
{"task_id": "HumanEval/159", "completion": "    total = number + need\n    if total > remaining:\n        return [remaining, 0]\n    else:\n        return [total, remaining - total]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    start = int(str(a)[-2:])\n    end = int(str(b)[-2:])\n\n    result = []\n    for i in range(start, end+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(delimeter)\n        result.append(numbers[i])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    min_diff = float('inf')\n    result = (float('inf'), float('-inf'))\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds the zero point of a polynomial with coefficients xs.\n    xs has even number of coefficients and largest non-zero coefficient\n    \"\"\"\n    n = len(xs)\n    if n % 2 == 1:\n        raise ValueError(\"Number of coefficients must be even\")\n    start = 1\n    while True:\n        x = (start + n) / 2\n        if poly(xs, x) < 1e-9:\n            return x\n        start = x\n    return None"}
{"task_id": "HumanEval/33", "completion": "    res = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            res.append(l[i])\n        else:\n            res.append(l[i])\n    return res"}
{"task_id": "HumanEval/37", "completion": "    sorted_list = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            sorted_list.append(l[i])\n        else:\n            sorted_list.append(l[i-1])\n    return sorted_list"}
{"task_id": "HumanEval/39", "completion": "    if n == 1:\n        return 2\n    a, b = 2, 3\n    for _ in range(n-1):\n        a, b = b, a+b\n    return b"}
{"task_id": "HumanEval/41", "completion": "    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    area = (a * h) / 2\n\treturn area"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c = 0, 2, 0\n        for _ in range(4, n+1):\n            a, b, c = b, c, a+b+c\n        return b"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    result = pow(n, p-2, p)\n    return result"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, a+b\n    return a"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    if n == 0:\n        return 0\n    else:\n        return n + sum_to_n(n-1)"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    ans = [0] * n\n    for i in range(n - 1):\n        ans[i + 1] = xs[i] * (i + 1)\n    return ans"}
{"task_id": "HumanEval/63", "completion": "    if n <= 3:\n        return {0: 0, 1: 0, 2: 1, 3: 1}[n]\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(4, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    num_len = len(num_str)\n    if shift > num_len:\n        return num_str[::-1]\n    else:\n        result = num_str[shift:] + num_str[:shift]\n        return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for i in range(2, a//2+1):\n        if a % i == 0:\n            if is_prime(i) and is_prime(a//i):\n                return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    result = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            result.append('A+')\n        elif gpa >= 3.7:\n            result.append('A')\n        elif gpa >= 3.3:\n            result.append('A-')\n        elif gpa >= 3.0:\n            result.append('B')\n        elif gpa >= 2.7:\n            result.append('B')\n        elif gpa >= 2.3:\n            result.append('B-')\n        elif gpa >= 2.0:\n            result.append('C')\n        elif gpa >= 1.7:\n            result.append('C+')\n        elif gpa >= 1.3:\n            result.append('D')\n        elif gpa >= 1.0:\n            result.append('D+')\n        else:\n            result.append('F')\n    return result\n\ndef grade_equation(grades):\n    result = numerical_letter_grade(grades)\n    return result"}
{"task_id": "HumanEval/84", "completion": "    num_str = str(N)\n    bin_sum = 0\n    for digit in num_str:\n        bin_sum += int(digit, 10)\n    return bin(bin_sum)[2:]"}
{"task_id": "HumanEval/85", "completion": "    odd_indices_sum = sum(lst[1::2])  # adding elements at odd indices\n    return odd_indices_sum"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j in range(len(row) - 1, -1, -1):\n            if row[j] == x:\n                result.append((i, j))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    primes = []\n    num = 2\n    while num <= n:\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    # Get the last two digits of a and b\n\tlast_digits_a = a % 10\n\tlast_digits_b = b % 10\n\t\n\t# Multiply the last two digits\n\tresult = last_digits_a * last_digits_b\n\t\n\treturn result"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return round(num) if num % 1 != 0 else num"}
{"task_id": "HumanEval/102", "completion": "    while x <= y:\n        if x % 2 == 0:\n            return x\n        x += 1\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)[2:]"}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 0:\n            return 1\n        else:\n            return i * factorial(i-1)\n    \n    def sum_from_1_to_n(i):\n        return sum(range(1, i+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_from_1_to_n(i))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    even_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            even_sum += lst[i]\n    return even_sum"}
{"task_id": "HumanEval/123", "completion": "    if n <= 0:\n        return []\n    res = [n]\n    while n != 1:\n        if n % 2 != 0:\n            n = 3 * n + 1\n        else:\n            n //= 2\n        res.append(n)\n    return res"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n\n    product = 1\n    magnitude = 0\n    for num in arr:\n        if num != 0:\n            product *= num\n            magnitude += num\n        else:\n            magnitude -= num\n\n    return magnitude * product"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        t = [1, 3, 2]\n        for i in range(3, n + 1):\n            t.append(t[i - 1] + t[i - 2] + t[i - 3])\n        return t"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n = n // 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    total = 0\n    for num in lst:\n        total += int(num+1)**2\n    return total\n\ndef round_sum_squares(lst):\n    return sum_squares([round(x) for x in lst])"}
{"task_id": "HumanEval/136", "completion": "    min_positive = float('inf')\n    max_negative = float('-inf')\n    for num in lst:\n        if num < 0:\n            max_negative = max(max_negative, num)\n        elif num > 0:\n            min_positive = min(min_positive, num)\n    return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n        return a if a > b else b\n    else:\n        try:\n            return a if float(a) > float(b) else b\n        except ValueError:\n            return a if a > b else b"}
{"task_id": "HumanEval/139", "completion": "    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n+1):\n            fact *= i\n        return fact"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i]**3\n    return total\n\ndef sum_of_squares(lst):\n    return sum_squares(lst)"}
{"task_id": "HumanEval/145", "completion": "    def get_digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n\n    nums.sort(key=lambda x: (get_digit_sum(x), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 != 0 or num % 100 != 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1+1:index2])\n    elif index1 > index2:\n        return tuple(planets[index2+1:index1])\n    else:\n        return ()"}
{"task_id": "HumanEval/150", "completion": "    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    sum_of_squares = 0\n    for num in lst:\n        if num >= 0 and isinstance(num, int) and num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    total = number + need\n    if total <= remaining:\n        return [total, 0]\n    else:\n        return [remaining, remaining - (total - remaining)]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    i = 1\n    while i < len(operand):\n        result = eval(str(result) + operator[i-1] + str(operand[i]))\n        i += 1\n    return result"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/2", "completion": "    decimal_part = number - int(number)\n    return decimal_part"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for num in numbers]\n    return sum(deviations) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)-1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    return (sum(numbers), (numbers[0] if numbers else 1) * reduce(lambda x, y: x * y, numbers[1:], 1))"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Finds the zero point of a polynomial with coefficients xs.\n    \"\"\"\n    # Check if the polynomial is even degree\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Polynomial should have even number of coefficients\")\n\n    # Check if the largest non-zero coefficient is at the beginning\n    if xs[0] != 0:\n        raise ValueError(\"Largest non-zero coefficient should be at the beginning\")\n\n    # Find the zero point\n    x = -xs[1] / xs[0]\n    return x"}
{"task_id": "HumanEval/33", "completion": "    n = len(l)\n    m = n // 3\n    l1 = l[:m]\n    l2 = l[m:]\n    l1.sort()\n    l2.sort()\n    l3 = [0] * m\n    for i in range(m):\n        l3[i] = l1[i]\n    for i in range(m):\n        l3[i + 2 * m] = l2[i]\n    return l3"}
{"task_id": "HumanEval/37", "completion": "    l_even = [l[i] for i in range(0, len(l), 2)]\n    l_even.sort()\n    l_odd = [l[i] for i in range(1, len(l), 2)]\n    return [*l_even, *l_odd]"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fibonacci_number(num: int) -> bool:\n        return (5 * num * num + 4) % 8 == 0 or (5 * num * num - 4) % 8 == 0\n\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if is_fibonacci_number(num) and is_prime(num):\n            count += 1\n    return num"}
{"task_id": "HumanEval/41", "completion": "    return n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c = 0, 2, 0\n        for _ in range(4, n+1):\n            a, b, c = b, c, a+b+c\n        return b"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2.0\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    return pow(n, p-2, p)"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    if n < 2:\n        return \"Invalid input, enter a number greater than 1\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/62", "completion": "    n = len(xs)\n    result = [0]*n\n    for i in range(n-1):\n        result[i+1] = xs[i+1] * (i + 1)\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(3, n+1):\n            a, b = b, a + b + b\n        return b"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    shift %= len(num_str)\n    return num_str[-shift:] + num_str[:-shift]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    prime_nums = [i for i in range(2, a) if is_prime(i)]\n    for i in range(len(prime_nums)):\n        for j in range(i+1, len(prime_nums)):\n            for k in range(j+1, len(prime_nums)):\n                if prime_nums[i] * prime_nums[j] * prime_nums[k] == a:\n                    return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    grade_points = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n    letter_grades = ['A+', 'A', 'A-', 'B', 'B', 'B-', 'C', 'C', 'C', 'D', 'D', 'F']\n    result = []\n    for g in grades:\n        for i in range(len(grade_points)):\n            if g >= grade_points[i]:\n                result.append(letter_grades[i])\n                break\n    return result"}
{"task_id": "HumanEval/84", "completion": "    res = bin(N)[2:]\n\tsumm = 0\n\tfor ch in res:\n\t\tif ch == '1':\n\t\t\tsumm += 1\n\treturn str(summ)"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[1::2])"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            result.append((i, lst[i].index(x)))\n    result.sort()\n    return result"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    result = []\n    for num in range(2, n):\n        if is_prime(num):\n            result.append(num)\n        if len(result) == n:\n            break\n    return result"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)"}
{"task_id": "HumanEval/102", "completion": "    for num in range(y, x - 1, -2):\n        if num >= x and num <= y:\n            return num\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    else:\n        average = (n + m) // 2\n        binary = bin(average)[2:]\n        return binary"}
{"task_id": "HumanEval/106", "completion": "    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    sum = 0\n    for i in range(0, len(lst), 2):\n        if i < len(lst) and lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    if n == 1:\n        return [1]\n    result = []\n    num = n\n    while num != 1:\n        if num % 2 != 0:\n            result.append(num)\n        num = 3 * num + 1\n    return result"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    result = 1\n    for num in arr:\n        result *= num\n    return abs(result)\n\n# Example Usage \nprint(prod_signs([1, 2, 3, -4, -5]))  # Output: 9"}
{"task_id": "HumanEval/130", "completion": "    if n <= 1:\n        return [1, 3]\n    a = 3\n    b = 2\n    c = 8\n    d = 1\n    ans = [1, 3, 2, 8]\n    for i in range(4, n + 1):\n        d = a + b + c\n        ans.append(d)\n        a = b\n        b = c\n        c = d\n    return ans"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    while n:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product"}
{"task_id": "HumanEval/133", "completion": "    total = 0\n    for num in lst:\n        total += int(num + 0.5) ** 2\n    return total"}
{"task_id": "HumanEval/136", "completion": "    max_neg = min_pos = None\n    for num in lst:\n        if isinstance(num, int) and num < 0:\n            max_neg = max(max_neg, num)\n        elif isinstance(num, int) and num > 0:\n            min_pos = min(min_pos, num)\n    return (max_neg, min_pos)"}
{"task_id": "HumanEval/137", "completion": "    a_type = type(a)\n    b_type = type(b)\n    if a_type == b_type:\n        return None\n    elif a_type == int and b_type == float:\n        return b\n    elif a_type == float and b_type == int:\n        return a\n    else:\n        return max(a, b)"}
{"task_id": "HumanEval/139", "completion": "    if n <= 1:\n        return 1\n    res = 1\n    fact = 1\n    for i in range(2, n + 1):\n        fact *= i\n        res += fact\n    return res"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n    return total"}
{"task_id": "HumanEval/145", "completion": "    def get_sum(n):\n        return sum(int(i) for i in str(n))\n\n    nums.sort(key=lambda x: (get_sum(x), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 != 0 and num % 10 != 2 and num % 10 != 4 and num % 10 != 6 and num % 10 != 8:\n                count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    result = []\n    for i in range(index1+1, index2):\n        result.append(planets[i])\n    return tuple(result)"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    total = 0\n    for num in lst:\n        if num > 0 and num % 2 != 0:\n            total += num * num\n    return total"}
{"task_id": "HumanEval/155", "completion": "    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)"}
{"task_id": "HumanEval/159", "completion": "    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"task_id": "HumanEval/160", "completion": "    result = operand[0]\n    for i in range(len(operand)-1):\n        op = operator[i]\n        if op == '+':\n            result += operand[i+1]\n        elif op == '-':\n            result -= operand[i+1]\n        elif op == '*':\n            result *= operand[i+1]\n        elif op == '//':\n            result //= operand[i+1]\n        elif op == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/163", "completion": "    return [num for num in range(a, b+1) if num % 2 == 0]"}
{"task_id": "HumanEval/2", "completion": "    return number % 1"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)-1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/8", "completion": "    total_sum = sum(numbers) if numbers else 0\n    product = 1 if numbers else 1\n    for num in numbers:\n        product *= num\n    return (total_sum, product)"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/20", "completion": "    closest_diff = float('inf')\n    result = None\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < closest_diff:\n                closest_diff = diff\n                result = (numbers[i], numbers[j])\n    return result"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Returns zero point of a polynomial defined by its coefficients xs\n    \"\"\"\n    assert len(xs) % 2 == 0 and xs[-1] != 0\n    start, end = 0, max(xs)\n    while start <= end:\n        mid = (start + end) / 2\n        if poly(xs, mid) > 0:\n            end = mid - 0.000001\n        else:\n            start = mid + 0.000001\n    return start"}
{"task_id": "HumanEval/33", "completion": "    l_odd = [l[i] for i in range(len(l)) if i % 3 != 0]\n    l_even = [l[i] for i in range(len(l)) if i % 3 == 0]\n    l_odd.sort()\n    return l_odd + l_even"}
{"task_id": "HumanEval/37", "completion": "    n = len(l)\n    l_even = [l[i] for i in range(1, n, 2)]\n    l_even.sort()\n    l_odd = [l[i] for i in range(0, n, 2)]\n    return l_odd + l_even"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_perfect_square(num):\n        root = int(num ** 0.5)\n        return root * root == num\n\n    def is_fib(num):\n        return is_perfect_square(5 * num * num + 4) or is_perfect_square(5 * num * num - 4)\n\n    def find_fib_primes(n):\n        a, b = 0, 1\n        count = 0\n        while True:\n            if is_prime(a):\n                if count == n:\n                    return a\n                count += 1\n            a, b = b, a + b\n        return -1\n\n    return find_fib_primes(n)"}
{"task_id": "HumanEval/41", "completion": "    return n - 1"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "    area = (a*h)/2\n\treturn area"}
{"task_id": "HumanEval/46", "completion": "    a, b, c, d = 0, 2, 2, 0\n    for _ in range(n):\n        a, b, c, d = b, c, d + b, a + c\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/49", "completion": "    result = pow(n, p - 2, p)\n    return result"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/55", "completion": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/58", "completion": "    set1 = set(l1)\n    set2 = set(l2)\n    return list(set1.intersection(set2))"}
{"task_id": "HumanEval/59", "completion": "    for i in range(n, 1, -1):\n        if n % i == 0:\n            if is_prime(i):\n                return i\n    return 1\n\ndef is_prime(num: int):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/62", "completion": "    return [xs[i+1] * (i + 1) for i in range(len(xs)-1)]"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b = 0, 1\n    for _ in range(3, n + 1):\n        a, b = b, a + b + b\n    return a"}
{"task_id": "HumanEval/65", "completion": "    num_str = str(x)\n    num_length = len(num_str)\n    shift = shift % num_length\n    return num_str[shift:] + num_str[:shift]"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/75", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for i in range(2, int(a / 2) + 1):\n        if a % i == 0 and is_prime(i) and is_prime(a // i):\n            return True\n    return False"}
{"task_id": "HumanEval/81", "completion": "    def grade_point_average(grade_points):\n        if grade_points >= 4.0:\n            return 'A+'\n        elif grade_points >= 3.7:\n            return 'A'\n        elif grade_points >= 3.3:\n            return 'A-'\n        elif grade_points >= 3.0:\n            return 'B+'\n        elif grade_points >= 2.7:\n            return 'B'\n        elif grade_points >= 2.3:\n            return 'B-'\n        elif grade_points >= 2.0:\n            return 'C+'\n        elif grade_points >= 1.7:\n            return 'C'\n        elif grade_points >= 1.3:\n            return 'C-'\n        elif grade_points >= 1.0:\n            return 'D+'\n        elif grade_points >= 0.7:\n            return 'D'\n        else:\n            return 'D-'\n    \n    letter_grades = [grade_point_average(g) for g in grades]\n    return letter_grades"}
{"task_id": "HumanEval/84", "completion": "    res = ''\n    while (N > 0):\n        res = str(N % 2) + res\n        N = N // 2\n    return res"}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0:  # odd index, check if even\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            result.append((i, lst[i].index(x)))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    result = []\n    for i in range(2, n):\n        if is_prime(i):\n            result.append(i)\n    return result"}
{"task_id": "HumanEval/97", "completion": "    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/99", "completion": "    if not value:\n        return 0\n    num = float(value)\n    integer = int(num)\n    if num - integer < -0.5:\n        return integer + 1\n    elif num - integer > 0.5:\n        return integer\n    else:\n        return integer if integer > 0 else -integer"}
{"task_id": "HumanEval/102", "completion": "    even_numbers = [num for num in range(x, y+1) if num % 2 == 0]\n    if even_numbers:\n        return max(even_numbers)\n    return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    total = (n + m) // 2\n    return bin(total)[2:]"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/116", "completion": "    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr"}
{"task_id": "HumanEval/121", "completion": "    odd_sum = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            odd_sum += lst[i]\n    return odd_sum"}
{"task_id": "HumanEval/123", "completion": "    def collatz(n):\n        if n == 1:\n            return [1]\n        if n % 2 == 0:\n            return collatz(n // 2)\n        else:\n            return collatz(3 * n + 1)\n\n    odd_numbers = [num for num in collatz(n) if num % 2 != 0]\n    odd_numbers.sort()\n    return odd_numbers"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    product = 1\n    magnitude = 1\n    for num in arr:\n        product *= num\n        if num < 0:\n            magnitude *= -1\n    return magnitude * product"}
{"task_id": "HumanEval/130", "completion": "    fib = [1, 0, 3]\n    a, b, c = fib[0], fib[1], fib[2]\n    for i in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n        fib.append(c)\n    return fib"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    even_count = 0\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        else:\n            even_count += 1\n        n //= 10\n    if even_count == 4:\n        return 0\n    return product"}
{"task_id": "HumanEval/133", "completion": "    result = 0\n    for num in lst:\n        result += num**2\n    return result"}
{"task_id": "HumanEval/136", "completion": "    min_positive = float('inf')\n    max_negative = float('-inf')\n    \n    for num in lst:\n        if num < 0:\n            max_negative = max(max_negative, num)\n        elif num > 0:\n            min_positive = min(min_positive, num)\n    \n    if max_negative == float('-inf') or min_positive == float('inf'):\n        return (None, None)\n    else:\n        return (max_negative, min_positive)"}
{"task_id": "HumanEval/137", "completion": "    a_type = type(a)\n    b_type = type(b)\n    \n    if a_type == b_type:\n        return None\n    \n    if a_type == int:\n        if a > b:\n            return a\n        else:\n            return b\n    elif a_type == float:\n        if a > b:\n            return a\n        else:\n            return b\n    else:\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        if a > b:\n            return a\n        else:\n            return b"}
{"task_id": "HumanEval/139", "completion": "    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num-1)\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result"}
{"task_id": "HumanEval/142", "completion": "    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total_sum += lst[i] ** 3\n        else:\n            total_sum += lst[i]\n    return total_sum"}
{"task_id": "HumanEval/145", "completion": "    def get_points(num):\n        return sum(map(int, str(num)))\n\n    nums.sort(key=lambda x: (get_points(x), x))\n    return nums"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = num % 10\n            last_digit = num % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    p1_index = planets.index(planet1) if planet1 in planets else -1\n    p2_index = planets.index(planet2) if planet2 in planets else -1\n    \n    if p1_index == -1 or p2_index == -1:\n        return ()\n    \n    return sorted(planets[p1_index+1:p2_index+1])"}
{"task_id": "HumanEval/150", "completion": "    if n < 2:\n        return y\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "HumanEval/151", "completion": "    sum_of_squares = 0\n    for num in lst:\n        if num >= 0 and isinstance(num, int):\n            if num % 2 != 0:\n                sum_of_squares += num * num\n    return sum_of_squares"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/159", "completion": "    if (need <= remaining):\n        return [number + need, 0]\n    else:\n        return [number + remaining, need - remaining]"}
{"task_id": "HumanEval/160", "completion": "    stack = []\n    i = 0\n    while i < len(operator) - 1:\n        stack.append(operand[i])\n        if operator[i] == '+':\n            stack[-2] += stack[-1]\n            stack.pop()\n        elif operator[i] == '-':\n            stack[-2] -= stack[-1]\n            stack.pop()\n        elif operator[i] == '*':\n            stack[-2] *= stack[-1]\n            stack.pop()\n        elif operator[i] == '//':\n            stack[-2] //= stack[-1]\n            stack.pop()\n        elif operator[i] == '**':\n            stack[-2] **= stack[-1]\n            stack.pop()\n        i += 1\n    return stack[0]"}
{"task_id": "HumanEval/163", "completion": "    even_digits = []\n    while a <= b:\n        if a % 2 == 0:\n            even_digits.append(a)\n        a += 1\n    return even_digits"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    result = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return result"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = float('-inf')\n    for element in l:\n        if element > max_element:\n            max_element = element\n    return max_element"}
{"task_id": "HumanEval/68", "completion": "    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] < min_val:\n                min_val = arr[i]\n                min_index = i\n    if min_val == float('inf'):\n        return []\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq = max(freq.values())\n    for num, freq in freq.items():\n        if freq >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return []\n    mid = len(lst) // 2\n    return lst[:mid] + strange_sort_list(lst[mid:]) + lst[:mid]"}
{"task_id": "HumanEval/73", "completion": "    def is_palindrome(s):\n        return s == s[::-1]\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0 if arr[i] == arr[i] else 1\n    for length in range(2, n+1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            dp[i][j] = min(1 + dp[i][j - 1], 1 + dp[i + 1][j]) if arr[i] != arr[j] else dp[i + 1][j]\n    return dp[0][n-1]"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        sum = 0\n        while num:\n            sum += num % 10\n            num //= 10\n        return sum\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    if max_prime == 0:\n        return 0\n    else:\n        return sum_of_digits(max_prime)"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        str_num = str(num)\n        if all(int(digit) % 2 != 0 for digit in str_num):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef replace_with_name(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(str(num))\n    result.sort(key=by_length, reverse=True)\n    result = [{\"One\": 1, \"Two\": 2, \"Three\": 3, \"Four\": 4, \"Five\": 5, \"Six\": 6, \"Seven\": 7, \"Eight\": 8, \"Nine\": 9}[x] for x in result]\n    return result"}
{"task_id": "HumanEval/114", "completion": "    if len(nums) == 0:\n        return 0\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    wells_count = 0\n    rows = len(grid)\n    cols = len(grid[0])\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                wells_count += 1\n    return math.ceil(wells_count / capacity)"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/122", "completion": "    count = 0\n    total = 0\n    for num in arr[:k]:\n        if num < 10:\n            total += num\n        else:\n            count += 1\n            total += num - 100\n    return total if count <= 2 else -1"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    if k == 1:\n        return [grid[0][0]]\n    \n    dp = [[0] * n for _ in range(k)]\n    dp[0][0] = grid[0][0]\n    \n    for i in range(1, k):\n        if dp[i-1][0] == 0:\n            dp[i][0] = grid[i][0]\n        else:\n            dp[i][0] = min(dp[i-1][0], grid[i][0])\n    \n    for j in range(1, n):\n        if dp[0][j-1] == 0:\n            dp[0][j] = grid[0][j]\n        else:\n            dp[0][j] = min(dp[0][j-1], grid[0][j])\n    \n    for i in range(1, k):\n        for j in range(1, n):\n            if dp[i-1][j] == 0:\n                dp[i][j] = grid[i][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], grid[i][j])\n    \n    for j in range(1, n):\n        if dp[k-1][j-1] == 0:\n            dp[k-1][j] = grid[k-1][j]\n        else:\n            dp[k-1][j] = min(dp[k-1][j-1], grid[k-1][j])\n    \n    ans = []\n    for i in range(k):\n        for j in range(n-1, -1, -1):\n            if dp[i][j] != 0:\n                ans.append(dp[i][j])\n                break\n    \n    return ans[::-1]"}
{"task_id": "HumanEval/135", "completion": "    largest_index = -1\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] >= arr[i-1]:\n            largest_index = i-1\n    return largest_index"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_element = float('-inf')\n    \n    for num in numbers:\n        if num > max_element:\n            max_element = num\n        result.append(max_element)\n    \n    return result"}
{"task_id": "HumanEval/21", "completion": "    if len(numbers) < 2:\n        raise ValueError(\"List should have at least two elements\")\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == 0 and max_num == 1:\n        return [0.0] * len(numbers)\n    if max_num == 1:\n        return [x / min_num for x in numbers]\n    if min_num == 0:\n        return [x * max_num for x in numbers]\n    return [(x - min_num) / (max_num - min_num) for x in numbers]"}
{"task_id": "HumanEval/24", "completion": "    if n == 1:\n\t\treturn 1\n\tfor i in range(n-1, 0, -1):\n\t\tif n % i == 0:\n\t\t\treturn i\n\treturn 1"}
{"task_id": "HumanEval/26", "completion": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    if not l:\n        return None\n    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = min([x for x in arr if x % 2 == 0])\n    if min_val == float('inf'):\n        return []\n    return [min_val, arr.index(min_val)]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    max_freq = max(lst)\n    if max_freq in freq and freq[max_freq] >= max_freq:\n        return max_freq\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    return sorted(lst, key=lambda x: (x in lst, max(lst)))"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if arr[i] == arr[j] and length == 2:\n                dp[i][j] = 0\n            elif arr[i] == arr[j]:\n                dp[i][j] = dp[i+1][j-1] + 1\n            else:\n                dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1\n    return n - dp[0][n-1]"}
{"task_id": "HumanEval/88", "completion": "    array_sum = sum(array[0], array[-1])\n    if array_sum % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    \n    min_val = float('inf')\n    next_smallest_val = float('inf')\n    \n    for num in lst:\n        if num < min_val:\n            next_smallest_val = min_val\n            min_val = num\n        elif num < next_smallest_val and num != min_val:\n            next_smallest_val = num\n    \n    return next_smallest_val"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = -1\n    max_prime_sum = -1\n    for num in lst:\n        if isPrime(num) and sum(int(digit) for digit in str(num)) > max_prime_sum:\n            max_prime = num\n            max_prime_sum = sum(int(digit) for digit in str(num))\n    return max_prime_sum"}
{"task_id": "HumanEval/104", "completion": "    digits = set()\n    for num in x:\n        for digit in str(num):\n            if int(digit) % 2 != 0:\n                digits.add(int(digit))\n    return sorted(list(digits))"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef digit_names(arr):\n    digit_dict = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    result = []\n    for num in arr:\n        if num >= 1 and num <= 9:\n            result.append(digit_dict[num])\n    result.sort(reverse=True)\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    def countSetBits(n):\n        count = 0\n        while (n):\n            count += n & 1\n            n >>= 1\n        return count\n\n    n = len(grid)\n    m = len(grid[0])\n    cnt = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                cnt += 1\n\n    ans = float('inf')\n    for i in range(cnt + 1):\n        ans = min(ans, cnt - i + countSetBits(i))\n\n    return ans"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/122", "completion": "    result = 0\n    i = 0\n    while i < k:\n        if arr[i] < 100:\n            result += arr[i]\n        else:\n            result += arr[i] - 100\n        i += 1\n    return result"}
{"task_id": "HumanEval/129", "completion": "    N = len(grid)\n    visited = [[False for _ in range(N)] for _ in range(N)]\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    res = []\n\n    def is_valid(x, y, visited, k, res):\n        return 0 <= x < N and 0 <= y < N and not visited[x][y] and k > 0\n\n    def dfs(x, y, visited, k, res):\n        visited[x][y] = True\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx, ny, visited, k - 1, res):\n                dfs(nx, ny, visited, k - 1, res)\n        res.append(grid[x][y])\n\n    def get_path(start_x, start_y, visited, k):\n        visited[start_x][start_y] = True\n        dfs(start_x, start_y, visited, k, res)\n\n    for i in range(N):\n        for j in range(N):\n            visited = [[False for _ in range(N)] for _ in range(N)]\n            get_path(i, j, visited, k)\n            if len(res) == k:\n                return res\n    return res"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    prev_max = arr[0]\n    max_idx = 0\n    for i in range(1, n):\n        if arr[i] <= prev_max:\n            prev_max = arr[i]\n            max_idx = i\n        else:\n            return -1\n    return max_idx"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    max_ending_here = max_so_far = numbers[0]\n    result = [numbers[0]]\n\n    for num in numbers[1:]:\n        max_ending_here = max(num, max_ending_here + num)\n        max_so_far = max(max_so_far, max_ending_here)\n        result.append(max_so_far)\n\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    result = [(num - min_val) / (max_val - min_val) for num in numbers]\n    return result"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/26", "completion": "    left = 0\n    for right in range(len(numbers)):\n        if numbers[right] != numbers[left]:\n            numbers[left] = numbers[right]\n            left += 1\n    return numbers[:left]"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_elem = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_elem:\n            max_elem = l[i]\n    return max_elem"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    \n    min_even_val = float('inf')\n    min_even_index = -1\n    \n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_even_val:\n            min_even_val = val\n            min_even_index = i\n    \n    if min_even_val == float('inf'):\n        return []\n    else:\n        return [min_even_val, min_even_index]"}
{"task_id": "HumanEval/69", "completion": "    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n    max_freq = max(freq_map.values())\n    result = -1\n    for num, freq in freq_map.items():\n        if freq >= num and num > result:\n            result = num\n    return result"}
{"task_id": "HumanEval/70", "completion": "    return sorted(lst, key=lambda x: (x % 2, x))"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return array\n    elif sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    second_min = float('inf')\n    for num in lst:\n        if num < min_val:\n            second_min = min_val\n            min_val = num\n        elif num < second_min and num != min_val:\n            second_min = num\n    return second_min"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    max_prime = max([x for x in lst if is_prime(x)])\n    return sum([int(x) for x in str(max_prime)])"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        has_even_digit = False\n        num_str = str(num)\n        for digit in num_str:\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return len(arr), arr\n\ndef between_1_and_9(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(num)\n    return result\n\ndef reverse_nums(arr):\n    return sorted(arr, reverse=True)\n\ndef replace_with_name(arr):\n    name_map = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    return [name_map[num] for num in arr]\n\ndef sort_between_1_and_9(arr):\n    between_1_and_9_arr = between_1_and_9(arr)\n    reverse_nums_arr = reverse_nums(between_1_and_9_arr)\n    replaced_arr = replace_with_name(reverse_nums_arr)\n    return replaced_arr"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    water = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                water += 1\n    return min(water, capacity)"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/122", "completion": "    res = 0\n    for i in range(min(k, len(arr))):\n        num = arr[i]\n        res += sum(int(digit) for digit in str(num)[:2])\n    return res"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    for i in range(k):\n        for j in range(n):\n            if i+1 < n:\n                grid[j][i+1] += grid[j][i]\n            if i+1 < n:\n                grid[j+1][i] += grid[j][i]\n    ans = []\n    for _ in range(k):\n        ans.append(grid[0][0])\n        grid[0][0] = float('inf')\n    return ans"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    prev = -float('inf')\n    res = -1\n    for i in range(n-1, -1, -1):\n        if arr[i] <= prev:\n            res = i\n            break\n        prev = arr[i]\n    return res"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    n = len(numbers)\n    res = []\n    max_num = float('-inf')\n    \n    for i in range(n):\n        max_num = max(max_num, numbers[i])\n        res.append(max_num)\n        \n    return res"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    res = [(x - min_val) / (max_val - min_val) for x in numbers]\n    \n    return res"}
{"task_id": "HumanEval/24", "completion": "    if n <= 1:\n\t\treturn -1\n\tfor i in range(n-1, 0, -1):\n\t\tif n % i == 0:\n\t\t\treturn i\n\treturn -1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = float('-inf')\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n\n    min_val = min(arr)\n    if min_val % 2 != 0:\n        return []\n\n    min_index = arr.index(min_val)\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    max_val = -1\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n        if freq[num] >= num and num > max_val:\n            max_val = num\n    return max_val"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return lst\n    \n    result = []\n    lst.sort()\n    i = 0\n    j = len(lst) - 1\n    while i <= j:\n        if i != j:\n            result.append(lst[i])\n            result.append(lst[j])\n        else:\n            result.append(lst[i])\n        i += 1\n        j -= 1\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n    return changes"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    second_min_val = float('inf')\n    for num in lst:\n        if num < min_val:\n            second_min_val = min_val\n            min_val = num\n        elif num < second_min_val and num != min_val:\n            second_min_val = num\n    return second_min_val"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    if max_prime == -1:\n        return -1\n\n    def sum_of_digits(n):\n        s = 0\n        while n > 0:\n            s += n % 10\n            n //= 10\n        return s\n\n    return sum_of_digits(max_prime)"}
{"task_id": "HumanEval/104", "completion": "    res = []\n    for i in x:\n        if str(i).isdigit() and int(str(i)) % 2 != 0:\n            res.append(i)\n    return sorted(res)"}
{"task_id": "HumanEval/105", "completion": "    def length(n):\n        return len(str(n))\n    arr.sort(key=lambda x: length(x))\n\ndef replace_digits(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(names[num-1])\n        else:\n            result.append(str(num))\n    return result\n\ndef sort_and_replace(arr):\n    if len(arr) == 0:\n        return []\n    by_length(arr)\n    result = replace_digits(arr)\n    return result[::-1]"}
{"task_id": "HumanEval/114", "completion": "    n = len(nums)\n    min_sum = float('inf')\n    curr_sum = 0\n    for i in range(n):\n        curr_sum = min(nums[i], curr_sum + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    low, high = 0, max(map(max, grid))\n\n    while low < high:\n        mid = low + (high - low) // 2\n        cnt = 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] > mid:\n                    cnt += math.inf\n                else:\n                    cnt += grid[i][j]\n        if cnt <= capacity:\n            low = mid + 1\n        else:\n            high = mid\n\n    return low"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/122", "completion": "    digits = [0] * 10\n    for num in arr[:k]:\n        for digit in str(num):\n            digits[int(digit)] += 1\n    ans = sum(digits)\n    ans -= digits[0] if digits[0] > 0 else 0\n    return ans"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + grid[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i-1][j] + grid[i][j], dp[i][j-1] + grid[i][j])\n    ans = []\n    for _ in range(k):\n        i, j = n-1, n-1\n        while i > 0 and j > 0 and dp[i][j] == dp[i-1][j] + grid[i][j]:\n            i -= 1\n        if i == 0 and j > 0:\n            ans.append(grid[j][j-1])\n            j -= 1\n        else:\n            ans.append(grid[i-1][j])\n            i -= 1\n    return ans[::-1]"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    max_val = float('-inf')\n    max_index = -1\n    for i in range(n):\n        if arr[i] >= max_val:\n            max_val = arr[i]\n            max_index = i\n        else:\n            return max_index\n    return max_index"}
{"task_id": "HumanEval/152", "completion": "    result=[]\n    for i in range(len(game)):\n        if game[i]==guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    res = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(num, max_num)\n        res.append(max_num)\n    return res"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    result = [(num - min_val) / (max_val - min_val) for num in numbers]\n    return result"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n - 1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/26", "completion": "    return list(set(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_val:\n            min_val = val\n            min_index = i\n    if min_val == float('inf'):\n        return []\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    max_freq = 0\n    result = -1\n    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n        if freq_map[num] >= num and num > max_freq:\n            max_freq = num\n            result = num\n    return result"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    result = []\n    i = 0\n    j = len(lst) - 1\n    while i <= j:\n        if i != j:\n            result.append(lst[i])\n            result.append(lst[j])\n        else:\n            result.append(lst[i])\n        i += 1\n        j -= 1\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = 1 + min(dp[i+1][j], dp[i][j+1])\n    return dp[0][0]"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    next_min = float('inf')\n    for num in lst:\n        if num < min_val:\n            next_min = min_val\n            min_val = num\n        elif num < next_min:\n            next_min = num\n    return next_min"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_values = [x for x in lst if is_prime(x)]\n    if not prime_values:\n        return 0\n    else:\n        max_prime = max(prime_values)\n        return sum([int(x) for x in str(max_prime)])"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        flag = True\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                flag = False\n                break\n        if flag:\n            result.append(num)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=lambda x: len(str(x)))\n\ndef replace_numbers(arr):\n    name_map = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(name_map[num])\n        else:\n            result.append(str(num))\n    return result\n\ndef sort_and_replace(arr):\n    arr = by_length(arr)\n    arr.sort(reverse=True)\n    return replace_numbers(arr)"}
{"task_id": "HumanEval/114", "completion": "    if not nums:\n        return 0\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    m, n = len(grid), len(grid[0])\n    cnt = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                cnt += 1\n    return min(cnt, math.ceil(cnt / capacity))"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/122", "completion": "    if k==0:\n        return 0\n    digit_sum = 0\n    for i in range(min(k, len(arr))):\n        digit_sum += sum(int(d) for d in str(arr[i]))\n    return digit_sum"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[float('inf') for j in range(n)] for i in range(n)]\n    dp[0][0] = grid[0][0]\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\n    def isValid(x, y, prevVal):\n        return 0 <= x < n and 0 <= y < n and grid[x][y] != prevVal\n\n    queue = [(0, 0, grid[0][0])]\n    while queue:\n        x, y, currVal = queue.pop(0)\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            newVal = grid[nx][ny]\n            if isValid(nx, ny, currVal) and dp[nx][ny] > dp[x][y] + 1:\n                dp[nx][ny] = dp[x][y] + 1\n                queue.append((nx, ny, newVal))\n            elif dp[nx][ny] > dp[x][y] + 2:\n                dp[nx][ny] = dp[x][y] + 2\n                queue.append((nx, ny, newVal))\n\n    ans = []\n    for _ in range(k):\n        x, y, val = min(enumerate(dp), key=lambda x: x[1])\n        ans.append(val)\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if isValid(nx, ny, val):\n                dp[nx][ny] = float('inf')\n\n    return ans"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    max_val = arr[0]\n    max_index = 0\n    for i in range(1, n):\n        if arr[i] <= max_val and arr[i] > max_val:\n            max_val = arr[i]\n            max_index = i\n    if max_val < arr[max_index - 1]:\n        return max_index - 1\n    return -1"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    for i in range(len(numbers)):\n        max_val = float('-inf')\n        for j in range(i, len(numbers)):\n            max_val = max(max_val, numbers[j])\n            result.append(max_val)\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    result = [(num - min_val) / (max_val - min_val) for num in numbers]\n    return result"}
{"task_id": "HumanEval/24", "completion": "    if n < 4:\n        return n\n    for i in range(n - 1, 1, -1):\n        if n % i == 0:\n            return i\n    return n"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    return max(l)"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if num < min_val:\n                min_val = num\n                min_index = i\n    if min_val == float('inf'):\n        return []\n    return [min_val, min_index]"}
{"task_id": "HumanEval/69", "completion": "    max_freq = 0\n    result = -1\n    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n        if freq_map[num] > num and num > result:\n            result = num\n    return result"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    n = len(lst)\n    result = []\n    i = 0\n    j = n - 1\n    while i <= j:\n        if i != j:\n            result.append(lst[i])\n            result.append(lst[j])\n        else:\n            result.append(lst[i])\n        i += 1\n        j -= 1\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    odd = 0\n    for i in range(n):\n        if arr[i] != arr[n-i-1]:\n            odd += 1\n    return min(odd, n-odd)"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0], array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    next_min = float('inf')\n    for num in lst:\n        if num < min_val:\n            next_min = min_val\n            min_val = num\n        elif num < next_min:\n            next_min = num\n    return next_min"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(num):\n        total = 0\n        while num > 0:\n            digit = num % 10\n            total += digit\n            num = num // 10\n        return total\n\n    maxVal = -1\n    for num in lst:\n        if num > maxVal and isPrime(num):\n            maxVal = num\n    return sumOfDigits(maxVal)"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(num):\n        while num:\n            digit = num % 10\n            if digit % 2 == 0:\n                return True\n            num //= 10\n        return False\n    \n    result = []\n    for num in x:\n        if not has_even_digit(num):\n            result.append(num)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef sort_replace(arr):\n    if not arr:\n        return []\n    between_ones = [x for x in arr if 1 <= x <= 9]\n    between_ones.sort()\n    between_ones.reverse()\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(num)\n        else:\n            result.append(get_name(num))\n    return result\n\ndef get_name(num):\n    return {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}[num]"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                res = max(res, math.ceil(min(i, m - j) / capacity))\n    return res"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for num in arr[:k]:\n        total += num\n    return total"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    graph = [[-1 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            graph[i][j] = i*n + j\n    visited = set()\n    def dfs(node, path):\n        if len(path) == k:\n            return path\n        result = []\n        for x, y in [(0,1), (1,0), (0,-1), (-1,0)]:\n            new_x, new_y = node[0] + x, node[1] + y\n            if 0 <= new_x < n and 0 <= new_y < n and (new_x, new_y) not in visited:\n                visited.add((new_x, new_y))\n                result = dfs((new_x, new_y), path + [graph[new_x][new_y]])\n                visited.remove((new_x, new_y))\n        return result\n    result = []\n    for i in range(n):\n        for j in range(n):\n            result = dfs((i,j), [graph[i][j]])\n            if result:\n                return result\n    return result"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    if n == 0:\n        return -1\n    max_val = arr[0]\n    max_index = 0\n    for i in range(1, n):\n        if arr[i] <= max_val:\n            max_val = max(max_val, arr[i])\n            max_index = max(max_index, i)\n        else:\n            break\n    if max_val == arr[-1]:\n        return -1\n    return max_index"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_so_far = float('-inf')\n    for i in range(len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    rescaled = [(num - min_val) / (max_val - min_val) for num in numbers]\n    return rescaled"}
{"task_id": "HumanEval/24", "completion": "    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = max(largest, i)\n    return largest"}
{"task_id": "HumanEval/26", "completion": "    return list(set(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_val:\n            min_val = val\n            min_index = i\n    return [min_val, min_index] if min_val != float('inf') else []"}
{"task_id": "HumanEval/69", "completion": "    freq_map = {}\n    max_freq = 0\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n        max_freq = max(max_freq, freq_map[num])\n    for num in sorted(lst, reverse=True):\n        if freq_map[num] >= num and max_freq >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    n = len(lst)\n    result = []\n    i, j = 0, n - 1\n    while i <= j:\n        if i != j:\n            result.append(lst[i])\n            result.append(lst[j])\n        else:\n            result.append(lst[i])\n        i += 1\n        j -= 1\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    diff = 0\n    for i in range(n//2):\n        diff += abs(arr[i] - arr[n-i-1])\n    return diff"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0], array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    next_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            next_smallest = smallest\n            smallest = num\n        elif num < next_smallest and num != smallest:\n            next_smallest = num\n    return next_smallest"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(n: int) -> int:\n        s = 0\n        while n > 0:\n            s += n % 10\n            n //= 10\n        return s\n\n    max_prime = -1\n    for num in lst:\n        if num > 0 and isPrime(num) and num > max_prime:\n            max_prime = num\n\n    if max_prime != -1:\n        return sumOfDigits(max_prime)\n    else:\n        return 0"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        flag = 1\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                flag = 0\n                break\n        if flag == 1:\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef replace_with_names(arr):\n    name_map = {1:\"One\", 2:\"Two\", 3:\"Three\", 4:\"Four\", 5:\"Five\", 6:\"Six\", 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"}\n    result = [name_map[int(x)] for x in arr if int(x) in name_map]\n    return result\n\ndef sort_between_1_and_9(arr):\n    between_1_and_9 = [str(x) for x in arr if 1 <= x <= 9]\n    between_1_and_9.sort(key=len)\n    between_1_and_9.reverse()\n    result = replace_with_names(between_1_and_9)\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    wells = []\n    for row in grid:\n        wells.append(row.count(1))\n    # Find the maximum amount of water that can be extracted from the wells\n    max_water = sum(wells)\n    # Convert the wells to a list of distances from the top of the grid\n    distance_from_top = [0] * len(grid)\n    for i in range(len(grid)-1, -1, -1):\n        distance_from_top[i] = distance_from_top[i+1] + len(grid[i]) - wells[i]\n    # Convert the distances to units\n    units = [(i, math.ceil(distance_from_top[i]/capacity)) for i in range(len(grid))]\n    return sum(units[i][1] for i in range(len(grid)) if units[i][0] < units[units[i][1]][0])"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[len(arr)-k:]"}
{"task_id": "HumanEval/122", "completion": "    count = 0\n    sum = 0\n    for num in arr[:k]:\n        if num > 9:\n            count += 1\n            sum += num\n    return sum if count <= 2 else float('inf')"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    ans = []\n    for _ in range(k):\n        visited = set()\n        for i in range(n):\n            for j in range(n):\n                visited.add(grid[i][j])\n        for i in range(n):\n            for j in range(n):\n                for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n                    if 0 <= x < n and 0 <= y < n and grid[x][y] not in visited:\n                        ans.append(grid[x][y])\n                        visited.add(grid[x][y])\n                        break\n    return ans"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    max_element = arr[0]\n    max_index = 0\n    for i in range(1, n):\n        if arr[i] < max_element:\n            max_element = arr[i]\n            max_index = i\n    if max_element < max_element:\n        return max_index\n    return -1"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    max_num = float('-inf')\n    result = []\n    for i in range(len(numbers)):\n        max_num = max(max_num, numbers[i])\n        result.append(max_num)\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    res = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return res"}
{"task_id": "HumanEval/24", "completion": "    if n <= 1:\n        return -1\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/68", "completion": "    smallest = float('inf')\n    index = -1\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest:\n            smallest = node\n            index = i\n    return [smallest, index] if smallest != float('inf') else []"}
{"task_id": "HumanEval/69", "completion": "    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n    max_freq = max(freq_map.values())\n    max_number = -1\n    for num, freq in freq_map.items():\n        if freq >= num and freq > max_freq:\n            max_freq = freq\n            max_number = num\n    return max_number"}
{"task_id": "HumanEval/70", "completion": "    result = []\n    lst.sort()\n    i = 0\n    while i < len(lst) - 1:\n        result.append(lst[i])\n        result.append(lst[-i-1])\n        i += 1\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/88", "completion": "    sum_first_last = sum(array[0], array[-1])\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(n):\n        total = 0\n        while n > 0:\n            total += n % 10\n            n //= 10\n        return total\n\n    max_prime = 0\n    for num in lst:\n        if isPrime(num) and num > max_prime:\n            max_prime = num\n    return sumOfDigits(max_prime)"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        flag = True\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                flag = False\n                break\n        if flag:\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    # sorting based on length of integer\n    return sorted(arr, key=lambda x: len(str(x)))\n\ndef replace_digit_by_name(arr):\n    name_map = {\"1\":\"One\", \"2\":\"Two\", \"3\":\"Three\", \"4\":\"Four\", \"5\":\"Five\", \"6\":\"Six\", \"7\":\"Seven\", \"8\":\"Eight\", \"9\":\"Nine\"}\n    result = []\n    for num in arr:\n        if num > 0 and num < 10:\n            result.append(name_map[str(num)])\n        else:\n            result.append(num)\n    return result\n\ndef sort_between_1_and_9_reverse(arr):\n    between_1_and_9 = [num for num in arr if num > 0 and num < 10]\n    between_1_and_9 = by_length(between_1_and_9)\n    between_1_and_9.reverse()\n    result = replace_digit_by_name(between_1_and_9)\n    return result"}
{"task_id": "HumanEval/114", "completion": "    total_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        total_sum = min(total_sum, current_sum)\n    return total_sum"}
{"task_id": "HumanEval/115", "completion": "    def is_valid(i, j, visited, bucket_used):\n        if i<0 or i>=len(grid) or j<0 or j>=len(grid[0]) or grid[i][j]==0 or visited[i][j] or bucket_used==0:\n            return False\n        return True\n\n    def dfs(i, j, visited, bucket_used):\n        visited[i][j] = True\n        row_sum = 0\n        for di, dj in [(0,1), (0,-1), (1,0), (-1,0)]:\n            new_i, new_j = i+di, j+dj\n            if is_valid(new_i, new_j, visited, bucket_used):\n                if grid[new_i][new_j]>0:\n                    row_sum += grid[new_i][new_j]\n                    bucket_used -= 1\n                dfs(new_i, new_j, visited, bucket_used)\n        if row_sum>0:\n            return math.ceil(row_sum/capacity)\n        else:\n            return 0\n\n    result = 0\n    for i in range(len(grid)):\n        visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n        for j in range(len(grid[0])):\n            if grid[i][j]>0 and not visited[i][j]:\n                result += dfs(i, j, visited, capacity)\n    return result"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    count = 0\n    for num in arr[:k]:\n        if len(str(num)) <= 2:\n            total += num\n            count += 1\n        if count == 2:\n            break\n    return total"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[float('inf') for _ in range(n+1)] for _ in range(n+1)]\n    dp[1][1] = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for x, y in [(1,0), (-1,0), (0,1), (0,-1)]:\n                r, c = i + x, j + y\n                if r <= n and c <= n:\n                    dp[i][j] = min(dp[i][j], dp[r][c] + (0 if grid[i-1][j-1] == grid[r-1][c-1] else 1))\n    ans = []\n    while k > 0:\n        min_val = float('inf')\n        r, c = -1, -1\n        for i in range(1, n+1):\n            for j in range(1, n+1):\n                if dp[i][j] < min_val:\n                    min_val = dp[i][j]\n                    r, c = i, j\n        ans.append(grid[r-1][c-1])\n        k -= 1\n        dp[r][c] = float('inf')\n    return ans"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    if n <= 1:\n        return -1\n    max_idx = -1\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            max_idx = i\n    if max_idx == -1:\n        return -1\n    for i in range(max_idx-1, -1, -1):\n        if arr[i] < arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/152", "completion": "    result=[]\n    for i in range(len(game)):\n        if game[i]==guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_ending_here = max_so_far = numbers[0]\n    for num in numbers[1:]:\n        max_ending_here = max(num, max_ending_here + num)\n        result.append(max_so_far)\n        max_so_far = max_ending_here\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    res = [(num - min_val) / (max_val - min_val) for num in numbers]\n    return res"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    return max(l)"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < min_val:\n            min_val = node\n            min_index = i\n    return [min_val, min_index] if min_val != float('inf') else []"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq = max(freq.values())\n    result = -1\n    for num, freq in freq.items():\n        if freq >= num and num > result:\n            result = num\n    return result"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return lst\n\n    result = []\n    lst.sort()\n    result.append(lst[0])\n\n    for i in range(1, len(lst)):\n        result.append(lst[-i])\n\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    diff = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            diff += 1\n    return diff"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    next_smallest = None\n    for num in lst:\n        if num < min_val:\n            min_val = num\n        elif num < next_smallest:\n            next_smallest = num\n    return next_smallest"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def getSumOfDigits(n):\n        s = 0\n        while n:\n            s += n % 10\n            n //= 10\n        return s\n\n    def largestPrimeSumOfDigits(lst):\n        max_prime = -1\n        for num in lst:\n            if isPrime(num) and num > max_prime:\n                max_prime = num\n        return getSumOfDigits(max_prime)\n\n    return largestPrimeSumOfDigits(lst)"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(num):\n        num_str = str(num)\n        return any(int(digit) % 2 == 0 for digit in num_str)\n    \n    result = []\n    for num in x:\n        if not has_even_digit(num):\n            result.append(num)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef replace_digits(arr):\n    digit_to_name = {\n        \"1\": \"One\",\n        \"2\": \"Two\",\n        \"3\": \"Three\",\n        \"4\": \"Four\",\n        \"5\": \"Five\",\n        \"6\": \"Six\",\n        \"7\": \"Seven\",\n        \"8\": \"Eight\",\n        \"9\": \"Nine\"\n    }\n    res = []\n    for num in arr:\n        if num >= 1 and num <= 9:\n            res.append(digit_to_name[str(num)])\n        else:\n            res.append(str(num))\n    return res\n\ndef sort_and_replace(arr):\n    if not arr:\n        return []\n    arr.sort(key=by_length)\n    res = replace_digits(arr)\n    res.reverse()\n    return res"}
{"task_id": "HumanEval/114", "completion": "    n = len(nums)\n    res = nums[0]\n    min_sum = nums[0]\n    \n    for i in range(1, n):\n        min_sum = min(nums[i], min_sum + nums[i])\n        res = min(res, min_sum)\n    \n    return res"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    result = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                result += math.ceil(grid[i][j] / capacity)\n    return result"}
{"task_id": "HumanEval/120", "completion": "    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for num in arr[:k]:\n        if len(str(num)) <= 2:\n            total += num\n    return total"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    if k == 1:\n        return [grid[0][0]]\n    \n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            dp[i][j] = float('inf')\n            if i == 0 and j == 0:\n                dp[i][j] = 1\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + 1\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + 1\n            else:\n                dp[i][j] = min(dp[i-1][j] + 1, dp[i][j-1] + 1)\n    \n    res = []\n    for _ in range(k):\n        max_val = float('-inf')\n        max_i, max_j = 0, 0\n        for i in range(n):\n            for j in range(n):\n                if dp[i][j] > max_val:\n                    max_val = dp[i][j]\n                    max_i, max_j = i, j\n        res.append(grid[max_i][max_j])\n        dp = [[0]*n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if i == max_i:\n                    if j == max_j:\n                        dp[i][j] = float('-inf')\n                    else:\n                        dp[i][j] = dp[i][j-1] + 1\n                elif j == max_j:\n                    dp[i][j] = dp[i-1][j] + 1\n                else:\n                    dp[i][j] = min(dp[i-1][j] + 1, dp[i][j-1] + 1)\n    \n    return res"}
{"task_id": "HumanEval/135", "completion": "    max_val = float('-inf')\n    max_index = -1\n    for i in range(len(arr)):\n        if arr[i] >= max_val:\n            max_val = arr[i]\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    res = []\n    n = len(numbers)\n    for i in range(n):\n        max_val = float('-inf')\n        for j in range(i, n):\n            max_val = max(max_val, numbers[j])\n            res.append(max_val)\n    return res"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    rescaled_numbers = [(x - min_val) / (max_val - min_val) for x in numbers]\n    return rescaled_numbers"}
{"task_id": "HumanEval/24", "completion": "    largest_div = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_div = i\n    return largest_div"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n\n    min_val = float('inf')\n    min_idx = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_val:\n            min_val = val\n            min_idx = i\n    if min_idx == -1:\n        return []\n    else:\n        return [min_val, min_idx]"}
{"task_id": "HumanEval/69", "completion": "    max_freq = 0\n    result = -1\n    freq_dict = {}\n    for num in lst:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n        if freq_dict[num] >= num and num > result:\n            result = num\n        max_freq = max(max_freq, freq_dict[num])\n    return result"}
{"task_id": "HumanEval/70", "completion": "    result = []\n    lst.sort()\n    i, j = 0, len(lst) - 1\n    while i <= j:\n        if i != j:\n            result.append(lst[i])\n            result.append(lst[j])\n        else:\n            result.append(lst[i])\n        i += 1\n        j -= 1\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n):\n        if arr[i] != arr[n-i-1]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/88", "completion": "    if sum(array) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest"}
{"task_id": "HumanEval/94", "completion": "    max_prime = 0\n    for num in lst:\n        if num > max_prime:\n            max_prime = num\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/104", "completion": "    digits = set()\n    result = []\n    for num in x:\n        num_str = str(num)\n        if all(int(digit) % 2 != 0 for digit in num_str):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef between_1_and_9(arr):\n    temp = []\n    for num in arr:\n        if 1 <= num <= 9:\n            temp.append(num)\n    return temp\n\ndef replace_by_name(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [names[num-1] for num in arr]\n\ndef sort_and_replace(arr):\n    between_1_and_9_sorted = sorted(between_1_and_9(arr), reverse=True)\n    return replace_by_name(between_1_and_9_sorted)"}
{"task_id": "HumanEval/114", "completion": "    n = len(nums)\n    min_sum = float('inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum = max(nums[i], current_sum + nums[i])\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    def is_valid(x, y, visited, parent, water, grid):\n        n = len(grid)\n        m = len(grid[0])\n        if (x<0 or x>=n or y<0 or y>=m or visited[x][y] or grid[x][y]==-1):\n            return False\n        visited[x][y] = True\n        water[0] += grid[x][y]\n        water_level = math.ceil(water[0]/capacity)\n        if water_level == 0:\n            return False\n        if parent != -1:\n            grid[x][y] = -1\n        for dx, dy in [(1,0),(-1,0),(0,1),(0,-1)]:\n            new_x, new_y = x+dx, y+dy\n            if (new_x, new_y) in parent:\n                continue\n            if is_valid(new_x, new_y, visited, [(x,y)], water, grid):\n                parent.add((x,y))\n                return True\n        return False\n    \n    n = len(grid)\n    m = len(grid[0])\n    visited = [[False]*m for _ in range(n)]\n    result = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]==1 and not visited[i][j]:\n                water = [0]\n                parent = set()\n                if is_valid(i, j, visited, [(i,j)], water, grid):\n                    result += 1\n    return result"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    count = 0\n    for i in range(len(arr)):\n        if count < k:\n            total += arr[i]\n            count += 1\n    return total"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    ans = []\n    for _ in range(k):\n        min_val = float('inf')\n        idx = -1\n        for i in range(n):\n            for j in range(n):\n                if grid[i][j] < min_val:\n                    min_val = grid[i][j]\n                    idx = (i, j)\n        ans.append(min_val)\n        if idx[0]-1 >= 0 and idx[1]-1 >= 0:\n            grid[idx[0]-1][idx[1]-1] = float('inf')\n        if idx[0]+1 < n and idx[1]-1 >= 0:\n            grid[idx[0]+1][idx[1]-1] = float('inf')\n        if idx[0]-1 >= 0 and idx[1]+1 < n:\n            grid[idx[0]-1][idx[1]+1] = float('inf')\n        if idx[0]+1 < n and idx[1]+1 < n:\n            grid[idx[0]+1][idx[1]+1] = float('inf')\n        grid[idx[0]][idx[1]] = float('inf')\n    return ans"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    prev = arr[0]\n    max_idx = -1\n    for i in range(1, n):\n        if arr[i] <= prev:\n            max_idx = i\n            prev = arr[i]\n    return max_idx"}
{"task_id": "HumanEval/152", "completion": "    result=[]\n    for i in range(len(game)):\n        if game[i]==guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    n = len(numbers)\n    max_so_far = [0] * n\n    max_so_far[0] = numbers[0]\n    for i in range(1, n):\n        max_so_far[i] = max(numbers[i], max_so_far[i - 1])\n    return max_so_far"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    scale = 1 / (max_num - min_num)\n    return [(num - min_num) * scale for num in numbers]"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/26", "completion": "    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    if len(l) == 0:\n        return None\n    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/68", "completion": "    smallest_even = float('inf')\n    smallest_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_even:\n            smallest_even = arr[i]\n            smallest_index = i\n    if smallest_even == float('inf'):\n        return []\n    return [smallest_even, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq = max(freq.values())\n    result = -1\n    for num, freq in freq.items():\n        if freq >= num and num > 0 and result < 0:\n            result = num\n    return result"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    res = []\n    i = 0\n    j = len(lst) - 1\n    while i <= j:\n        if i != j:\n            res.append(lst[i])\n            res.append(lst[j])\n        else:\n            res.append(lst[i])\n        i += 1\n        j -= 1\n    return res"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    changes = 0\n    for i in range(n):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes"}
{"task_id": "HumanEval/88", "completion": "    if len(array) < 2:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    second_min = float('inf')\n    for val in lst:\n        if val < min_val:\n            second_min = min_val\n            min_val = val\n        elif val < second_min and val != min_val:\n            second_min = val\n    return second_min if second_min != float('inf') else None"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(num):\n        return sum(int(digit) for digit in str(num))\n\n    maxPrime = max(lst, key=lambda x: isPrime(x))\n    return sumOfDigits(maxPrime)"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for num in x:\n        has_even = False\n        num_str = str(num)\n        for digit in num_str:\n            if int(digit) % 2 == 0:\n                has_even = True\n                break\n        if not has_even:\n            result.append(num)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "    # sorting function based on the length of the integers\n    return len(str(arr))\n\ndef replace_with_name(num):\n    # function to replace digits with their corresponding names\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'][num-1]\n\ndef sort_and_replace(arr):\n    # sorting and replacing the digits with their corresponding names\n    return list(map(replace_with_name, sorted(arr, key=by_length)))"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    ans = 0\n    for i in range(n):\n        cnt = 0\n        for j in range(m):\n            if grid[i][j] == 1:\n                cnt += 1\n        ans = max(ans, cnt)\n    return ans"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/122", "completion": "    count = 0\n    sum = 0\n    for num in arr[:k]:\n        if len(str(num)) <= 2:\n            count += 1\n            sum += num\n    return sum"}
{"task_id": "HumanEval/129", "completion": "    N = len(grid)\n    paths = [[-1] * N for _ in range(N)]\n    paths[0][0] = grid[0][0]\n    queue = [(0, 0, 1)]  # (i, j, length)\n    while queue:\n        x, y, length = queue.pop(0)\n        if length == k:\n            return paths[x][y]\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and paths[nx][ny] == -1:\n                paths[nx][ny] = grid[nx][ny]\n                queue.append((nx, ny, length+1))\n    return []"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    max_index = -1\n    for i in range(n-1):\n        if arr[i] <= arr[i+1]:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_element = float('-inf')\n    for num in numbers:\n        max_element = max(max_element, num)\n        result.append(max_element)\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    if min_val == 0:\n        return [(x / max_val) for x in numbers]\n    else:\n        return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/24", "completion": "    if n == 1:\n        return 1\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    even_values = [node for node in arr if node.value % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values)\n    return [min_even_value, arr.index(min_even_value)]"}
{"task_id": "HumanEval/69", "completion": "    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n    max_freq = max(freq_map.values())\n    for num, freq in freq_map.items():\n        if freq >= num and freq > max_freq:\n            max_freq = freq\n            max_num = num\n    return max_num if max_freq > 1 else -1"}
{"task_id": "HumanEval/70", "completion": "    return sorted(lst, key=lambda x: (x == min(lst), -x))"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    change_count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            change_count += 1\n    return change_count"}
{"task_id": "HumanEval/88", "completion": "    array_copy = array[:]\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        array_copy.sort(reverse=True)\n    else:\n        array_copy.sort()\n    return array_copy"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    next_smallest_val = float('inf')\n    for val in lst:\n        if val < min_val:\n            next_smallest_val = min_val\n            min_val = val\n        elif val < next_smallest_val and val != min_val:\n            next_smallest_val = val\n    return next_smallest_val"}
{"task_id": "HumanEval/94", "completion": "    def is_Prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    def sum_of_digits(n):\n        sum = 0\n        while n:\n            sum += n % 10\n            n //= 10\n        return sum\n\n    max_prime = -1\n    for num in lst:\n        if is_Prime(num) and num > max_prime:\n            max_prime = num\n    return sum_of_digits(max_prime)"}
{"task_id": "HumanEval/104", "completion": "    result = []\n    for i in x:\n        flag = 1\n        num = i\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                flag = 0\n                break\n            num = num // 10\n        if flag == 1:\n            result.append(i)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return (len(arr), arr)\n\ndef replace_digits_by_names(arr):\n    digit_to_name = {\"1\": \"One\", \"2\": \"Two\", \"3\": \"Three\", \"4\": \"Four\", \"5\": \"Five\", \"6\": \"Six\", \"7\": \"Seven\", \"8\": \"Eight\", \"9\": \"Nine\"}\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(digit_to_name[str(num)])\n        else:\n            result.append(str(num))\n    result.sort(key=by_length)\n    result.reverse()\n    return result"}
{"task_id": "HumanEval/114", "completion": "    current_sum = nums[0]\n    min_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    rows = len(grid)\n    cols = len(grid[0])\n    result = 0\n    \n    for i in range(rows):\n        left = 0\n        for j in range(cols):\n            if grid[i][j] == 1:\n                left += 1\n        result = max(result, left)\n        \n        right = 0\n        for j in range(cols-1, -1, -1):\n            if grid[i][j] == 1:\n                right += 1\n        result = max(result, right)\n    \n    return result"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/122", "completion": "    prefix_sum = [0] * (len(arr) + 1)\n    for i in range(len(arr)):\n        prefix_sum[i+1] = prefix_sum[i] + arr[i]\n        \n    ans = 0\n    for i in range(min(k+1, len(arr))):\n        for j in range(i+1, min(k+1, len(arr))):\n            if len(str(arr[i])) <= 2 and len(str(arr[j])) <= 2:\n                ans += arr[i] + arr[j]\n    return ans"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    visited = [[False for _ in range(n)] for _ in range(k)]\n    path = [[-1 for _ in range(k)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            path[i][0] = grid[i][j]\n            visited[0][i][j] = True\n    res = []\n    for l in range(k-1):\n        for i in range(n):\n            for j in range(n):\n                for x, y in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                    new_i, new_j = i + x, j + y\n                    if 0 <= new_i < n and 0 <= new_j < n and not visited[l][new_i][new_j]:\n                        visited[l+1][new_i][new_j] = True\n                        path[new_i][l+1] = path[i][l] + 1\n                        if path[new_i][l+1] == k:\n                            res.append(path[new_i][l+1])\n                            break\n    return res"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    max_idx = -1\n    for i in range(n-1):\n        if arr[i] <= arr[i+1]:\n            max_idx = i\n    return max_idx"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_so_far = float('-inf')\n    \n    for num in numbers:\n        max_so_far = max(num, max_so_far)\n        result.append(max_so_far)\n    \n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    scale = 1 / (max_num - min_num)\n    return [(num - min_num) * scale for num in numbers]"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for element in l:\n        if element > max_element:\n            max_element = element\n    return max_element"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    \n    min_even_val = float('inf')\n    plucked_node = []\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_even_val:\n            min_even_val = val\n            plucked_node = [val, i]\n    return plucked_node"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq = 0\n    max_num = -1\n    for num in freq:\n        if freq[num] >= num and num > max_freq:\n            max_freq = freq[num]\n            max_num = num\n    return max_num"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    n = len(lst)\n    res = [0]*n\n    i, j = 0, n-1\n    for k in range(n):\n        if k % 2 == 0:\n            res[k] = lst[i]\n            i += 1\n        else:\n            res[k] = lst[j]\n            j -= 1\n    return res"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n//2):\n        cnt = 0\n        for j in range(n-1):\n            if arr[j] != arr[j+1]:\n                cnt += 1\n        ans = max(ans, cnt)\n    return ans"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    \n    smallest = float('inf')\n    next_smallest = float('inf')\n    \n    for num in lst:\n        if num < smallest:\n            next_smallest = smallest\n            smallest = num\n        elif num < next_smallest and num != smallest:\n            next_smallest = num\n            \n    return next_smallest"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for i in range(len(lst)):\n        if is_prime(lst[i]):\n            max_prime = lst[i]\n\n    return sum([int(x) for x in str(max_prime)])"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(num: int) -> bool:\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                return True\n            num //= 10\n        return False\n\n    unique_numbers = []\n    for num in x:\n        if not has_even_digit(num):\n            unique_numbers.append(num)\n    unique_numbers.sort()\n    return unique_numbers"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef sort_replace_between_1_and_9(arr):\n    result = []\n    for num in arr:\n        if num >= 1 and num <= 9:\n            result.append(str(num))\n    result.sort(key=by_length, reverse=True)\n    for i in range(len(result)):\n        if result[i] == '1':\n            result[i] = \"One\"\n        elif result[i] == '2':\n            result[i] = \"Two\"\n        elif result[i] == '3':\n            result[i] = \"Three\"\n        elif result[i] == '4':\n            result[i] = \"Four\"\n        elif result[i] == '5':\n            result[i] = \"Five\"\n        elif result[i] == '6':\n            result[i] = \"Six\"\n        elif result[i] == '7':\n            result[i] = \"Seven\"\n        elif result[i] == '8':\n            result[i] = \"Eight\"\n        elif result[i] == '9':\n            result[i] = \"Nine\"\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    m, n = len(grid), len(grid[0])\n    buckets = [[0] * n for _ in range(m)]\n    result = 0\n    for i in range(m-1, -1, -1):\n        for j in range(n):\n            if grid[i][j]:\n                buckets[i][j] = capacity\n                result += 1\n            if grid[i][j] and buckets[i][j]:\n                buckets[i][j] -= 1\n    return result"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[::-1][:k]"}
{"task_id": "HumanEval/122", "completion": "    count = 0\n    for num in arr[:k]:\n        if len(str(num)) <= 2:\n            count += num\n    return count"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    vis = [[False for j in range(n)] for i in range(n)]\n    dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    ans = []\n    \n    def dfs(x, y, depth):\n        nonlocal ans\n        if depth == k:\n            ans.append(grid[x][y])\n            return\n        for dx, dy in dirs:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and not vis[nx][ny]:\n                vis[nx][ny] = True\n                dfs(nx, ny, depth + 1)\n                vis[nx][ny] = False\n    \n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, 1)\n            ans.append(grid[i][j])\n            ans = sorted(ans)\n    return ans"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    prev = arr[0]\n    max_idx = 0\n    for i in range(1, n):\n        if arr[i] >= prev:\n            max_idx = i\n        else:\n            break\n    if max_idx == n - 1:\n        return -1\n    for i in range(max_idx, n):\n        if arr[i] >= prev and arr[i] < arr[max_idx]:\n            max_idx = i\n    return max_idx"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_element = float('-inf')\n    for i in range(len(numbers)):\n        max_element = max(max_element, numbers[i])\n        result.append(max_element)\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    rescaled = [float(x - min_val) / (max_val - min_val) for x in numbers]\n    return rescaled"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    if not l:\n        return None\n    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = min(arr)\n    if min_val % 2 == 0:\n        return [min_val, arr.index(min_val)]\n    return []"}
{"task_id": "HumanEval/69", "completion": "    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n    max_freq = max(freq_map.values())\n    return max([num for num, freq in freq_map.items() if freq >= num and freq > 1]) if max_freq > 1 else -1"}
{"task_id": "HumanEval/70", "completion": "    return sorted(lst, key=lambda x: (lst.index(min(lst)), lst.index(max(lst))))"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    palindrome_count = 0\n    for i in range(n):\n        if arr[i] == arr[n - 1 - i]:\n            palindrome_count += 1\n    return n - 2 * palindrome_count"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[:2]) % 2 == 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    next_min_val = float('inf')\n    for num in lst:\n        if num < min_val:\n            next_min_val = min_val\n            min_val = num\n        elif num < next_min_val and num != min_val:\n            next_min_val = num\n    return next_min_val"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = -1\n    for num in lst:\n        if is_prime(num):\n            max_prime = max(max_prime, num)\n\n    if max_prime == -1:\n        return 0\n    \n    sum_of_digits = sum(int(digit) for digit in str(max_prime))\n    return sum_of_digits"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        while n:\n            if int(str(n)[-1]) % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    \n    result = [n for n in x if not has_even_digit(n)]\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "    def length(num):\n        return len(str(num))\n\n    arr.sort(key=length)\n    return arr\n\ndef replace_with_names(arr):\n    num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n\n    result = []\n    for num in arr:\n        if num in range(1, 10):\n            result.append(num_to_name[num])\n        else:\n            result.append(str(num))\n    return result\n\ndef sort_between_1_and_9(arr):\n    between_1_and_9 = [num for num in arr if num in range(1, 10)]\n    sorted_between_1_and_9 = by_length(between_1_and_9)\n    replaced_array = replace_with_names(sorted_between_1_and_9)\n    return replaced_array"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    wells_count = 0\n    for row in grid:\n        wells_count += row.count(1)\n    if wells_count == 0:\n        return 0\n    return math.ceil(wells_count/capacity)"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[::-1][:k]"}
{"task_id": "HumanEval/122", "completion": "    if k == 0:\n        return 0\n    num_strs = [str(num) for num in arr[:k]]\n    num_strs.sort(key=lambda x: x[-1])\n    result = int(''.join(num_strs[0]))\n    for i in range(1, k):\n        result += int(num_strs[i][-1]) * 10 ** (len(num_strs[i]) - 1)\n    return result"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dist = [[0 for _ in range(n)] for _ in range(n)]\n\n    def dfs(x, y, val):\n        dist[x][y] = val\n        for dx, dy in [(1, 0), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and dist[nx][ny] == 0:\n                dfs(nx, ny, val + 1)\n\n    dfs(0, 0, 1)\n\n    def dfs2(x, y, path):\n        path.append(grid[x][y])\n        for dx, dy in [(1, 0), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and dist[nx][ny] == dist[x][y] + 1:\n                dfs2(nx, ny, path)\n\n    res = []\n    for i in range(n):\n        for j in range(n):\n            if dist[i][j] == k:\n                path = []\n                dfs2(i, j, path)\n                res.extend(path)\n    return sorted(res)"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    prev = arr[0]\n    for i in range(1, n):\n        if arr[i] <= prev:\n            return i - 1\n        prev = max(prev, arr[i])\n    return -1"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(num, current_max + num)\n        result.append(current_max)\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return rescaled"}
{"task_id": "HumanEval/24", "completion": "    largest = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            largest = max(largest, i, n // i)\n    return largest"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_value = float('inf')\n    min_index = -1\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < min_value:\n            min_value = node\n            min_index = i\n    return [min_value, min_index] if min_value != float('inf') else []"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq = 0\n    result = -1\n    for num, freq in freq.items():\n        if freq > num and freq > max_freq:\n            max_freq = freq\n            result = num\n    return result"}
{"task_id": "HumanEval/70", "completion": "    def helper(x):\n        if len(x) <= 1:\n            return x\n        mid = x[len(x)//2]\n        return helper(x[:len(x)//2]) + [mid] + helper(x[len(x)//2:])\n\n    return helper(sorted(lst))"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n // 2):\n        j = n - i - 1\n        while arr[i] != arr[j]:\n            if arr[i] < arr[j]:\n                arr[i] += 1\n                ans += 1\n            else:\n                arr[j] -= 1\n                ans += 1\n    return ans"}
{"task_id": "HumanEval/88", "completion": "    if len(array) == 0:\n        return []\n    if sum(array[0], array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(n):\n        return sum(int(digit) for digit in str(n))\n\n    max_prime = max(lst, key=lambda x: x if isPrime(x) else -1)\n    return sumOfDigits(max_prime)"}
{"task_id": "HumanEval/104", "completion": "    unique_digits = []\n    for num in x:\n        flag = True\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                flag = False\n                break\n        if flag:\n            unique_digits.append(num)\n    return sorted(unique_digits)"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef replace_digits_with_names(arr):\n    digit_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    res = []\n    for num in arr:\n        if num >= 1 and num <= 9:\n            res.append(digit_to_name[num])\n        else:\n            res.append(str(num))\n    return res"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    result = 0\n    for i in range(n):\n        left = 0\n        right = m\n        while left < right:\n            mid = left + (right - left) // 2\n            if grid[i][mid] == 1:\n                right = mid\n            else:\n                left = mid + 1\n        if left == m:\n            continue\n        water = (i + 1) * (m - left) * capacity\n        result = max(result, water)\n    return result"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/122", "completion": "    count = 0\n    digit_sum = 0\n    for i in range(k):\n        digit_sum += sum(map(int, str(arr[i])))\n        count += 1\n        if count == 2:\n            break\n    return digit_sum"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            dp[i][j] = grid[i][j]\n            dp[i][j] += min(dp[i-1][j] if i > 0 else float('inf'), dp[i][j-1] if j > 0 else float('inf'))\n    result = []\n    def dfs(i, j, idx, visited):\n        if idx == k:\n            result.append(dp[i][j])\n            return\n        if (i, j) in visited:\n            return\n        visited.add((i, j))\n        for ni, nj in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= ni < n and 0 <= nj < n:\n                dfs(ni, nj, idx+1, visited)\n        visited.remove((i, j))\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, 1, set())\n    result.sort()\n    return result"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    max_index = -1\n    for i in range(n-1):\n        if arr[i] <= arr[i+1]:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    max_num = numbers[0]\n    result = [max_num]\n    for num in numbers[1:]:\n        max_num = max(num, max_num + num)\n        result.append(max_num)\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    result = [(num - min_val) / (max_val - min_val) for num in numbers]\n    return result"}
{"task_id": "HumanEval/24", "completion": "    if n <= 1:\n        return -1\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_even = float('inf')\n    min_even_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < min_even:\n            min_even = num\n            min_even_index = i\n    return [min_even, min_even_index] if min_even_index != -1 else []"}
{"task_id": "HumanEval/69", "completion": "    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    for num in sorted(lst, reverse=True):\n        if num in frequency and frequency[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if len(lst) <= 1:\n        return lst\n    mid = sorted(lst)[len(lst)//2]\n    left_half = strange_sort_list([x for x in lst if x < mid])\n    right_half = strange_sort_list([x for x in lst if x >= mid])\n    return left_half + right_half"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return array\n    \n    first = array[0]\n    last = array[-1]\n    if (first + last) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    next_smallest_val = float('inf')\n    for num in lst:\n        if num < min_val:\n            next_smallest_val = min_val\n            min_val = num\n        elif num < next_smallest_val:\n            next_smallest_val = num\n    return next_smallest_val"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    max_prime = max([x for x in lst if isPrime(x)])\n    return sum([int(x) for x in str(max_prime)])"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n: int) -> bool:\n        while n > 0:\n            if n % 10 == 0:\n                return True\n            n //= 10\n        return False\n\n    result = []\n    for num in x:\n        if not has_even_digit(num):\n            result.append(num)\n\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    return len(arr)\n\ndef replace_with_names(num):\n    if num == 1:\n        return \"One\"\n    elif num == 2:\n        return \"Two\"\n    elif num == 3:\n        return \"Three\"\n    elif num == 4:\n        return \"Four\"\n    elif num == 5:\n        return \"Five\"\n    elif num == 6:\n        return \"Six\"\n    elif num == 7:\n        return \"Seven\"\n    elif num == 8:\n        return \"Eight\"\n    elif num == 9:\n        return \"Nine\"\n    else:\n        return \"Non-digit\"\n\ndef sort_replace_array(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(replace_with_names(num))\n    result.sort(key=by_length, reverse=True)\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    wells = [row for row in grid if row.count(1) > 0]\n    wells.sort(key=lambda x: len(x))\n    res = 0\n    for well in wells:\n        if len(well) <= capacity:\n            res += 1\n            capacity -= len(well)\n        else:\n            res += 1\n            capacity = 0\n    return res"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[float('inf')] * (n + 1) for _ in range(n + 1)]\n    dp[1][1] = grid[0][0]\n    \n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for dx, dy in directions:\n                x, y = i + dx, j + dy\n                if 1 <= x <= n and 1 <= y <= n:\n                    dp[i][j] = min(dp[i][j], dp[x][y] + grid[i - 1][j - 1])\n    \n    ans = []\n    if dp[n][n] <= k:\n        dfs(dp, grid, n, n, k, ans, [])\n    return ans\n\ndef dfs(dp, grid, i, j, k, ans, path):\n    if k == 0:\n        ans.append(grid[i-1][j-1])\n        return\n    for dx, dy in directions:\n        x, y = i + dx, j + dy\n        if 1 <= x <= n and 1 <= y <= n:\n            if dp[x][y] + grid[i-1][j-1] == dp[i][j]:\n                path.append(grid[i-1][j-1])\n                dfs(dp, grid, x, y, k-1, ans, path)\n                path.pop()"}
{"task_id": "HumanEval/135", "completion": "    max_index = -1\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i+1]:\n            max_index = i\n    return max_index"}
{"task_id": "HumanEval/152", "completion": "    result=[]\n    for i in range(len(game)):\n        if game[i]==guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    max_ending_here = max_so_far = numbers[0]\n    rolling_max_list = [numbers[0]]\n    for num in numbers[1:]:\n        max_ending_here = max(num, max_ending_here + num)\n        max_so_far = max(max_so_far, max_ending_here)\n        rolling_max_list.append(max_so_far)\n    return rolling_max_list"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    result = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return result"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_element = float('-inf')\n    for element in l:\n        if element > max_element:\n            max_element = element\n    return max_element"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < min_val:\n            min_val = num\n            min_index = i\n    if min_index != -1:\n        return [min_val, min_index]\n    else:\n        return []"}
{"task_id": "HumanEval/69", "completion": "    max_freq = -1\n    max_val = -1\n    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n        if freq_map[num] > num and num > max_val:\n            max_val = num\n            max_freq = freq_map[num]\n    return max_val"}
{"task_id": "HumanEval/70", "completion": "    result = []\n    lst.sort()\n    while lst:\n        result.append(lst[0])\n        lst.pop(0)\n        lst.pop()\n        lst.append(lst[0])\n        lst.pop(0)\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq = max(freq.values())\n    return n - max_freq"}
{"task_id": "HumanEval/88", "completion": "    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    next_min = float('inf')\n    for num in lst:\n        if num < min_val:\n            next_min = min_val\n            min_val = num\n        elif num < next_min and num != min_val:\n            next_min = num\n    return next_min if next_min != float('inf') else None"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sumOfDigits(n):\n        s = 0\n        while n > 0:\n            s += n % 10\n            n //= 10\n        return s\n\n    max_prime = 0\n    for i in lst:\n        if isPrime(i) and i > max_prime:\n            max_prime = i\n    return sumOfDigits(max_prime)"}
{"task_id": "HumanEval/104", "completion": "    def check_even(num):\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                return False\n            num //= 10\n        return True\n\n    result = []\n    for num in x:\n        if check_even(num) and num not in result:\n            result.append(num)\n\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef replace_digit_with_name(num):\n    num_str = str(num)\n    if num_str in {'1', '2', '3', '4', '5', '6', '7', '8', '9'}:\n        return \"One\" if num_str == '1' else \"Two\" if num_str == '2' else \"Three\" if num_str == '3' else \"Four\" if num_str == '4' else \"Five\" if num_str == '5' else \"Six\" if num_str == '6' else \"Seven\" if num_str == '7' else \"Eight\" if num_str == '8' else \"Nine\"\n    else:\n        return num_str\n\ndef sort_and_replace(arr):\n    arr = [replace_digit_with_name(num) for num in arr if 1 <= num <= 9]\n    arr.sort(reverse=True)\n    return arr"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    filled = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                filled += 1\n    return math.ceil(filled/capacity)"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/122", "completion": "    first_k_elements = arr[:k]\n    total_sum = sum(first_k_elements)\n    for i in range(k, len(arr)):\n        if len(str(arr[i])) <= 2:\n            total_sum += arr[i]\n    return total_sum"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for dx, dy in directions:\n                x, y = i + dx, j + dy\n                if 1 <= x <= n and 1 <= y <= n:\n                    dp[i][j] = max(dp[i][j], dp[i - dx][j - dy] + grid[i - 1][j - 1])\n\n    res = []\n    for _ in range(k):\n        max_val = -1\n        max_i, max_j = -1, -1\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if dp[i][j] > max_val:\n                    max_val = dp[i][j]\n                    max_i, max_j = i, j\n        res.append(grid[max_i - 1][max_j - 1])\n        dp[max_i][max_j] = -1\n\n    return res"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    if n < 2:\n        return -1\n    max_val = arr[0]\n    max_index = 0\n    for i in range(1, n):\n        if arr[i] <= max_val:\n            return i\n        max_val = max(max_val, arr[i])\n    return -1"}
{"task_id": "HumanEval/152", "completion": "    result=[]\n    for i in range(len(game)):\n        if game[i]==guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    current_max = 0\n    for num in numbers:\n        current_max = max(num, current_max + num)\n        result.append(current_max)\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_val = min(numbers)\n    max_val = max(numbers)\n    result = [(x - min_val) / (max_val - min_val) for x in numbers]\n    return result"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1,1,-1):\n        if n % i == 0:\n            return i\n    return -1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = float('-inf')\n    for val in l:\n        if val > max_val:\n            max_val = val\n    return max_val"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    min_val = float('inf')\n    min_idx = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if val < min_val:\n                min_val = val\n                min_idx = i\n    if min_idx == -1:\n        return []\n    return [min_val, min_idx]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq = max(freq.values())\n    for num, freq in freq.items():\n        if freq >= num and num > 0 and num > max_freq:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    if not lst:\n        return lst\n    min_val = min(lst)\n    max_val = max(lst)\n    result = []\n    lst.remove(min_val)\n    lst.remove(max_val)\n    result.append(min_val)\n    result.append(max_val)\n    result += strange_sort_list(lst)\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    arr_copy = arr.copy()\n    arr_copy.sort()\n    ans = 0\n    for i in range(n):\n        if arr[i] != arr_copy[i]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/88", "completion": "    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = -1\n    for i in range(len(lst)):\n        if isPrime(lst[i]):\n            temp = lst[i]\n            while isPrime(temp):\n                temp += 1\n            max_prime = max(max_prime, lst[i])\n    \n    sum_of_digits = sum(int(digit) for digit in str(max_prime))\n    return sum_of_digits"}
{"task_id": "HumanEval/104", "completion": "    unique_digits_set = set()\n    for num in x:\n        for digit in str(num):\n            if int(digit) % 2 != 0:\n                unique_digits_set.add(num)\n    return sorted(list(unique_digits_set))"}
{"task_id": "HumanEval/105", "completion": "    return sorted(arr, key=len)\n\ndef replace_digits(arr):\n    num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(num_to_name[num])\n        else:\n            result.append(str(num))\n    return result\n\ndef sort_between_1_and_9(arr):\n    between_1_and_9 = [num for num in arr if 1 <= num <= 9]\n    between_1_and_9.sort()\n    between_1_and_9.reverse()\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(between_1_and_9.pop())\n        else:\n            result.append(str(num))\n    return result"}
{"task_id": "HumanEval/114", "completion": "    current_sum = nums[0]\n    min_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    def is_valid(row, col, visited):\n        return (0 <= row < len(grid) and\n                0 <= col < len(grid[0]) and\n                grid[row][col] and\n                not visited[row][col])\n\n    def dfs(row, col, visited):\n        row_water = 0\n        col_water = 0\n        visited[row][col] = True\n\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            new_r, new_c = row + dr, col + dc\n            if is_valid(new_r, new_c, visited):\n                visited[new_r][new_c] = True\n                if grid[new_r][new_c] > 0:\n                    row_water += max(0, grid[new_r][new_c] - 1)\n                    col_water += max(0, grid[new_r][new_c] - 1)\n                else:\n                    row_water, col_water = dfs(new_r, new_c, visited)\n\n        return row_water, col_water\n\n    max_water = 0\n    for i in range(len(grid)):\n        visited = [[False] * len(grid[0]) for _ in range(len(grid))]\n        row_water, col_water = dfs(i, 0, visited)\n        max_water += max(row_water, col_water)\n\n    return math.ceil(max_water / capacity)"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for num in arr[:k]:\n        digits = len(str(num))\n        if digits <= 2:\n            total += num\n    return total"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    start_points = [(0, 0)]\n    path_values = []\n    \n    for start_point in start_points:\n        queue = deque([(start_point, [grid[start_point[0]][start_point[1]])])\n        visited[start_point[0]][start_point[1]] = True\n        while queue:\n            (curr_point, path) = queue.popleft()\n            if len(path) == k:\n                path_values.append(path)\n            for direction in directions:\n                new_point = (curr_point[0] + direction[0], curr_point[1] + direction[1])\n                if 0 <= new_point[0] < n and 0 <= new_point[1] < n and not visited[new_point[0]][new_point[1]]:\n                    visited[new_point[0]][new_point[1]] = True\n                    queue.append((new_point, path + [grid[new_point[0]][new_point[1]]]))\n    \n    return min(path_values, key=lambda x: x)"}
{"task_id": "HumanEval/135", "completion": "    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] >= arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/152", "completion": "    result=[]\n    for i in range(len(game)):\n        if game[i]==guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_element = float('-inf')\n    for i in range(len(numbers)):\n        max_element = max(max_element, numbers[i])\n        result.append(max_element)\n    return result"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    result = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return result"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1,0,-1):\n        if n%i==0:\n            return i\n    return 1"}
{"task_id": "HumanEval/26", "completion": "    return list(dict.fromkeys(numbers))"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = float('-inf')\n    for ele in l:\n        if ele > max_val:\n            max_val = ele\n    return max_val"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n\n    min_even = float('inf')\n    min_even_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < min_even:\n            min_even = num\n            min_even_index = i\n\n    if min_even_index == -1:\n        return []\n\n    return [min_even, min_even_index]"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq = max(freq.values())\n    result = -1\n    for key, value in freq.items():\n        if value >= key and key > 0 and result < key:\n            result = key\n    return result"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    result = []\n    i, j = 0, len(lst)-1\n    while i <= j:\n        if i != j:\n            result.append(lst[i])\n            result.append(lst[j])\n        else:\n            result.append(lst[i])\n        i += 1\n        j -= 1\n    return result"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    ans = 0\n    for i in range(n):\n        if i % 2 == 0 and arr[i] != arr[n - i - 1]:\n            ans += 1\n        elif i % 2 != 0 and arr[i] != arr[n - i - 1]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return array\n    first_index_value = array[0]\n    last_index_value = array[-1]\n    if (first_index_value + last_index_value) % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    min_val = float('inf')\n    next_smallest = None\n    for num in lst:\n        if num < min_val:\n            min_val = num\n        elif num < lst[0]:\n            next_smallest = num\n    return next_smallest"}
{"task_id": "HumanEval/94", "completion": "    def isPrime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5)+1):\n            if x % i == 0:\n                return False\n        return True\n    \n    max_prime = 0\n    for num in lst:\n        if num > 0 and isPrime(num) and num > max_prime:\n            max_prime = num\n    \n    sum_of_digits = lambda n: sum(int(digit) for digit in str(n))\n    \n    return sum_of_digits(max_prime)"}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        s = str(n)\n        for digit in s:\n            if int(digit) % 2 == 0:\n                return True\n        return False\n\n    result = [num for num in x if not has_even_digit(num)]\n    result.sort()\n    return result"}
{"task_id": "HumanEval/105", "completion": "    return (len(str(x)), x) for x in arr\n\ndef digit_to_name(num):\n    return str(num)\n\ndef replace_digits_with_names(arr):\n    arr.sort(key=by_length)\n    arr.reverse()\n    result = [digit_to_name(num) for num in arr]\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    def isValid(x, y, visited, r, c):\n        return 0 <= x < r and 0 <= y < c and not visited[x][y]\n    r = len(grid)\n    c = len(grid[0])\n    visited = [[False for _ in range(c)] for _ in range(r)]\n    count = 0\n    for i in range(r):\n        for j in range(c):\n            if grid[i][j] == 1 and not visited[i][j]:\n                visited[i][j] = True\n                q = [(i, j, 1)]\n                while q:\n                    x, y, water = q.pop(0)\n                    count += math.ceil(water / capacity)\n                    for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                        nx, ny = x + dx, y + dy\n                        if isValid(nx, ny, visited, r, c) and grid[nx][ny] == 1 and water - 1 >= 0:\n                            visited[nx][ny] = True\n                            q.append((nx, ny, water - 1))\n    return count"}
{"task_id": "HumanEval/120", "completion": "    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/122", "completion": "    result = 0\n    for i in range(min(k, len(arr))):\n        if len(str(arr[i])) <= 2:\n            result += arr[i]\n    return result"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[float('inf')] * n for _ in range(n)]\n    dp[0][0] = 0\n    for i in range(n):\n        for j in range(n):\n            for x, y in [(i + 1, j), (i, j + 1)]:\n                if 0 <= x < n and 0 <= y < n:\n                    dp[x][y] = min(dp[x][y], dp[i][j] + grid[i][j])\n    res = []\n    for _ in range(k):\n        best = float('inf')\n        ans = -1\n        for i in range(n):\n            for j in range(n):\n                if dp[i][j] < best:\n                    best = dp[i][j]\n                    ans = grid[i][j]\n        res.append(ans)\n    return res"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        score = game[i]\n        guessed = guess[i]\n        if score == guessed:\n            result.append(0)\n        else:\n            result.append(abs(score-guessed))\n    return result"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_element = float('-inf')\n    for i in range(len(numbers)):\n        max_element = max(max_element, numbers[i])\n        result.append(max_element)\n    return result"}
{"task_id": "HumanEval/21", "completion": "    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    return [(num - min_val) / (max_val - min_val) for num in numbers]"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/26", "completion": "    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers"}
{"task_id": "HumanEval/34", "completion": "    return list(set(l))"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    \n    min_val = min(arr)\n    if min_val % 2 == 0:\n        return [min_val, arr.index(min_val)]\n    else:\n        return []"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq = 0\n    max_num = -1\n    for num, freq in freq.items():\n        if freq >= num and num > max_freq:\n            max_freq = freq\n            max_num = num\n    return max_num"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    return lst"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    arr.sort()\n    ans = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            ans += 1\n    return ans"}
{"task_id": "HumanEval/88", "completion": "    array_sum = array[0] + array[-1]\n    if array_sum % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None"}
{"task_id": "HumanEval/94", "completion": "    prime_val = max([i for i in lst if all(i % j != 0 for j in range(2, int(i**0.5)+1))])\n    return sum(int(d) for d in str(prime_val))"}
{"task_id": "HumanEval/104", "completion": "    def check_even(n):\n        return any(int(d) % 2 == 0 for d in str(n))\n    \n    return sorted([num for num in x if not check_even(num)])"}
{"task_id": "HumanEval/105", "completion": "    arr.sort(key=len, reverse=True)\n    return arr\n\ndef replace_by_name(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    result = []\n    for num in arr:\n        if num in digits:\n            result.append(digits[num])\n    return result\n\ndef sort_and_replace(arr):\n    arr = by_length(arr)\n    return replace_by_name(arr)"}
{"task_id": "HumanEval/114", "completion": "    current_sum = nums[0]\n    min_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    n = len(grid)\n    m = len(grid[0])\n    total_water = 0\n    max_water = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                max_water = max(max_water, (n-i)*m)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                total_water += min(capacity, max_water)\n    return total_water"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[0:k]"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(min(k, len(arr))):\n        if arr[i] < 100:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    if k > n * n:\n        return []\n    ans = []\n    for i in range(k):\n        ans.append(grid[i // n][i % n])\n    return ans"}
{"task_id": "HumanEval/135", "completion": "    n = len(arr)\n    for i in range(n-1,0,-1):\n        if arr[i] <= arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    \n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                if not stack:\n                    result.append('')\n            else:\n                stack.append(char)\n        else:\n            for i in range(len(result)):\n                result[i] += char\n    \n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_level = 0\n    result = []\n    for group in paren_string.split():\n        level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')' and level > 0:\n                level -= 1\n        result.append(max_level)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the supplied string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(1, len(string)):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[::-1] + string[i:]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result: List[str] = []\n    for i in range(min(len(a), len(b))):\n        if a[i] == b[i]:\n            result.append('0')\n        else:\n            result.append('1')\n    return ''.join(result) + a[len(b):] + b[len(a):]"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    result = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/14", "completion": "    n = len(string)\n    prefixes = []\n    for i in range(n):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/18", "completion": "    if not string or not substring:\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = list(map(int, filter(lambda x: x.isdigit(), numbers.split())))\n    num_list.sort()\n    result = ''\n    for num in numbers.split():\n        if num.isdigit():\n            result += str(num_list.pop(0)) + ' '\n        else:\n            result += num + ' '\n    return result.strip()"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing the cyclic encoding.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [group[::-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x = x // base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by reversing the encoding process of encode_shift function.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = set('aeiou')\n    return ''.join(filter(lambda x: x not in vowels, text))"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/74", "completion": "    def count_chars(s):\n        return sum(len(word) for word in s)\n    lst1_total = count_chars(lst1)\n    lst2_total = count_chars(lst2)\n    if lst1_total == lst2_total:\n        return lst1\n    elif lst1_total < lst2_total:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db0db\"\n\n    binary_str = \"\"\n    while decimal > 0:\n        binary_str = str(decimal % 2) + binary_str\n        decimal //= 2\n\n    return \"db\" + binary_str + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if word:\n            result.append(word)\n    result.sort(key=lambda x: ''.join(sorted(x)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = ''\n    for char in s:\n        if char.isalpha():\n            result += chr((((ord(char) - ord('a') + 2) * 2) % 26) + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                result += chr((ord(char.lower()) - ord('a') + 2) % 5 + ord('a'))\n            else:\n                result += chr(ord('a') if char.islower() else ord('A'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/111", "completion": "    result = {}\n    words = test.split()\n    for word in words:\n        for char in word:\n            if char in result:\n                result[char] += 1\n            else:\n                result[char] = 1\n    return result"}
{"task_id": "HumanEval/112", "completion": "    result = \"\"\n    for char in s:\n        if char not in c:\n            result+=char\n    result = result[::-1]\n    return result, result==result"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for i, string in enumerate(lst):\n        odd_count = sum(int(digit) % 2 for digit in string)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {i} of the {i}nput.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    vowels = set(\"aeiou\")\n    result = []\n    current_consonants = 0\n    current_word = \"\"\n    for char in s:\n        if char == \" \":\n            if current_consonants == n:\n                result.append(current_word)\n            current_consonants = 0\n            current_word = \"\"\n        elif char.isalpha() and char not in vowels:\n            current_consonants += 1\n        current_word += char\n    if current_consonants == n:\n        result.append(current_word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    word = word.lower()\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels and (i+1) < len(word) and word[i+1].isalpha() and word[i+1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    try:\n        parts = date.split('-')\n        if len(parts) != 3:\n            return False\n        month, day, year = parts\n        if int(month) == 2 and int(day) > 29:\n            return False\n        if int(month) not in [1, 3, 5, 7, 8, 10, 12]:\n            if int(day) > 31:\n                return False\n        elif int(month) not in [4, 6, 9, 11]:\n            if int(day) > 30:\n                return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.isalpha():\n                count += 1\n        return [count]"}
{"task_id": "HumanEval/134", "completion": "    txt = txt.strip()\n    return (len(txt) > 0) and (txt[-1].isalpha()) and (not txt[-2:].isalnum())"}
{"task_id": "HumanEval/140", "completion": "    result = []\n    for char in text:\n        if char == ' ':\n            if result and result[-1] == ' ':\n                result.append('-')\n            else:\n                result.append('_')\n        else:\n            result.append(char)\n    return ''.join(result)"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split(' ')\n    result = \"\"\n    for word in words:\n        if len(word) > 1:\n            is_prime = True\n            for i in range(2, len(word)):\n                if word % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                result += word + ' '\n    return result.strip()"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/153", "completion": "    max_strength = float('-inf')\n    strongest_extension = None\n    for ext in extensions:\n        cap_count = sum(c.isupper() for c in ext)\n        sm_count = sum(c.islower() for c in ext)\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f'{class_name}.{strongest_extension}'"}
{"task_id": "HumanEval/156", "completion": "    roman_map = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000: 'm'}\n    result = ''\n    num_str = str(number)\n    for i in range(len(num_str) - 1, -1, -1):\n        digit = int(num_str[i])\n        if digit < 4:\n            result += roman_map[int(digit)] * (digit - 1)\n        elif digit == 4:\n            result += roman_map[1] + roman_map[5]\n        elif digit < 9:\n            result += roman_map[int(digit)] + roman_map[int(digit - 1)]\n        else:\n            result += roman_map[1] + roman_map[10]\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            result = word\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(ord('a' if char.islower() else 'A') + ord(char) - ord('a'))\n        else:\n            result += char\n    return result if result else s"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            if not stack:\n                result.append('')\n        else:\n            for r in result:\n                r += char\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_level = 0\n    curr_level = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            curr_level += 1\n            max_level = max(max_level, curr_level)\n        elif char == ')':\n            curr_level -= 1\n        if curr_level < 0:\n            curr_level = 0\n        result.append(max_level)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\"\n    Find the shortest palindrome that begins with a supplied string.\n\n    Algorithm idea:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n\n    Parameters:\n    - string: the supplied string\n\n    Returns:\n    - the shortest palindrome that begins with the supplied string\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n\n    for i in range(1, len(string)):\n        prefix = string[:i]\n        suffix = string[i:]\n\n        if is_palindrome(suffix):\n            return prefix + suffix[::-1]\n\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result: List[str] = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result.append('0')\n        else:\n            result.append('1')\n    return ''.join(result)"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n\n    max_len = -1\n    max_string = \"\"\n\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_string = s\n\n    return max_string"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    char_set = set()\n    for char in string:\n        char_set.add(char.lower())\n    return len(char_set)"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    n = len(string)\n    m = len(substring)\n    for i in range(n - m + 1):\n        if string[i:i+m] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = list(filter(lambda x: x.isdigit(), numbers.split()))\n    num_list = [int(num) for num in num_list]\n    num_list.sort()\n    result = ''\n    for num in numbers.split():\n        if num.isdigit():\n            result += str(num_list.pop(0)) + ' '\n        else:\n            result += num + ' '\n    return result.strip()"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = ''\n    for char in string:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from encoded with encode_cyclic function.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # rotate elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(filter(lambda x: x not in vowels, text))"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1 if lst1 < lst2 else lst2"}
{"task_id": "HumanEval/79", "completion": "    binary_str = bin(decimal)[2:]  # Remove the \"0b\" prefix\n    return \"db\" + binary_str + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if word == '':\n            result.append('')\n        else:\n            sorted_word = ''.join(sorted(word))\n            result.append(sorted_word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(128 + (ord(char) - 97) * 2)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiou'\n    result = ''\n    for char in message:\n        if char in vowels:\n            result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result.swapcase()"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/111", "completion": "    histogram = {}\n    words = test.split()\n    for word in words:\n        if word in histogram:\n            histogram[word] += 1\n        else:\n            histogram[word] = 1\n    return histogram"}
{"task_id": "HumanEval/112", "completion": "    s = ''.join(char for char in s if char not in c)\n    return (s, s == s[::-1])"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(count) + \"ng \" + str(count) + \" of the 1nput.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for char in word if char.lower() in consonants) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    index = -1\n    while index > -len(word):\n        if word[index] in vowels:\n            return word[index]\n        index -= 1\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    date_format = '%m-%d-%Y'\n    try:\n        datetime.strptime(date, date_format)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [char for char in txt if char.islower() and ord(char) % 2 != 0]"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    \n    txt_list = txt.split()\n    if len(txt_list) < 2:\n        return False\n    \n    last_char = txt_list[-1][-1]\n    return last_char.isalpha()"}
{"task_id": "HumanEval/140", "completion": "    new_text = text.replace(\"  \", \"-\")\n    new_text = new_text.replace(\" \", \"_\")\n    return new_text"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = [word for word in words if len(word) in prime_factors_length(len(word))]\n    return ' '.join(result)\n\ndef prime_factors_length(n):\n    prime_factors = set()\n    while n % 2 == 0:\n        prime_factors.add(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            prime_factors.add(i)\n            n //= i\n    if n > 2:\n        prime_factors.add(n)\n    return prime_factors"}
{"task_id": "HumanEval/149", "completion": "    sorted_lst = sorted(lst, key=lambda x: (len(x), x))\n    return sum(int(num) for num in sorted_lst)\n\n# Example usage\nlst = [\"abc\", \"def\", \"ghi\", \"jkl\"]\nprint(sorted_list_sum(lst))"}
{"task_id": "HumanEval/153", "completion": "    strength = {}\n    for ext in extensions:\n        cap = 0\n        sm = 0\n        for char in ext:\n            if char.isupper():\n                cap += 1\n            elif char.islower():\n                sm += 1\n        strength[ext] = cap - sm\n\n    max_strength = max(strength.values())\n    strongest_extensions = [ext for ext, value in strength.items() if value == max_strength]\n    return class_name + '.' + strongest_extensions[0]"}
{"task_id": "HumanEval/156", "completion": "    roman = ['', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix']\n    res = ''\n    while number > 0:\n        num = number % 10\n        res = roman[num] + res\n        number //= 10\n    return res"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = -1\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            result = word\n    return result"}
{"task_id": "HumanEval/161", "completion": "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = chr(ord(s[i]) ^ (1 << 5))\n    return \"\".join(s)"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack and stack[-1] == '(':\n            stack.pop()\n            if not stack:\n                result.append('')\n            else:\n                result[-1] += ')'\n        elif not stack:\n            result.append(char)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    groups = paren_string.split()\n    result = []\n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n    \n    for i in range(len(string)):\n        prefix = string[:i]\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            return prefix + suffix[::-1]\n    return string + string[::-1]  # if no palindromic suffix is found"}
{"task_id": "HumanEval/11", "completion": "    if len(a) != len(b):\n        raise ValueError(\"Both strings must be of same length\")\n    result: List[str] = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result.append('0')\n        else:\n            result.append('1')\n    return ''.join(result)"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n\n    max_len = -1\n    result = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return \" \".join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start != -1:\n            count += 1\n            start += 1\n        else:\n            break\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = list(map(int, numbers.split()))\n    num_list.sort()\n    return ' '.join(map(str, num_list))"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.swapcase() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from encoded string.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[0] + group[1] for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the reverse direction.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(filter(lambda x: x not in vowels, text))"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = set(\"aeiouy\")\n    count = sum(1 for char in s if char.lower() in vowels)\n    if s.endswith(\"y\") and count == 0:\n        return 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    \n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 == total_chars2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"task_id": "HumanEval/86", "completion": "    return ' '.join(sorted(s.split()))"}
{"task_id": "HumanEval/89", "completion": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            index = alphabet.index(char)\n            new_index = (index * 2) % 26\n            encrypted += alphabet[new_index]\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                result += chr(ord(char) + 2) if ord(char) + 2 <= ord('z') else chr(ord('a') + (ord(char) + 2 - ord('z')) % 26)\n            else:\n                result += chr(ord(char) + 32)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    vowels = \"AEIOUaeiou\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] in vowels:\n                count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    max_repetition = max(words, key=words.count) if words else \"\"\n    result = {word: count for word, count in zip(words, map(words.count, words)) if word == max_repetition}\n    return result"}
{"task_id": "HumanEval/112", "completion": "    result = ''.join([i for i in s if i not in c])\n    return result, result == result[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, ord(s), s, count))\n    return result"}
{"task_id": "HumanEval/117", "completion": "    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    result = []\n    count = 0\n    start = 0\n    for end in range(len(s)):\n        if s[end] in consonants:\n            count += 1\n        if count == n:\n            result.append(s[start:end+1])\n            start = end + 1\n            count = 0\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"AEIOUaeiou\"\n    consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n    i = len(word) - 1\n    while i >= 0:\n        if word[i] in consonants and i < len(word)-1 and word[i+1] in consonants:\n            return word[i+1] if word[i+1] in vowels else word[i-1]\n        i -= 1\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if len(date) != 10:\n        return False\n    month, day, year = date.split('-')\n    if len(month) != 2 or len(day) != 2 or len(year) != 4:\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    return words if len(words) > 1 else [str(len([i for i in range(len(txt)) if ord(txt[i]) % 2 != 0]))]"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if len(words) == 0:\n        return False\n    last_word = words[-1]\n    if not last_word:\n        return False\n    if not last_word[-1].isalpha():\n        return False\n    if last_word[-1].isalpha() and last_word.count(last_word[-1]) == 1:\n        return True\n    return False"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace('  ', '-')\n    return text.replace(' ', '_')"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word) in prime_numbers:\n            result.append(word)\n    return ' '.join(result)\n\ndef prime_numbers(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/149", "completion": "    result = [int(num) for num in lst if len(num) % 2 == 0]\n    return sum(result)"}
{"task_id": "HumanEval/153", "completion": "    strength = {}\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength[extension] = cap - sm\n    \n    max_strength = max(strength.values())\n    max_extensions = [ext for ext, strength in strength.items() if strength == max_strength]\n    return class_name + '.' + max_extensions[0]"}
{"task_id": "HumanEval/156", "completion": "    roman_map = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix',\n        10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm',\n        1000: 'm'\n    }\n\n    result = ''\n    num = number\n    while num > 0:\n        for k in sorted(roman_map.keys(), reverse=True):\n            if num >= k:\n                result += roman_map[k]\n                num -= k\n                break\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result if result else s"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    groups = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            if not stack:\n                groups.append(''.join(stack))\n                stack = []\n        elif not stack:\n            stack.append(char)\n    return groups"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_level = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(max_level)\n            max_level += 1\n        elif char == ')':\n            if stack:\n                stack.pop()\n                max_level = stack[-1] + 1 if stack else 0\n            else:\n                max_level = 0\n        result.append(max_level)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find shortest palindrome that begins with the given string \"\"\"\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result: List[str] = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result.append('0')\n        else:\n            result.append('1')\n    return ''.join(result)"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n\n    max_length = -1\n    result = \"\"\n\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            result = s\n\n    return result"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = list(map(int, numbers.split()))\n    num_list.sort()\n    return ' '.join(map(str, num_list))"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing the operation of encode_cyclic.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse each group. Unless group has fewer elements than 3.\n    groups = [group[::-1] if len(group) == 3 else group for group in groups]\n    # concatenate groups and return the result.\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by unshifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels and not (char.islower() and char.lower() == 'y'):\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/74", "completion": "    total_chars = sum(len(s) for s in lst1) - sum(len(s) for s in lst2)\n    return lst1 if total_chars < 0 else lst2"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                result += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiouAEIOU'\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOUaeiou\"\n    count = 0\n    for i in range(len(s)):\n        if (i % 2 == 0) and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/111", "completion": "    hist = {}\n    words = test.split()\n    for word in words:\n        if word in hist:\n            hist[word] += 1\n        else:\n            hist[word] = 1\n    return hist"}
{"task_id": "HumanEval/112", "completion": "    result = ''.join(char for char in s if char not in c)\n    return (result, result == result[::-1])"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    result = []\n    word = \"\"\n    for char in s:\n        if char.isalpha():\n            word += char\n        else:\n            if len(word) == n:\n                result.append(word)\n            word = \"\"\n    if len(word) == n:\n        result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"AEIOUaeiou\"\n    n = len(word)\n    for i in range(n-2, -1, -1):\n        if word[i] in vowels and word[i+1] in consonants and word[i+2] in consonants:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if len(date) != 10:\n        return False\n    month, day, year = date.split('-')\n    if len(month) != 2 or len(day) != 2 or len(year) != 4:\n        return False\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month not in range(1, 13) or day not in range(1, 32) or year not in range(1, 10000):\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day not in range(1, 32):\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day not in range(1, 31):\n            return False\n    else:\n        if day not in range(1, 29):\n            return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [txt]"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if len(words) == 0:\n        return False\n    last_word = words[-1]\n    if len(last_word) == 0:\n        return False\n    return last_word[-1].isalpha()"}
{"task_id": "HumanEval/140", "completion": "    if \"  \" in text:\n        return text.replace(\"  \", \"-\")\n    else:\n        return text.replace(\" \", \"_\")"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if len(word) > 1 and is_prime(len(word)):\n            result += word + \" \"\n    return result.strip()\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for char in extension:\n            if char.isupper():\n                cap += 1\n            elif char.islower():\n                sm += 1\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + \".\" + strongest_extension"}
{"task_id": "HumanEval/156", "completion": "    roman_numeral_map = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    roman = \"\"\n    for key in sorted(roman_numeral_map.keys(), reverse=True):\n        while number >= key:\n            roman += roman_numeral_map[key]\n            number -= key\n    return roman"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result if result else s"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                groups.append(stack.pop())\n            stack[-1] = '('\n    return [''.join(groups)] + [stack[i:] for i in range(len(stack)-1, -1, -1)]"}
{"task_id": "HumanEval/6", "completion": "    groups = paren_string.split(' ')\n    result = []\n    for group in groups:\n        max_nesting = 0\n        stack = []\n        for char in group:\n            if char == '(':\n                stack.append(char)\n            else:\n                stack.pop()\n                max_nesting += 1\n        result.append(max_nesting)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\"\n    Find the shortest palindrome that begins with the given string.\n    If no palindrome can be formed, return the original string.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    \n    # Find the longest postfix of the string that is a palindrome\n    i = len(string)\n    while i > 0:\n        if is_palindrome(string[:i]):\n            break\n        i -= 1\n    if i == 0:\n        return string\n    \n    # Reverse the postfix and append to the original string\n    postfix = string[:i][::-1]\n    return string + postfix"}
{"task_id": "HumanEval/11", "completion": "    result: List[str] = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result.append('0')\n        else:\n            result.append('1')\n    return ''.join(result)"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = 0\n    result = \"\"\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(1, len(string)+1)]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    nums = list(map(int, numbers.split()))\n    nums.sort()\n    return ' '.join(map(str, nums))"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.swapcase() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # revert elements in each group. Unless group has fewer elements than 3.\n    groups = [group[::-1] if len(group) == 3 else group for group in groups]\n    # decode group by taking every third element and reordering them\n    decoded_groups = [group[i % 3] for group in groups for i in range(len(group))]\n    return \"\".join(decoded_groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiou\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/74", "completion": "    if sum(len(s) for s in lst1) < sum(len(s) for s in lst2):\n        return lst1\n    elif sum(len(s) for s in lst1) > sum(len(s) for s in lst2):\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = \"\"\n    for word in words:\n        if word:\n            sorted_word = ''.join(sorted(word))\n            result += sorted_word\n        else:\n            result += \" \"\n    return result"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2*ord(char.lower()) - 97\n            result += chr(shift%26 + 97) if shift%26 + 97 != 109 else chr(104)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'AEIOUaeiou'\n    result = ''\n    for char in message:\n        if char in vowels:\n            result += chr(((ord(char) - ord('a') + 2) % 5) + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    result = {}\n    for word in words:\n        if word in result:\n            result[word] += 1\n        else:\n            result[word] = 1\n    return result"}
{"task_id": "HumanEval/112", "completion": "    s = ''.join(i for i in s if i not in c)\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for i in range(len(lst)):\n        odd_count = sum(int(digit) % 2 != 0 for digit in lst[i])\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    result = []\n    for word in words:\n        vowel_count = sum(1 for char in word if char in vowels)\n        consonant_count = len(word) - vowel_count\n        if vowel_count == n and consonant_count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"AEIOUaeiou\"\n    word_list = list(word)\n    for i in range(len(word_list)-1, -1, -1):\n        if word_list[i] in vowels and i+1 < len(word_list) and word_list[i+1].isalpha() and word_list[i+1] not in vowels:\n            return word_list[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    try:\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12 or day < 1 or day > 31:\n            return False\n        if (month % 2 == 0 and day > 29) or (month % 2 != 0 and day > 30):\n            return False\n        datetime.datetime(year, month, day)\n        return True\n    except:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [txt]"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if not words:\n        return False\n    last_word = words[-1]\n    if not last_word:\n        return False\n    if last_word[-1].isalpha():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/140", "completion": "    result = []\n    for char in text:\n        if char == ' ':\n            if result and result[-1] == ' ':\n                result.append('-')\n            else:\n                result.append('_')\n        else:\n            result.append(char)\n    return ''.join(result)"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word) in prime_length():\n            result.append(word)\n    return ' '.join(result)\n\ndef prime_length():\n    primes = set()\n    n = 2\n    while True:\n        if is_prime(n):\n            primes.add(len(str(n)))\n        n += 1\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/149", "completion": "    def helper(lst, length_sum):\n        if not lst:\n            return length_sum\n        length = len(lst[0])\n        return helper(lst[1:], length_sum + length)\n    return helper(lst, 0)"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for ext in extensions:\n        cap = sum(1 for char in ext if char.isupper())\n        sm = sum(1 for char in ext if char.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/156", "completion": "    roman_map = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    roman_num = \"\"\n    while number > 0:\n        for k, v in roman_map.items():\n            if number >= k:\n                roman_num += v\n                number -= k\n                break\n    return roman_num"}
{"task_id": "HumanEval/158", "completion": "    max_count = 0\n    max_word = \"\"\n    for word in words:\n        char_count = len(set(word))\n        if char_count > max_count or (char_count == max_count and word < max_word):\n            max_count = char_count\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(ord('a') if char.islower() else ord('A'))\n        else:\n            result += char\n    return result if result else s"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if text:\n        hash_object = hashlib.md5(text.encode())\n        return hash_object.hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                result.append(''.join(stack + [char]))\n            else:\n                result.append('(')\n                result.append(char)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Return a shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), -1, -1):\n        prefix = string[:i]\n        suffix = string[i:]\n        if is_palindrome(prefix + suffix[::-1]):\n            return prefix + suffix + suffix[::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(min(len(a), len(b))):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result + a[len(result):] + b[len(result):]"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    result = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/14", "completion": "    return [string[i:] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "    if n <= 0:\n\t\treturn \"\"\n\ts = \"\"\n\tfor i in range(n):\n\t\ts += str(i) + \" \"\n\treturn s.strip()"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    n = len(substring)\n    for i in range(len(string) - n + 1):\n        if string[i:i+n] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    number_list = list(map(int, filter(lambda x: x.isdigit(), numbers.split())))\n    number_list.sort()\n    result = ''\n    for word in numbers.split():\n        if word.isdigit():\n            result += str(number_list.pop(0)) + ' '\n        else:\n            result += word + ' '\n    return result.strip()"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing cyclic encoding.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    # concatenate reversed groups.\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the reverse direction.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 21 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = set('aeiouy')\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/74", "completion": "    def total_chars(s):\n        return sum(len(string) for string in s)\n    \n    if total_chars(lst1) < total_chars(lst2):\n        return lst1\n    elif total_chars(lst1) == total_chars(lst2):\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/79", "completion": "    binary_string = bin(decimal)[2:]\n    binary_string = \"db\" + binary_string + \"db\"\n    return binary_string"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = \"\"\n    for word in words:\n        sorted_word = sorted(word)\n        result += \"\".join(sorted_word) + \" \"\n    return result.strip()"}
{"task_id": "HumanEval/89", "completion": "    new_str = \"\"\n    for char in s:\n        if char.isalpha():\n            new_char = chr(((ord(char) - 97) * 2 + 1) % 26 + 97)\n        else:\n            new_char = char\n        new_str += new_char\n    return new_str"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()  # Split string into individual words using spaces as delimiters\n    return words"}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    histogram = {}\n    for word in words:\n        if word in histogram:\n            histogram[word] += 1\n        else:\n            histogram[word] = 1\n    return histogram"}
{"task_id": "HumanEval/112", "completion": "    result = ''\n    for i in s:\n        if i not in c:\n            result += i\n    return (result,result == result[::-1])"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = 0\n        for digit in s:\n            if int(digit) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements {} in the string {} of the input.\".format(count, s))\n    return result"}
{"task_id": "HumanEval/117", "completion": "    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    result = []\n    words = s.split()\n    for word in words:\n        if sum(1 for char in word if char in consonants) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels and word[i+1] not in vowels and word[i+2] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    date_format = '%m-%d-%Y'\n\ttry:\n\t\tdatetime.datetime.strptime(date, date_format)\n\texcept ValueError:\n\t\treturn False\n\treturn True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [txt]"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if len(words) == 0:\n        return False\n    last_word = words[-1]\n    if len(last_word) == 0:\n        return False\n    if not last_word[-1].isalpha():\n        return False\n    return True"}
{"task_id": "HumanEval/140", "completion": "    fixed_text = text.replace(\"  \", \" - \")\n    fixed_text = fixed_text.replace(\" \", \"_\")\n    return fixed_text"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split(\" \")\n    result = []\n    for word in words:\n        if len(word) % 2 != 0:\n            result.append(word)\n    return \" \".join(result)"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/153", "completion": "    strength = {}\n    for ext in extensions:\n        cap = len([c for c in ext if c.isupper()])\n        sm = len([c for c in ext if c.islower()])\n        strength[ext] = cap - sm\n    max_strength = max(strength.values())\n    result = [key for key, value in strength.items() if value == max_strength]\n    return class_name + '.' + result[0]"}
{"task_id": "HumanEval/156", "completion": "    roman = {1: \"i\", 4: \"iv\", 5: \"v\", 9: \"ix\", 10: \"x\"}\n    result = \"\"\n    for key in sorted(roman.keys(), reverse=True):\n        while number >= key:\n            result += roman[key]\n            number -= key\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            result = word\n    return result"}
{"task_id": "HumanEval/161", "completion": "    new_string = \"\"\n    for char in s:\n        if char.isalpha():\n            new_string += chr(122 - ord(char)) if char.islower() else chr(96 + ord(char))\n        else:\n            new_string += char\n    return new_string if new_string else s"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(result)\n            result = []\n        elif char == ')':\n            if not stack:\n                result = ['('] + result + [')']\n            else:\n                stack[-1].append(')')\n                stack[-1].extend(result)\n                result = []\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_level = 0\n    groups = paren_string.split(' ')\n    for group in groups:\n        level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n            elif char == ')' and level > max_level:\n                max_level = level\n        level = 0\n    return [max_level] * len(groups)"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\"\n    Find the shortest palindrome that begins with the given string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    n = len(string)\n    for i in range(n // 2, 0, -1):\n        prefix = string[:i]\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            return prefix + suffix[::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    if len(a) != len(b):\n        raise ValueError(\"Strings must have the same length\")\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_length = -1\n    result = \"\"\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/14", "completion": "    n = len(string)\n    return [string[:i] for i in range(n + 1)]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = list(filter(lambda x: x.isdigit(), numbers.split()))\n    num_list.sort(key=lambda x: int(x))\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from encoded string by cyclic encoding.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # rotate elements in each group. Unless group has fewer elements than 3.\n    groups = [group[-1:] + group[:-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string from the encoded string\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = set('aeiou')\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 < total_chars2 else lst2"}
{"task_id": "HumanEval/79", "completion": "    binary_str = bin(decimal)\n    return 'db' + binary_str[2:] + 'db'"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if word == '':\n            result.append('')\n        else:\n            sorted_word = ''.join(sorted(word))\n            result.append(sorted_word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiou\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a'))\n                encoded_message += encoded_char\n            else:\n                encoded_message += chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a')).upper()\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOU\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i].upper() in vowels:\n                count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    result = {}\n    for word in words:\n        if word in result:\n            result[word] += 1\n        else:\n            result[word] = 1\n    return result"}
{"task_id": "HumanEval/112", "completion": "    s = ''.join(set(s) - set(c))\n    rev_s = s[::-1]\n    if rev_s == s:\n        return s, True\n    else:\n        return s, False"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for i, string in enumerate(lst):\n        count = 0\n        for char in string:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, len(string), string, i+1))\n    return result"}
{"task_id": "HumanEval/117", "completion": "    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    result = []\n    for word in words:\n        if sum(c in consonants for c in word) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    i = len(word) - 2\n    while i >= 0:\n        if word[i] not in vowels and word[i+1] in vowels:\n            return word[i]\n        i -= 1\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if len(date) != 10:\n        return False\n\n    day, month, year = date.split('-')\n    if not day.isdigit() or not month.isdigit() or not year.isdigit():\n        return False\n\n    day = int(day)\n    month = int(month)\n    year = int(year)\n\n    if not 1 <= month <= 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if not 1 <= day <= 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if not 1 <= day <= 30:\n            return False\n    elif month == 2:\n        if not 1 <= day <= 29:\n            return False\n\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return list(txt)"}
{"task_id": "HumanEval/134", "completion": "    txt = txt.strip()  # remove leading and trailing spaces\n    if not txt:  # if the string is empty\n        return False\n    last_char = txt[-1]  # get the last character\n    if last_char.isalpha():  # check if the last character is alphabetical\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/140", "completion": "    result = []\n    for char in text:\n        if char == \" \":\n            result.append(\"_\")\n        else:\n            result.append(char)\n    return \"\".join(result)"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    prime_words = [word for word in words if len(word) % 2 != 0]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/149", "completion": "    even_length_words = [word for word in lst if len(word) % 2 == 0]\n    return sorted(even_length_words)"}
{"task_id": "HumanEval/153", "completion": "    max_strength = float('-inf')\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for char in extension:\n            if char.isupper():\n                cap += 1\n            elif char.islower():\n                sm += 1\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension"}
{"task_id": "HumanEval/156", "completion": "    roman_map = {0: '', 1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v', 6: 'vi', 7: 'vii', 8: 'viii', 9: 'ix', 10: 'x', 20: 'xx', 30: 'xxx', 40: 'xl', 50: 'l', 60: 'lx', 70: 'lxx', 80: 'lxxx', 90: 'xc', 100: 'c'}\n    roman_num = ''\n    if number < 10:\n        return roman_map[number]\n    elif number < 100:\n        num_ones = number % 10\n        num_tens = number // 10\n        roman_num = roman_map[num_tens] + roman_map[num_ones]\n        return roman_num\n    elif number < 1000:\n        num_ones = number % 10\n        num_tens = number // 10\n        roman_num = roman_map[num_tens] + roman_map[num_ones]\n        return roman_num"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = -1\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result if result else s"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    groups = []\n    current_group = ''\n    balance = 0\n    for char in paren_string:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n            if balance == 0:\n                groups.append(current_group)\n                current_group = ''\n            else:\n                current_group += char\n        else:\n            current_group += char\n    return groups"}
{"task_id": "HumanEval/6", "completion": "    groups = paren_string.split()\n    result = []\n    for group in groups:\n        stack = []\n        max_level = 0\n        for char in group:\n            if char == '(':\n                stack.append(max_level)\n                max_level += 1\n            elif char == ')':\n                if stack:\n                    stack.pop()\n                    max_level = max(max_level, stack[-1]+1)\n                else:\n                    break\n        result.append(max_level)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Build the shortest palindrome that starts with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[i:][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    max_len = 0\n    max_string = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_string = s\n    return max_string"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    lowercase_string = string.lower()\n    distinct_chars = set()\n    for char in lowercase_string:\n        if char.isalpha():\n            distinct_chars.add(char)\n    return len(distinct_chars)"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    len_substr = len(substring)\n    for i in range(len(string) - len_substr + 1):\n        if string[i:i + len_substr] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = list(map(int, numbers.split()))\n    num_list.sort()\n    return ' '.join(map(str, num_list))"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing encode_cyclic function.\n    \"\"\"\n    # reverse string\n    rev_s = s[::-1]\n    # split string to groups. Each of length 3.\n    groups = [rev_s[(3 * i):min((3 * i + 3), len(rev_s))] for i in range((len(rev_s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the reverse direction.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/74", "completion": "    def total_chars(s):\n        return sum(len(word) for word in s)\n    \n    if total_chars(lst1) < total_chars(lst2):\n        return lst1\n    elif total_chars(lst1) > total_chars(lst2):\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"0\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    return ''.join(chr(((ord(c)-ord('a')+2) * 2) % 26 + ord('a')) for c in s)"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += chr(ord(char) - 32)\n    return encoded_message"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    result = {}\n    for word in words:\n        if word in result:\n            result[word] += 1\n        else:\n            result[word] = 1\n    max_count = max(result.values())\n    return {key: value for key, value in result.items() if value == max_count}"}
{"task_id": "HumanEval/112", "completion": "    result = ''\n    for char in s:\n        if char not in c:\n            result += char\n    return (result, result == result[::-1])"}
{"task_id": "HumanEval/113", "completion": "    output = []\n    for i, string in enumerate(lst):\n        count = 0\n        for char in string:\n            if int(char) % 2 != 0:\n                count += 1\n        output.append(f\"the number of odd elements {count}n the str{i}ng {i} of the {i}nput.\")\n    return output"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    words = s.split()\n    result = []\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n    return result\n\ndef count_consonants(word):\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return sum(1 for char in word if char in consonants)"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    word_list = list(word)\n    n = len(word_list)\n    for i in range(n - 1, 0, -1):\n        if word_list[i].isalpha() and word_list[i - 1].isalpha() and word_list[i] in vowels and word_list[i - 1] in vowels:\n            return word_list[i - 1]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    date_format = '%m-%d-%Y'\n    try:\n        datetime.strptime(date, date_format)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if ord(char) % 2 != 0:\n                    count += 1\n        return count"}
{"task_id": "HumanEval/134", "completion": "    if txt == '':\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    return last_char.isspace()"}
{"task_id": "HumanEval/140", "completion": "    result = ''\n    i = 0\n    while i < len(text):\n        if text[i] == ' ':\n            if i+1 < len(text) and text[i+1] == ' ':\n                result += '-'\n                i += 2\n            else:\n                result += '_'\n                i += 1\n        else:\n            result += text[i]\n            i += 1\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split(\" \")\n    result = []\n    for word in words:\n        if len(word) in prime_lengths:\n            result.append(word)\n    return \" \".join(result)\n\ndef prime_lengths(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/149", "completion": "    sorted_lst = sorted(lst, key=lambda x: (len(x), x))\n    result = 0\n    for word in sorted_lst:\n        result += len(word)\n    return result"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + \".\" + strongest_extension"}
{"task_id": "HumanEval/156", "completion": "    roman_map = {0: 'i', 1: 'x', 2: 'c', 3: 'm'}\n    roman = ''\n    while number > 0:\n        if number >= 1000:\n            roman += roman_map[3]\n            number -= 1000\n        elif number >= 900:\n            roman += roman_map[2] + roman_map[3]\n            number -= 900\n        elif number >= 500:\n            roman += roman_map[2]\n            number -= 500\n        elif number >= 400:\n            roman += roman_map[1] + roman_map[3]\n            number -= 400\n        elif number >= 100:\n            roman += roman_map[1] + roman_map[2]\n            number -= 100\n        elif number >= 90:\n            roman += roman_map[0] + roman_map[2] + roman_map[3]\n            number -= 90\n        elif number >= 50:\n            roman += roman_map[0] + roman_map[2]\n            number -= 50\n        elif number >= 40:\n            roman += roman_map[0] + roman_map[1] + roman_map[3]\n            number -= 40\n        elif number >= 10:\n            roman += roman_map[0] + roman_map[1] + roman_map[2]\n            number -= 10\n        elif number >= 9:\n            roman += roman_map[0] + roman_map[1] + roman_map[2] + roman_map[3]\n            number -= 9\n        elif number >= 5:\n            roman += roman_map[0] + roman_map[2]\n            number -= 5\n        elif number >= 4:\n            roman += roman_map[0] + roman_map[1] + roman_map[3]\n            number -= 4\n        elif number >= 1:\n            roman += roman_map[0]\n            number -= 1\n    return roman"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n            \n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(122 - ord(char)) if char.islower() else chr(96 + ord(char))\n        else:\n            result += char\n    return result if result else s"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                if not stack:\n                    result.append('')\n            else:\n                result.append(')')\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_level = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(max_level)\n            max_level += 1\n        elif char == ')':\n            stack.pop()\n            max_level = stack[-1] + 1 if stack else 0\n    return [max_level] * len(paren_string.split())"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    if is_palindrome(string):\n        return string\n    else:\n        i = len(string) - 1\n        while i >= 0 and not is_palindrome(string[:i]):\n            i -= 1\n        return string[:i] + string[i:] + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = 0\n    result = \"\"\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(len(string)+1)]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    lowercase_chars = set(string.lower())\n    return len(lowercase_chars)"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = numbers.split()\n    num_list.sort()\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    takes as input encoded string with cyclic encoding. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [group[::-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    \n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x = x // base\n    \n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string from encoded with encode_shift function\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(filter(lambda x: x not in vowels, text))"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    vowels = \"aeiouAEIOU\"\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = ''\n    for char in s:\n        shift = (ord(char) - ord('a') + 2) * 2\n        result += chr(shift % 26 + ord('a'))\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char in vowels:\n            result += chr((ord(char) + 2 - 97) % 26 + 97)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split(\",\")\n    words = [word.strip() for word in words]\n    return words"}
{"task_id": "HumanEval/111", "completion": "    hist = {}\n    words = test.split()\n    for word in words:\n        if word in hist:\n            hist[word] += 1\n        else:\n            hist[word] = 1\n    return hist"}
{"task_id": "HumanEval/112", "completion": "    s = \"\".join(char for char in s if char not in c)\n    return s[::-1], s==s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for i, s in enumerate(lst):\n        count = 0\n        for ch in s:\n            if int(ch) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, i+1, s, i+1))\n    return result"}
{"task_id": "HumanEval/117", "completion": "    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for char in word if char.isalpha() and char not in vowels) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels:\n            if word[i + 1] not in vowels and word[i + 2] in vowels:\n                return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    \n    try:\n        month, day, year = date.split('-')\n    except ValueError:\n        return False\n    \n    if not month or not day or not year:\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month not in range(1, 13) or day not in range(1, 32) or year not in range(1, 3000):\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12] and day not in range(1, 32) or month in [4, 6, 9, 11] and day not in range(1, 31) or month == 2 and day not in range(1, 29):\n        return False\n    \n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [txt]"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if len(words) == 0:\n        return False\n    return words[-1].isalpha()"}
{"task_id": "HumanEval/140", "completion": "    res = ''\n    for char in text:\n        if char == ' ':\n            if res and res[-1] == ' ':\n                res += '-'\n            else:\n                res += '_'\n        else:\n            res += char\n    return res"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word) in prime_lengths:\n            result.append(word)\n    return \" \".join(result)\n\ndef prime_lengths(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/149", "completion": "    sorted_lst = sorted(lst, key=lambda x: (len(x), x))\n    return sum(int(x) for x in sorted_lst)"}
{"task_id": "HumanEval/153", "completion": "    strength = {}\n    for ext in extensions:\n        cap = 0\n        sm = 0\n        for char in ext:\n            if char.isupper():\n                cap += 1\n            elif char.islower():\n                sm += 1\n        strength[ext] = cap - sm\n    max_strength = max(strength.values())\n    result = [key for key, value in strength.items() if value == max_strength]\n    return f\"{class_name}.{result[0]}\""}
{"task_id": "HumanEval/156", "completion": "    roman = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    result = ''\n    num = number\n    while num > 0:\n        if num >= 1000:\n            result = roman[1000] + result\n            num -= 1000\n        elif num >= 900:\n            result = roman[900] + result\n            num -= 900\n        elif num >= 500:\n            result = roman[500] + result\n            num -= 500\n        elif num >= 400:\n            result = roman[400] + result\n            num -= 400\n        elif num >= 100:\n            result = roman[100] + result\n            num -= 100\n        elif num >= 90:\n            result = roman[90] + result\n            num -= 90\n        elif num >= 50:\n            result = roman[50] + result\n            num -= 50\n        elif num >= 40:\n            result = roman[40] + result\n            num -= 40\n        elif num >= 10:\n            result = roman[10] + result\n            num -= 10\n        elif num >= 9:\n            result = roman[9] + result\n            num -= 9\n        elif num >= 5:\n            result = roman[5] + result\n            num -= 5\n        elif num >= 4:\n            result = roman[4] + result\n            num -= 4\n        elif num >= 1:\n            result = roman[1] + result\n            num -= 1\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            result = word\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(219 - ord(char))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    groups = []\n    \n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            if not stack:\n                groups.append('')\n        else:\n            if stack:\n                groups[-1] += char\n            else:\n                groups.append(char)\n    \n    return groups"}
{"task_id": "HumanEval/6", "completion": "    groups = paren_string.split()\n    max_level = [0] * len(groups)\n    \n    for i, group in enumerate(groups):\n        level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level[i] = max(max_level[i], level)\n            elif char == ')':\n                level -= 1\n    \n    return max_level"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[:i+1]):\n            return string + string[:i][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result: List[str] = []\n    for i in range(min(len(a), len(b))):\n        if a[i] == b[i]:\n            result.append('0')\n        else:\n            result.append('1')\n    result += a[len(b):]\n    result += b[len(a):]\n    return ''.join(result)"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_length = -1\n    result = None\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/14", "completion": "    return [string[i:] for i in range(len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    index = 0\n    while index < len(string):\n        if string.startswith(substring, index):\n            count += 1\n            index += len(substring)\n        else:\n            index += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    nums = list(map(int, filter(lambda x: x, numbers.split())))\n    nums.sort()\n    return ' '.join(map(str, nums))"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.swapcase() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing the encoding done with encode_cyclic function.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[::-1] for group in groups]\n    decoded = \"\".join(groups)\n    return decoded[1:]"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    \n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x = x // base\n    \n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the opposite direction from encode_shift.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'AEIOUaeiou'\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/74", "completion": "    total_chars = lambda x: sum(len(s) for s in x)\n    if total_chars(lst1) < total_chars(lst2):\n        return lst1\n    elif total_chars(lst1) == total_chars(lst2):\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db0db\"\n    binary_str = \"\"\n    while decimal > 0:\n        binary_str = str(decimal % 2) + binary_str\n        decimal = decimal // 2\n    return \"db\" + binary_str + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = ''\n    for word in words:\n        result += ' '.join(sorted(word))\n    return result"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * ord(char.lower()) - ord('a')\n            result += chr(shift % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = set('aeiou')\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('a') + 1) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    vowels = 'AEIOUaeiou'\n    count = 0\n    for i in range(len(s)):\n        if (i % 2 == 0 and s[i] in vowels):\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/111", "completion": "    words = test.split(' ')\n    count = {}\n    for word in words:\n        if word in count:\n            count[word] += 1\n        else:\n            count[word] = 1\n    max_count = max(count.values())\n    most_repetitive_letters = [letter for letter, count in count.items() if count == max_count]\n    return {letter: count for letter, count in count.items() if letter in most_repetitive_letters}"}
{"task_id": "HumanEval/112", "completion": "    result = ''.join([i for i in s if i not in c])\n    return result, result == result[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for string in lst:\n        odd_count = sum(int(digit) % 2 != 0 for digit in string)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_count, string, odd_count, string))\n    return result"}
{"task_id": "HumanEval/117", "completion": "    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n    result = []\n    word = \"\"\n    for char in s:\n        if char.isalpha():\n            word += char\n        else:\n            if len(word) == n:\n                result.append(word)\n            word = \"\"\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels and word[i+2] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n\n    parts = date.split('-')\n\n    if len(parts) != 3:\n        return False\n\n    if not parts[0].isdigit() or not parts[1].isdigit() or not parts[2].isdigit():\n        return False\n\n    month = int(parts[0])\n    day = int(parts[1])\n    year = int(parts[2])\n\n    if month < 1 or month > 12:\n        return False\n\n    if day < 1 or day > 31:\n        return False\n\n    if (month == 2 and day < 1 or day > 29) or (month in [4, 6, 9, 11] and day < 1 or day > 30) or (month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12) and day < 1 or day > 31:\n        return False\n\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                count += 1\n        if count % 2 != 0:\n            return [txt]\n        else:\n            return [txt]"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if len(words) == 0:\n        return False\n    last_word = words[-1]\n    if not last_word:\n        return False\n    if last_word[-1].isalpha():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(\"  \", \"-\")\n    text = text.replace(\" \", \"_\")\n    return text"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = [word for word in words if len(word) > 1]\n    result = [word for word in result if len(word) % 2 != 0]\n    result = [word for word in result if is_prime(len(word))]\n    return ' '.join(result)\n\ndef is_prime(n: int) -> bool:\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n**0.5)+1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True"}
{"task_id": "HumanEval/149", "completion": "    result = sorted(lst, key=lambda x: (len(x), x))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    strengths = {}\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for char in extension:\n            if char.isupper():\n                cap += 1\n            elif char.islower():\n                sm += 1\n        strength = cap - sm\n        if strength not in strengths or extension < strengths[strength]:\n            strengths[strength] = extension\n    return class_name + '.' + strengths[max(strengths)]"}
{"task_id": "HumanEval/156", "completion": "    roman = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c'}\n    result = \"\"\n    num = number\n    while num > 0:\n        if num in roman:\n            result = roman[num] + result\n            num = 0\n        else:\n            digit = 1\n            while digit * (num % 10) != num:\n                digit *= 10\n            if digit == 1:\n                result = roman[(num % 10)] + result\n            else:\n                result = roman[digit] + result\n            num = num // 10\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = -1\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if text:\n        return hashlib.md5(text.encode()).hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(result)\n            result = []\n        elif char == ')' and stack:\n            stack[-1].append(''.join(result))\n            result = stack.pop()\n        else:\n            result.append(char)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    result = []\n    \n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            max_depth += 1\n        else:\n            if stack:\n                result.append(max_depth)\n                max_depth = 0\n            else:\n                result.append(0)\n    \n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[i:][::-1] + string[:i]"}
{"task_id": "HumanEval/11", "completion": "    result: List[str] = []\n    for i in range(min(len(a), len(b))):\n        if a[i] == b[i]:\n            result.append('0')\n        else:\n            result.append('1')\n    return ''.join(result) + a[len(b):] + b[len(a):]"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n\n    max_length = -1\n    longest_string = None\n\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            longest_string = s\n\n    return longest_string"}
{"task_id": "HumanEval/14", "completion": "    n = len(string)\n    prefix = ['']\n    for i in range(n):\n        prefix.append(prefix[-1] + string[i])\n    return prefix"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = list(map(int, filter(lambda x: x.isdigit(), numbers.split())))\n    num_list.sort()\n    return ' '.join(map(str, num_list))"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.swapcase() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    # split encoded string to groups of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode each group\n    groups = [decode_group(group) for group in groups]\n    # merge decoded groups\n    return \"\".join(groups)\n\n\ndef decode_group(s: str):\n    # reverse and cycle elements in the group\n    s = s[::-1]\n    return s + s[0]"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by -5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"AEIOUaeiou\"\n    return ''.join(filter(lambda x: x not in vowels, text))"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    if count == 0 and s.endswith('y'):\n        count = 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/74", "completion": "    def total_chars(string):\n        return sum(len(s) for s in string)\n    \n    if total_chars(lst1) < total_chars(lst2):\n        return lst1\n    elif total_chars(lst1) == total_chars(lst2):\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = 2*2\n            new_char = chr((ord(char) - 97 - shift) % 26 + 97)\n            result += new_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    result = \"\"\n    vowels = \"aeiouAEIOU\"\n    for char in message:\n        if char in vowels:\n            result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            result += chr((ord(char) - ord('a') + 26) % 26 + ord('a'))\n    return result"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOUaeiou\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    result = {}\n    for word in words:\n        if word in result:\n            result[word] += 1\n        else:\n            result[word] = 1\n    return result"}
{"task_id": "HumanEval/112", "completion": "    s = \"\".join(set(s) - set(c))\n    rev_s = s[::-1]\n    return s, rev_s == s"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_digits = sum(int(c) % 2 != 0 for c in s)\n        result.append(f\"the number of odd elements {odd_digits}n the str{odd_digits}ng {odd_digits} of the {odd_digits}nput.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    result = []\n    count = 0\n    word = \"\"\n    for char in s:\n        if char == \" \":\n            if count == n:\n                result.append(word)\n            word = \"\"\n            count = 0\n        elif char in consonants:\n            word += char\n            count += 1\n            if count == n:\n                result.append(word)\n                word = \"\"\n                count = 0\n    if count == n:\n        result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels and word[i+2] in vowels:\n            return word[i+1]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    date_format = '%m-%d-%Y'\n    try:\n        datetime.datetime.strptime(date, date_format)\n    except ValueError:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    whitespace = \" \"\n    comma = \",\"\n    if whitespace in txt:\n        return txt.split(whitespace)\n    elif comma in txt:\n        return txt.split(comma)\n    else:\n        count = 0\n        for i in range(len(txt)):\n            if ord(txt[i]) % 2 != 0:\n                count += 1\n        return count"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    for char in reversed(txt):\n        if char.isalpha():\n            return True\n        elif char.isspace():\n            return False\n    return False"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    i = 0\n    while i < len(text):\n        if text[i] == ' ':\n            if i+1 < len(text) and text[i+1] == ' ':\n                result += '-'\n                i += 2\n            else:\n                result += '_'\n                i += 1\n        else:\n            result += text[i]\n            i += 1\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split(\" \")\n    result = []\n    for word in words:\n        if len(word) in primality_checker(len(word)):\n            result.append(word)\n    return \" \".join(result)\n\ndef primality_checker(n):\n    if n <= 1:\n        return []\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return []\n    return [n]"}
{"task_id": "HumanEval/149", "completion": "    def get_length_and_alphabetical_sum(s):\n        length = len(s)\n        alphabetical_sum = sum(ord(c) for c in s)\n        return (length, alphabetical_sum)\n\n    return sum(get_length_and_alphabetical_sum(word) for word in lst if len(word) % 2 == 0)"}
{"task_id": "HumanEval/153", "completion": "    strength_dict = {}\n    for ext in extensions:\n        cap_count = sum(1 for char in ext if char.isupper())\n        sm_count = sum(1 for char in ext if char.islower())\n        strength = cap_count - sm_count\n        if strength in strength_dict:\n            if ext < strength_dict[strength]:\n                strength_dict[strength] = ext\n        else:\n            strength_dict[strength] = ext\n    return f\"{class_name}.{strength_dict[max(strength_dict.keys())]}\""}
{"task_id": "HumanEval/156", "completion": "    roman_mapping = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n                     (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n                     (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]\n    roman_num = ''\n    while number > 0:\n        for roman_pair in roman_mapping:\n            if number >= roman_pair[0]:\n                roman_num += roman_pair[1]\n                number -= roman_pair[0]\n                break\n    return roman_num"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = ''\n    for char in s:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result if result else s[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    result = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            if not stack:\n                result.append('')\n        elif not stack:\n            result[-1] += char\n    return result"}
{"task_id": "HumanEval/6", "completion": "    groups = paren_string.split()\n    output = []\n    for group in groups:\n        level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n            elif char == ')':\n                level -= 1\n            else:\n                continue\n            if level < 0:\n                output.append(level+1)\n                break\n    return output"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Returns a palindrome that begins with the given string \"\"\"\n    if not string:\n        return \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n\n    max_length = -1\n    max_string = \"\"\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            max_string = s\n    return max_string"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = list(map(int, numbers.split()))\n    num_list.sort()\n    return ' '.join(map(str, num_list))"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing the cyclic encoding process.\n    \"\"\"\n    # reverse string\n    s = s[::-1]\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join groups to form decoded string\n    return \"\".join(groups)[::-1]"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by reversing encode_shift.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = ''\n    for char in text:\n        if char in vowels:\n            continue\n        result += char\n    return result"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/74", "completion": "    total_chars = lambda s: sum(len(item) for item in s)\n    if total_chars(lst1) < total_chars(lst2):\n        return lst1\n    elif total_chars(lst1) > total_chars(lst2):\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db0db\"\n\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "completion": "    return ' '.join(sorted(word for word in s.split()))"}
{"task_id": "HumanEval/89", "completion": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += alphabet[(alphabet.index(char.lower()) * 2) % 26]\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += chr((ord(char) - ord('a') + 5) % 26 + ord('a'))\n            else:\n                encoded_message += chr((ord(char) - ord('A') + 5) % 26 + ord('A'))\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/98", "completion": "    vowels = set(\"AEIOUaeiou\")\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    histogram = {}\n    for word in words:\n        if word in histogram:\n            histogram[word] += 1\n        else:\n            histogram[word] = 1\n    return histogram"}
{"task_id": "HumanEval/112", "completion": "    s = ''.join(e for e in s if e not in c)\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements %d in the string %s of the input.\" % (count, s))\n    return result"}
{"task_id": "HumanEval/117", "completion": "    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    result = []\n    for word in words:\n        count = sum(1 for char in word if char.lower() in consonants)\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = set('aeiouAEIOU')\n    for i in range(len(word)-2, -1, -1):\n        if word[i] not in vowels:\n            if word[i+1] in vowels and word[i+2] not in vowels:\n                return word[i+1]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    try:\n        month, day, year = date.split('-')\n        if len(month) != 2 or len(day) != 2 or len(year) != 4:\n            return False\n        month = int(month)\n        day = int(day)\n        year = int(year)\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if (month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31) or (month in [4, 6, 9, 11] and day < 1 or day > 30) or (month == 2 and day < 1 or day > 29):\n            return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [char for char in txt if char.islower() and ord(char) % 2 != 0]"}
{"task_id": "HumanEval/134", "completion": "    txt = txt.strip()  # Remove leading/trailing spaces\n    words = txt.split()\n    if len(words) > 0:\n        last_word = words[-1]\n        return last_word.isalpha() and not last_word.isalnum()\n    else:\n        return False"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(\"  \", \" - \")\n    text = text.replace(\" \", \"_\")\n    return text"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = [word for word in words if len(word) == 3]\n    return ' '.join(result)"}
{"task_id": "HumanEval/149", "completion": "    odd_length = lambda x: len(x) % 2 != 0\n    filtered_lst = [x for x in lst if not odd_length(x)]\n    return sum(filtered_lst)"}
{"task_id": "HumanEval/153", "completion": "    max_strength = float('-inf')\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + \".\" + strongest_extension"}
{"task_id": "HumanEval/156", "completion": "    roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    roman = ''\n    for char in reversed(str(number)):\n        if roman_map[char] < roman_map[roman[-1]] if roman else True:\n            roman += char\n        else:\n            roman = char + roman\n    return roman"}
{"task_id": "HumanEval/158", "completion": "    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_chars or (unique_chars == max_chars and word < max_word):\n            max_chars = unique_chars\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result if result else s"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack and stack[-1] == '(':\n            stack.pop()\n            result.append('')\n        else:\n            result[-1] += char\n    return result"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                if stack:\n                    max_depth = max(max_depth, len(stack))\n            else:\n                break  # Imbalanced parentheses\n    return [max_depth + 1] * len(paren_string.split())"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    if is_palindrome(string):\n        return string\n    \n    for i in range(len(string)):\n        prefix = string[:i+1]\n        suffix = string[i+1:]\n        if is_palindrome(prefix) and is_palindrome(suffix):\n            return prefix + suffix[::-1] + prefix[::-1]\n    \n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    result = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/14", "completion": "    n = len(string)\n    return [string[i:] for i in range(n+1)]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    nums = [int(num) for num in numbers.split()]\n    nums.sort()\n    return ' '.join(str(num) for num in nums)"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string from encoded with encode_shift function.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = {'a', 'e', 'i', 'o', 'u'}\n    vowel_count = 0\n    for char in s:\n        if char.lower() in vowels:\n            vowel_count += 1\n    return vowel_count"}
{"task_id": "HumanEval/66", "completion": "    upper_sum = 0\n    for char in s:\n        if char.isupper():\n            upper_sum += ord(char)\n    return upper_sum"}
{"task_id": "HumanEval/74", "completion": "    if len(lst1) != len(lst2):\n        return \"Lists are not of the same length\"\n    \n    result = []\n    for i in range(len(lst1)):\n        if sum(len(lst1[i]) for i in range(len(lst1))) < sum(len(lst2[i]) for i in range(len(lst2))):\n            result.append(lst1[i])\n        elif sum(len(lst1[i]) for i in range(len(lst1))) == sum(len(lst2[i]) for i in range(len(lst2))):\n            result.append(lst1[i])\n            result.append(lst2[i])\n    \n    return result"}
{"task_id": "HumanEval/79", "completion": "    binary_str = bin(decimal)[2:]\n    return \"db\" + binary_str + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if word.strip():\n            result.append(sorted(word))\n        else:\n            result.append('')\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char in vowels:\n            result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            result += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n    return result"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/111", "completion": "    histogram = {}\n    for char in test:\n        if char in histogram:\n            histogram[char] += 1\n        else:\n            histogram[char] = 1\n    return histogram"}
{"task_id": "HumanEval/112", "completion": "    s = ''.join(char for char in s if char not in c)\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        odd_count = 0\n        for digit in s:\n            if int(digit) % 2 != 0:\n                odd_count += 1\n        result.append(\"the number of odd elements \" + str(odd_count) + \"n the str\" + s + \"ng \" + str(len(s)) + \" of the \" + str(len(lst)) + \"nput.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    result = []\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    for word in s.split():\n        if sum(1 for char in word if char.lower() in consonants) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"AEIOUaeiou\"\n    n = len(word)\n    for i in range(n - 1, 0, -1):\n        if word[i] in vowels and word[i-1].isalpha() and word[i-1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if date is None or len(date) < 8 or len(date) > 10:\n        return False\n    if len(date) == 10:\n        if date[2] != '-' or date[5] != '-':\n            return False\n    elif len(date) == 8:\n        if date[2] != '/' or date[5] != '/':\n            return False\n    else:\n        return False\n    month = date[:2]\n    day = date[3:5]\n    year = date[6:]\n    if len(day) != 2 or len(year) != 4:\n        return False\n    try:\n        int(month)\n        int(day)\n        int(year)\n    except ValueError:\n        return False\n    if int(month) < 1 or int(month) > 12:\n        return False\n    if int(day) < 1 or int(day) > 31:\n        return False\n    if int(month) in [1, 3, 5, 7, 8, 10, 12] and int(day) > 31:\n        return False\n    if int(month) in [4, 6, 9, 11] and int(day) > 30:\n        return False\n    if int(month) == 2 and int(year) % 4 != 0 and int(day) > 29:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [txt]"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    words = txt.split()\n    last_word = words[-1]\n    if not last_word:\n        return False\n    if not last_word[-1].isalpha():\n        return False\n    if not last_word[-1].isalpha():\n        return False\n    return True"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    for char in text:\n        if char == ' ':\n            if result and result[-1] == ' ':\n                result += '-'\n            else:\n                result += '_'\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if len(word) > 1:\n            if len(set(word)) == len(word):\n                if all(is_prime(len(word))):\n                    result += word + \" \"\n    return result.strip()\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/153", "completion": "    max_strength = float('-inf')\n    max_index = -1\n    for i, ext in enumerate(extensions):\n        cap = sum(1 for char in ext if char.isupper())\n        sm = sum(1 for char in ext if char.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            max_index = i\n    if max_index == -1:\n        return class_name\n    return class_name + '.' + extensions[max_index]"}
{"task_id": "HumanEval/156", "completion": "    roman_map = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = \"\"\n    while number > 0:\n        for key in roman_map:\n            if number >= key:\n                result += roman_map[key]\n                number -= key\n                break\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            result = word\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if not text:\n        return None\n    hash_md5 = hashlib.md5(text.encode('utf-8'))\n    return hash_md5.hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n                if not stack:\n                    result.append('(')\n                else:\n                    result.append(char)\n            else:\n                result.append(char)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    groups = paren_string.split()\n    output = []\n    for group in groups:\n        count = 0\n        max_count = 0\n        for char in group:\n            if char == '(':\n                count += 1\n                max_count = max(max_count, count)\n            elif char == ')':\n                count -= 1\n        output.append(max_count)\n    return output"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(1, len(string)):\n        prefix = string[:i]\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            return prefix + suffix + suffix[::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    if len(a) != len(b):\n        raise ValueError(\"Both strings must have same length\")\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    \n    max_len = -1\n    result = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    \n    return result"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    result = \"\"\n    for i in range(n+1):\n        result += str(i) + \" \"\n    return result.strip()"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/18", "completion": "    if not string or not substring:\n        return 0\n    count = 0\n    i = string.find(substring)\n    while i != -1:\n        count += 1\n        i = string.find(substring, i + 1)\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = list(map(int, filter(lambda x: x.isdigit(), numbers.split(' '))))\n    num_list.sort()\n    result = ' '.join(map(str, num_list))\n    return result"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode elements in each group. Unless group has fewer elements than 3.\n    decoded_groups = [decode_cyclic_group(group) for group in groups]\n    return \"\".join(decoded_groups)\n\n\ndef decode_cyclic_group(group: str):\n    # decode elements in group using reversed order.\n    decoded_group = group[::-1]\n    # re-form group by appending elements in original order.\n    decoded_group = group[-1] + decoded_group[1:]\n    return decoded_group"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by reversing the process of encoding with encode_shift function.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiou'\n    return ''.join(filter(lambda x: x not in vowels, text))"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y' and count > 0:\n        count -= 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/74", "completion": "    def total_chars(lst):\n        return sum(len(s) for s in lst)\n    \n    if total_chars(lst1) < total_chars(lst2):\n        return lst1\n    elif total_chars(lst1) > total_chars(lst2):\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/79", "completion": "    binary_str = bin(decimal)[2:]\n    return 'db' + binary_str + 'db'"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    ordered_words = [sorted(word) for word in words]\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = (ord(char) - 96) * 2 * 2 % 26\n            result += chr((shift + 96) % 26 + 97)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiou\"\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            result += chr(ord('A' if char.isupper() else 'a') + (ord(char) - ord('a' if char.islower() else 'A')) % 26)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].upper() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/111", "completion": "    hist = {}\n    words = test.split()\n    for word in words:\n        if word in hist:\n            hist[word] += 1\n        else:\n            hist[word] = 1\n    return hist"}
{"task_id": "HumanEval/112", "completion": "    s = ''.join(set(s) ^ set(c))\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements in the string {} of the input.\".format(count))\n    return result"}
{"task_id": "HumanEval/117", "completion": "    vowels = set('aeiou')\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiou\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i].isalpha() and word[i+1].isalpha() and word[i] in vowels and word[i+1] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    date_pattern = r'^[0-9]{2}-[0-9]{2}-[0-9]{4}$'\n    if not re.match(date_pattern, date):\n        return False\n    day, month, year = map(int, date.split('-'))\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [chr(ord('a') + i) for i in range(1, 26) if i % 2 != 0]"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if words and len(words) > 0:\n        last_word = words[-1]\n        if last_word and len(last_word) > 0:\n            last_char = last_word[-1]\n            if last_char.isalpha():\n                return True\n    return False"}
{"task_id": "HumanEval/140", "completion": "    return text.replace(\"  \", \"-\").replace(\" \", \"_\")"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if len(word) % 2 != 0 and len(word) % 3 != 0:\n            result += word + \" \"\n    return result.strip()"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/156", "completion": "    roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    roman = \"\"\n    while number > 0:\n        if number >= roman_map['M']:\n            roman += 'M'\n            number -= roman_map['M']\n        elif number >= roman_map['D']:\n            roman += 'D'\n            number -= roman_map['D']\n        elif number >= roman_map['L']:\n            roman += 'L'\n            number -= roman_map['L']\n        elif number >= roman_map['X']:\n            roman += 'X'\n            number -= roman_map['X']\n        elif number >= roman_map['V']:\n            roman += 'V'\n            number -= roman_map['V']\n        else:\n            roman += 'I'\n            number -= roman_map['I']\n    return roman"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_unique_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_unique_word = word\n    return max_unique_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(ord('a' if char.islower() else 'A') + ord(char) - ord('a'))\n        else:\n            result += char\n    return result if result else s[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    \n    import hashlib\n    hash_md5 = hashlib.md5(text.encode('utf-8'))\n    return hash_md5.hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                groups.append('')\n            else:\n                groups[-1] += char\n    return groups"}
{"task_id": "HumanEval/6", "completion": "    max_level = 0\n    curr_level = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            curr_level += 1\n            max_level = max(max_level, curr_level)\n        elif char == ')' and curr_level:\n            curr_level -= 1\n        result.append(max_level)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n    \n    for i in range(len(string)):\n        if is_palindrome(string[:i+1]):\n            return string[:i+1] + string[i::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a) and i < len(b):\n            if a[i] == b[i]:\n                result += '0'\n            else:\n                result += '1'\n        elif i < len(a):\n            result += a[i]\n        else:\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_len = -1\n    longest_string = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            longest_string = s\n    return longest_string"}
{"task_id": "HumanEval/14", "completion": "    n = len(string)\n    return [string[:i] for i in range(1, n + 1)]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = list(map(int, numbers.split()))\n    num_list.sort()\n    return ' '.join(map(str, num_list))"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing encoding done in encode_cyclic function.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by reversing the encoding process.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'AEIOUaeiou'\n    return ''.join(filter(lambda x: x not in vowels, text))"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(string) for string in lst1)\n    total_chars_lst2 = sum(len(string) for string in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/79", "completion": "    binary_string = bin(decimal)[2:]\n    return 'db' + binary_string + 'db'"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    ordered_words = [sorted(word) for word in words]\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = (ord(char) - ord('a') - 1) * 2\n            result += chr(((shift % 26) + 26) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char in vowels:\n            result += chr((ord(char) - ord('a') + 2) % 5 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if (i % 2 == 0 and s[i].isupper()):\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/111", "completion": "    hist = {}\n    words = test.split()\n    for word in words:\n        if word in hist:\n            hist[word] += 1\n        else:\n            hist[word] = 1\n    return hist"}
{"task_id": "HumanEval/112", "completion": "    s = ''.join(set(s) ^ set(c))\n    return (s,s==s[::-1])"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for i, s in enumerate(lst):\n        count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{i}ng {i} of the {i}nput.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    if not s:\n        return []\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    result = []\n    current_word = \"\"\n    for char in s:\n        if char == ' ':\n            if len(current_word) == n:\n                result.append(current_word)\n            current_word = \"\"\n        else:\n            if char in consonants:\n                current_word += char\n    if len(current_word) == n:\n        result.append(current_word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"AEIOUaeiou\"\n    i = len(word) - 2\n    while i >= 0 and word[i] not in vowels:\n        i -= 1\n    if i >= 0:\n        return word[i+1]\n    else:\n        return \"\""}
{"task_id": "HumanEval/124", "completion": "    try:\n        date = date.split('-')\n        month = int(date[0])\n        day = int(date[1])\n        year = int(date[2])\n        if month < 1 or month > 12 or day < 1 or day > 31:\n            return False\n        if (month%2 == 0 and day > 29) or (month%2 != 0 and day > 30):\n            return False\n        datetime.datetime(year, month, day)\n        return True\n    except:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [txt]"}
{"task_id": "HumanEval/134", "completion": "    words = txt.split()\n    if len(words) == 0:\n        return False\n    last_word = words[-1]\n    last_char = last_word[-1]\n    if last_char.isalpha():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(\"  \", \"-\")\n    text = text.replace(\" \", \"_\")\n    return text"}
{"task_id": "HumanEval/143", "completion": "    return sentence.split(' ')\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_words_in_sentence(sentence: str) -> str:\n    words = words_in_sentence(sentence)\n    result = [word for word in words if len(word) > 1 and is_prime(len(word))]\n    return ' '.join(result)"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    \n    for extension in extensions:\n        cap = sum(c.isupper() for c in extension)\n        sm = sum(c.islower() for c in extension)\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n            \n    return class_name + \".\" + strongest_extension"}
{"task_id": "HumanEval/156", "completion": "    roman = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm',\n    }\n    result = ''\n    while number > 0:\n        if number in roman:\n            result = roman[number] + result\n            break\n        else:\n            for i in range(9, 0, -1):\n                if number >= i * 10:\n                    result = roman[i] + result\n                    number -= i * 10\n                    break\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = -1\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = ''\n    for char in s:\n        if char.isalpha():\n            result += chr(ord('a') + ord('A') - ord(char))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            if not stack:\n                result.append('')\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_level = 0\n    cur_level = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            cur_level += 1\n            max_level = max(max_level, cur_level)\n        elif char == ')':\n            cur_level -= 1\n        result.append(max_level)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with a supplied string \"\"\"\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(min(len(a), len(b))):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result + a[len(b):] + b[len(a):]"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    \n    max_length = -1\n    result = None\n    \n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            result = s\n    \n    return result"}
{"task_id": "HumanEval/14", "completion": "    n = len(string)\n    return [string[:i] for i in range(n + 1)]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = list(filter(lambda x: x != '', numbers.split(' ')))\n    num_list.sort()\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(chr(ord(c) ^ (1 << 5)) for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from cyclic encoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [group[::-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the opposite direction.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = set('aeiou')\n    return ''.join(filter(lambda x: x not in vowels, text))"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = set('aeiou')\n    return sum(1 for char in s if char.lower() in vowels)"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/74", "completion": "    total_chars = sum(len(s) for s in lst1)\n    other_total_chars = sum(len(s) for s in lst2)\n    if total_chars < other_total_chars:\n        return lst1\n    elif total_chars > other_total_chars:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)\n    binary = binary[2:]\n    binary = 'db' + binary + 'db'\n    return binary"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if word:\n            result.append(''.join(sorted(word)))\n        else:\n            result.append('')\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            new_ord = ord(char) + (ord('a') * 2) * 2\n            if new_ord > ord('z'):\n                new_ord -= 26\n            encrypted_string += chr(new_ord)\n        else:\n            encrypted_string += char\n    return encrypted_string"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char in vowels:\n            result += chr((ord(char) - ord('a') + 2) % 5 + ord('a'))\n        else:\n            result += char.swapcase()\n    return result"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    vowels = set('aeiou')\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/111", "completion": "    word_list = test.split()\n    repetition = {}\n    for word in word_list:\n        if word in repetition:\n            repetition[word] += 1\n        else:\n            repetition[word] = 1\n    max_rep = max(repetition.values())\n    result = {key: value for key, value in repetition.items() if value == max_rep}\n    return result"}
{"task_id": "HumanEval/112", "completion": "    s = ''.join([i for i in s if i not in c])\n\treturn s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for i in range(len(lst)):\n        odd_count = sum(int(c) % 2 for c in lst[i])\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    result = []\n    word_start = 0\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if i - word_start == n:\n                word = s[word_start:i]\n                if all(char.lower() in consonants for char in word):\n                    result.append(word)\n            word_start = i + 1\n    if s[-1] == ' ':\n        word_start = len(s) - 1\n    if word_start < len(s) - n:\n        word = s[word_start:len(s)]\n        if all(char.lower() in consonants for char in word) and len(word) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    i = len(word) - 1\n    while i > 0:\n        if word[i] in vowels:\n            if i+1 < len(word) and word[i+1] in vowels:\n                return word[i]\n        i -= 1\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    try:\n        if date:\n            mm, dd, yyyy = date.split('-')\n            if len(mm) == 2 and len(dd) == 2 and len(yyyy) == 4:\n                if 1 <= int(mm) <= 12 and 1 <= int(dd) <= 31 and 1900 <= int(yyyy) <= 2100:\n                    if int(mm) in [1, 3, 5, 7, 8, 10, 12] and int(dd) in range(1, 32):\n                        return True\n                    elif int(mm) in [4, 6, 9, 11] and int(dd) in range(1, 31):\n                        return True\n                    elif int(mm) == 2 and int(dd) in range(1, 29):\n                        return True\n            return False\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [txt]"}
{"task_id": "HumanEval/134", "completion": "    txt = txt.strip()\n    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/140", "completion": "    result = \"\"\n    i = 0\n    while i < len(text):\n        if text[i] != ' ':\n            result += text[i]\n        elif text[i] == ' ' and (i == 0 or text[i-1] != ' '):\n            result += '_'\n        elif i+1 < len(text) and text[i+1] != ' ':\n            result += '_'\n        else:\n            result += '-'\n        i += 1\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word) > 1:\n            for i in range(1, len(word)):\n                if len(word) % i == 0:\n                    break\n            else:\n                result.append(word)\n    return \" \".join(result)"}
{"task_id": "HumanEval/149", "completion": "    result = []\n    for item in lst:\n        result.append(item)\n        result.append(item)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/153", "completion": "    strength = {}\n    for ext in extensions:\n        cap, sm = 0, 0\n        for char in ext:\n            if char.isupper():\n                cap += 1\n            elif char.islower():\n                sm += 1\n        strength[ext] = cap - sm\n    max_strength = max(strength.values())\n    result = [key for key, value in strength.items() if value == max_strength]\n    return class_name + '.' + result[0]"}
{"task_id": "HumanEval/156", "completion": "    roman_map = {1000: \"m\", 900: \"cm\", 500: \"d\", 400: \"cd\", 100: \"c\", 90: \"xc\", 50: \"l\", 40: \"xl\", 10: \"x\", 9: \"ix\", 5: \"v\", 4: \"iv\", 1: \"i\"}\n    result = \"\"\n    while number:\n        for key in roman_map:\n            if number >= key:\n                result = roman_map[key] + result\n                number -= key\n                break\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result if result else s[::-1]"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack and stack[-1] == '(':\n            stack.pop()\n            if not stack:\n                groups.append('')\n        elif not stack:\n            groups[-1] += char\n    return groups"}
{"task_id": "HumanEval/6", "completion": "    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_level = 0\n        level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\"\n    Find the shortest palindrome that begins with the given string.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[::-1] + string[i:]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(min(len(a), len(b))):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result + a[len(b):] + b[len(a):]"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n\n    max_len = -1\n    result = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n\n    return result"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            return count\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    nums = list(map(int, numbers.split()))\n    nums.sort()\n    return ' '.join(map(str, nums))"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing the encoding process with encode_cyclic function.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [group[::-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x = x // base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by reversing the encoding from encode_shift function.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    return sum(ord(ch) for ch in s if ch.isupper())"}
{"task_id": "HumanEval/74", "completion": "    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/79", "completion": "    if decimal == 0:\n        return \"db0db\"\n    binary = \"\"\n    while decimal:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = ''\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result += sorted_word + ' '\n    return result.strip()"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(((ord(char) - ord('a') + 2) % 26) * 2)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            encoded_message += chr(ord(char) - 2)\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] in ['A', 'E', 'I', 'O', 'U']:\n                count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/111", "completion": "    counts = {}\n    words = test.split()\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    return counts"}
{"task_id": "HumanEval/112", "completion": "    s = ''.join(set(s) - set(c))\n    return (s, s == s[::-1])"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for i, string in enumerate(lst):\n        count = 0\n        for char in string:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{i}ng {i} of the {i}nput.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    vowels = \"aeiou\"\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels and word[i+2] in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    if not (1 <= month <= 12) or not (1 <= day <= 31) or not (1900 <= year <= 2100):\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12] and not (1 <= day <= 31):\n        return False\n    elif month in [4, 6, 9, 11] and not (1 <= day <= 30):\n        return False\n    elif month == 2 and not (1 <= day <= 29):\n        return False\n    \n    return True"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [char for char in txt if char.islower()]"}
{"task_id": "HumanEval/134", "completion": "    if txt.endswith(' ') and len(txt) > 1:\n        txt = txt[:-1]\n    if txt.isalpha():\n        return True\n    return False"}
{"task_id": "HumanEval/140", "completion": "    result = ''\n    for char in text:\n        if char == ' ' and result and result[-1] == ' ':\n            result += '-'\n        elif char != ' ':\n            result += char\n    return result"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word) in primes:\n            result.append(word)\n    return ' '.join(result)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprimes = set()\nfor i in range(2, 1000):\n    if is_prime(i):\n        primes.add(i)"}
{"task_id": "HumanEval/149", "completion": "    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n    result.sort(key=lambda x: (len(x), x))\n    return result"}
{"task_id": "HumanEval/153", "completion": "    if not extensions:\n        return class_name\n    max_strength = float('-inf')\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap = sum(c.isupper() for c in extension)\n        sm = sum(c.islower() for c in extension)\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/156", "completion": "    roman = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000: 'm'}\n    result = ''\n    for k, v in roman.items():\n        if number >= k:\n            result += v\n            number -= k\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_count = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_count:\n            max_count = unique_chars\n            result = word\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result if result else s[::-1]"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    groups = []\n    group = ''\n    for char in paren_string:\n        if char == '(':\n            group += '('\n        elif char == ')' and group:\n            group += ')'\n            groups.append(group)\n            group = ''\n    return groups"}
{"task_id": "HumanEval/6", "completion": "    groups = paren_string.split()\n    output = []\n    for group in groups:\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        output.append(max_level)\n    return output"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    # If the supplied string is already a palindrome, return it as is\n    if is_palindrome(string):\n        return string\n    # Else, find the longest palindromic suffix and the reverse of its prefix\n    rev_string = string[::-1]\n    for i in range(len(string)):\n        if is_palindrome(string[:i] + rev_string[i:]):\n            return string + rev_string[:i][::-1]\n    # If no palindromic suffix found, append the reverse of the supplied string\n    return string + rev_string"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(max(len(a), len(b))):\n        if i < len(a) and i < len(b):\n            if a[i] == b[i]:\n                result += '0'\n            else:\n                result += '1'\n        elif i < len(a):\n            result += a[i]\n        elif i < len(b):\n            result += b[i]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    max_length = -1\n    result = None\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/14", "completion": "    n = len(string)\n    return [string[i:] for i in range(n)]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/18", "completion": "    if not string or not substring:\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    nums = [int(num) for num in numbers.split()]\n    nums.sort()\n    return ' '.join(str(num) for num in nums)"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string from encoded with encode_cyclic function.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    \n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    \n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character back 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiouAEIOU'\n    return ''.join(filter(lambda x: x not in vowels, text))"}
{"task_id": "HumanEval/54", "completion": "    s0 = sorted(s0)\n    s1 = sorted(s1)\n    return s0 == s1"}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiouy\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/74", "completion": "    total_chars_1 = sum(len(word) for word in lst1)\n    total_chars_2 = sum(len(word) for word in lst2)\n    return lst1 if total_chars_1 < total_chars_2 else lst2"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    result = ' '.join(result)\n    return result"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(ord(char) + 4 * 2)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = set('aeiouAEIOU')\n    result = ''\n    for char in message:\n        if char in vowels:\n            result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            result += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n    return result"}
{"task_id": "HumanEval/98", "completion": "    vowels = \"AEIOU\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels and i % 2 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()  # Split the string on spaces\n    return words"}
{"task_id": "HumanEval/111", "completion": "    hist = {}\n    words = test.split(' ')\n    for word in words:\n        if word in hist:\n            hist[word] += 1\n        else:\n            hist[word] = 1\n    return hist"}
{"task_id": "HumanEval/112", "completion": "    result = ''.join([i for i in s if i not in c])\n    return result, result == result[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for i, s in enumerate(lst):\n        count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{i}ng {i} of the {i}nput.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for char in word if char in consonants) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = 'aeiou'\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels and i+1 < len(word) and word[i+1].isalpha() and word[i+1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if not date:\n\t\treturn False\n\ttry:\n\t\tday, month, year = date.split('-')\n\texcept ValueError:\n\t\treturn False\n\tif len(day) != 2 or len(month) != 2 or len(year) != 4:\n\t\treturn False\n\tif not day.isdigit() or not month.isdigit() or not year.isdigit():\n\t\treturn False\n\tday, month, year = int(day), int(month), int(year)\n\tif month not in range(1, 13) or day not in range(1, 32) or year not in range(1, 3000):\n\t\treturn False\n\tif month in [1, 3, 5, 7, 8, 10, 12] and day not in range(1, 32):\n\t\treturn False\n\tif month in [4, 6, 9, 11] and day not in range(1, 31):\n\t\treturn False\n\tif month == 2 and day not in range(1, 29):\n\t\treturn False\n\treturn True"}
{"task_id": "HumanEval/125", "completion": "    words = txt.split()\n    return words if len(words) > 0 else [str(len([c for c in txt if c.isalpha()]))]"}
{"task_id": "HumanEval/134", "completion": "    last_char = txt.strip()[-1]\n    if last_char.isalpha():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace(\"  \", \"-\")\n    return text.replace(\" \", \"_\")"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if len(word) % 2 == 1:\n            result += word + \" \"\n    return result.strip()"}
{"task_id": "HumanEval/149", "completion": "    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = None\n    strongest_strength = -1\n    for extension in extensions:\n        cap_count = 0\n        sm_count = 0\n        for char in extension:\n            if char.isupper():\n                cap_count += 1\n            elif char.islower():\n                sm_count += 1\n        strength = cap_count - sm_count\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/156", "completion": "    roman_map = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm'\n    }\n    result = \"\"\n    while number:\n        if number >= 1000:\n            result = roman_map[1000] + result\n            number -= 1000\n        elif number >= 500:\n            result = roman_map[500] + result\n            number -= 500\n        elif number >= 100:\n            result = roman_map[100] + result\n            number -= 100\n        elif number >= 50:\n            result = roman_map[50] + result\n            number -= 50\n        elif number >= 10:\n            result = roman_map[10] + result\n            number -= 10\n        elif number >= 5:\n            result = roman_map[5] + result\n            number -= 5\n        else:\n            result = roman_map[1] + result\n            number -= 1\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    import hashlib\n    md5_hash = hashlib.md5(text.encode('utf-8'))\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1] != '(':\n                groups.append(stack.pop())\n            stack[-1] = ''.join(groups)\n            groups = []\n    return stack + groups"}
{"task_id": "HumanEval/6", "completion": "    max_level = 0\n    current_level = 0\n    result = []\n    \n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n        result.append(max_level)\n    \n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Return a palindrome that starts with the given string \"\"\"\n    n = len(string)\n    if n == 0:\n        return ''\n    for i in range(n, -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n    return string + string[::-1]  # No palindromic suffix found, simply append its reverse"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n    for i in range(min(len(a), len(b))):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    result += a[len(b):]\n    result += b[len(a):]\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n\n    max_len = -1\n    max_string = \"\"\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_string = s\n\n    return max_string"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(len(string)+1)]"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start_index = 0\n    while start_index < len(string):\n        start_index = string.find(substring, start_index)\n        if start_index != -1:\n            count += 1\n            start_index += 1\n        else:\n            break\n    return count"}
{"task_id": "HumanEval/19", "completion": "    nums = numbers.split()\n    nums.sort()\n    return ' '.join(nums)"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing the operation of encode_cyclic function.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [group[-1:] + group[:-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits)"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by reversing the process of encode_shift\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return ''.join(c for c in text if c not in vowels)"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result"}
{"task_id": "HumanEval/74", "completion": "    def total_chars(string_list):\n        total = 0\n        for string in string_list:\n            total += len(string)\n        return total\n    \n    if total_chars(lst1) < total_chars(lst2):\n        return lst1\n    elif total_chars(lst1) == total_chars(lst2):\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)\n    binary = binary[2:]\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiou\"\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            result += chr(ord(char) + (1 if char.isupper() else -1) * 2)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    vowels = set('AEIOUaeiou')\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    return s.split()"}
{"task_id": "HumanEval/111", "completion": "    hist = {}\n    words = test.split()\n    for word in words:\n        for char in word:\n            if char in hist:\n                hist[char] += 1\n            else:\n                hist[char] = 1\n    return hist"}
{"task_id": "HumanEval/112", "completion": "    s = ''.join(i for i in s if i not in c)\n    return s, s == s[::-1]"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = 0\n        for digit in s:\n            if int(digit) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(count) + \"ng \" + str(count) + \" of the \" + str(count) + \"nput.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for char in word if char in consonants) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    word = word.rstrip()\n    word = word.lstrip()\n    n = len(word)\n    for i in range(n-1, -1, -1):\n        if word[i] in vowels:\n            if i+1 < n and word[i+1] in vowels:\n                return word[i]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    try:\n        day, month, year = date.split('-')\n        if (len(day) != 2 or len(month) != 2 or len(year) != 4):\n            return False\n        day = int(day)\n        month = int(month)\n        year = int(year)\n        if (month < 1 or month > 12 or day < 1 or day > 31):\n            return False\n        if (month % 2 != 0 and day > 30) or (month % 2 == 0 and day > 29):\n            return False\n        datetime.datetime(year, month, day)\n        return True\n    except:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [txt]"}
{"task_id": "HumanEval/134", "completion": "    if not txt:\n        return False\n    words = txt.split()\n    if not words:\n        return False\n    last_char = words[-1][-1]\n    if not last_char.isalpha():\n        return False\n    return not last_char.isalpha()"}
{"task_id": "HumanEval/140", "completion": "    text = text.replace('  ', '-')\n    text = text.replace(' ', '_')\n    return text"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word) in prime_lengths:\n            result.append(word)\n    return \" \".join(result)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_lengths():\n    prime_lengths = set()\n    for i in range(2, 20):\n        if is_prime(i):\n            prime_lengths.add(i)\n    return prime_lengths"}
{"task_id": "HumanEval/149", "completion": "    return sum(lst)\n\ndef list_sort(lst):\n    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for char in extension:\n            if char.isupper():\n                cap += 1\n            elif char.islower():\n                sm += 1\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + \".\" + strongest_extension"}
{"task_id": "HumanEval/156", "completion": "    roman_map = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    }\n    result = \"\"\n    for key, value in roman_map.items():\n        if number >= key:\n            result += value\n            number -= key\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_count = 0\n    result = \"\"\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            result = word\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(ord(char) ^ (1 << 5))\n        else:\n            result += char\n    return result or \"0\""}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            result.append(char)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    max_nesting = 0\n    cur_nesting = 0\n    result = []\n    \n    for char in paren_string:\n        if char == '(':\n            cur_nesting += 1\n        elif char == ')':\n            cur_nesting -= 1\n            max_nesting = max(max_nesting, cur_nesting)\n        result.append(max_nesting)\n    \n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/10", "completion": "    \"\"\" Find the shortest palindrome that begins with the given string \"\"\"\n    if is_palindrome(string):\n        return string\n    \n    n = len(string)\n    for i in range(n-1, -1, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[::-1] + string[i+1:]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "    result: List[str] = []\n    for i in range(max(len(a), len(b))):\n        if i < len(a) and i < len(b):\n            if a[i] == b[i]:\n                result.append('0')\n            else:\n                result.append('1')\n        elif i < len(a):\n            result.append(a[i])\n        else:\n            result.append(b[i])\n    return ''.join(result)"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    \n    max_length = -1\n    result = None\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            result = s\n    return result"}
{"task_id": "HumanEval/14", "completion": "    n = len(string)\n    return [string[:i] for i in range(n)]"}
{"task_id": "HumanEval/15", "completion": "    result = \"\"\n    for i in range(n+1):\n        result += str(i) + \" \"\n    return result.strip()"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    num_list = numbers.split()\n    num_list.sort()\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/27", "completion": "    return ''.join(c.swapcase() for c in string)"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/38", "completion": "    \"\"\"\n    returns decoded string by reversing encoded string and cycling groups of three characters.\n    \"\"\"\n    encoded_string = encode_cyclic(s)\n    # reverse encoded string and split into groups of three characters\n    encoded_string = encoded_string[::-1]\n    groups = [encoded_string[(3 * i):min((3 * i + 3), len(encoded_string))] for i in range((len(encoded_string) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x = x // base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns decoded string by shifting every character by 5 in the opposite direction of encode_shift.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 21 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = 'aeiou'\n    result = ''.join(char for char in text if char.isalpha() and char not in vowels)\n    return result"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/64", "completion": "    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/66", "completion": "    upper_sum = 0\n    for char in s:\n        if char.isupper():\n            upper_sum += ord(char)\n    return upper_sum"}
{"task_id": "HumanEval/74", "completion": "    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/79", "completion": "    binary_str = bin(decimal)[2:]\n    return \"db\" + binary_str + \"db\""}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        if word:\n            result.append(''.join(sorted(word)))\n        else:\n            result.append(word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/89", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(((ord(char) - ord('a') + 2) * 2) % 26 + ord('a'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/93", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                result += chr(ord(char) - ord('a') + ord('A'))\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(len(s)):\n        if (i % 2 == 0) and (s[i].isupper()):\n            count += 1\n    return count"}
{"task_id": "HumanEval/101", "completion": "    words = s.split()\n    return words"}
{"task_id": "HumanEval/111", "completion": "    words = test.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    max_count = max(word_count.values())\n    most_repetition = [key for key, value in word_count.items() if value == max_count]\n    return {word: word_count[word] for word in most_repetition}"}
{"task_id": "HumanEval/112", "completion": "    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    result = result[::-1]\n    return result, result == result"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for s in lst:\n        count = 0\n        for char in s:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        count = sum(1 for char in word if char.isalpha() and char.islower())\n        if count == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] not in vowels:\n            for j in range(i-1, -1, -1):\n                if word[j] in vowels:\n                    return word[j]\n    return \"\""}
{"task_id": "HumanEval/124", "completion": "    if date == '':\n        return False\n    \n    try:\n        month, day, year = date.split('-')\n        if len(month) != 2 or len(day) != 2 or len(year) != 4:\n            return False\n        if not month.isdigit() or not day.isdigit() or not year.isdigit():\n            return False\n        month, day, year = int(month), int(day), int(year)\n        if (month in [1, 3, 5, 7, 8, 10, 12] and 1 <= day <= 31) or (month in [4, 6, 9, 11] and 1 <= day <= 30) or (month == 2 and 1 <= day <= 29):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [txt]"}
{"task_id": "HumanEval/134", "completion": "    if txt == \"\" or txt[-1] == \" \":\n        return False\n    else:\n        return txt[-1].isalpha()"}
{"task_id": "HumanEval/140", "completion": "    return text.replace('  ', '-').replace(' ', '_')"}
{"task_id": "HumanEval/143", "completion": "    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word) in prime_lengths:\n            result.append(word)\n    return ' '.join(result)\n\ndef prime_lengths():\n    prime_lengths = set()\n    for i in range(2, 100):\n        if all(i % j != 0 for j in range(2, i)):\n            prime_lengths.add(i)\n    return prime_lengths"}
{"task_id": "HumanEval/149", "completion": "    sorted_list = sorted(lst, key=lambda x: (len(x), x))\n    return sum(int(num) for num in sorted_list)"}
{"task_id": "HumanEval/153", "completion": "    max_strength = -1\n    strongest_extension = None\n    for extension in extensions:\n        cap = sum(c.isupper() for c in extension)\n        sm = sum(c.islower() for c in extension)\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/156", "completion": "    roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    result = ''\n    stack = []\n    while number:\n        if number >= 1000:\n            stack.append('M')\n            number -= 1000\n        elif number >= 900:\n            stack.append('CM')\n            number -= 900\n        elif number >= 500:\n            stack.append('D')\n            number -= 500\n        elif number >= 400:\n            stack.append('CD')\n            number -= 400\n        elif number >= 100:\n            stack.append('C')\n            number -= 100\n        elif number >= 90:\n            stack.append('XC')\n            number -= 90\n        elif number >= 50:\n            stack.append('L')\n            number -= 50\n        elif number >= 40:\n            stack.append('XL')\n            number -= 40\n        elif number >= 10:\n            stack.append('X')\n            number -= 10\n        elif number >= 9:\n            stack.append('IX')\n            number -= 9\n        elif number >= 5:\n            stack.append('V')\n            number -= 5\n        elif number >= 4:\n            stack.append('IV')\n            number -= 4\n        elif number >= 1:\n            stack.append('I')\n            number -= 1\n    while stack:\n        num = stack.pop()\n        if num in ['I', 'X', 'C'] and result and result[-1] == num:\n            result += num\n        else:\n            result += num\n    return result"}
{"task_id": "HumanEval/158", "completion": "    max_count = 0\n    result = \"\"\n    for word in words:\n        char_set = set(word)\n        if len(char_set) > max_count:\n            max_count = len(char_set)\n            result = word\n    return result"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += chr(ord(char.lower()) ^ (1 << 5))\n        else:\n            result += char\n    return result if result else s[::-1]"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n    return hashlib.md5(text.encode()).hexdigest() if text else None"}
