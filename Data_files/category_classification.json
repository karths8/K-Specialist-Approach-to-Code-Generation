[{"Question": "Given an integer matrix of odd dimensions (like 3 * 3 or 5 * 5), find the sum of the middle row & column elements. Return the values in an array, with the first element being the row sum and the second element being the column sum\n\nmiddlesum([[2, 5, 7],[3, 7, 2],[5, 6, 9]]) == [12, 18]\nmiddlesum([[1, 3, 5, 6, 7], [3, 5, 3, 2, 1], [1, 2, 3, 4, 5], [7, 9, 2, 1, 6], [9, 1, 5, 3, 2]]) == [15, 18]", "Category": "Matrix"}, {"Question": "Given a matrix of n*n size, the task is to find whether all rows are circular rotations of each other or not. \n\nisPermutedMatrix([[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]]) == True\nisPermutedMatrix([[1, 2, 3], [2, 3, 1], [3, 1, 2]]) == True", "Category": "Matrix"}, {"Question": "Given a N x N binary matrix (elements in matrix can be either 1 or 0) where each row and column of the matrix is sorted in ascending order, count number of 0s present in it.\n\ncountZeroes([[0, 0, 0, 0, 1],[0, 0, 0, 1, 1],[0, 1, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 1, 1]]) == 8\ncountZeroes([[0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 1", "Category": "Matrix"}, {"Question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order\n\nkLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]\nkLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "Category": "Heap"}, {"Question": "Given an array of elements, sort the array in decreasing order using min heap. \n\nheapSort([4,6,3,2,9]) == [9,6,4,3,2]\nheapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "Category": "Heap"}, {"Question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n\n\nmaxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4\nmaxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "Category": "Heap"}, {"Question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.\n\nkthLargestSum([20, -5, -1], 3) == 14\nkthLargestSum([10, -10, 20, -40], 6) == -10", "Category": "Heap"}, {"Question": "Linear Search is defined as a sequential search algorithm that starts at one end and goes through each element of a list until the desired element is found, otherwise the search continues till the end of the data set. Implement the Linear searching algorithm in python\n\nsearch([2, 3, 4, 10, 40], 10) == 3\nsearch([1, 8, 9, 10, 15], 15) == 4", "Category": "Searching"}, {"Question": "Binary Search is defined as a searching algorithm used in a sorted array by repeatedly dividing the search interval in half. The idea of binary search is to use the information that the array is sorted and reduce the time complexity to O(log N). Write the algorithm for binary search in python\n\nbinarySearch([2, 3, 4, 10, 40], 10) == 3\nbinarySearch([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == 0", "Category": "Searching"}, {"Question": "Jump Search is a searching algorithm for sorted arrays. The basic idea is to check fewer elements (than linear search) by jumping ahead by fixed steps or skipping some elements in place of searching all elements. Write the algorithm to perform Jump Search in Python\n\njumpSearch([0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610], 55) == 10\njumpSearch([0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 233) == 13", "Category": "Searching"}, {"Question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.\n\nmax_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5\nmax_distance([1, 1, 1, 1, 1]) == 4", "Category": "Hash"}, {"Question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.\n\nsubset([5, 6, 9, 3, 4, 3, 4]) == 2\nsubset([1, 1, 1, 1, 1]) == 5", "Category": "Hash"}, {"Question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.\n\nlongestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4\nlongestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "Category": "Hash"}, {"Question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. \n\ncountDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]\ncountDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "Category": "Hash"}, {"Question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1\n\nfindSubArray([1, 0, 0, 1, 0, 1, 1]) == 6\nfindSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "Category": "Hash"}, {"Question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. \n\ncountDistinctSubarray([2, 1, 3, 2, 3]) == 5\ncountDistinctSubarray([1, 2, 3, 4, 5]) == 1", "Category": "Hash"}, {"Question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places\n\nleftRotate(16, 2) == 64\nleftRotate(29, 3) == 232", "Category": "Bitwise"}, {"Question": "Given a positive integer n, write a function to find if it is a power of 2 or not\n\nisPowerOfTwo(31) == False\nisPowerOfTwo(1) == True", "Category": "Bitwise"}, {"Question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.\n\nswapBits(47, 1, 5, 3) == 227\nswapBits(28, 0, 3, 2) == 7", "Category": "Bitwise"}, {"Question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.\n\nmaxSubarrayXOR([1, 2, 3, 4]) == 7\nmaxSubarrayXOR([0]) == 0", "Category": "Bitwise"}, {"Question": "Write a function to to convert a floating point number to binary\n\nfloat_bin(11.234, 4) == '1011.0011'\nfloat_bin(100.101, 6) == '1100100.000110'", "Category": "Bitwise"}, {"Question": "We are given an array of n distinct numbers. The task is to sort all even-placed numbers in increasing and odd-placed numbers in decreasing order. The modified array should contain all sorted even-placed numbers followed by reverse sorted odd-placed numbers. \nNote that the first element is considered as even placed because of its index 0. \n\nbitonicGenerator([0, 1, 2, 3, 4, 5, 6, 7]) == [0, 2, 4, 6, 7, 5, 3, 1]\nbitonicGenerator([4, 1, 3, 2, 8, 6, 7, 5]) == [3, 4, 7, 8, 6, 5, 2, 1]", "Category": "Sorting"}, {"Question": "Given two arrays that have the same values but in a different order and having no duplicate elements in it, we need to make a second array the same as a first array using the minimum number of swaps. \n\nminSwapToMakeArraySame([3, 6, 4, 8], [4, 6, 8, 3]) == 2\nminSwapToMakeArraySame([1, 5, 3, 7, 2], [2, 3, 5, 1, 7]) == 3", "Category": "Sorting"}, {"Question": "Given a two strings S and T, find the count of distinct occurrences of T in S as a subsequence.\n\nfindSubsequenceCount(\"banana\", \"ban\") == 3\nfindSubsequenceCount(\"aabba\", \"ab\") == 4", "Category": "Sorting"}, {"Question": "Get Maximum in Generated Array: You are given an integer n. A 0-indexed integer array nums of length n + 1 is generated in the following way:\n\nnums[0] = 0\nnums[1] = 1\nnums[2 * i] = nums[i] when 2 <= 2 * i <= n\nnums[2 * i + 1] = nums[i] + nums[i + 1] when 2 <= 2 * i + 1 <= n\nReturn the maximum integer in the array nums\u200b\u200b\u200b.\n\ngetMaximumGenerated(2)==1\ngetMaximumGenerated(4) == 2", "Category": "Dynamic_programming"}, {"Question": "N-th Tribonacci Number: The Tribonacci sequence Tn is defined as follows: \n\nT0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.\n\nGiven n, return the value of Tn.\n\ntribonacci(25)==1389537\ntribonacci(0) == 0", "Category": "Dynamic_programming"}, {"Question": "Best Time to Buy and Sell Stock II: You are given an integer array prices where prices[i] is the price of a given stock on the ith day.\n\nOn each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\n\nFind and return the maximum profit you can achieve.\n\nmaxProfit([1,2,3,4,5])==4\nmaxProfit([1,2,100,2,1]) == 99", "Category": "Dynamic_programming"}, {"Question": "Coin Change II: You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\n\nReturn the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.\n\nYou may assume that you have an infinite number of each kind of coin.\n\nThe answer is guaranteed to fit into a signed 32-bit integer.\n\nchange(10,[10])==1\nchange(0, [1, 2, 5]) == 1  # Edge case: trying to make 0 with any coins should always return 1", "Category": "Dynamic_programming"}, {"Question": "Backspace String Compare: Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.\n\nNote that after backspacing an empty text, the text will continue empty.\n\nbackspaceCompare(\"ab##\", \"c#d#\")==True\nbackspaceCompare(\"a##c\", \"#a#c\") == True", "Category": "Stack"}, {"Question": "Valid Parentheses: Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n\nOpen brackets must be closed by the same type of brackets.\nOpen brackets must be closed in the correct order.\nEvery close bracket has a corresponding open bracket of the same type.\n\nisValid(\"(]\")==False\nisValid(\"([)]\") == False", "Category": "Stack"}, {"Question": "Minimum Remove to Make Valid Parentheses: Given a string s of '(' , ')' and lowercase English characters.\n\nYour task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.\n\nFormally, a parentheses string is valid if and only if:\n\nIt is the empty string, contains only lowercase characters, or\nIt can be written as AB (A concatenated with B), where A and B are valid strings, or\nIt can be written as (A), where A is a valid string.\n\nminRemoveToMakeValid(\"a)b(c)d\")==\"ab(c)d\"\nminRemoveToMakeValid(\"(a(b(c)d)\") == \"a(b(c)d)\"", "Category": "Stack"}, {"Question": "Trapping Rain Water: Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n\ntrap([4,2,0,3,2,5])==9\ntrap([3, 0, 1, 3, 0, 5]) == 8", "Category": "Stack"}, {"Question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n\n\ntitleToNumber(\"AB\")==28\ntitleToNumber(\"AAA\") == 703", "Category": "Math"}, {"Question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.\n\narrangeCoins(8)==3\narrangeCoins(1) == 1", "Category": "Math"}, {"Question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.\n\nminDistance(1,3, [0,1], [0,0], [[0,2]])==3\nminDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "Category": "Math"}, {"Question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.\n\nconsecutiveNumbersSum(9)==3\nconsecutiveNumbersSum(1) == 1", "Category": "Math"}, {"Question": "Minimum Time Visiting All Points: On a 2D plane, there are n points with integer coordinates points[i] = [xi, yi]. Return the minimum time in seconds to visit all the points in the order given by points.\n\nYou can move according to these rules:\n\nIn 1 second, you can either:\nmove vertically by one unit,\nmove horizontally by one unit, or\nmove diagonally sqrt(2) units (in other words, move one unit vertically then one unit horizontally in 1 second).\nYou have to visit the points in the same order as they appear in the array.\nYou are allowed to pass through points that appear later in the order, but these do not count as visits.\n\nminTimeToVisitAllPoints([[3,2],[-2,2]])==5\nminTimeToVisitAllPoints([[0,0],[1,1],[1,2]]) == 2", "Category": "Geometry"}, {"Question": "Projection Area of 3D Shapes: You are given an n x n grid where we place some 1 x 1 x 1 cubes that are axis-aligned with the x, y, and z axes.\n\nEach value v = grid[i][j] represents a tower of v cubes placed on top of the cell (i, j).\n\nWe view the projection of these cubes onto the xy, yz, and zx planes.\n\nA projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. We are viewing the \"shadow\" when looking at the cubes from the top, the front, and the side.\n\nReturn the total area of all three projections.\n\nprojectionArea([[2]])==5\nprojectionArea([[1, 1, 1], [1, 0, 1], [1, 1, 1]]) == 14", "Category": "Geometry"}, {"Question": "Repeated Substring Pattern: Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.\n\nrepeatedSubstringPattern(\"abab\")==True\nrepeatedSubstringPattern(\"aaaa\") == True", "Category": "Pattern"}, {"Question": "Detect Pattern of Length M Repeated K or More Times: Given an array of positive integers arr, find a pattern of length m that is repeated k or more times.\n\nA pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping. A pattern is defined by its length and the number of repetitions.\n\nReturn true if there exists a pattern of length m that is repeated k or more times, otherwise return false.\n\ncontainsPattern([1,2,4,4,4,4],1,3)==True\ncontainsPattern([1,2,3,1,2,3,1,2,3], 3, 3) == True", "Category": "Pattern"}, {"Question": "Word Pattern: Given a pattern and a string s, find if s follows the same pattern.\n\nHere follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.\n\nwordPattern(\"abba\", \"dog cat cat dog\")==True\nwordPattern(\"aaaa\", \"dog dog dog dog\") == True", "Category": "Pattern"}, {"Question": "Find and Replace Pattern: Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.\n\nA word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.\n\nRecall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.\n\nfindAndReplacePattern([\"a\",\"b\",\"c\"], \"a\")==[\"a\",\"b\",\"c\"]\nfindAndReplacePattern([\"xx\", \"xy\", \"yy\"], \"xx\") == [\"xx\", \"yy\"]", "Category": "Pattern"}, {"Question": "Word Pattern II: Given a pattern and a string s, return true if s matches the pattern.\n\nA string s matches a pattern if there is some bijective mapping of single characters to non-empty strings such that if each character in pattern is replaced by the string it maps to, then the resulting string is s. A bijective mapping means that no two characters map to the same string, and no character maps to two different strings.\n\nwordPatternMatch(\"aaaa\", \"asdasdasdasd\")==True\nwordPatternMatch(\"abba\", \"dogcatcatdog\") == True", "Category": "Pattern"}, {"Question": "Given an array reorder it so that even numbers appear first\n\neven_odd_reorder([1,2,3,4,5,6,7,8,9]) == [8, 2, 6, 4, 5, 7, 3, 9, 1]\neven_odd_reorder([]) == []", "Category": "Array"}, {"Question": "Given two arrays return an array with the set intersection of their common elements\n\nset(array_intersection([1,0,2,0,2,0,2,1,1,1], [2,1,0,2,0,2,2,2,1,0])) == {0,1,2}\nset(array_intersection([5, 6, 7, 8], [8, 9, 10, 11])) == {8}", "Category": "Array"}, {"Question": "You are given two 0-indexed integer permutations A and B of length n.\n\nA prefix common array of A and B is an array C such that C[i] is equal to the count of numbers that are present at or before the index i in both A and B.\n\nReturn the prefix common array of A and B.\n\nA sequence of n integers is called a permutation if it contains all integers from 1 to n exactly once.\n\nfindThePrefixCommonArray([1,3,2,4], [3,1,2,4]) == [0,2,3,4]\nfindThePrefixCommonArray([1], [1]) == [1]", "Category": "Array"}, {"Question": "Given a set[] of non-negative integers and a value sum, return the subset of the given set whose sum is equal to the given sum or None if one doesn't exist\n\n\nset(subsetsum([3, 34, 4, 12, 5, 2], 9)) == {4,5}\nsubsetsum([1, 8, 2, 7, 4], 14) == [8, 2, 4]", "Category": "Recursion"}, {"Question": "You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.\n\nReconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).\n\n\nreconstructQueue([[8,1],[5,0],[6,1],[5,2],[4,4],[7,1]]) == [[5, 0], [8, 1], [5, 2], [6, 1], [4, 4], [7, 1]]\nreconstructQueue([[12,0], [6,3], [4,4], [9,2], [7,1]]) == [[12, 0], [7, 1], [9, 2], [6, 3], [4, 4]]", "Category": "Array"}, {"Question": "There are N Mice and N holes are placed in a straight line. Each hole can accommodate only 1 mouse. A mouse can stay at his position, move one step right from x to x + 1, or move one step left from x to x -1. Any of these moves consumes 1 minute. Assign mice to holes so that the time when the last mouse gets inside a hole is minimized.\nYou are given a list of mice and hole positions as integer scalers.\n\n\nassignHole([1, 2, 3, 4], [4, 3, 2, 1]) == 0\nassignHole([10, 20, 30, 40], [15, 25, 35, 45]) == 5", "Category": "Array"}, {"Question": "You are given n activities with their start and finish times. Select the maximum number of activities that can be performed by a single person and return their indexes. Assume that a person can only work on a single activity at a time. \n\n\nMaxActivities([2, 4, 5, 6, 7, 8], [3, 5, 6, 7, 9, 10]) == [0, 1, 2, 3, 4]\nMaxActivities([1, 3, 0, 5, 8, 5], [2, 4, 6, 7, 9, 9]) == [0, 1, 3, 4]", "Category": "Array"}, {"Question": "You are given a string s and an integer k. You can choose one of the first k letters of s and append it at the end of the string.\n\nReturn the lexicographically smallest string you could have after applying the mentioned step any number of moves.\n\n\norderlyQueue(\"abcd\", 1) == \"abcd\"\norderlyQueue(\"hello\", 2) == \"ehllo\"", "Category": "String"}, {"Question": "Return nth number in the fibonacci sequence\n\nfibonacci(9) == 34\nfibonacci(10) == 55", "Category": "Recursion"}, {"Question": "Return the factorial of a given number n\n\nfact(5) == 120\nfact(0) == 1", "Category": "Recursion"}, {"Question": "Write a function that reverses a string. The input string is given as an array of characters s.\n\nYou must do this by modifying the input array in-place with O(1) extra memory.\n\nreverse_string([\"a\",\"b\",\"c\",\"d\"]) == [\"d\", \"c\", \"b\", \"a\"]\nreverse_string([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]) == [\"n\", \"o\", \"h\", \"t\", \"y\", \"p\"]", "Category": "String"}, {"Question": "Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.\n\nIn other words, return true if one of s1's permutations is the substring of s2.\n\npermutation_in_string(\"hello\", \"ooollehhhhh\") == True\npermutation_in_string(\"abc\", \"ccccbbbbaaaa\") == False", "Category": "String"}, {"Question": "You are given a string s and an integer array indices of the same length. The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.\n\nReturn the shuffled string.\n\nshuffle_string(\"reoc\", [2, 0, 1, 3]) == \"eorc\"\nshuffle_string(\"aiohn\", [3,1,4,2,0]) == \"nihao\"", "Category": "String"}, {"Question": "Given an integer n, return the number of strings of length n that consist only of vowels (a, e, i, o, u) and are lexicographically sorted.\n\nA string s is lexicographically sorted if for all valid i, s[i] is the same as or comes before s[i+1] in the alphabet.\n\ncountVowelStrings(3) == 35\ncountVowelStrings(4) == 70", "Category": "String"}]