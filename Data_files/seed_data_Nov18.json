[{"author": "Karthik", "UUID": "aa471867-aa0d-4e14-ba9b-8e8f537394e4", "question": "Given an integer matrix of odd dimensions (like 3 * 3 or 5 * 5), find the sum of the middle row & column elements. Return the values in an array, with the first element being the row sum and the second element being the column sum", "examples": "Input :  2 5 7\n         3 7 2\n         5 6 9\nOutput : [12,18]\n\nInput :  1 3 5 6 7\n         3 5 3 2 1\n         1 2 3 4 5\n         7 9 2 1 6\n         9 1 5 3 2\nOutput : [15,18]", "link": "https://www.geeksforgeeks.org/sum-middle-row-column-matrix/", "difficulty": "Easy", "categories": ["Matrix/Grid"], "code": "def middlesum(mat):\n\n        row_sum = 0\n        col_sum = 0\n        n = len(mat)\n\n        for i in range(n):\n                row_sum += mat[n // 2][i]\n        \n        for i in range(n):\n                col_sum += mat[i][n // 2]\n\n        mid_sum = [row_sum, col_sum]\n        return mid_sum\n        \n        ", "asserts": ["assert middlesum([[2, 5, 7],[3, 7, 2],[5, 6, 9]]) == [12, 18]"]}, {"author": "Karthik", "UUID": "3c29c2a6-0039-4bc9-a4a5-6faea36dfa7e", "question": "Given a matrix of n*n size, the task is to find whether all rows are circular rotations of each other or not. ", "examples": "Input: mat[][] = 1, 2, 3\n                 3, 1, 2\n                 2, 3, 1\nOutput:  Yes\nAll rows are rotated permutation\nof each other.\n\nInput: mat[3][3] = 1, 2, 3\n                   3, 2, 1\n                   1, 3, 2\nOutput:  No\nExplanation : As 3, 2, 1 is not a rotated or \ncircular permutation of 1, 2, 3", "link": "https://geeksforgeeks.org/check-rows-matrix-circular-rotations/", "difficulty": "Medium", "categories": ["Matrix/Grid"], "code": "\nMAX = 1000\n\ndef isPermutedMatrix(mat) :\n        \n        n = len(mat)\n        str_cat = \"\"\n        for i in range(n) :\n                str_cat = str_cat + \"-\" + str(mat[0][i])\n\n        str_cat = str_cat + str_cat\n\n        for i in range(1, n) :\n                curr_str = \"\"\n                \n                for j in range(n) :\n                        curr_str = curr_str + \"-\" + str(mat[i][j])\n\n                if (str_cat.find(curr_str)) : \n                        return True\n                        \n        return False\n", "asserts": ["assert isPermutedMatrix([[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]]) == True"]}, {"author": "Karthik", "UUID": "cc621092-1c08-4777-8341-f53f97e7cb4d", "question": "Given a N x N binary matrix (elements in matrix can be either 1 or 0) where each row and column of the matrix is sorted in ascending order, count number of 0s present in it.", "examples": "Input: \n[0, 0, 0, 0, 1]\n[0, 0, 0, 1, 1]\n[0, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n\nOutput: 8\n\n\nInput: \n[0, 0]\n[0, 0]\n\nOutput: 4\n\n\nInput: \n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n\nOutput: 0", "link": "https://www.geeksforgeeks.org/count-zeros-in-a-row-wise-and-column-wise-sorted-matrix/", "difficulty": "Medium", "categories": ["Matrix/Grid"], "code": "\ndef countZeroes(mat):\n        \n        N = 5;\n        row = N - 1;\n        col = 0;\n        count = 0;\n\n        while (col < N):\n                while (mat[row][col]):\n                        if (row < 0):\n                                return count;\n                        row = row - 1;\n                count = count + (row + 1);\n                col = col + 1;\n\n        return count", "asserts": ["assert countZeroes([[0, 0, 0, 0, 1],[0, 0, 0, 1, 1],[0, 1, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 1, 1]]) == 8"]}, {"author": "Karthik", "UUID": "83190ce9-1db2-4b27-9211-d06ca290b1f0", "question": "Given the dimension of a sequence of matrices in an array arr[], where the dimension of the ith matrix is (arr[i-1] * arr[i]), the task is to find the most efficient way to multiply these matrices together such that the total number of element multiplications is minimum.", "examples": "Input: arr[] = {40, 20, 30, 10, 30}\nOutput: 26000\nExplanation:There are 4 matrices of dimensions 40\u00d720, 20\u00d730, 30\u00d710, 10\u00d730.\nLet the input 4 matrices be A, B, C and D.\nThe minimum number of  multiplications are obtained by \nputting parenthesis in following way (A(BC))D.\nThe minimum is 20*30*10 + 40*20*10 + 40*10*30\n\nInput: arr[] = {1, 2, 3, 4, 3}\nOutput: 30\nExplanation: There are 4 matrices of dimensions 1\u00d72, 2\u00d73, 3\u00d74, 4\u00d73. \nLet the input 4 matrices be A, B, C and D.  \nThe minimum number of multiplications are obtained by \nputting parenthesis in following way ((AB)C)D.\nThe minimum number is 1*2*3 + 1*3*4 + 1*4*3 = 30\n\nInput: arr[] = {10, 20, 30}\nOutput: 6000  \nExplanation: There are only two matrices of dimensions 10\u00d720 and 20\u00d730. \nSo there  is only one way to multiply the matrices, cost of which is 10*20*30", "link": "https://www.geeksforgeeks.org/matrix-chain-multiplication-dp-8/", "difficulty": "Hard", "categories": ["Matrix/Grid"], "code": "import sys\ndef MatrixChainOrder(p, i, j):\n        if i == j:\n                return 0\n\n        _min = sys.maxsize\n\n        for k in range(i, j):\n\n                count = (MatrixChainOrder(p, i, k)\n                                + MatrixChainOrder(p, k + 1, j)\n                                + p[i-1] * p[k] * p[j])\n\n                if count < _min:\n                        _min = count\n\n        return _min", "asserts": ["assert MatrixChainOrder([40, 20, 30, 10, 30], 0, 4) ==  26000"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr, k):\n        arr.sort(reverse=True)\n        return arr[0:k]", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapify(arr, n, i):\n        smallest = i \n        l = 2 * i + 1 \n        r = 2 * i + 2\n\n        if l < n and arr[l] < arr[smallest]: \n                smallest = l \n\n        if r < n and arr[r] < arr[smallest]: \n                smallest = r \n\n        if smallest != i: \n                (arr[i], \n                arr[smallest]) = (arr[smallest],\n                                                arr[i])\n\n                heapify(arr, n, smallest)\n\ndef heapSort(arr):\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [2,3,4,6,9]"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a, k):\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 3"]}, {"author": "Karthik", "UUID": "47709123-a6fd-44dc-b1b3-6360282a7b0e", "question": "Given a stream of integers represented as arr[]. For each index i from 0 to n-1, print the multiplication of largest, second largest, third largest element of the subarray arr[0\u2026i]. If i < 2 print -1. ", "examples": "Input : arr[] = {1, 2, 3, 4, 5}\nOutput :-1\n        -1\n         6\n         24\n         60\nExplanation : for i = 2 only three elements \nare there {1, 2, 3} so answer is 6. For i = 3\nlargest three elements are {2, 3, 4} their\nproduct is 2*3*4 = 24 ....so on  ", "link": "https://www.geeksforgeeks.org/largest-triplet-product-stream/", "difficulty": "Medium", "categories": ["Heap"], "code": "def LargestTripletMultiplication(arr):\n        n = len(arr)\n        \n        q = PriorityQueue()\n\n        res = []\n\n        for i in range(n): \n                \n                q.put(-arr[i])\n                \n                if (q.qsize() < 3):\n                        res.append(-1)\n                else:\n                        \n                        x = q.get()\n                        y = q.get()\n                        z = q.get()\n                        ans = x * y * z\n                        \n                        res.append(ans)\n                        \n                        q.put(x);\n                        q.put(y);\n                        q.put(z);\n        return ans", "asserts": ["assert LargestTripletMultiplication([1,2,3,4,5]) == [-1,-1,6,24,60]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr, K):\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14"]}, {"author": "Karthik", "UUID": "7defcd3a-da7e-426f-b578-5321686acf19", "question": "Linear Search is defined as a sequential search algorithm that starts at one end and goes through each element of a list until the desired element is found, otherwise the search continues till the end of the data set. Implement the Linear searching algorithm in python", "examples": "Input: arr[] = {10, 50, 30, 70, 80, 20, 90, 40} and key = 30\nOutput: Element is present at index 2", "link": "https://www.geeksforgeeks.org/linear-search/", "difficulty": "Easy", "categories": ["Searching Algorithm"], "code": "def search(arr, x): \n        for i in range(0, len(arr)): \n                if (arr[i] == x): \n                        return i \n        return -1", "asserts": ["assert search([2, 3, 4, 10, 40], 10) == 3"]}, {"author": "Karthik", "UUID": "f4b4653d-f7d7-46ff-9371-6ce5306b0f49", "question": "Binary Search is defined as a searching algorithm used in a sorted array by repeatedly dividing the search interval in half. The idea of binary search is to use the information that the array is sorted and reduce the time complexity to O(log N). Write the algorithm for binary search in python", "examples": "Input: arr[] = {10, 50, 30, 70, 80, 20, 90, 40} and key = 30\nOutput: Element is present at index 2", "link": "https://www.geeksforgeeks.org/binary-search/", "difficulty": "Easy", "categories": ["Searching Algorithm"], "code": "def binarySearch(arr, x):\n        l = 0\n        r = len(arr) - 1\n        while l <= r:\n                mid = l + (r - l) // 2\n                if arr[mid] == x:\n                        return mid\n\n                elif arr[mid] < x:\n                        l = mid + 1\n\n                else:\n                        r = mid - 1\n\n        return -1", "asserts": ["assert binarySearch([2, 3, 4, 10, 40], 10) == 3"]}, {"author": "Karthik", "UUID": "4d754c72-3726-4f91-b435-b01a6dd531b9", "question": "Jump Search is a searching algorithm for sorted arrays. The basic idea is to check fewer elements (than linear search) by jumping ahead by fixed steps or skipping some elements in place of searching all elements. Write the algorithm to perform Jump Search in Python", "examples": "For example, suppose we have an array arr[] of size n and a block (to be jumped) of size m. Then we search in the indexes arr[0], arr[m], arr[2m]\u2026..arr[km] and so on. Once we find the interval (arr[km] < x < arr[(k+1)m]), we perform a linear search operation from the index km to find the element x.\nLet\u2019s consider the following array: (0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610). The length of the array is 16. The Jump search will find the value of 55 with the following steps assuming that the block size to be jumped is 4. \nSTEP 1: Jump from index 0 to index 4; \nSTEP 2: Jump from index 4 to index 8; \nSTEP 3: Jump from index 8 to index 12; \nSTEP 4: Since the element at index 12 is greater than 55, we will jump back a step to come to index 8. \nSTEP 5: Perform a linear search from index 8 to get the element 55.", "link": "https://www.geeksforgeeks.org/jump-search/", "difficulty": "Medium", "categories": ["Searching Algorithm"], "code": "\nimport math\n\ndef jumpSearch( arr , x):\n        n = len(arr)\n        step = math.sqrt(n)\n        prev = 0\n        while arr[int(min(step, n)-1)] < x:\n                prev = step\n                step += math.sqrt(n)\n                if prev >= n:\n                        return -1\n        while arr[int(prev)] < x:\n                prev += 1\n                if prev == min(step, n):\n                        return -1\n        if arr[int(prev)] == x:\n                return prev\n        \n        return -1", "asserts": ["assert jumpSearch([0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610], 55) == 10"]}, {"author": "Karthik", "UUID": "89460848-49b1-4efa-9612-9d0bfcdaa170", "question": "Given a sorted array of n uniformly distributed values arr[], write a function to search for a particular element x in the array. ", "examples": "Input: arr[] = {10, 20, 30, 70, 80, 85, 90, 100} and key = 30\nOutput: Element is present at index 2", "link": "https://www.geeksforgeeks.org/interpolation-search/", "difficulty": "Medium", "categories": ["Searching Algorithm"], "code": "def interpolationSearch(arr, x):\n        lo = 0\n        hi = len(arr) - 1\n        if (lo <= hi and x >= arr[lo] and x <= arr[hi]):\n                pos = lo + ((hi - lo) // (arr[hi] - arr[lo]) *\n                                        (x - arr[lo]))\n                if arr[pos] == x:\n                        return pos\n\n                if arr[pos] < x:\n                        return interpolationSearch(arr, pos + 1,\n                                                                        hi, x)\n\n                if arr[pos] > x:\n                        return interpolationSearch(arr, lo,\n                                                                        pos - 1, x)\n        return -1", "asserts": ["assert interpolationSearch([10, 12, 13, 16, 18, 19, 20, 21, 22, 23, 24, 33, 35, 42, 47], 18) == 4"]}, {"author": "Karthik", "UUID": "a304b379-a885-412d-9170-0e1570ef4984", "question": "Ternary search is a decrease(by constant) and conquer algorithm that can be used to find an element in an array. It is similar to binary search where we divide the array into two parts but in this algorithm, we divide the given array into three parts and determine which has the key (searched element). We can divide the array into three parts by taking mid1 and mid2 which can be calculated as shown below. Initially, l and r will be equal to 0 and n-1 respectively, where n is the length of the array.  Write a program in python to implement Ternary Search", "examples": "Input: arr[] = {10, 50, 30, 70, 80, 20, 90, 40} and key = 30\nOutput: Element is present at index 2", "link": "https://www.geeksforgeeks.org/ternary-search/", "difficulty": "Easy", "categories": ["Searching Algorithm"], "code": "\nimport math as mt\ndef ternarySearch(key, ar):\n        l = 0\n        r = len(ar)\n        if (r >= l):\n                mid1 = l + (r - l) //3\n                mid2 = r - (r - l) //3\n                if (ar[mid1] == key): \n                        return mid1\n                \n                if (ar[mid2] == key): \n                        return mid2\n                \n                if (key < ar[mid1]): \n                        return ternarySearch(l, mid1 - 1, key, ar)\n                \n                elif (key > ar[mid2]): \n                        return ternarySearch(mid2 + 1, r, key, ar)\n                \n                else: \n                        return ternarySearch(mid1 + 1, \n                                                                mid2 - 1, key, ar)\n        return -1", "asserts": ["assert ternarySearch(5, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr): \n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d ", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar):\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr, k):\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "import math as mt\ndef countWindowDistinct(win, K):\n        dist_count = 0\n        for i in range(K):\n                j = 0\n                while j < i:\n                        if (win[i] == win[j]):\n                                break\n                        else:\n                                j += 1\n                if (j == i):\n                        dist_count += 1\n\n        return dist_count\n\ndef countDistinct(arr, K):\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result", "asserts": ["assert countWindowDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr):\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistictSubarray(arr):\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise Algorithms"], "code": "INT_BITS = 32\ndef leftRotate(n, d):\n        return (n << d)|(n >> (INT_BITS - d))", "asserts": ["assert leftRotate(16, 2) == 2"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise Algorithms"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n):\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))", "asserts": ["assert isPowerOfTwo(31) == False"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise Algorithms"], "code": "def swapBits(x, p1, p2, n):\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result", "asserts": ["assert swapBits(47, 1, 5, 3) == 227"]}, {"author": "Karthik", "UUID": "d8c99575-b9bd-4988-b2ed-23c3b889c9c8", "question": "Given an integer \u2018x\u2019, write a python function that returns true if binary representation of x is palindrome else return false.", "examples": "For example a numbers with binary representation as 10..01 is palindrome and number with binary representation as 10..00 is not palindrome.", "link": "https://www.geeksforgeeks.org/check-binary-representation-number-palindrome/", "difficulty": "Medium", "categories": ["Bitwise Algorithms"], "code": "\nimport sys\ndef isKthBitSet(x, k):\n        if ((x & (1 << (k - 1))) !=0):\n                return True\n        else:\n                return False\ndef isPalindrome(x):\n        l = 1 \n        r = 2 * 8 \n        while (l < r):\n                if (isKthBitSet(x, l) != isKthBitSet(x, r)):\n                        return False\n                l += 1\n                r -= 1\n        \n        return True", "asserts": ["assert isPalindrome(9) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise Algorithms"], "code": "def maxSubarrayXOR(arr):\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7"]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise Algorithms"], "code": "def float_bin(number, places = 3):\n        whole, dec = str(number).split(\".\")\n        whole = int(whole)\n        dec = int (dec)\n        res = bin(whole).lstrip(\"0b\") + \".\"\n        for x in range(places):\n                whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n                dec = int(dec)\n                res += whole\n        return res\n\ndef decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num", "asserts": ["assert float_bin(11.234, 4) == 1011.0011"]}, {"author": "Karthik", "UUID": "a1eec3ae-a390-4b99-90ae-8520d462bd27", "question": "We are given an array of n distinct numbers. The task is to sort all even-placed numbers in increasing and odd-placed numbers in decreasing order. The modified array should contain all sorted even-placed numbers followed by reverse sorted odd-placed numbers. \nNote that the first element is considered as even placed because of its index 0. ", "examples": "Input:  arr[] = {0, 1, 2, 3, 4, 5, 6, 7}\nOutput: arr[] = {0, 2, 4, 6, 7, 5, 3, 1}\nEven-place elements : 0, 2, 4, 6\nOdd-place elements : 1, 3, 5, 7\nEven-place elements in increasing order : \n0, 2, 4, 6\nOdd-Place elements in decreasing order : \n7, 5, 3, 1\n\nInput: arr[] = {3, 1, 2, 4, 5, 9, 13, 14, 12}\nOutput: {2, 3, 5, 12, 13, 14, 9, 4, 1}\nEven-place elements : 3, 2, 5, 13, 12\nOdd-place elements : 1, 4, 9, 14\nEven-place elements in increasing order : \n2, 3, 5, 12, 13\nOdd-Place elements in decreasing order : \n14, 9, 4, 1 ", "link": "https://www.geeksforgeeks.org/sort-even-placed-elements-increasing-odd-placed-decreasing-order/", "difficulty": "Easy", "categories": ["Sorting Algorithms"], "code": "def bitonicGenerator(arr):\n        n = len(arr) \n        evenArr = [] \n        oddArr = [] \n        for i in range(n): \n                if ((i % 2) == 0): \n                        evenArr.append(arr[i]) \n                else: \n                        oddArr.append(arr[i]) \n        evenArr = sorted(evenArr) \n        oddArr = sorted(oddArr) \n        oddArr = oddArr[::-1] \n\n        i = 0\n        for j in range(len(evenArr)): \n                arr[i] = evenArr[j] \n                i += 1\n        for j in range(len(oddArr)): \n                arr[i] = oddArr[j] \n                i += 1", "asserts": ["assert bitonicGenerator([0, 1, 2, 3, 4, 5, 6, 7]) == [0, 2, 4, 6, 1, 3, 5, 7]"]}, {"author": "Karthik", "UUID": "99fa7e96-23ff-4c94-951a-98176d1045cb", "question": "Given two arrays that have the same values but in a different order and having no duplicate elements in it, we need to make a second array the same as a first array using the minimum number of swaps. ", "examples": "Input  : arrA[] = {3, 6, 4, 8}, \n         arrB[] = {4, 6, 8, 3}\nOutput : 2\nExplanation: we can make arrB to same as arrA in 2 swaps which are shown below, swap 4 with 8,\narrB = {8, 6, 4, 3} swap 8 with 3,   arrB = {3, 6, 4, 8}", "link": "https://www.geeksforgeeks.org/minimum-swaps-to-make-two-array-identical/", "difficulty": "Medium", "categories": ["Sorting Algorithms"], "code": "def minSwapsToSort(arr):\n        n = len(arr)\n        arrPos = [[0 for x in range(2)] \n                                for y in range(n)] \n        \n        for i in range(n):         \n                arrPos[i][0] = arr[i] \n                arrPos[i][1] = i \n        arrPos.sort() \n        vis = [False] * (n) \n        ans = 0\n\n        for i in range(n): \n                if (vis[i] or arrPos[i][1] == i): \n                        continue\n                cycle_size = 0\n                j = i \n                \n                while (not vis[j]):                 \n                        vis[j] = 1\n                        j = arrPos[j][1] \n                        cycle_size+= 1\n                ans += (cycle_size - 1) \n\n        return ans \n\ndef minSwapToMakeArraySame(a, b):\n        n = len(a) \n        mp = {} \n        for i in range(n): \n                mp[b[i]] = i \n        for i in range(n): \n                b[i] = mp[a[i]] \n        return minSwapsToSort(b, n) ", "asserts": ["assert minSwapToMakeArraySame([3, 6, 4, 8], [4, 6, 8, 3]) == 2"]}, {"author": "Karthik", "UUID": "039c3ece-6170-412d-ae03-6d0825e0e340", "question": "Given a two strings S and T, find the count of distinct occurrences of T in S as a subsequence.", "examples": "Input: S = banana, T = ban\nOutput: 3\nExplanation: T appears in S as below three subsequences.\n[ban], [ba  n], [b   an]\n\nInput: S = geeksforgeeks, T = ge\nOutput: 6\nExplanation: T appears in S as below six subsequences.\n[ge], [     ge], [g e], [g    e] [g     e]\nand [     g e] ", "link": "https://www.geeksforgeeks.org/count-distinct-occurrences-as-a-subsequence/", "difficulty": "Hard", "categories": ["Sorting Algorithms"], "code": "def f(i, j, s, t):\n        if(j >= len(t)):\n                return 1\n        \n        if(i >= len(s)):\n                return 0\n        \n        if(s[i] == t[j]):\n                return f(i + 1, j + 1, s, t) + f(i + 1, j, s, t)\n        \n        return f(i + 1, j, s, t)\n\ndef findSubsequenceCount(s, t):\n        return f(0, 0, s, t)", "asserts": ["assert findSubsequenceCount(\"banana\", \"ban\") == 3"]}, {"author": "Karthik", "UUID": "178ae598-7393-45be-a548-9ec811c72789", "question": "Given an array arr[] of size \u2018n\u2019 and a positive integer k. Consider series of natural numbers and remove arr[0], arr[1], arr[2], \u2026, arr[p] from it. Now the task is to find k-th smallest number in the remaining set of natural numbers. If no such number exists print \u201c-1\u201d.", "examples": "Input : arr[] = { 1 } and k = 1.\nOutput: 2\nNatural numbers are {1, 2, 3, 4, .... }\nAfter removing {1}, we get {2, 3, 4, ...}.\nNow, K-th smallest element = 2.\nInput : arr[] = {1, 3}, k = 4.\nOutput : 6\nFirst 5 Natural number {1, 2, 3, 4, 5, 6,  .. }\nAfter removing {1, 3}, we get {2, 4, 5, 6, ... }.", "link": "https://www.geeksforgeeks.org/k-th-smallest-element-removing-integers-natural-numbers/", "difficulty": "Hard", "categories": ["Sorting Algorithms"], "code": "MAX = 1000000\ndef ksmallest(arr, k):\n        n = len(arr)\n        b = [0]*MAX;\n        for i in range(n):\n                b[arr[i]] = 1;\n\n        for j in range(1, MAX):\n                if (b[j] != 1):\n                        k-= 1;\n                if (k is not 1):\n                        return j;", "asserts": ["assert ksmallest([1, 3], 4) == 6"]}, {"author": "Hafeez", "UUID": "6aaf1310-7585-4d90-91e7-1f405c9b25e7", "question": "Get Maximum in Generated Array: You are given an integer n. A 0-indexed integer array nums of length n + 1 is generated in the following way:\n\nnums[0] = 0\nnums[1] = 1\nnums[2 * i] = nums[i] when 2 <= 2 * i <= n\nnums[2 * i + 1] = nums[i] + nums[i + 1] when 2 <= 2 * i + 1 <= n\nReturn the maximum integer in the array nums\u200b\u200b\u200b.", "examples": "Input: n = 7\nOutput: 3\nExplanation: According to the given rules:\n  nums[0] = 0\n  nums[1] = 1\n  nums[(1 * 2) = 2] = nums[1] = 1\n  nums[(1 * 2) + 1 = 3] = nums[1] + nums[2] = 1 + 1 = 2\n  nums[(2 * 2) = 4] = nums[2] = 1\n  nums[(2 * 2) + 1 = 5] = nums[2] + nums[3] = 1 + 2 = 3\n  nums[(3 * 2) = 6] = nums[3] = 2\n  nums[(3 * 2) + 1 = 7] = nums[3] + nums[4] = 2 + 1 = 3\nHence, nums = [0,1,1,2,1,3,2,3], and the maximum is max(0,1,1,2,1,3,2,3) = 3.\nInput: n = 2\nOutput: 1\nExplanation: According to the given rules, nums = [0,1,1]. The maximum is max(0,1,1) = 1.\nInput: n = 3\nOutput: 2\nExplanation: According to the given rules, nums = [0,1,1,2]. The maximum is max(0,1,1,2) = 2.", "link": "https://leetcode.com/problems/get-maximum-in-generated-array/", "difficulty": "Easy", "categories": ["Dynamic Programming"], "code": "def getMaximumGenerated(n: int) -> int:\n    if n<2:\n        return n\n    nums=[0]*(n+1)\n    nums[0]=0\n    nums[1]=1\n    for i in range(2,n+1):\n        if i%2==0:\n            nums[i]=nums[i//2]\n        else:\n            nums[i]=nums[i//2]+nums[i//2+1]\n    return max(nums)", "asserts": ["assert getMaximumGenerated(2)==1"]}, {"author": "Hafeez", "UUID": "d695e67c-5b0e-4235-8406-30ee6be61173", "question": "N-th Tribonacci Number: The Tribonacci sequence Tn is defined as follows: \n\nT0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.\n\nGiven n, return the value of Tn.", "examples": "Input: n = 4\nOutput: 4\nExplanation:\nT_3 = 0 + 1 + 1 = 2\nT_4 = 1 + 1 + 2 = 4", "link": "https://leetcode.com/problems/n-th-tribonacci-number/description/", "difficulty": "Easy", "categories": ["Dynamic Programming"], "code": "def tribonacci(n: int) -> int:\n    dp = {0: 0, 1: 1, 2: 1}\n    def dfs(i):\n        if i in dp:\n            return dp[i]\n        dp[i] = dfs(i - 1) + dfs(i - 2) + dfs(i - 3)\n        return dp[i]\n    \n    return dfs(n)", "asserts": ["assert tribonacci(25)==1389537"]}, {"author": "Hafeez", "UUID": "38dca76c-ee6c-4c71-83a9-89240828a3b7", "question": "Best Time to Buy and Sell Stock II: You are given an integer array prices where prices[i] is the price of a given stock on the ith day.\n\nOn each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\n\nFind and return the maximum profit you can achieve.", "examples": "Input: prices = [7,1,5,3,6,4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\nTotal profit is 4 + 3 = 7.\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.", "link": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/", "difficulty": "Medium", "categories": ["Dynamic Programming"], "code": "def maxProfit(prices: List[int]) -> int:\n    cur_hold, cur_not_hold = -float('inf'), 0\n    \n    for stock_price in prices:\n        \n        prev_hold, prev_not_hold = cur_hold, cur_not_hold\n        cur_hold = max( prev_hold, prev_not_hold - stock_price )\n        cur_not_hold = max( prev_not_hold, prev_hold + stock_price )\n    return cur_not_hold", "asserts": ["assert maxProfit([1,2,3,4,5])==4"]}, {"author": "Hafeez", "UUID": "296ab89e-7208-4f6f-bed1-d623f30e32c9", "question": "Coin Change II: You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\n\nReturn the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.\n\nYou may assume that you have an infinite number of each kind of coin.\n\nThe answer is guaranteed to fit into a signed 32-bit integer.", "examples": "Input: amount = 5, coins = [1,2,5]\nOutput: 4\nExplanation: there are four ways to make up the amount:\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1\nInput: amount = 3, coins = [2]\nOutput: 0\nExplanation: the amount of 3 cannot be made up just with coins of 2.", "link": "https://leetcode.com/problems/coin-change-ii/description/", "difficulty": "Medium", "categories": ["Dynamic Programming"], "code": "def change(amount: int, coins: List[int]) -> int:\n    def numberOfWays(i: int, amount: int) -> int:\n        if amount == 0:\n            return 1\n        if i == len(coins):\n            return 0\n        if memo[i][amount] != -1:\n            return memo[i][amount]\n\n        if coins[i] > amount:\n            memo[i][amount] = numberOfWays(i + 1, amount)\n        else:\n            memo[i][amount] = numberOfWays(i, amount - coins[i]) + numberOfWays(i + 1, amount)\n        \n        return memo[i][amount]\n\n    memo = [[-1] * (amount + 1) for _ in range(len(coins))]\n    return numberOfWays(0, amount)", "asserts": ["assert change(10,[10])==1"]}, {"author": "Hafeez", "UUID": "b6f47e1f-52e7-4dca-837f-88bc0d3b7a5a", "question": "Backspace String Compare: Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.\n\nNote that after backspacing an empty text, the text will continue empty.", "examples": "Input: s = \"ab#c\", t = \"ad#c\"\nOutput: True\nExplanation: Both s and t become \"ac\".\nInput: s = \"a#c\", t = \"b\"\nOutput: False\nExplanation: s becomes \"c\" while t becomes \"b\".", "link": "https://leetcode.com/problems/backspace-string-compare/description/", "difficulty": "Easy", "categories": ["Stack"], "code": "def backspaceCompare(S, T):\n    def build(S):\n        ans = []\n        for c in S:\n            if c != '#':\n                ans.append(c)\n            elif ans:\n                ans.pop()\n        return \"\".join(ans)\n        return build(S) == build(T)", "asserts": ["assert backspaceCompare(''ab##\", \"c#d#\")==True"]}, {"author": "Hafeez", "UUID": "4b76d4d6-6dbe-4bcf-ba3f-9c6a418373ea", "question": "Valid Parentheses: Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n\nOpen brackets must be closed by the same type of brackets.\nOpen brackets must be closed in the correct order.\nEvery close bracket has a corresponding open bracket of the same type.", "examples": "Input: s = \"()\"\nOutput: true\nInput: s = \"()[]{}\"\nOutput: true", "link": "https://leetcode.com/problems/valid-parentheses/description/", "difficulty": "Easy", "categories": ["Stack"], "code": "def isValid(s):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in s:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack", "asserts": ["assert isValid(\"(]\")==False"]}, {"author": "Hafeez", "UUID": "2fb3578a-9202-463d-8eb1-88df11a49ca7", "question": "Minimum Remove to Make Valid Parentheses: Given a string s of '(' , ')' and lowercase English characters.\n\nYour task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.\n\nFormally, a parentheses string is valid if and only if:\n\nIt is the empty string, contains only lowercase characters, or\nIt can be written as AB (A concatenated with B), where A and B are valid strings, or\nIt can be written as (A), where A is a valid string.", "examples": "Input: s = \"lee(t(c)o)de)\"\nOutput: \"lee(t(c)o)de\"\nExplanation: \"lee(t(co)de)\" , \"lee(t(c)ode)\" would also be accepted.\nInput: s = \"a)b(c)d\"\nOutput: \"ab(c)d\"\nInput: s = \"))((\"\nOutput: \"\"\nExplanation: An empty string is also valid.", "link": "https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/description/", "difficulty": "Medium", "categories": ["Stack"], "code": "def minRemoveToMakeValid(s: str) -> str:\n    indexes_to_remove = set()\n    stack = []\n    for i, c in enumerate(s):\n        if c not in \"()\":\n            continue\n        if c == \"(\":\n            stack.append(i)\n        elif not stack:\n            indexes_to_remove.add(i)\n        else:\n            stack.pop()\n    indexes_to_remove = indexes_to_remove.union(set(stack))\n    string_builder = []\n    for i, c in enumerate(s):\n        if i not in indexes_to_remove:\n            string_builder.append(c)\n    return \"\".join(string_builder)", "asserts": ["assert minRemoveToMakeValid(\"a)b(c)d\")==\"ab(c)d\""]}, {"author": "Hafeez", "UUID": "a4782492-10a7-4601-a995-c1a0f9d57a67", "question": "Trapping Rain Water: Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.", "examples": "Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\nInput: height = [4,2,0,3,2,5]\nOutput: 9", "link": "https://leetcode.com/problems/trapping-rain-water/description/", "difficulty": "Hard", "categories": ["Stack"], "code": "def trap(bars):\n    if not bars or len(bars) < 3:\n        return 0\n    volume = 0\n    left, right = 0, len(bars) - 1\n    l_max, r_max = bars[left], bars[right]\n    while left < right:\n        l_max, r_max = max(bars[left], l_max), max(bars[right], r_max)\n        if l_max <= r_max:\n            volume += l_max - bars[left]\n            left += 1\n        else:\n            volume += r_max - bars[right]\n            right -= 1\n    return volume", "asserts": ["assert trap([4,2,0,3,2,5])==9"]}, {"author": "Hafeez", "UUID": "f4b91546-3f1c-4c4d-96a4-54541929438f", "question": "Majority Element: Given an array nums of size n, return the majority element.\n\nThe majority element is the element that appears more than \u230an / 2\u230b times. You may assume that the majority element always exists in the array.", "examples": "Input: nums = [3,2,3]\nOutput: 3", "link": "https://leetcode.com/problems/majority-element/description/", "difficulty": "Easy", "categories": ["Divide and Conquer"], "code": "def majorityElement(nums, lo=0, hi=None):\n    def majority_element_rec(lo, hi):\n        if lo == hi:\n            return nums[lo]\n        mid = (hi-lo)//2 + lo\n        left = majority_element_rec(lo, mid)\n        right = majority_element_rec(mid+1, hi)\n        if left == right:\n            return left\n        left_count = sum(1 for i in range(lo, hi+1) if nums[i] == left)\n        right_count = sum(1 for i in range(lo, hi+1) if nums[i] == right)\n\n        return left if left_count > right_count else right\n\n    return majority_element_rec(0, len(nums)-1)\n", "asserts": ["assert majorityElement([2,2,1,1,1,2,2])==2"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "def minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "def consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3"]}, {"author": "Hafeez", "UUID": "fc3fbbf7-4bca-4fca-9308-23d9f5735034", "question": "Minimum Time Visiting All Points: On a 2D plane, there are n points with integer coordinates points[i] = [xi, yi]. Return the minimum time in seconds to visit all the points in the order given by points.\n\nYou can move according to these rules:\n\nIn 1 second, you can either:\nmove vertically by one unit,\nmove horizontally by one unit, or\nmove diagonally sqrt(2) units (in other words, move one unit vertically then one unit horizontally in 1 second).\nYou have to visit the points in the same order as they appear in the array.\nYou are allowed to pass through points that appear later in the order, but these do not count as visits.", "examples": "Input: points = [[1,1],[3,4],[-1,0]]\nOutput: 7\nExplanation: One optimal path is [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [0,1] -> [-1,0]   \nTime from [1,1] to [3,4] = 3 seconds \nTime from [3,4] to [-1,0] = 4 seconds\nTotal time = 7 seconds", "link": "https://leetcode.com/problems/minimum-time-visiting-all-points/description/", "difficulty": "Easy", "categories": ["Geometry"], "code": "def minTimeToVisitAllPoints(points: List[List[int]]) -> int:\n    def rule(A, B):\n        return max(abs(A[0] - B[0]), abs(A[1] - B[1]))\n    sum = 0\n    for tup1, tup2 in zip(points[:-1], points[1:]):\n        sum += rule(tup1, tup2)\n    \n    return sum", "asserts": ["assert minTimeToVisitAllPoints([[3,2],[-2,2]])==5"]}, {"author": "Hafeez", "UUID": "e2c47631-84af-497c-8e1d-3ce51c4b3eff", "question": "Projection Area of 3D Shapes: You are given an n x n grid where we place some 1 x 1 x 1 cubes that are axis-aligned with the x, y, and z axes.\n\nEach value v = grid[i][j] represents a tower of v cubes placed on top of the cell (i, j).\n\nWe view the projection of these cubes onto the xy, yz, and zx planes.\n\nA projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. We are viewing the \"shadow\" when looking at the cubes from the top, the front, and the side.\n\nReturn the total area of all three projections.", "examples": "Input: grid = [[1,2],[3,4]]\nOutput: 17\nExplanation: Here are the three projections (\"shadows\") of the shape made with each axis-aligned plane.\nInput: grid = [[1,0],[0,2]]\nOutput: 8", "link": "https://leetcode.com/problems/projection-area-of-3d-shapes/description/", "difficulty": "Easy", "categories": ["Geometry"], "code": "def projectionArea(grid):\n    N = len(grid)\n    ans = 0\n    for i in xrange(N):\n        best_row = 0\n        best_col = 0 \n        for j in xrange(N):\n            if grid[i][j]: ans += 1\n            best_row = max(best_row, grid[i][j])\n            best_col = max(best_col, grid[j][i])\n\n        ans += best_row + best_col\n\n    return ans", "asserts": ["assert projectionArea([[2]])==5"]}, {"author": "Hafeez", "UUID": "e1724953-bc74-4dbf-86e7-5713be00a339", "question": "K Closest Points to Origin: Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).\n\nThe distance between two points on the X-Y plane is the Euclidean distance (i.e., \u221a(x1 - x2)2 + (y1 - y2)2).\n\nYou may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).", "examples": "Input: points = [[1,3],[-2,2]], k = 1\nOutput: [[-2,2]]\nExplanation:\nThe distance between (1, 3) and the origin is sqrt(10).\nThe distance between (-2, 2) and the origin is sqrt(8).\nSince sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.\nWe only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].", "link": "https://leetcode.com/problems/k-closest-points-to-origin/description/", "difficulty": "Medium", "categories": ["Geometry"], "code": "def kClosest(points, K):\n    dist = lambda i: points[i][0]**2 + points[i][1]**2\n\n    def sort(i, j, K):\n        if i >= j: return\n        k = random.randint(i, j)\n        points[i], points[k] = points[k], points[i]\n\n        mid = partition(i, j)\n        if K < mid - i + 1:\n            sort(i, mid - 1, K)\n        elif K > mid - i + 1:\n            sort(mid + 1, j, K - (mid - i + 1))\n\n    def partition(i, j):\n        oi = i\n        pivot = dist(i)\n        i += 1\n\n        while True:\n            while i < j and dist(i) < pivot:\n                i += 1\n            while i <= j and dist(j) >= pivot:\n                j -= 1\n            if i >= j: break\n            points[i], points[j] = points[j], points[i]\n\n        points[oi], points[j] = points[j], points[oi]\n        return j\n\n    sort(0, len(points) - 1, K)\n    return points[:K]", "asserts": ["assert kClosest([[3,3],[5,-1],[-2,4]], 2)==[[3,3],[-2,4]]"]}, {"author": "Hafeez", "UUID": "effcb732-1f0d-4caa-8d9f-be914708d4ae", "question": "Repeated Substring Pattern: Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.", "examples": "Input: s = \"aba\"\nOutput: false\nExplanation: It is the substring \"ab\" twice.\nInput: s = \"abcabcabcabc\"\nOutput: true\nExplanation: It is the substring \"abc\" four times or the substring \"abcabc\" twice.", "link": "https://leetcode.com/problems/repeated-substring-pattern/description/", "difficulty": "Easy", "categories": ["Pattern"], "code": "def repeatedSubstringPattern(s: str) -> bool:\n    n = len(s)\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            pattern = s[:i] * (n // i)\n            if s == pattern:\n                return True\n    return False", "asserts": ["assert repeatedSubstringPattern(\"abab\")==True"]}, {"author": "Hafeez", "UUID": "e811f9cc-fa5e-4ea0-8adb-8cf3ab7c72db", "question": "Detect Pattern of Length M Repeated K or More Times: Given an array of positive integers arr, find a pattern of length m that is repeated k or more times.\n\nA pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping. A pattern is defined by its length and the number of repetitions.\n\nReturn true if there exists a pattern of length m that is repeated k or more times, otherwise return false.", "examples": "Input: arr = [1,2,1,2,1,1,1,3], m = 2, k = 2\nOutput: true\nExplanation: The pattern (1,2) of length 2 is repeated 2 consecutive times. Another valid pattern (2,1) is also repeated 2 times.\nInput: arr = [1,2,1,2,1,3], m = 2, k = 3\nOutput: false\nExplanation: The pattern (1,2) is of length 2 but is repeated only 2 times. There is no pattern of length 2 that is repeated 3 or more times.\n", "link": "https://leetcode.com/problems/detect-pattern-of-length-m-repeated-k-or-more-times/description/", "difficulty": "Easy", "categories": ["Pattern"], "code": "def containsPattern(arr: List[int], m: int, k: int) -> bool:\n    i = 0\n    while i <= len(arr)-1:\n            p = arr[i:i+m]\n            if p * k == arr[i:i+m*k]:\n                    return True\n            i += 1\n    return False", "asserts": ["assert containsPattern([1,2,4,4,4,4],1,3)==True"]}, {"author": "Hafeez", "UUID": "df98fd29-db88-4de7-a00a-0a3bd5ba1539", "question": "Word Pattern: Given a pattern and a string s, find if s follows the same pattern.\n\nHere follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.", "examples": "Input: pattern = \"abba\", s = \"dog cat cat fish\"\nOutput: false\nInput: pattern = \"aaaa\", s = \"dog cat cat dog\"\nOutput: false", "link": "https://leetcode.com/problems/word-pattern/", "difficulty": "Easy", "categories": ["Pattern"], "code": "def wordPattern(pattern: str, s: str) -> bool:\n    map_char = {}\n    map_word = {}\n    \n    words = s.split(' ')\n    if len(words) != len(pattern):\n        return False\n    \n    for c, w in zip(pattern, words):\n        if c not in map_char:\n            if w in map_word:\n                return False\n            else:\n                map_char[c] = w\n                map_word[w] = c\n        else:\n            if map_char[c] != w:\n                return False\n    return True", "asserts": ["assert wordPattern(\"abba\", \"dog cat cat dog\")==True"]}, {"author": "Hafeez", "UUID": "8c9548d2-7b9c-46a4-9b8e-8afd488f7e87", "question": "Find and Replace Pattern: Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.\n\nA word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.\n\nRecall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.", "examples": "Input: words = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\"\nOutput: [\"mee\",\"aqq\"]\nExplanation: \"mee\" matches the pattern because there is a permutation {a -> m, b -> e, ...}. \n\"ccc\" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter.", "link": "https://leetcode.com/problems/find-and-replace-pattern/description/", "difficulty": "Medium", "categories": ["Pattern"], "code": "def findAndReplacePattern(words, pattern):\n    def match(word):\n        m1, m2 = {}, {}\n        for w, p in zip(word, pattern):\n            if w not in m1: m1[w] = p\n            if p not in m2: m2[p] = w\n            if (m1[w], m2[p]) != (p, w):\n                return False\n        return True\n\n    return filter(match, words)", "asserts": ["assert findAndReplacePattern([\"a\",\"b\",\"c\"], \"a\")==[\"a\",\"b\",\"c\"]"]}, {"author": "Hafeez", "UUID": "124bfeca-24d0-411d-b4ad-26009b79436b", "question": "Word Pattern II: Given a pattern and a string s, return true if s matches the pattern.\n\nA string s matches a pattern if there is some bijective mapping of single characters to non-empty strings such that if each character in pattern is replaced by the string it maps to, then the resulting string is s. A bijective mapping means that no two characters map to the same string, and no character maps to two different strings.", "examples": "Input: pattern = \"abab\", s = \"redblueredblue\"\nOutput: true\nExplanation: One possible mapping is as follows:\n'a' -> \"red\"\n'b' -> \"blue\"\nInput: pattern = \"aabb\", s = \"xyzabcxzyabc\"\nOutput: false", "link": "https://leetcode.com/problems/word-pattern-ii/description/", "difficulty": "Medium", "categories": ["Pattern"], "code": "def wordPatternMatch(pattern: str, s: str) -> bool:\n    def backtrack(cur: str, pattern: str, mappings: dict):\n        if not pattern:\n            return not cur\n        if pattern[0] in mappings:\n            if cur[:len(mappings[pattern[0]])] != mappings[pattern[0]]:\n                return False\n            return backtrack(cur[len(mappings[pattern[0]]):], pattern[1:], mappings)\n        for i in range(len(cur)):\n            if cur[:i+1] in mappings.values():\n                continue\n            mappings[pattern[0]] = cur[:i+1]\n            if backtrack(cur[i+1:], pattern[1:], mappings):\n                return True\n            del mappings[pattern[0]]\n        return False\n    return backtrack(s, pattern, {})", "asserts": ["assert wordPatternMatch(\"aaaa\", \"asdasdasdasd\")==True"]}, {"author": "Calvin", "UUID": "a9c5e697-af5d-432b-8447-5675d739c728", "question": "Given an array reorder it so that even numbers appear first", "examples": "Input: [1,2,3,4,5,6,7,8,9]\r\nOutput: [8,2,6,4,5,7,3,9,1]", "link": NaN, "categories": ["'array', 'sorting'"], "code": "def even_odd_reorder(arr: list):\n  nextEven = 0\n  nextOdd = len(arr) - 1\n  while nextEven < nextOdd:\n    if arr[nextEven] % 2 == 0:\n      nextEven += 1\n    else:\n      temp = arr[nextEven]\n      arr[nextEven] = arr[nextOdd]\n      arr[nextOdd] = temp\n      nextOdd -= 1\n  return arr", "asserts": ["assert even_odd_reorder([1,2,3,4,5,6,7,8,9]) == [8, 2, 6, 4, 5, 7, 3, 9, 1]"]}, {"author": "Calvin", "UUID": "9e45b73f-583d-40ab-b387-e0d1624af07b", "question": "Given two arrays return an array with the set intersection of their common elements", "examples": "Input: arr1 = [1, 2, 3, 4], arr2 = [2, 3]\nOutput: [2, 3]", "link": NaN, "categories": ["'array'"], "code": "def array_intersection(arr1: list, arr2: list):\n  set1 = set(arr1)\n  ret = set([x for x in arr2 if x in set1])\n  return list(ret)", "asserts": ["assert set(array_intersection([1,0,2,0,2,0,2,1,1,1], [2,1,0,2,0,2,2,2,1,0])) == {0,1,2}"]}, {"author": "Calvin", "UUID": "f795bda7-9822-4bc5-9c7e-b9c0f2752085", "question": "You are given two 0-indexed integer permutations A and B of length n.\n\nA prefix common array of A and B is an array C such that C[i] is equal to the count of numbers that are present at or before the index i in both A and B.\n\nReturn the prefix common array of A and B.\n\nA sequence of n integers is called a permutation if it contains all integers from 1 to n exactly once.", "examples": "Input: A = [1,3,2,4], B = [3,1,2,4]\nOutput: [0,2,3,4]", "link": "https://leetcode.com/problems/find-the-prefix-common-array-of-two-arrays/", "categories": ["'array'"], "code": "def findThePrefixCommonArray(arr1: list, arr2: list):\n  max = len(arr1) if len(arr1) > len(arr2) else len(arr2)\n  seen = set()\n  curCount = 0\n  ret = []\n  for i in range(max):\n    cur1 = arr1[i]\n    cur2 = arr2[i]\n    if cur1 in seen:\n      curCount += 1\n    else:\n      seen.add(cur1)\n    if cur2 in seen:\n      curCount += 1\n    else:\n      seen.add(cur2)\n    ret.append(curCount)\n  return ret", "asserts": ["assert findThePrefixCommonArray([1,3,2,4], [3,1,2,4]) == [0,2,3,4]"]}, {"author": "Calvin", "UUID": "f452df1d-cc8f-408f-a79d-1452e32ef567", "question": "Given a N*N board with the Knight placed on the first block of an empty board. Moving according to the rules of chess knight must visit each square exactly once. Return the order of each cell in which they are visited as a matrix or none if one does not exist.", "examples": "Input : \nN = 8\nOutput:\n0  59  38  33  30  17   8  63\n37  34  31  60   9  62  29  16\n58   1  36  39  32  27  18   7\n35  48  41  26  61  10  15  28\n42  57   2  49  40  23   6  19\n47  50  45  54  25  20  11  14\n56  43  52   3  22  13  24   5\n51  46  55  44  53   4  21  12", "link": "https://www.geeksforgeeks.org/the-knights-tour-problem/", "categories": ["'backtracking', 'matrix/grid'"], "code": "def isSafe(x, y, board, n): \n  if(x >= 0 and y >= 0 and x < n and y < n and board[x][y] == -1): \n    return True\n  return False\n\ndef solveKT(n): \n  board = [[-1 for i in range(n)]for i in range(n)]\n  move_x = [2, 1, -1, -2, -2, -1, 1, 2] \n  move_y = [1, 2, 2, 1, -1, -2, -2, -1] \n  board[0][0] = 0 \n  pos = 1\n  if(not solveKTUtil(n, board, 0, 0, move_x, move_y, pos)): \n      return None\n  else: \n      return board \n  \n  \ndef solveKTUtil(n, board, curr_x, curr_y, move_x, move_y, pos): \n  if(pos == n**2): \n    return True\n  for i in range(8): \n    new_x = curr_x + move_x[i] \n    new_y = curr_y + move_y[i] \n    if(isSafe(new_x, new_y, board, n)): \n      board[new_x][new_y] = pos \n      if(solveKTUtil(n, board, new_x, new_y, move_x, move_y, pos+1)): \n        return True\n      board[new_x][new_y] = -1\n  return False", "asserts": ["assert solveKT(8) == [[0,59,38,33,30,17, 8,63 ],"]}, {"author": "Calvin", "UUID": "51a5caf9-241f-4de3-9ee2-9420490b73d7", "question": "Given a set[] of non-negative integers and a value sum, return the subset of the given set whose sum is equal to the given sum or None if one doesn't exist\n", "examples": "Input: set = [1, 2, 3, 4, 5], sum = 10\nOutput: [1, 2, 3, 4]", "link": "https://www.geeksforgeeks.org/subset-sum-problem-dp-25/", "categories": ["'backtracking', 'recursion'"], "code": "def subsetSum_helper(cur_idx: int, fullset: list, target_sum: int, subset: list):\n  if target_sum == 0:\n    return subset\n\n  if (cur_idx == len(fullset)):\n    return None\n  \n  excluding = subsetSum_helper(cur_idx + 1, fullset, target_sum, subset)\n  if excluding is not None:\n    return excluding\n  elif fullset[cur_idx] <= target_sum:\n    subset.append(fullset[cur_idx])\n    including = subsetSum_helper(cur_idx + 1, fullset, target_sum - fullset[cur_idx], subset)\n    if including is not None:\n      return including\n    else:\n      subset.pop()\n  return None\n\ndef subsetsum(fullset: list, target_sum: int):\n  return subsetSum_helper(0, fullset, target_sum, [])", "asserts": ["assert set(subsetsum([3, 34, 4, 12, 5, 2], 9)) == set([4,5])"]}, {"author": "Calvin", "UUID": "fb94082f-4627-4f5a-b280-08d869823d70", "question": "You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.\n\nReconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).\n", "examples": "Input:  [[7, 0], [4, 4], [7, 1], [5, 0], [6, 1], [5, 2]]\nOutput: [[5, 0], [4, 1], [7, 0], [5, 2], [6, 1], [7, 1]]\n\nInput:  [[6, 0], [5, 0], [4, 0], [3, 2], [2, 2], [1, 4]]\nOutput: [[4, 0], [5, 0], [2, 2], [3, 2], [1, 4], [6, 0]]", "link": NaN, "categories": ["'greedy', 'array'"], "code": "\ndef reconstructQueue(people):\n    output=[] \n    people.sort(key=lambda x: (-x[0], x[1]))                \n    for a in people:\n        output.insert(a[1], a)\n    \n    return output\n", "asserts": ["assert reconstructQueue([[8,1],[5,0],[6,1],[5,2],[4,4],[7,1]]) == [[5, 0], [8, 1], [5, 2], [6, 1], [4, 4], [7, 1]]"]}, {"author": "Calvin", "UUID": "48c6aa37-e00d-4b55-9afc-6b1cf2a1aff2", "question": "There are N Mice and N holes are placed in a straight line. Each hole can accommodate only 1 mouse. A mouse can stay at his position, move one step right from x to x + 1, or move one step left from x to x -1. Any of these moves consumes 1 minute. Assign mice to holes so that the time when the last mouse gets inside a hole is minimized.\nYou are given a list of mice and hole positions as integer scalers.\n", "examples": "Input: Mices = [0, 10, 2, 3], Holes = [3, 2, 23, 0]\nOutput: 13", "link": NaN, "categories": ["'greedy', 'array', 'sorting'"], "code": "def assignHole(mices, holes):\n    for i,j in zip(mices,holes):\n        if i<0 or j<0:\n            return -1\n    if (len(mices) != len(holes)):\n        return -1\n    mices.sort()\n    holes.sort()\n    Max = 0\n     \n    for i in range(len(holes)):\n        if (Max < abs(mices[i] - holes[i])):\n            Max = abs(mices[i] - holes[i])\n     \n    return Max", "asserts": ["assert assignHole([1, 2, 3, 4], [4, 3, 2, 1]) == 0"]}, {"author": "Calvin", "UUID": "1aeb3246-4c22-4d34-a48c-db7be8ba1b94", "question": "You are given n activities with their start and finish times. Select the maximum number of activities that can be performed by a single person and return their indexes. Assume that a person can only work on a single activity at a time. \n", "examples": "Input: start  =  {10, 12, 20}, finish =  {20, 25, 30}\nOutput: [0, 2]", "link": NaN, "categories": ["'greedy'"], "code": "import numpy as np\ndef MaxActivities(s, f):\n    indices = np.argsort(f)\n    [s[i] for i in indices]\n    [f[i] for i in indices]\n    result = []\n    n = len(f)\n    i = 0\n    result.append(i)\n    for j in range(1, n):\n        if s[j] >= f[i]:\n            result.append(j)\n            i = j\n    return result\n", "asserts": ["assert MaxActivities([2, 4, 5, 6, 7, 8], [3, 5, 6, 7, 9, 10]) == [0, 1, 2, 3, 4]"]}, {"author": "Calvin", "UUID": "ac641352-08d5-4950-8993-6a143da92ecf", "question": "You are given a string s and an integer k. You can choose one of the first k letters of s and append it at the end of the string.\n\nReturn the lexicographically smallest string you could have after applying the mentioned step any number of moves.\n", "examples": "Input: s = \"cba\", k = 1\nOutput: \"acb\"\n\nInput: s = \"baaca\", k = 3\nOutput: \"aaabc\"", "link": NaN, "categories": ["'queue', 'string'"], "code": "\ndef orderlyQueue(s: str, k: int) -> str:\n    if k == 1:\n        n = len(s)\n        ss = s + s\n        lex_min_str = s\n        for i in range(n):\n            lex_min_str = min(lex_min_str, ss[i:i + n])\n        return lex_min_str\n    \n    return \"\".join(sorted(s))\n", "asserts": ["assert orderlyQueue(\"abcd\", 1) == \"abcd\""]}, {"author": "Calvin", "UUID": "5e7011e5-fee4-4c1a-a98f-3b81e50508cc", "question": "Return nth number in the fibonacci sequence", "examples": "Input: 9\nOutput: 34\n\nInput: 7\nOutput: 13", "link": NaN, "categories": ["'recursion', 'mathematical'"], "code": "\ndef fibonacci(n):\n    a = 0\n    b = 1\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b\n  b = c\n  return fib(n-1, a, b)\n", "asserts": ["assert fibonacci(9) == 34"]}, {"author": "Calvin", "UUID": "e35d1110-85e8-4f50-80aa-91eb976b310b", "question": "Return the factorial of a given number n", "examples": "Input: 5\nOutput: 120\n\nInput: 6\nOutput: 720", "link": NaN, "categories": ["'recursion', 'mathematical'"], "code": "\ndef fact(n):\n  if n <= 1:\n    return 1\n  return n*fact(n-1)\n", "asserts": ["assert fact(5) == 120"]}, {"author": "Calvin", "UUID": "9a970ea6-ed80-4fd3-a257-f01e0a8d5eaa", "question": "Given a numerator and a denominator, return the fraction in string format. If the fractional part is repeating, enclose the repeating part in parentheses", "examples": "Input: Numerator = 1, Denominator = 2\nOutput: \"0.5\"\n\nInput: Numerator = 2, Denominator = 3\nOutput: \"0.(6)\"\n\nInput: Numerator = 1, Denominator = 4\nOutput: \"0.25\"\n\nInput: Numerator = 4, Denominator = 333\nOutput: \"0.(012)\"", "link": NaN, "categories": ["'recursion', 'mathematical', 'string'"], "code": "\ndef helper(cur, numerator, denominator, numerators_seen):\n  if numerator == 0:\n    return cur\n  elif numerator in numerators_seen.keys():\n    idx = numerators_seen[numerator]\n    return cur[:idx] + '(' + cur [idx:] + ')'\n  numerators_seen[numerator] = len(cur)\n  if numerator >= denominator:\n    cur += str(numerator // denominator)\n    numerator = numerator % denominator\n    return helper(cur, numerator*10, denominator, numerators_seen)\n  else:\n    cur += \"0\"\n    return helper(cur, numerator*10, denominator, numerators_seen)\n\ndef fractionToDecimal(numerator, denominator):\n  cur = \"\"\n  if numerator == 0:\n    return \"0\"\n  elif (numerator < 0 and denominator > 0) or (numerator > 0 and denominator < 0):\n    cur = \"-\"\n  numerator = abs(numerator)\n  denominator = abs(denominator)\n  if numerator >= denominator:\n    cur += str(numerator // denominator)\n    numerator = numerator % denominator\n    if numerator != 0:\n      cur += \".\"\n      return helper(cur, numerator*10, denominator, dict())\n    else:\n      return cur\n  else:\n    cur += \"0.\"\n    return helper(cur, numerator*10, denominator, dict())\n", "asserts": ["assert fractionToDecimal(1, 2) == \"0.5\""]}, {"author": "Calvin", "UUID": "80e34b28-16a8-46ac-8b6a-ee28beb1e8d4", "question": "Write a function that reverses a string. The input string is given as an array of characters s.\n\nYou must do this by modifying the input array in-place with O(1) extra memory.", "examples": "Input: [\"h\",\"e\",\"l\",\"l\",\"o\"]\nOutput: [\"o\",\"l\",\"l\",\"e\",\"h\"]\n\nInput: [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\nOutput: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]", "link": NaN, "categories": ["'string'"], "code": "\ndef reverse_string(s: str):\n  l = 0\n  r = len(s) - 1\n  while l < r:\n    tmp = s[l]\n    s[l] = s[r]\n    s[r] = tmp\n    l += 1\n    r -= 1\n", "asserts": ["assert reverse_string(list(\"abcd\")) == list(\"dcba\")"]}, {"author": "Calvin", "UUID": "d0ce7430-cfcd-4c69-b161-b3b2a186422c", "question": "Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.\n\nIn other words, return true if one of s1's permutations is the substring of s2.", "examples": "Input: s1 = \"ab\", s2 = \"eidbaooo\"\nOutput: True\n\nInput: s1 = \"ab\", s2 = \"eidboaoo\"\nOutput: False", "link": NaN, "categories": ["'string', 'pattern searching'"], "code": "\ndef permutation_in_string(s1: str, s2: str):\n  window = len(s1)\n  if window > len(s2):\n    return False\n  freq1 = [0]*26\n  freq2 = [0]*26\n  for i in range(window):\n    freq1[ord(s1[i])-ord('a')] += 1\n    freq2[ord(s2[i])-ord('a')] += 1\n\n  matches = 0\n  for i in range(26):\n    if freq1[i] == freq2[i]:\n      matches += 1\n  \n  for l in range(len(s2) - window):\n    if matches == 26:\n      return True\n\n    added = ord(s2[l + window]) - ord('a')\n    freq2[added] += 1\n    if freq1[added] == freq2[added]:\n      matches += 1\n    elif freq1[added] + 1 == freq2[added]:\n      matches -= 1\n\n    removed = ord(s2[l]) - ord('a')\n    freq2[removed] -= 1\n    if freq1[removed] == freq2[removed]:\n      matches += 1\n    elif freq1[removed] == freq2[removed] + 1:\n      matches -= 1\n    \n  return matches == 26\n", "asserts": ["assert permutation_in_string(\"hello\", \"ooollehhhhh\") == True"]}, {"author": "Calvin", "UUID": "87372a22-f5ef-4100-845b-28700ca3fde3", "question": "You are given a string s and an integer array indices of the same length. The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.\n\nReturn the shuffled string.", "examples": "Input: s = \"codeleet\", indices = [4,5,6,7,0,2,1,3]\nOutput: \"leetcode\"\n\nInput: s = \"abc\", indices = [0,1,2]\nOutput: \"abc\"", "link": NaN, "categories": ["'string'"], "code": "\ndef shuffle_string(s: str, indices: list[int]):\n  ret = ['_']*len(s)\n  for idx, i in enumerate(indices):\n    ret[i] = s[idx]\n  return \"\".join(ret)\n\n#https://leetcode.com/problems/optimal-partition-of-string/description/\ndef partitionString(s):\n  substrings = 1\n  cur_str = set()\n  for i in range(len(s)):\n    if s[i] in cur_str:\n      substrings += 1\n      cur_str = {s[i]}\n    else:\n      cur_str.add(s[i])\n  return substrings\n", "asserts": ["assert shuffle_string(\"reoc\", [2, 0, 1, 3]) == \"core\""]}, {"author": "Calvin", "UUID": "56b48f6d-0d81-478d-b838-4d47b62d3031", "question": "Given an integer n, return the number of strings of length n that consist only of vowels (a, e, i, o, u) and are lexicographically sorted.\n\nA string s is lexicographically sorted if for all valid i, s[i] is the same as or comes before s[i+1] in the alphabet.", "examples": "Input: 1\nOutput: 5\n\nInput: 2\nOutput: 15", "link": NaN, "categories": ["'string'"], "code": "def helper(n, letter_idx):\n  letters = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n  dynamic = {\n      'a1' : 5,\n      'e1' : 4,\n      'i1' : 3,\n      'o1' : 2,\n      'u1' : 1\n  }\n  ret = 0\n  key = letters[letter_idx] + str(n)\n  if key in dynamic.keys():\n    return dynamic[key]\n  else:\n    for i in range(letter_idx, len(letters)):\n      ret += helper(n-1, i)\n    dynamic[key] = ret\n  return ret\n  \n\ndef countVowelStrings(n):\n  return helper(n, 0)", "asserts": ["assert countVowelStrings(3) == 35"]}]