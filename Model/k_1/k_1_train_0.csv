question,prompt,code,asserts
"Detect Pattern of Length M Repeated K or More Times: Given an array of positive integers arr, find a pattern of length m that is repeated k or more times.

A pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping. A pattern is defined by its length and the number of repetitions.

Return true if there exists a pattern of length m that is repeated k or more times, otherwise return false.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Detect Pattern of Length M Repeated K or More Times: Given an array of positive integers arr, find a pattern of length m that is repeated k or more times.

A pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping. A pattern is defined by its length and the number of repetitions.

Return true if there exists a pattern of length m that is repeated k or more times, otherwise return false.

assert containsPattern([1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2], 2, 5) == True
assert containsPattern([1,1,1,2,2,2,3,3], 2, 2) == False

[/Question] [/INST] [Code]

from typing import List
def containsPattern(arr: List[int], m: int, k: int) -> bool:
    i = 0
    while i <= len(arr)-1:
            p = arr[i:i+m]
            if p * k == arr[i:i+m*k]:
                    return True
            i += 1
    return False 

[/Code]
[/STOP] </s>","from typing import List
def containsPattern(arr: List[int], m: int, k: int) -> bool:
    i = 0
    while i <= len(arr)-1:
            p = arr[i:i+m]
            if p * k == arr[i:i+m*k]:
                    return True
            i += 1
    return False","assert containsPattern([1,2,4,4,4,4],1,3)==True
assert containsPattern([1,2,3,1,2,3,1,2,3], 3, 3) == True
assert containsPattern([1,1,1,2,2,2,3,3], 2, 2) == False
assert containsPattern([5,5,5,5,5,5,5], 1, 6) == True
assert containsPattern([1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2], 2, 5) == True
assert containsPattern([10,100,10,100,10,100,10,10,10,100], 2, 4) == False
assert containsPattern([3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3], 4, 3) == True"
"Linear Search is defined as a sequential search algorithm that starts at one end and goes through each element of a list until the desired element is found, otherwise the search continues till the end of the data set. Implement the Linear searching algorithm in python","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Linear Search is defined as a sequential search algorithm that starts at one end and goes through each element of a list until the desired element is found, otherwise the search continues till the end of the data set. Implement the Linear searching algorithm in python



[/Question] [/INST] [Code]

def search(arr: list, x: int) -> int:
        for i in range(0, len(arr)): 
                if (arr[i] == x): 
                        return i 
        return -1
 

[/Code]
[/STOP] </s>","def search(arr: list, x: int) -> int:
        for i in range(0, len(arr)): 
                if (arr[i] == x): 
                        return i 
        return -1
","assert search([2, 3, 4, 10, 40], 10) == 3
assert search([1, 8, 9, 10, 15], 15) == 4
assert search([4, 5, 6, 7, 0], 3) == -1
assert search([], 10) == -1
assert search([42], 42) == 0
assert search([10, 22, 35, 49, 53, 67, 83], 67) == 5
assert search([3, 1, 3, 7, 5], 3) == 0
assert search([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == 0
assert search([9, 8, 7, 6, 5, 4, 3, 2, 1], 1) == 8
assert search([5, 17, 22, 30, 45, 50, 62], 31) == -1"
"Given a matrix of n*n size, the task is to find whether all rows are circular rotations of each other or not. ","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given a matrix of n*n size, the task is to find whether all rows are circular rotations of each other or not. 

assert isPermutedMatrix([[3, 8], [8, 3]]) == True
assert isPermutedMatrix([[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]]) == True
assert isPermutedMatrix([[13, 5, 7, 9], [5, 7, 9, 13], [7, 9, 13, 5], [9, 13, 5, 7]]) == True

[/Question] [/INST] [Code]


MAX = 1000

def isPermutedMatrix(mat: list) -> bool:
        
        n = len(mat)
        str_cat = """"
        for i in range(n) :
                str_cat = str_cat + ""-"" + str(mat[0][i])

        str_cat = str_cat + str_cat

        for i in range(1, n) :
                curr_str = """"
                
                for j in range(n) :
                        curr_str = curr_str + ""-"" + str(mat[i][j])

                if (str_cat.find(curr_str)) : 
                        return True
                        
        return False
 

[/Code]
[/STOP] </s>","
MAX = 1000

def isPermutedMatrix(mat: list) -> bool:
        
        n = len(mat)
        str_cat = """"
        for i in range(n) :
                str_cat = str_cat + ""-"" + str(mat[0][i])

        str_cat = str_cat + str_cat

        for i in range(1, n) :
                curr_str = """"
                
                for j in range(n) :
                        curr_str = curr_str + ""-"" + str(mat[i][j])

                if (str_cat.find(curr_str)) : 
                        return True
                        
        return False
","assert isPermutedMatrix([[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]]) == True
assert isPermutedMatrix([[1, 2, 3], [2, 3, 1], [3, 1, 2]]) == True
assert isPermutedMatrix([[5, 6], [6, 5]]) == True
assert isPermutedMatrix([[13, 5, 7, 9], [5, 7, 9, 13], [7, 9, 13, 5], [9, 13, 5, 7]]) == True
assert isPermutedMatrix([[3, 8], [8, 3]]) == True
assert isPermutedMatrix([[2, 4, 6, 8], [4, 6, 8, 2], [8, 2, 4, 6], [6, 8, 2, 4]]) == True"
"Given a set[] of non-negative integers and a value sum, return the subset of the given set whose sum is equal to the given sum or None if one doesn't exist
","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given a set[] of non-negative integers and a value sum, return the subset of the given set whose sum is equal to the given sum or None if one doesn't exist




[/Question] [/INST] [Code]

def subsetsum(fullset: list, target_sum: int) -> set:
    def subsetSum_helper(cur_idx: int, fullset: list, target_sum: int, subset: list):
        if target_sum == 0:
            return subset
        if (cur_idx == len(fullset)):
            return None
        excluding = subsetSum_helper(cur_idx + 1, fullset, target_sum, subset)
          
        if excluding is not None:
            return excluding
        elif fullset[cur_idx] <= target_sum:
            subset.append(fullset[cur_idx])
            including = subsetSum_helper(cur_idx + 1, fullset, target_sum - fullset[cur_idx], subset)
            if including!=None:
                return including
            else:
                subset.pop()
            return None
    return subsetSum_helper(0, fullset, target_sum, [])
 

[/Code]
[/STOP] </s>","def subsetsum(fullset: list, target_sum: int) -> set:
    def subsetSum_helper(cur_idx: int, fullset: list, target_sum: int, subset: list):
        if target_sum == 0:
            return subset
        if (cur_idx == len(fullset)):
            return None
        excluding = subsetSum_helper(cur_idx + 1, fullset, target_sum, subset)
          
        if excluding is not None:
            return excluding
        elif fullset[cur_idx] <= target_sum:
            subset.append(fullset[cur_idx])
            including = subsetSum_helper(cur_idx + 1, fullset, target_sum - fullset[cur_idx], subset)
            if including!=None:
                return including
            else:
                subset.pop()
            return None
    return subsetSum_helper(0, fullset, target_sum, [])
","assert set(subsetsum([3, 34, 4, 12, 5, 2], 9)) == {4,5}
assert subsetsum([1, 8, 2, 7, 4], 14) == [8, 2, 4]
assert subsetsum([10, 12, 15, 6, 19], 21) == [15, 6]
assert subsetsum([5, 10, 12, 13, 15, 18], 30) == [12, 18]
assert subsetsum([5, 3, 9, 12, 6, 15], 27) == [12, 15]
assert subsetsum([2, 3, 7, 8, 10], 11) == [3, 8]
assert subsetsum([6, 2, 7, 11, 8], 16) == [6, 2, 8]
assert subsetsum([5, 7, 1, 14, 6], 13) == [7, 6]
assert subsetsum([1], 1) == [1]
assert subsetsum([2, 5, 8, 4], 0) == []
assert subsetsum([], 5) == None
assert subsetsum([-1, -2, -3, -4, -5], -10) == None  # Negative numbers are not allowed according to the question
assert subsetsum([4, 1, 2, 5, 12, 7], 9) == [2, 7]
assert subsetsum([3, 5, 8, 4], 22) == None  # Sum exceeds the sum of all elements"
"Given a positive integer n, write a function to find if it is a power of 2 or not","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given a positive integer n, write a function to find if it is a power of 2 or not

assert isPowerOfTwo(64) == True
assert isPowerOfTwo(65) == False
assert isPowerOfTwo(3) == False
assert isPowerOfTwo(999) == False

[/Question] [/INST] [Code]

import math

def Log2(x):
        if x == 0:
                return False

        return (math.log10(x) /
                        math.log10(2))

def isPowerOfTwo(n: int) -> bool:
        return (math.ceil(Log2(n)) ==
                        math.floor(Log2(n)))
 

[/Code]
[/STOP] </s>","import math

def Log2(x):
        if x == 0:
                return False

        return (math.log10(x) /
                        math.log10(2))

def isPowerOfTwo(n: int) -> bool:
        return (math.ceil(Log2(n)) ==
                        math.floor(Log2(n)))
","assert isPowerOfTwo(31) == False
assert isPowerOfTwo(1) == True
assert isPowerOfTwo(1024) == True
assert isPowerOfTwo(3) == False
assert isPowerOfTwo(64) == True
assert isPowerOfTwo(65) == False
assert isPowerOfTwo(8192) == True
assert isPowerOfTwo(16384) == True
assert isPowerOfTwo(999) == False
assert isPowerOfTwo(65536) == True"
"Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. 



[/Question] [/INST] [Code]


def countDistinctSubarray(arr: list) -> int:
        n = len(arr)
        unst1 = set(arr)
        totalDist = len(unst1)
        count = 0

        for i in range(n):
                unst = set()
                for j in range(i, n):
                        unst.add(arr[j])
                        if len(unst) == totalDist:
                                count += 1

        return count
 

[/Code]
[/STOP] </s>","
def countDistinctSubarray(arr: list) -> int:
        n = len(arr)
        unst1 = set(arr)
        totalDist = len(unst1)
        count = 0

        for i in range(n):
                unst = set()
                for j in range(i, n):
                        unst.add(arr[j])
                        if len(unst) == totalDist:
                                count += 1

        return count
","assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5
assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1
assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3
assert countDistinctSubarray([1]) == 1
assert countDistinctSubarray([]) == 0"
"Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1



[/Question] [/INST] [Code]

def findSubArray(arr: list) -> int:
        n = len(arr)
        sum = 0
        maxsize = -1
        for i in range(0, n-1):
        
                sum = -1 if(arr[i] == 0) else 1
                for j in range(i + 1, n):
                        sum = sum + (-1) if (arr[j] == 0) else sum + 1

                        if (sum == 0 and maxsize < j-i + 1):
                                
                                maxsize = j - i + 1
                                startindex = i
        return maxsize
 

[/Code]
[/STOP] </s>","def findSubArray(arr: list) -> int:
        n = len(arr)
        sum = 0
        maxsize = -1
        for i in range(0, n-1):
        
                sum = -1 if(arr[i] == 0) else 1
                for j in range(i + 1, n):
                        sum = sum + (-1) if (arr[j] == 0) else sum + 1

                        if (sum == 0 and maxsize < j-i + 1):
                                
                                maxsize = j - i + 1
                                startindex = i
        return maxsize
","assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6
assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8
assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8
assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1
assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8
assert findSubArray([]) == -1
assert findSubArray([1, 0]) == 2
assert findSubArray([1, 0, 1]) == 2"
Binary Search is defined as a searching algorithm used in a sorted array by repeatedly dividing the search interval in half. The idea of binary search is to use the information that the array is sorted and reduce the time complexity to O(log N). Write the algorithm for binary search in python,"<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Binary Search is defined as a searching algorithm used in a sorted array by repeatedly dividing the search interval in half. The idea of binary search is to use the information that the array is sorted and reduce the time complexity to O(log N). Write the algorithm for binary search in python

assert binarySearch([15], 5) == -1

[/Question] [/INST] [Code]

def binarySearch(arr: list, x: int) -> int:
        l = 0
        r = len(arr) - 1
        while l <= r:
                mid = l + (r - l) // 2
                if arr[mid] == x:
                        return mid

                elif arr[mid] < x:
                        l = mid + 1

                else:
                        r = mid - 1

        return -1
 

[/Code]
[/STOP] </s>","def binarySearch(arr: list, x: int) -> int:
        l = 0
        r = len(arr) - 1
        while l <= r:
                mid = l + (r - l) // 2
                if arr[mid] == x:
                        return mid

                elif arr[mid] < x:
                        l = mid + 1

                else:
                        r = mid - 1

        return -1
","assert binarySearch([2, 3, 4, 10, 40], 10) == 3
assert binarySearch([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == 0
assert binarySearch([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 4
assert binarySearch([5, 7, 10, 12, 14, 18, 22], 22) == 6
assert binarySearch([11, 22, 33, 44, 55, 66, 77, 88, 99], 100) == -1
assert binarySearch([], 1) == -1
assert binarySearch([1], 1) == 0
assert binarySearch([0, 2, 4, 6, 8, 10, 12, 14, 16, 18], 12) == 6
assert binarySearch([10, 20, 30, 40, 50, 60, 70, 80, 90], 45) == -1
assert binarySearch([-10, -5, 0, 5, 10], 0) == 2
assert binarySearch([-10, -5, 0, 5, 10], -10) == 0
assert binarySearch([-10, -5, 0, 5, 10], 10) == 4
assert binarySearch([15], 5) == -1
assert binarySearch([100, 200, 300, 400, 500], 300) == 2
assert binarySearch([100, 200, 300, 400, 500], 600) == -1"
"Write a function that reverses a string. The input string is given as an array of characters s.

You must do this by modifying the input array in-place with O(1) extra memory.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Write a function that reverses a string. The input string is given as an array of characters s.

You must do this by modifying the input array in-place with O(1) extra memory.

assert reverse_string([""p"", ""y"", ""t"", ""h"", ""o"", ""n""]) == [""n"", ""o"", ""h"", ""t"", ""y"", ""p""]
assert reverse_string([""s"", ""i"", ""n"", ""g"", ""l"", ""e""]) == [""e"", ""l"", ""g"", ""n"", ""i"", ""s""]

[/Question] [/INST] [Code]

def reverse_string(s: list) -> list:
  l = 0
  r = len(s) - 1
  while l < r:
    tmp = s[l]
    s[l] = s[r]
    s[r] = tmp
    l += 1
    r -= 1
  return s
 

[/Code]
[/STOP] </s>","def reverse_string(s: list) -> list:
  l = 0
  r = len(s) - 1
  while l < r:
    tmp = s[l]
    s[l] = s[r]
    s[r] = tmp
    l += 1
    r -= 1
  return s
","assert reverse_string([""a"",""b"",""c"",""d""]) == [""d"", ""c"", ""b"", ""a""]
assert reverse_string([""p"", ""y"", ""t"", ""h"", ""o"", ""n""]) == [""n"", ""o"", ""h"", ""t"", ""y"", ""p""]
assert reverse_string([]) == []
assert reverse_string([""s"", ""i"", ""n"", ""g"", ""l"", ""e""]) == [""e"", ""l"", ""g"", ""n"", ""i"", ""s""]
assert reverse_string([""A""]) == [""A""]
assert reverse_string([""9"", ""8"", ""7"", ""6"", ""5"", ""4"", ""3"", ""2"", ""1""]) == [""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9""]
assert reverse_string([""B"", ""o"", ""b""]) == [""b"", ""o"", ""B""]
assert reverse_string([""r"", ""e"", ""v"", ""e"", ""r"", ""s"", ""e""]) == [""e"", ""s"", ""r"", ""e"", ""v"", ""e"", ""r""]
assert reverse_string([""1"", ""*"", ""2"", ""*"", ""3""]) == [""3"", ""*"", ""2"", ""*"", ""1""]"
Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.,"<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.



[/Question] [/INST] [Code]

def kthLargestSum(arr: list, K: int) -> int:
    N = len(arr)
    result = []
    for i in range(N):
        sum = 0
        for j in range(i, N):
                sum += arr[j]
                result.append(sum)

    result.sort(reverse=True)

    return result[K - 1]
 

[/Code]
[/STOP] </s>","def kthLargestSum(arr: list, K: int) -> int:
    N = len(arr)
    result = []
    for i in range(N):
        sum = 0
        for j in range(i, N):
                sum += arr[j]
                result.append(sum)

    result.sort(reverse=True)

    return result[K - 1]
","assert kthLargestSum([20, -5, -1], 3) == 14
assert kthLargestSum([10, -10, 20, -40], 6) == -10
assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0
assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"
"Word Pattern II: Given a pattern and a string s, return true if s matches the pattern.

A string s matches a pattern if there is some bijective mapping of single characters to non-empty strings such that if each character in pattern is replaced by the string it maps to, then the resulting string is s. A bijective mapping means that no two characters map to the same string, and no character maps to two different strings.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Word Pattern II: Given a pattern and a string s, return true if s matches the pattern.

A string s matches a pattern if there is some bijective mapping of single characters to non-empty strings such that if each character in pattern is replaced by the string it maps to, then the resulting string is s. A bijective mapping means that no two characters map to the same string, and no character maps to two different strings.

assert wordPatternMatch(""aba"", ""eggegg"") == False # 'a' maps to ""egg"", but 'b' cannot be mapped uniquely
assert wordPatternMatch(""abab"", ""xyzxyzabcabc"") == False # cannot match 'a' and 'b' with two different strings each consistent with the pattern
assert wordPatternMatch(""zzz"", ""aaa"") == True # all 'z' map to ""a""

[/Question] [/INST] [Code]

def wordPatternMatch(pattern: str, s: str) -> bool:
    def backtrack(cur: str, pattern: str, mappings: dict):
        if not pattern:
            return not cur
        if pattern[0] in mappings:
            if cur[:len(mappings[pattern[0]])] != mappings[pattern[0]]:
                return False
            return backtrack(cur[len(mappings[pattern[0]]):], pattern[1:], mappings)
        for i in range(len(cur)):
            if cur[:i+1] in mappings.values():
                continue
            mappings[pattern[0]] = cur[:i+1]
            if backtrack(cur[i+1:], pattern[1:], mappings):
                return True
            del mappings[pattern[0]]
        return False
    return backtrack(s, pattern, {}) 

[/Code]
[/STOP] </s>","def wordPatternMatch(pattern: str, s: str) -> bool:
    def backtrack(cur: str, pattern: str, mappings: dict):
        if not pattern:
            return not cur
        if pattern[0] in mappings:
            if cur[:len(mappings[pattern[0]])] != mappings[pattern[0]]:
                return False
            return backtrack(cur[len(mappings[pattern[0]]):], pattern[1:], mappings)
        for i in range(len(cur)):
            if cur[:i+1] in mappings.values():
                continue
            mappings[pattern[0]] = cur[:i+1]
            if backtrack(cur[i+1:], pattern[1:], mappings):
                return True
            del mappings[pattern[0]]
        return False
    return backtrack(s, pattern, {})","assert wordPatternMatch(""aaaa"", ""asdasdasdasd"")==True
assert wordPatternMatch(""abba"", ""dogcatcatdog"") == True
assert wordPatternMatch(""ab"", ""aa"") == False # since 'a' and 'b' cannot map to the same string ""a""
assert wordPatternMatch(""xyz"", ""abcdefghi"") == True # 'x' -> ""a"", 'y' -> ""bc"", 'z' -> ""defghi""
assert wordPatternMatch(""aba"", ""eggegg"") == False # 'a' maps to ""egg"", but 'b' cannot be mapped uniquely
assert wordPatternMatch(""zzz"", ""aaa"") == True # all 'z' map to ""a""
assert wordPatternMatch(""aba"", ""catdogcat"") == True # 'a' -> ""cat"", 'b' -> ""dog""
assert wordPatternMatch(""abab"", ""xyzxyzabcabc"") == False # cannot match 'a' and 'b' with two different strings each consistent with the pattern
assert wordPatternMatch(""abac"", ""xyzxyzxya"") == True # 'a' -> ""xyz"", 'b' -> ""xyz"", 'c' -> ""a""
assert wordPatternMatch(""abcd"", ""xyzy"") == False # pattern too long for the string
assert wordPatternMatch(""aaaaa"", ""oneonetwo"") == False # not enough unique strings to map 'a' five times"
"Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.

Given the integer n, return the number of complete rows of the staircase you will build.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.

Given the integer n, return the number of complete rows of the staircase you will build.

assert arrangeCoins(21) == 6

[/Question] [/INST] [Code]

def arrangeCoins(n: int) -> int:
    return (int)((2 * n + 0.25)**0.5 - 0.5) 

[/Code]
[/STOP] </s>","def arrangeCoins(n: int) -> int:
    return (int)((2 * n + 0.25)**0.5 - 0.5)","assert arrangeCoins(8)==3
assert arrangeCoins(1) == 1
assert arrangeCoins(10) == 4
assert arrangeCoins(0) == 0
assert arrangeCoins(3) == 2
assert arrangeCoins(21) == 6
assert arrangeCoins(15) == 5
assert arrangeCoins(45) == 9
assert arrangeCoins(100) == 13
assert arrangeCoins(28) == 7"
Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n,"<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n

assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2
assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3

[/Question] [/INST] [Code]


def maxDistinctNum(a: list, k: int) -> int:
        s = {}
        n = len(a)
        for i in range(n):
                if a[i] not in s or k == 0:
                        s[a[i]] = s.get(a[i], 0)+1
                else:
                        s[a[i]] = 1
                        k -= 1
        if k != 0:
                return len(s)-k
        else:

                st = set()
                for i in s:
                        st.add(i)
                return len(st)
 

[/Code]
[/STOP] </s>","
def maxDistinctNum(a: list, k: int) -> int:
        s = {}
        n = len(a)
        for i in range(n):
                if a[i] not in s or k == 0:
                        s[a[i]] = s.get(a[i], 0)+1
                else:
                        s[a[i]] = 1
                        k -= 1
        if k != 0:
                return len(s)-k
        else:

                st = set()
                for i in s:
                        st.add(i)
                return len(st)
","assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4
assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2
assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3
assert maxDistinctNum([], 0) == 0
assert maxDistinctNum([9], 1) == 0"
"Minimum Time Visiting All Points: On a 2D plane, there are n points with integer coordinates points[i] = [xi, yi]. Return the minimum time in seconds to visit all the points in the order given by points.

You can move according to these rules:

In 1 second, you can either:
move vertically by one unit,
move horizontally by one unit, or
move diagonally sqrt(2) units (in other words, move one unit vertically then one unit horizontally in 1 second).
You have to visit the points in the same order as they appear in the array.
You are allowed to pass through points that appear later in the order, but these do not count as visits.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Minimum Time Visiting All Points: On a 2D plane, there are n points with integer coordinates points[i] = [xi, yi]. Return the minimum time in seconds to visit all the points in the order given by points.

You can move according to these rules:

In 1 second, you can either:
move vertically by one unit,
move horizontally by one unit, or
move diagonally sqrt(2) units (in other words, move one unit vertically then one unit horizontally in 1 second).
You have to visit the points in the same order as they appear in the array.
You are allowed to pass through points that appear later in the order, but these do not count as visits.



[/Question] [/INST] [Code]

from typing import List
def minTimeToVisitAllPoints(points: List[List[int]]) -> int:
    def rule(A, B):
        return max(abs(A[0] - B[0]), abs(A[1] - B[1]))
    s = 0
    for tup1, tup2 in zip(points[:-1], points[1:]):
        s += rule(tup1, tup2)
    return s 

[/Code]
[/STOP] </s>","from typing import List
def minTimeToVisitAllPoints(points: List[List[int]]) -> int:
    def rule(A, B):
        return max(abs(A[0] - B[0]), abs(A[1] - B[1]))
    s = 0
    for tup1, tup2 in zip(points[:-1], points[1:]):
        s += rule(tup1, tup2)
    return s","assert minTimeToVisitAllPoints([[3,2],[-2,2]])==5
assert minTimeToVisitAllPoints([[0,0],[1,1],[1,2]]) == 2
assert minTimeToVisitAllPoints([[1,1]]) == 0
assert minTimeToVisitAllPoints([[2,3],[4,4],[7,8],[10,12]]) == 10
assert minTimeToVisitAllPoints([[0,0],[2,3],[5,5],[7,2]]) == 9
assert minTimeToVisitAllPoints([[10,10],[10,10]]) == 0
assert minTimeToVisitAllPoints([[3,10],[4,8],[3,4],[5,1],[7,0]]) == 11"
"Coin Change II: You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.

You may assume that you have an infinite number of each kind of coin.

The answer is guaranteed to fit into a signed 32-bit integer.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Coin Change II: You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.

You may assume that you have an infinite number of each kind of coin.

The answer is guaranteed to fit into a signed 32-bit integer.

assert change(0, [1, 2, 5]) == 1  # Edge case: trying to make 0 with any coins should always return 1
assert change(5, [5, 1]) == 2  # Amount can be made with given coins: [5], [1, 1, 1, 1, 1]
assert change(10,[10])==1
assert change(0, []) == 1  # Edge case: trying to make 0 without any coins, should return 1 as there's one way of making 0 with no coins

[/Question] [/INST] [Code]

from typing import List
def change(amount: int, coins: List[int]) -> int:
    def numberOfWays(i: int, amount: int) -> int:
        if amount == 0:
            return 1
        if i == len(coins):
            return 0
        if memo[i][amount] != -1:
            return memo[i][amount]

        if coins[i] > amount:
            memo[i][amount] = numberOfWays(i + 1, amount)
        else:
            memo[i][amount] = numberOfWays(i, amount - coins[i]) + numberOfWays(i + 1, amount)
        
        return memo[i][amount]

    memo = [[-1] * (amount + 1) for _ in range(len(coins))]
    return numberOfWays(0, amount) 

[/Code]
[/STOP] </s>","from typing import List
def change(amount: int, coins: List[int]) -> int:
    def numberOfWays(i: int, amount: int) -> int:
        if amount == 0:
            return 1
        if i == len(coins):
            return 0
        if memo[i][amount] != -1:
            return memo[i][amount]

        if coins[i] > amount:
            memo[i][amount] = numberOfWays(i + 1, amount)
        else:
            memo[i][amount] = numberOfWays(i, amount - coins[i]) + numberOfWays(i + 1, amount)
        
        return memo[i][amount]

    memo = [[-1] * (amount + 1) for _ in range(len(coins))]
    return numberOfWays(0, amount)","assert change(10,[10])==1
assert change(0, [1, 2, 5]) == 1  # Edge case: trying to make 0 with any coins should always return 1
assert change(11, [5]) == 0  # Amount cannot be made up with given coins
assert change(0, []) == 1  # Edge case: trying to make 0 without any coins, should return 1 as there's one way of making 0 with no coins
assert change(5, [5, 1]) == 2  # Amount can be made with given coins: [5], [1, 1, 1, 1, 1]"
"Given a N x N binary matrix (elements in matrix can be either 1 or 0) where each row and column of the matrix is sorted in ascending order, count number of 0s present in it.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given a N x N binary matrix (elements in matrix can be either 1 or 0) where each row and column of the matrix is sorted in ascending order, count number of 0s present in it.

assert countZeroes([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]) == 25
assert countZeroes([[0, 0, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 4
assert countZeroes([[0, 0, 0, 0, 1],[0, 0, 0, 1, 1],[0, 1, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 1, 1]]) == 8

[/Question] [/INST] [Code]


def countZeroes(mat: list) -> int:
        
        N = 5;
        row = N - 1;
        col = 0;
        count = 0;

        while (col < N):
                while (mat[row][col]):
                        if (row < 0):
                                return count;
                        row = row - 1;
                count = count + (row + 1);
                col = col + 1;

        return count
 

[/Code]
[/STOP] </s>","
def countZeroes(mat: list) -> int:
        
        N = 5;
        row = N - 1;
        col = 0;
        count = 0;

        while (col < N):
                while (mat[row][col]):
                        if (row < 0):
                                return count;
                        row = row - 1;
                count = count + (row + 1);
                col = col + 1;

        return count
","assert countZeroes([[0, 0, 0, 0, 1],[0, 0, 0, 1, 1],[0, 1, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 1, 1]]) == 8
assert countZeroes([[0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 1
assert countZeroes([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]) == 25
assert countZeroes([[0, 0, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 4"
"Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

assert permutation_in_string(""abc"", ""ccccbbbbaaaa"") == False
assert permutation_in_string(""kitten"", ""sittingkite"") == False

[/Question] [/INST] [Code]


def permutation_in_string(s1: str, s2: str) -> bool:
  window = len(s1)
  if window > len(s2):
    return False
  freq1 = [0]*26
  freq2 = [0]*26
  for i in range(window):
    freq1[ord(s1[i])-ord('a')] += 1
    freq2[ord(s2[i])-ord('a')] += 1

  matches = 0
  for i in range(26):
    if freq1[i] == freq2[i]:
      matches += 1
  
  for l in range(len(s2) - window):
    if matches == 26:
      return True

    added = ord(s2[l + window]) - ord('a')
    freq2[added] += 1
    if freq1[added] == freq2[added]:
      matches += 1
    elif freq1[added] + 1 == freq2[added]:
      matches -= 1

    removed = ord(s2[l]) - ord('a')
    freq2[removed] -= 1
    if freq1[removed] == freq2[removed]:
      matches += 1
    elif freq1[removed] == freq2[removed] + 1:
      matches -= 1
    
  return matches == 26
 

[/Code]
[/STOP] </s>","
def permutation_in_string(s1: str, s2: str) -> bool:
  window = len(s1)
  if window > len(s2):
    return False
  freq1 = [0]*26
  freq2 = [0]*26
  for i in range(window):
    freq1[ord(s1[i])-ord('a')] += 1
    freq2[ord(s2[i])-ord('a')] += 1

  matches = 0
  for i in range(26):
    if freq1[i] == freq2[i]:
      matches += 1
  
  for l in range(len(s2) - window):
    if matches == 26:
      return True

    added = ord(s2[l + window]) - ord('a')
    freq2[added] += 1
    if freq1[added] == freq2[added]:
      matches += 1
    elif freq1[added] + 1 == freq2[added]:
      matches -= 1

    removed = ord(s2[l]) - ord('a')
    freq2[removed] -= 1
    if freq1[removed] == freq2[removed]:
      matches += 1
    elif freq1[removed] == freq2[removed] + 1:
      matches -= 1
    
  return matches == 26
","assert permutation_in_string(""hello"", ""ooollehhhhh"") == True
assert permutation_in_string(""abc"", ""ccccbbbbaaaa"") == False
assert permutation_in_string(""xyz"", ""zxyopqrstuv"") == True
assert permutation_in_string(""xyz"", ""xzygxzyzxyzk"") == True
assert permutation_in_string(""a"", ""a"") == True
assert permutation_in_string(""adc"", ""dcda"") == True
assert permutation_in_string(""pq"", ""qpqqp"") == True
assert permutation_in_string(""kitten"", ""sittingkite"") == False
assert permutation_in_string(""pq"", ""pqpqr"") == True
assert permutation_in_string(""aba"", ""aabaabaa"") == True
assert permutation_in_string("""", """") == True  # Edge case: both strings are empty
assert permutation_in_string(""longerstring"", ""short"") == False  # s1 is longer than s2
assert permutation_in_string(""a"", ""b"") == False  # Single character, no match
assert permutation_in_string(""aab"", ""baa"") == True  # s1 is a permutation of s2
assert permutation_in_string(""ab"", ""a"") == False  # s2 is shorter than s1
assert permutation_in_string(""ba"", ""eidbaooo"") == True  # Same characters as Example 1 but different permutation
assert permutation_in_string(""eid"", ""eidbaooo"") == True  # s1 is a prefix of s2
assert permutation_in_string(""ooo"", ""eidbaooo"") == True  # s1 is a suffix of s2
assert permutation_in_string(""db"", ""eidbaooo"") == True  # s1 is a permutation within s2
assert permutation_in_string(""eidoo"", ""eidbaooo"") == False  # s1 is longer than any permutation within s2"
Given two arrays return an array with the set intersection of their common elements,"<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given two arrays return an array with the set intersection of their common elements



[/Question] [/INST] [Code]

def array_intersection(arr1: list, arr2: list) -> set:
  set1 = set(arr1)
  ret = set([x for x in arr2 if x in set1])
  return list(ret)
 

[/Code]
[/STOP] </s>","def array_intersection(arr1: list, arr2: list) -> set:
  set1 = set(arr1)
  ret = set([x for x in arr2 if x in set1])
  return list(ret)
","assert set(array_intersection([1,0,2,0,2,0,2,1,1,1], [2,1,0,2,0,2,2,2,1,0])) == {0,1,2}
assert set(array_intersection([5, 6, 7, 8], [8, 9, 10, 11])) == {8}
assert set(array_intersection([10, 20, 30], [40, 50, 60])) == set()
assert set(array_intersection([], [1, 2, 3])) == set()
assert set(array_intersection([-1, -2, -3], [-3, -4, -5, -6])) == {-3}
assert set(array_intersection([9, 8, 7], [7, 8, 9, 10, 11, 12])) == {7, 8, 9}
assert set(array_intersection(['a', 'b', 'c'], ['a', 'd', 'e', 'c'])) == {'a', 'c'}
assert set(array_intersection(['apple', 'banana'], ['banana', 'cherry'])) == {'banana'}
assert set(array_intersection([1.1, 2.2, 3.3], [2.2, 4.4])) == {2.2}
assert set(array_intersection([False, True, False], [True, False, True])) == {True, False}
assert set(array_intersection([(1, 2), (3, 4)], [(3, 4), (5, 6)])) == {(3, 4)}"
"Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. 

assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]
assert countDistinct([1], 1) == [1]

[/Question] [/INST] [Code]

def countDistinct(arr: list, K: int) -> list:
        def countWindowDistinct(win, K):
                dist_count = 0
                for i in range(K):
                        j = 0
                        while j < i:
                                if (win[i] == win[j]):
                                        break
                                else:
                                        j += 1
                        if (j == i):
                                dist_count += 1

                return dist_count
        N = len(arr)
        result = []
        for i in range(N - K + 1):
                result.append(countWindowDistinct(arr[i:K + i], K))
        return result
 

[/Code]
[/STOP] </s>","def countDistinct(arr: list, K: int) -> list:
        def countWindowDistinct(win, K):
                dist_count = 0
                for i in range(K):
                        j = 0
                        while j < i:
                                if (win[i] == win[j]):
                                        break
                                else:
                                        j += 1
                        if (j == i):
                                dist_count += 1

                return dist_count
        N = len(arr)
        result = []
        for i in range(N - K + 1):
                result.append(countWindowDistinct(arr[i:K + i], K))
        return result
","assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]
assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]
assert countDistinct([1], 1) == [1]
assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]
assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]
assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"
"You are given a string s and an integer k. You can choose one of the first k letters of s and append it at the end of the string.

Return the lexicographically smallest string you could have after applying the mentioned step any number of moves.
","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
You are given a string s and an integer k. You can choose one of the first k letters of s and append it at the end of the string.

Return the lexicographically smallest string you could have after applying the mentioned step any number of moves.




[/Question] [/INST] [Code]


def orderlyQueue(s: str, k: int) -> str:
    if k == 1:
        n = len(s)
        ss = s + s
        lex_min_str = s
        for i in range(n):
            lex_min_str = min(lex_min_str, ss[i:i + n])
        return lex_min_str
    
    return """".join(sorted(s))
 

[/Code]
[/STOP] </s>","
def orderlyQueue(s: str, k: int) -> str:
    if k == 1:
        n = len(s)
        ss = s + s
        lex_min_str = s
        for i in range(n):
            lex_min_str = min(lex_min_str, ss[i:i + n])
        return lex_min_str
    
    return """".join(sorted(s))
","assert orderlyQueue(""abcd"", 1) == ""abcd""
assert orderlyQueue(""hello"", 2) == ""ehllo""
assert orderlyQueue(""programming"", 1) == ""ammingprogr""
assert orderlyQueue(""rotator"", 1) == ""atorrot""
assert orderlyQueue(""zxyabc"", 5) == ""abcxyz""
assert orderlyQueue(""xy"", 2) == ""xy"""
"Majority Element: Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Majority Element: Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.



[/Question] [/INST] [Code]

def majorityElement(nums: list, lo: int = 0, hi: NoneType = None) -> int:
    def majority_element_rec(lo, hi):
        if lo == hi:
            return nums[lo]
        mid = (hi-lo)//2 + lo
        left = majority_element_rec(lo, mid)
        right = majority_element_rec(mid+1, hi)
        if left == right:
            return left
        left_count = sum(1 for i in range(lo, hi+1) if nums[i] == left)
        right_count = sum(1 for i in range(lo, hi+1) if nums[i] == right)

        return left if left_count > right_count else right

    return majority_element_rec(0, len(nums)-1)
 

[/Code]
[/STOP] </s>","def majorityElement(nums: list, lo: int = 0, hi: NoneType = None) -> int:
    def majority_element_rec(lo, hi):
        if lo == hi:
            return nums[lo]
        mid = (hi-lo)//2 + lo
        left = majority_element_rec(lo, mid)
        right = majority_element_rec(mid+1, hi)
        if left == right:
            return left
        left_count = sum(1 for i in range(lo, hi+1) if nums[i] == left)
        right_count = sum(1 for i in range(lo, hi+1) if nums[i] == right)

        return left if left_count > right_count else right

    return majority_element_rec(0, len(nums)-1)
",
"Word Pattern: Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Word Pattern: Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.

assert wordPattern(""abb"", ""dog dog dog"") == False  # Same word for different pattern characters
assert wordPattern(""aaaa"", ""dog dog dog cat"") == False
assert wordPattern(""xyx"", ""apple banana apple"") == True
assert wordPattern(""ab"", """") == False  # Empty string

[/Question] [/INST] [Code]

def wordPattern(pattern: str, s: str) -> bool:
    map_char = {}
    map_word = {}
    
    words = s.split(' ')
    if len(words) != len(pattern):
        return False
    
    for c, w in zip(pattern, words):
        if c not in map_char:
            if w in map_word:
                return False
            else:
                map_char[c] = w
                map_word[w] = c
        else:
            if map_char[c] != w:
                return False
    return True 

[/Code]
[/STOP] </s>","def wordPattern(pattern: str, s: str) -> bool:
    map_char = {}
    map_word = {}
    
    words = s.split(' ')
    if len(words) != len(pattern):
        return False
    
    for c, w in zip(pattern, words):
        if c not in map_char:
            if w in map_word:
                return False
            else:
                map_char[c] = w
                map_word[w] = c
        else:
            if map_char[c] != w:
                return False
    return True","assert wordPattern(""abba"", ""dog cat cat dog"")==True
assert wordPattern(""aaaa"", ""dog dog dog dog"") == True
assert wordPattern(""xyz"", ""apple banana apple"") == False
assert wordPattern(""xyx"", ""apple banana apple"") == True
assert wordPattern(""abab"", ""dog cat dog cat"") == True
assert wordPattern(""aaaa"", ""dog dog dog cat"") == False
assert wordPattern(""aabb"", ""dog dog cat cat"") == True
assert wordPattern(""abc"", ""dog"") == False  # Not enough words
assert wordPattern("""", ""dog cat"") == False  # Empty pattern
assert wordPattern(""a"", ""dog cat dog cat"") == False  # Not enough pattern characters
assert wordPattern(""ab"", """") == False  # Empty string
assert wordPattern(""abb"", ""dog dog dog"") == False  # Same word for different pattern characters
assert wordPattern(""abba"", ""dog cat cat"") == False  # Not enough words for the pattern
assert wordPattern(""abba"", ""dog cat cat dog fish"") == False  # Extra words beyond the pattern length"
"Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:

an array tree where tree = [treer, treec] is the position of the tree in the garden,
an array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,
and an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.
The squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.

Return the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.

The distance is the number of moves.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:

an array tree where tree = [treer, treec] is the position of the tree in the garden,
an array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,
and an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.
The squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.

Return the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.

The distance is the number of moves.

assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2
assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8
assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3

[/Question] [/INST] [Code]

from typing import List
def minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:
        firstPath = float('-inf')
        total_dist = 0
        for nut in nuts:
            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])
            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])
            if (dist_to_Tr-dist_to_Sq)>firstPath:
                firstPath = dist_to_Tr-dist_to_Sq
            total_dist+=2*dist_to_Tr
        total_dist = total_dist - firstPath
        return total_dist 

[/Code]
[/STOP] </s>","from typing import List
def minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:
        firstPath = float('-inf')
        total_dist = 0
        for nut in nuts:
            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])
            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])
            if (dist_to_Tr-dist_to_Sq)>firstPath:
                firstPath = dist_to_Tr-dist_to_Sq
            total_dist+=2*dist_to_Tr
        total_dist = total_dist - firstPath
        return total_dist","assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3
assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18
assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14
assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2
assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"
Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray’s length with the sum of the elements divisible by the given value k.,"<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray’s length with the sum of the elements divisible by the given value k.

assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5
assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5

[/Question] [/INST] [Code]

def longestSubarrWthSumDivByK(arr: list, k: int) -> int:
        N = len(arr)
        maxl = 0
        for i in range(N):
                sum1 = 0
                for j in range(i, N):
                        sum1 += arr[j]
                        if sum1 % k == 0:
                                maxl = max(maxl, j - i + 1)
        return maxl
 

[/Code]
[/STOP] </s>","def longestSubarrWthSumDivByK(arr: list, k: int) -> int:
        N = len(arr)
        maxl = 0
        for i in range(N):
                sum1 = 0
                for j in range(i, N):
                        sum1 += arr[j]
                        if sum1 % k == 0:
                                maxl = max(maxl, j - i + 1)
        return maxl
","assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4
assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5
assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6
assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5
assert longestSubarrWthSumDivByK([], 5) == 0
assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"
"Best Time to Buy and Sell Stock II: You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Best Time to Buy and Sell Stock II: You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.

assert maxProfit([1,2,100,2,1]) == 99
assert maxProfit([1,2,3,4,5])==4

[/Question] [/INST] [Code]

from typing import List
def maxProfit(prices: List[int]) -> int:
    cur_hold, cur_not_hold = -float('inf'), 0
    
    for stock_price in prices:
        
        prev_hold, prev_not_hold = cur_hold, cur_not_hold
        cur_hold = max( prev_hold, prev_not_hold - stock_price )
        cur_not_hold = max( prev_not_hold, prev_hold + stock_price )
    return cur_not_hold 

[/Code]
[/STOP] </s>","from typing import List
def maxProfit(prices: List[int]) -> int:
    cur_hold, cur_not_hold = -float('inf'), 0
    
    for stock_price in prices:
        
        prev_hold, prev_not_hold = cur_hold, cur_not_hold
        cur_hold = max( prev_hold, prev_not_hold - stock_price )
        cur_not_hold = max( prev_not_hold, prev_hold + stock_price )
    return cur_not_hold","assert maxProfit([1,2,3,4,5])==4
assert maxProfit([1,2,100,2,1]) == 99"
"Projection Area of 3D Shapes: You are given an n x n grid where we place some 1 x 1 x 1 cubes that are axis-aligned with the x, y, and z axes.

Each value v = grid[i][j] represents a tower of v cubes placed on top of the cell (i, j).

We view the projection of these cubes onto the xy, yz, and zx planes.

A projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. We are viewing the ""shadow"" when looking at the cubes from the top, the front, and the side.

Return the total area of all three projections.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Projection Area of 3D Shapes: You are given an n x n grid where we place some 1 x 1 x 1 cubes that are axis-aligned with the x, y, and z axes.

Each value v = grid[i][j] represents a tower of v cubes placed on top of the cell (i, j).

We view the projection of these cubes onto the xy, yz, and zx planes.

A projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. We are viewing the ""shadow"" when looking at the cubes from the top, the front, and the side.

Return the total area of all three projections.

assert projectionArea([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == 0
assert projectionArea([[1, 1, 1], [1, 0, 1], [1, 1, 1]]) == 14
assert projectionArea([[2]])==5
assert projectionArea([[2, 3], [2, 4]]) == 17

[/Question] [/INST] [Code]

def projectionArea(grid: list) -> int:
    N = len(grid)
    ans = 0
    for i in range(N):
        best_row = 0
        best_col = 0 
        for j in range(N):
            if grid[i][j]: ans += 1
            best_row = max(best_row, grid[i][j])
            best_col = max(best_col, grid[j][i])

        ans += best_row + best_col

    return ans
 

[/Code]
[/STOP] </s>","def projectionArea(grid: list) -> int:
    N = len(grid)
    ans = 0
    for i in range(N):
        best_row = 0
        best_col = 0 
        for j in range(N):
            if grid[i][j]: ans += 1
            best_row = max(best_row, grid[i][j])
            best_col = max(best_col, grid[j][i])

        ans += best_row + best_col

    return ans
","assert projectionArea([[2]])==5
assert projectionArea([[1, 1, 1], [1, 0, 1], [1, 1, 1]]) == 14
assert projectionArea([[2, 3], [2, 4]]) == 17
assert projectionArea([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == 0"
"Backspace String Compare: Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.

Note that after backspacing an empty text, the text will continue empty.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Backspace String Compare: Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.

Note that after backspacing an empty text, the text will continue empty.

assert backspaceCompare(""a"", ""a#"") == False
assert backspaceCompare(""ab##"", ""c#d#"")==True
assert backspaceCompare(""a###b"", ""b"") == True
assert backspaceCompare("""", ""b#"") == True

[/Question] [/INST] [Code]

def backspaceCompare(S: str, T: str) -> bool:
    def build(S):
        ans = []
        for c in S:
            if c != '#':
                ans.append(c)
            elif ans:
                ans.pop()
        return """".join(ans)
    return build(S) == build(T)
 

[/Code]
[/STOP] </s>","def backspaceCompare(S: str, T: str) -> bool:
    def build(S):
        ans = []
        for c in S:
            if c != '#':
                ans.append(c)
            elif ans:
                ans.pop()
        return """".join(ans)
    return build(S) == build(T)
","assert backspaceCompare(""ab##"", ""c#d#"")==True
assert backspaceCompare(""a##c"", ""#a#c"") == True
assert backspaceCompare(""abc#d"", ""acc#c"") == False
assert backspaceCompare(""p##qr"", ""p#q#r"") == False
assert backspaceCompare(""####"", ""b#"") == True
assert backspaceCompare("""", ""b#"") == True
assert backspaceCompare(""a###b"", ""b"") == True
assert backspaceCompare(""a"", ""a#"") == False"
"Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.

assert swapBits(0, 2, 6, 1) == 0

[/Question] [/INST] [Code]

def swapBits(x: int, p1: int, p2: int, n: int) -> int:
        set1 = (x >> p1) & ((1<< n) - 1)
        set2 = (x >> p2) & ((1 << n) - 1)

        xor = (set1 ^ set2)
        xor = (xor << p1) | (xor << p2)
        result = x ^ xor

        return result
 

[/Code]
[/STOP] </s>","def swapBits(x: int, p1: int, p2: int, n: int) -> int:
        set1 = (x >> p1) & ((1<< n) - 1)
        set2 = (x >> p2) & ((1 << n) - 1)

        xor = (set1 ^ set2)
        xor = (xor << p1) | (xor << p2)
        result = x ^ xor

        return result
","assert swapBits(47, 1, 5, 3) == 227
assert swapBits(28, 0, 3, 2) == 7
assert swapBits(0, 2, 6, 1) == 0"
"You are given n activities with their start and finish times. Select the maximum number of activities that can be performed by a single person and return their indexes. Assume that a person can only work on a single activity at a time. 
","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
You are given n activities with their start and finish times. Select the maximum number of activities that can be performed by a single person and return their indexes. Assume that a person can only work on a single activity at a time. 


assert MaxActivities([1], [2]) == [0]

[/Question] [/INST] [Code]

import numpy as np
def MaxActivities(s: list, f: list) -> list:
    indices = np.argsort(f)
    [s[i] for i in indices]
    [f[i] for i in indices]
    result = []
    n = len(f)
    i = 0
    result.append(i)
    for j in range(1, n):
        if s[j] >= f[i]:
            result.append(j)
            i = j
    return result
 

[/Code]
[/STOP] </s>","import numpy as np
def MaxActivities(s: list, f: list) -> list:
    indices = np.argsort(f)
    [s[i] for i in indices]
    [f[i] for i in indices]
    result = []
    n = len(f)
    i = 0
    result.append(i)
    for j in range(1, n):
        if s[j] >= f[i]:
            result.append(j)
            i = j
    return result
","assert MaxActivities([2, 4, 5, 6, 7, 8], [3, 5, 6, 7, 9, 10]) == [0, 1, 2, 3, 4]
assert MaxActivities([1, 3, 0, 5, 8, 5], [2, 4, 6, 7, 9, 9]) == [0, 1, 3, 4]
assert MaxActivities([1], [2]) == [0]"
"N-th Tribonacci Number: The Tribonacci sequence Tn is defined as follows: 

T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.

Given n, return the value of Tn.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
N-th Tribonacci Number: The Tribonacci sequence Tn is defined as follows: 

T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.

Given n, return the value of Tn.

assert tribonacci(30) == 29249425
assert tribonacci(0) == 0
assert tribonacci(7) == 24

[/Question] [/INST] [Code]

def tribonacci(n: int) -> int:
    dp = {0: 0, 1: 1, 2: 1}
    def dfs(i):
        if i in dp:
            return dp[i]
        dp[i] = dfs(i - 1) + dfs(i - 2) + dfs(i - 3)
        return dp[i]
    
    return dfs(n) 

[/Code]
[/STOP] </s>","def tribonacci(n: int) -> int:
    dp = {0: 0, 1: 1, 2: 1}
    def dfs(i):
        if i in dp:
            return dp[i]
        dp[i] = dfs(i - 1) + dfs(i - 2) + dfs(i - 3)
        return dp[i]
    
    return dfs(n)","assert tribonacci(25)==1389537
assert tribonacci(0) == 0
assert tribonacci(1) == 1
assert tribonacci(2) == 1
assert tribonacci(3) == 2
assert tribonacci(5) == 7
assert tribonacci(7) == 24
assert tribonacci(10) == 149
assert tribonacci(15) == 3136
assert tribonacci(30) == 29249425"
"There are N Mice and N holes are placed in a straight line. Each hole can accommodate only 1 mouse. A mouse can stay at his position, move one step right from x to x + 1, or move one step left from x to x -1. Any of these moves consumes 1 minute. Assign mice to holes so that the time when the last mouse gets inside a hole is minimized.
You are given a list of mice and hole positions as integer scalers.
","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
There are N Mice and N holes are placed in a straight line. Each hole can accommodate only 1 mouse. A mouse can stay at his position, move one step right from x to x + 1, or move one step left from x to x -1. Any of these moves consumes 1 minute. Assign mice to holes so that the time when the last mouse gets inside a hole is minimized.
You are given a list of mice and hole positions as integer scalers.


assert assignHole([1,1 ,1, 1, 1, 1, 1, 1, 1, 1], [2,2,2,2,2,2 ,2, 2, 2, 2]) == 1 # Edge case with multiple mice and holes at the same positions
assert assignHole([1, 2], [3]) == -1  # Edge case with non-equal amount of mice and holes
assert assignHole([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 1 # Edge case with incremental positions

[/Question] [/INST] [Code]

def assignHole(mices: list, holes: list) -> int:
    for i,j in zip(mices,holes):
        if i<0 or j<0:
            return -1
    if (len(mices) != len(holes)):
        return -1
    mices.sort()
    holes.sort()
    Max = 0
     
    for i in range(len(holes)):
        if (Max < abs(mices[i] - holes[i])):
            Max = abs(mices[i] - holes[i])
     
    return Max
 

[/Code]
[/STOP] </s>","def assignHole(mices: list, holes: list) -> int:
    for i,j in zip(mices,holes):
        if i<0 or j<0:
            return -1
    if (len(mices) != len(holes)):
        return -1
    mices.sort()
    holes.sort()
    Max = 0
     
    for i in range(len(holes)):
        if (Max < abs(mices[i] - holes[i])):
            Max = abs(mices[i] - holes[i])
     
    return Max
","assert assignHole([1, 2, 3, 4], [4, 3, 2, 1]) == 0
assert assignHole([10, 20, 30, 40], [15, 25, 35, 45]) == 5
assert assignHole([1, 4, 9, 15], [10, 13, 7, 20]) == 6
assert assignHole([0], [0]) == 0
assert assignHole([1, 2], [3]) == -1  # Edge case with non-equal amount of mice and holes
assert assignHole([5, 5, 5], [5, 5, 5]) == 0  # Edge case with all mice and holes at the same position
assert assignHole([10, 10, 10, 10], [10, 9, 8, 7]) == 3  # Edge case with multiple mice starting at the same position
assert assignHole([1,1 ,1, 1, 1, 1, 1, 1, 1, 1], [2,2,2,2,2,2 ,2, 2, 2, 2]) == 1 # Edge case with multiple mice and holes at the same positions
assert assignHole([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 1 # Edge case with incremental positions"
"Given an integer matrix of odd dimensions (like 3 * 3 or 5 * 5), find the sum of the middle row & column elements. Return the values in an array, with the first element being the row sum and the second element being the column sum","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given an integer matrix of odd dimensions (like 3 * 3 or 5 * 5), find the sum of the middle row & column elements. Return the values in an array, with the first element being the row sum and the second element being the column sum



[/Question] [/INST] [Code]

def middlesum(mat: list) -> list:

        row_sum = 0
        col_sum = 0
        n = len(mat)

        for i in range(n):
                row_sum += mat[n // 2][i]
        
        for i in range(n):
                col_sum += mat[i][n // 2]

        mid_sum = [row_sum, col_sum]
        return mid_sum
        
        
 

[/Code]
[/STOP] </s>","def middlesum(mat: list) -> list:

        row_sum = 0
        col_sum = 0
        n = len(mat)

        for i in range(n):
                row_sum += mat[n // 2][i]
        
        for i in range(n):
                col_sum += mat[i][n // 2]

        mid_sum = [row_sum, col_sum]
        return mid_sum
        
        
","assert middlesum([[2, 5, 7],[3, 7, 2],[5, 6, 9]]) == [12, 18]
assert middlesum([[1, 3, 5, 6, 7], [3, 5, 3, 2, 1], [1, 2, 3, 4, 5], [7, 9, 2, 1, 6], [9, 1, 5, 3, 2]]) == [15, 18]
assert middlesum([[4]]) == [4, 4]
assert middlesum([[8, 2, 4], [1, 5, 9], [6, 3, 7]]) == [15, 10]
assert middlesum([[3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3]]) == [15, 15]"
"Get Maximum in Generated Array: You are given an integer n. A 0-indexed integer array nums of length n + 1 is generated in the following way:

nums[0] = 0
nums[1] = 1
nums[2 * i] = nums[i] when 2 <= 2 * i <= n
nums[2 * i + 1] = nums[i] + nums[i + 1] when 2 <= 2 * i + 1 <= n
Return the maximum integer in the array nums​​​.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Get Maximum in Generated Array: You are given an integer n. A 0-indexed integer array nums of length n + 1 is generated in the following way:

nums[0] = 0
nums[1] = 1
nums[2 * i] = nums[i] when 2 <= 2 * i <= n
nums[2 * i + 1] = nums[i] + nums[i + 1] when 2 <= 2 * i + 1 <= n
Return the maximum integer in the array nums​​​.



[/Question] [/INST] [Code]

def getMaximumGenerated(n: int) -> int:
    if n<2:
        return n
    nums=[0]*(n+1)
    nums[0]=0
    nums[1]=1
    for i in range(2,n+1):
        if i%2==0:
            nums[i]=nums[i//2]
        else:
            nums[i]=nums[i//2]+nums[i//2+1]
    return max(nums) 

[/Code]
[/STOP] </s>","def getMaximumGenerated(n: int) -> int:
    if n<2:
        return n
    nums=[0]*(n+1)
    nums[0]=0
    nums[1]=1
    for i in range(2,n+1):
        if i%2==0:
            nums[i]=nums[i//2]
        else:
            nums[i]=nums[i//2]+nums[i//2+1]
    return max(nums)","assert getMaximumGenerated(2)==1
assert getMaximumGenerated(4) == 2
assert getMaximumGenerated(5) == 3
assert getMaximumGenerated(8) == 3
assert getMaximumGenerated(15) == 5
assert getMaximumGenerated(0) == 0
assert getMaximumGenerated(1) == 1"
"Given an integer n, return the number of strings of length n that consist only of vowels (a, e, i, o, u) and are lexicographically sorted.

A string s is lexicographically sorted if for all valid i, s[i] is the same as or comes before s[i+1] in the alphabet.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given an integer n, return the number of strings of length n that consist only of vowels (a, e, i, o, u) and are lexicographically sorted.

A string s is lexicographically sorted if for all valid i, s[i] is the same as or comes before s[i+1] in the alphabet.

assert countVowelStrings(15) == 3876
assert countVowelStrings(5) == 126
assert countVowelStrings(10) == 1001
assert countVowelStrings(3) == 35

[/Question] [/INST] [Code]

def helper(n, letter_idx):
  letters = [""a"",""e"",""i"",""o"",""u""]
  dynamic = {
      'a1' : 5,
      'e1' : 4,
      'i1' : 3,
      'o1' : 2,
      'u1' : 1
  }
  ret = 0
  key = letters[letter_idx] + str(n)
  if key in dynamic.keys():
    return dynamic[key]
  else:
    for i in range(letter_idx, len(letters)):
      ret += helper(n-1, i)
    dynamic[key] = ret
  return ret
  

def countVowelStrings(n: int) -> int:
  return helper(n, 0)
 

[/Code]
[/STOP] </s>","def helper(n, letter_idx):
  letters = [""a"",""e"",""i"",""o"",""u""]
  dynamic = {
      'a1' : 5,
      'e1' : 4,
      'i1' : 3,
      'o1' : 2,
      'u1' : 1
  }
  ret = 0
  key = letters[letter_idx] + str(n)
  if key in dynamic.keys():
    return dynamic[key]
  else:
    for i in range(letter_idx, len(letters)):
      ret += helper(n-1, i)
    dynamic[key] = ret
  return ret
  

def countVowelStrings(n: int) -> int:
  return helper(n, 0)
","assert countVowelStrings(3) == 35
assert countVowelStrings(4) == 70
assert countVowelStrings(5) == 126
assert countVowelStrings(6) == 210
assert countVowelStrings(7) == 330
assert countVowelStrings(10) == 1001
assert countVowelStrings(15) == 3876"
"Given two arrays that have the same values but in a different order and having no duplicate elements in it, we need to make a second array the same as a first array using the minimum number of swaps. ","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given two arrays that have the same values but in a different order and having no duplicate elements in it, we need to make a second array the same as a first array using the minimum number of swaps. 

assert minSwapToMakeArraySame([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == 2
assert minSwapToMakeArraySame([3, 6, 4, 8], [4, 6, 8, 3]) == 2

[/Question] [/INST] [Code]

def minSwapsToSort(arr):
        n = len(arr)
        arrPos = [[0 for x in range(2)] 
                                for y in range(n)] 
        
        for i in range(n):         
                arrPos[i][0] = arr[i] 
                arrPos[i][1] = i 
        arrPos.sort() 
        vis = [False] * (n) 
        ans = 0

        for i in range(n): 
                if (vis[i] or arrPos[i][1] == i): 
                        continue
                cycle_size = 0
                j = i 
                
                while (not vis[j]):                 
                        vis[j] = 1
                        j = arrPos[j][1] 
                        cycle_size+= 1
                ans += (cycle_size - 1) 

        return ans 

def minSwapToMakeArraySame(a: list, b: list) -> int:
        n = len(a) 
        mp = {} 
        for i in range(n): 
                mp[b[i]] = i 
        for i in range(n): 
                b[i] = mp[a[i]] 
        return minSwapsToSort(b) 
 

[/Code]
[/STOP] </s>","def minSwapsToSort(arr):
        n = len(arr)
        arrPos = [[0 for x in range(2)] 
                                for y in range(n)] 
        
        for i in range(n):         
                arrPos[i][0] = arr[i] 
                arrPos[i][1] = i 
        arrPos.sort() 
        vis = [False] * (n) 
        ans = 0

        for i in range(n): 
                if (vis[i] or arrPos[i][1] == i): 
                        continue
                cycle_size = 0
                j = i 
                
                while (not vis[j]):                 
                        vis[j] = 1
                        j = arrPos[j][1] 
                        cycle_size+= 1
                ans += (cycle_size - 1) 

        return ans 

def minSwapToMakeArraySame(a: list, b: list) -> int:
        n = len(a) 
        mp = {} 
        for i in range(n): 
                mp[b[i]] = i 
        for i in range(n): 
                b[i] = mp[a[i]] 
        return minSwapsToSort(b) 
","assert minSwapToMakeArraySame([3, 6, 4, 8], [4, 6, 8, 3]) == 2
assert minSwapToMakeArraySame([1, 5, 3, 7, 2], [2, 3, 5, 1, 7]) == 3
assert minSwapToMakeArraySame([12, 14, 11, 15], [14, 12, 15, 11]) == 2
assert minSwapToMakeArraySame([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == 2"
"Repeated Substring Pattern: Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Repeated Substring Pattern: Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.

assert repeatedSubstringPattern(""abab"")==True
assert repeatedSubstringPattern(""xyzxyzxyz"") == True
assert repeatedSubstringPattern(""abbaabba"") == True

[/Question] [/INST] [Code]

def repeatedSubstringPattern(s: str) -> bool:
    n = len(s)
    for i in range(1, n // 2 + 1):
        if n % i == 0:
            pattern = s[:i] * (n // i)
            if s == pattern:
                return True
    return False 

[/Code]
[/STOP] </s>","def repeatedSubstringPattern(s: str) -> bool:
    n = len(s)
    for i in range(1, n // 2 + 1):
        if n % i == 0:
            pattern = s[:i] * (n // i)
            if s == pattern:
                return True
    return False","assert repeatedSubstringPattern(""abab"")==True
assert repeatedSubstringPattern(""aaaa"") == True
assert repeatedSubstringPattern(""abac"") == False
assert repeatedSubstringPattern(""ababab"") == True
assert repeatedSubstringPattern(""xyzxyzxyz"") == True
assert repeatedSubstringPattern(""aaabaaa"") == False
assert repeatedSubstringPattern(""abababab"") == True
assert repeatedSubstringPattern(""abcabcab"") == False
assert repeatedSubstringPattern(""abbaabba"") == True
assert repeatedSubstringPattern("""") == False
assert repeatedSubstringPattern(""a"") == False
assert repeatedSubstringPattern(""abacababacab"") == True"
"Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.

assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6

[/Question] [/INST] [Code]

def max_distance(arr: list) -> int:
        n = len(arr) 
        max_d = -1
        for i in range(n - 1): 
                for j in range(i + 1, n): 
                        if arr[i] == arr[j]: 
                                temp = abs(j - i) 
                                max_d = max(max_d, temp) 
        return max_d 
 

[/Code]
[/STOP] </s>","def max_distance(arr: list) -> int:
        n = len(arr) 
        max_d = -1
        for i in range(n - 1): 
                for j in range(i + 1, n): 
                        if arr[i] == arr[j]: 
                                temp = abs(j - i) 
                                max_d = max(max_d, temp) 
        return max_d 
","assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5
assert max_distance([1, 1, 1, 1, 1]) == 4
assert max_distance([8, 8, 7, 8, 7]) == 3
assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6
assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6
assert max_distance([99]) == -1
assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"
"Valid Parentheses: Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Valid Parentheses: Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.



[/Question] [/INST] [Code]

def isValid(s: str) -> bool:
    stack = []
    mapping = {"")"": ""("", ""}"": ""{"", ""]"": ""[""}
    for char in s:
        if char in mapping:
            top_element = stack.pop() if stack else '#'
            if mapping[char] != top_element:
                return False
        else:
            stack.append(char)
    return not stack
 

[/Code]
[/STOP] </s>","def isValid(s: str) -> bool:
    stack = []
    mapping = {"")"": ""("", ""}"": ""{"", ""]"": ""[""}
    for char in s:
        if char in mapping:
            top_element = stack.pop() if stack else '#'
            if mapping[char] != top_element:
                return False
        else:
            stack.append(char)
    return not stack
","assert isValid(""(]"")==False
assert isValid(""([)]"") == False
assert isValid(""{[]}"") == True
assert isValid(""((()))"") == True
assert isValid("")"") == False
assert isValid(""(}"") == False
assert isValid(""({})[]"") == True
assert isValid("""") == True
assert isValid(""([]{})"") == True
assert isValid(""[({(())}[()])]"") == True
assert isValid(""(((((({{{{{{{[[[[[[]]]]]]}}}}}}}))))))"") == True
assert isValid(""{[}]"") == False
assert isValid(""([{])"") == False
assert isValid(""(["") == False
assert isValid(""([]"") == False
assert isValid(""[])"") == False
assert isValid(""{"") == False
assert isValid(""{}}"") == False"
"Given an array of elements, sort the array in decreasing order using min heap. ","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given an array of elements, sort the array in decreasing order using min heap. 

assert heapSort([]) == []  # Empty list should return an empty list
assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]

[/Question] [/INST] [Code]

def heapSort(arr: list) -> list:
        def heapify(arr, n, i):
                smallest = i 
                l = 2 * i + 1 
                r = 2 * i + 2

                if l < n and arr[l] < arr[smallest]: 
                        smallest = l 

                if r < n and arr[r] < arr[smallest]: 
                        smallest = r 

                if smallest != i: 
                        (arr[i], 
                        arr[smallest]) = (arr[smallest],
                                                        arr[i])

                        heapify(arr, n, smallest)
         
        n = len(arr)
        for i in range(int(n / 2) - 1, -1, -1):
                heapify(arr, n, i) 

        for i in range(n-1, -1, -1):
                
                arr[0], arr[i] = arr[i], arr[0]

                heapify(arr, i, 0)

        return arr
 

[/Code]
[/STOP] </s>","def heapSort(arr: list) -> list:
        def heapify(arr, n, i):
                smallest = i 
                l = 2 * i + 1 
                r = 2 * i + 2

                if l < n and arr[l] < arr[smallest]: 
                        smallest = l 

                if r < n and arr[r] < arr[smallest]: 
                        smallest = r 

                if smallest != i: 
                        (arr[i], 
                        arr[smallest]) = (arr[smallest],
                                                        arr[i])

                        heapify(arr, n, smallest)
         
        n = len(arr)
        for i in range(int(n / 2) - 1, -1, -1):
                heapify(arr, n, i) 

        for i in range(n-1, -1, -1):
                
                arr[0], arr[i] = arr[i], arr[0]

                heapify(arr, i, 0)

        return arr
","assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]
assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]
assert heapSort([0]) == [0]
assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]
assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]
assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]
assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]
assert heapSort([99]) == [99]
assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]
assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]
assert heapSort([]) == []  # Empty list should return an empty list
assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"
"You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.

Reconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).
","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.

Reconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).


assert reconstructQueue([[12,0], [6,3], [4,4], [9,2], [7,1]]) == [[12, 0], [7, 1], [9, 2], [6, 3], [4, 4]]
assert reconstructQueue([[8,1],[5,0],[6,1],[5,2],[4,4],[7,1]]) == [[5, 0], [8, 1], [5, 2], [6, 1], [4, 4], [7, 1]]
assert reconstructQueue([[3,0], [3,2], [3,1]]) == [[3, 0], [3, 1], [3, 2]]
assert reconstructQueue([[2,0], [1,1]]) == [[2, 0], [1, 1]]

[/Question] [/INST] [Code]


def reconstructQueue(people: list) -> list:
    output=[] 
    people.sort(key=lambda x: (-x[0], x[1]))                
    for a in people:
        output.insert(a[1], a)
    
    return output
 

[/Code]
[/STOP] </s>","
def reconstructQueue(people: list) -> list:
    output=[] 
    people.sort(key=lambda x: (-x[0], x[1]))                
    for a in people:
        output.insert(a[1], a)
    
    return output
","assert reconstructQueue([[8,1],[5,0],[6,1],[5,2],[4,4],[7,1]]) == [[5, 0], [8, 1], [5, 2], [6, 1], [4, 4], [7, 1]]
assert reconstructQueue([[12,0], [6,3], [4,4], [9,2], [7,1]]) == [[12, 0], [7, 1], [9, 2], [6, 3], [4, 4]]
assert reconstructQueue([[2,0], [1,1]]) == [[2, 0], [1, 1]]
assert reconstructQueue([[3,0], [3,2], [3,1]]) == [[3, 0], [3, 1], [3, 2]]"
"We are given an array of n distinct numbers. The task is to sort all even-placed numbers in increasing and odd-placed numbers in decreasing order. The modified array should contain all sorted even-placed numbers followed by reverse sorted odd-placed numbers. 
Note that the first element is considered as even placed because of its index 0. ","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
We are given an array of n distinct numbers. The task is to sort all even-placed numbers in increasing and odd-placed numbers in decreasing order. The modified array should contain all sorted even-placed numbers followed by reverse sorted odd-placed numbers. 
Note that the first element is considered as even placed because of its index 0. 

assert bitonicGenerator([]) == []
assert bitonicGenerator([7, 4, 1, 9]) == [1, 7, 9, 4]
assert bitonicGenerator([0, 1, 2, 3, 4, 5, 6, 7]) == [0, 2, 4, 6, 7, 5, 3, 1]
assert bitonicGenerator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 3, 5, 7, 9, 11, 10, 8, 6, 4, 2]

[/Question] [/INST] [Code]

def bitonicGenerator(arr: list) -> list:
        n = len(arr) 
        evenArr = [] 
        oddArr = [] 
        for i in range(n): 
                if ((i % 2) == 0): 
                        evenArr.append(arr[i]) 
                else: 
                        oddArr.append(arr[i]) 
        evenArr = sorted(evenArr) 
        oddArr = sorted(oddArr) 
        oddArr = oddArr[::-1] 

        i = 0
        for j in range(len(evenArr)): 
                arr[i] = evenArr[j] 
                i += 1
        for j in range(len(oddArr)): 
                arr[i] = oddArr[j] 
                i += 1
        return arr
 

[/Code]
[/STOP] </s>","def bitonicGenerator(arr: list) -> list:
        n = len(arr) 
        evenArr = [] 
        oddArr = [] 
        for i in range(n): 
                if ((i % 2) == 0): 
                        evenArr.append(arr[i]) 
                else: 
                        oddArr.append(arr[i]) 
        evenArr = sorted(evenArr) 
        oddArr = sorted(oddArr) 
        oddArr = oddArr[::-1] 

        i = 0
        for j in range(len(evenArr)): 
                arr[i] = evenArr[j] 
                i += 1
        for j in range(len(oddArr)): 
                arr[i] = oddArr[j] 
                i += 1
        return arr
","assert bitonicGenerator([0, 1, 2, 3, 4, 5, 6, 7]) == [0, 2, 4, 6, 7, 5, 3, 1]
assert bitonicGenerator([4, 1, 3, 2, 8, 6, 7, 5]) == [3, 4, 7, 8, 6, 5, 2, 1]
assert bitonicGenerator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 3, 5, 7, 9, 11, 10, 8, 6, 4, 2]
assert bitonicGenerator([6, 3, 1, 4, 5, 2]) == [1, 5, 6, 4, 3, 2]
assert bitonicGenerator([7, 4, 1, 9]) == [1, 7, 9, 4]
assert bitonicGenerator([1]) == [1]
assert bitonicGenerator([]) == []"
"Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order

assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]
assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]
assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]

[/Question] [/INST] [Code]

def kLargest(arr: list, k: int) -> list:
        arr.sort(reverse=True)
        return arr[0:k]
 

[/Code]
[/STOP] </s>","def kLargest(arr: list, k: int) -> list:
        arr.sort(reverse=True)
        return arr[0:k]
","assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]
assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]
assert kLargest([45, 67, 33, 21], 1) == [67]
assert kLargest([101, 755, 312], 2) == [755, 312]
assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]
assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]
assert kLargest([100], 1) == [100]
assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]
assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]
assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]
assert kLargest([], 0) == []
assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"
"Find and Replace Pattern: Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.

A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.

Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Find and Replace Pattern: Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.

A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.

Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.

assert findAndReplacePattern([""xx"", ""xy"", ""yy""], ""xx"") == [""xx"", ""yy""]
assert findAndReplacePattern([""a"",""b"",""c""], ""a"")==[""a"",""b"",""c""]

[/Question] [/INST] [Code]

def findAndReplacePattern(words: list, pattern: str) -> list:
        def match(word):
            m1, m2 = {}, {}
            for w, p in zip(word, pattern):
                if w not in m1: m1[w] = p
                if p not in m2: m2[p] = w
                if (m1[w], m2[p]) != (p, w):
                    return False
            return True

        return list(filter(match, words))
 

[/Code]
[/STOP] </s>","def findAndReplacePattern(words: list, pattern: str) -> list:
        def match(word):
            m1, m2 = {}, {}
            for w, p in zip(word, pattern):
                if w not in m1: m1[w] = p
                if p not in m2: m2[p] = w
                if (m1[w], m2[p]) != (p, w):
                    return False
            return True

        return list(filter(match, words))
","assert findAndReplacePattern([""a"",""b"",""c""], ""a"")==[""a"",""b"",""c""]
assert findAndReplacePattern([""xx"", ""xy"", ""yy""], ""xx"") == [""xx"", ""yy""]
assert findAndReplacePattern([""abc"", ""def"", ""ghi"", ""jkl""], ""xyz"") == [""abc"", ""def"", ""ghi"", ""jkl""]
assert findAndReplacePattern([""aaa"", ""bbb"", ""ccc""], ""xyz"") == []"
"Minimum Remove to Make Valid Parentheses: Given a string s of '(' , ')' and lowercase English characters.

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Minimum Remove to Make Valid Parentheses: Given a string s of '(' , ')' and lowercase English characters.

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.

assert minRemoveToMakeValid(""()"") == ""()""

[/Question] [/INST] [Code]

def minRemoveToMakeValid(s: str) -> str:
    indexes_to_remove = set()
    stack = []
    for i, c in enumerate(s):
        if c not in ""()"":
            continue
        if c == ""("":
            stack.append(i)
        elif not stack:
            indexes_to_remove.add(i)
        else:
            stack.pop()
    indexes_to_remove = indexes_to_remove.union(set(stack))
    string_builder = []
    for i, c in enumerate(s):
        if i not in indexes_to_remove:
            string_builder.append(c)
    return """".join(string_builder) 

[/Code]
[/STOP] </s>","def minRemoveToMakeValid(s: str) -> str:
    indexes_to_remove = set()
    stack = []
    for i, c in enumerate(s):
        if c not in ""()"":
            continue
        if c == ""("":
            stack.append(i)
        elif not stack:
            indexes_to_remove.add(i)
        else:
            stack.pop()
    indexes_to_remove = indexes_to_remove.union(set(stack))
    string_builder = []
    for i, c in enumerate(s):
        if i not in indexes_to_remove:
            string_builder.append(c)
    return """".join(string_builder)","assert minRemoveToMakeValid(""a)b(c)d"")==""ab(c)d""
assert minRemoveToMakeValid(""(a(b(c)d)"") == ""a(b(c)d)""
assert minRemoveToMakeValid("")("") == """"
assert minRemoveToMakeValid(""(((xyz))"") == ""((xyz))""
assert minRemoveToMakeValid(""()"") == ""()""
assert minRemoveToMakeValid("""") == """"
assert minRemoveToMakeValid(""p(rq)()(st)"") == ""p(rq)()(st)"""
"Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.



[/Question] [/INST] [Code]

import math
def consecutiveNumbersSum(N: int) -> int:
    count = 0
    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1
    for k in range(1, upper_limit):
        if (N - k * (k + 1) // 2) % k == 0:
            count += 1
    return count 

[/Code]
[/STOP] </s>","import math
def consecutiveNumbersSum(N: int) -> int:
    count = 0
    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1
    for k in range(1, upper_limit):
        if (N - k * (k + 1) // 2) % k == 0:
            count += 1
    return count","assert consecutiveNumbersSum(9)==3
assert consecutiveNumbersSum(1) == 1
assert consecutiveNumbersSum(10) == 2
assert consecutiveNumbersSum(28) == 2
assert consecutiveNumbersSum(100) == 3
assert consecutiveNumbersSum(9876) == 4"
"Trapping Rain Water: Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Trapping Rain Water: Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.



[/Question] [/INST] [Code]

def trap(bars: list) -> int:
    if not bars or len(bars) < 3:
        return 0
    volume = 0
    left, right = 0, len(bars) - 1
    l_max, r_max = bars[left], bars[right]
    while left < right:
        l_max, r_max = max(bars[left], l_max), max(bars[right], r_max)
        if l_max <= r_max:
            volume += l_max - bars[left]
            left += 1
        else:
            volume += r_max - bars[right]
            right -= 1
    return volume
 

[/Code]
[/STOP] </s>","def trap(bars: list) -> int:
    if not bars or len(bars) < 3:
        return 0
    volume = 0
    left, right = 0, len(bars) - 1
    l_max, r_max = bars[left], bars[right]
    while left < right:
        l_max, r_max = max(bars[left], l_max), max(bars[right], r_max)
        if l_max <= r_max:
            volume += l_max - bars[left]
            left += 1
        else:
            volume += r_max - bars[right]
            right -= 1
    return volume
","assert trap([4,2,0,3,2,5])==9
assert trap([3, 0, 1, 3, 0, 5]) == 8
assert trap([1, 2, 3, 4, 5, 6]) == 0
assert trap([6, 5, 4, 3, 2, 1]) == 0
assert trap([1, 0, 1, 0, 1, 0, 1]) == 3
assert trap([2, 0, 2]) == 2
assert trap([5, 4, 1, 2]) == 1
assert trap([0, 7, 1, 4, 6]) == 7
assert trap([0, 0, 0, 0, 0]) == 0
assert trap([2, 1, 0, 1, 2, 1, 2, 1]) == 5
assert trap([1, 3, 2, 4, 1, 3, 1, 4, 5, 2, 2, 1, 4, 2, 2]) == 15"
