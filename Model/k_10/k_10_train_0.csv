question,prompt,code,asserts
"Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.

assert consecutiveNumbersSum(1) == 1
assert consecutiveNumbersSum(9876) == 4

[/Question] [/INST] [Code]

import math
def consecutiveNumbersSum(N: int) -> int:
    count = 0
    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1
    for k in range(1, upper_limit):
        if (N - k * (k + 1) // 2) % k == 0:
            count += 1
    return count 

[/Code]
[/STOP] </s>","import math
def consecutiveNumbersSum(N: int) -> int:
    count = 0
    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1
    for k in range(1, upper_limit):
        if (N - k * (k + 1) // 2) % k == 0:
            count += 1
    return count","assert consecutiveNumbersSum(9)==3
assert consecutiveNumbersSum(1) == 1
assert consecutiveNumbersSum(10) == 2
assert consecutiveNumbersSum(28) == 2
assert consecutiveNumbersSum(100) == 3
assert consecutiveNumbersSum(9876) == 4"
"Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. 

assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5

[/Question] [/INST] [Code]


def countDistinctSubarray(arr: list) -> int:
        n = len(arr)
        unst1 = set(arr)
        totalDist = len(unst1)
        count = 0

        for i in range(n):
                unst = set()
                for j in range(i, n):
                        unst.add(arr[j])
                        if len(unst) == totalDist:
                                count += 1

        return count
 

[/Code]
[/STOP] </s>","
def countDistinctSubarray(arr: list) -> int:
        n = len(arr)
        unst1 = set(arr)
        totalDist = len(unst1)
        count = 0

        for i in range(n):
                unst = set()
                for j in range(i, n):
                        unst.add(arr[j])
                        if len(unst) == totalDist:
                                count += 1

        return count
","assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5
assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1
assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3
assert countDistinctSubarray([1]) == 1
assert countDistinctSubarray([]) == 0"
"Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:

an array tree where tree = [treer, treec] is the position of the tree in the garden,
an array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,
and an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.
The squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.

Return the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.

The distance is the number of moves.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:

an array tree where tree = [treer, treec] is the position of the tree in the garden,
an array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,
and an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.
The squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.

Return the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.

The distance is the number of moves.

assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3
assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2
assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8
assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14

[/Question] [/INST] [Code]

from typing import List
def minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:
        firstPath = float('-inf')
        total_dist = 0
        for nut in nuts:
            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])
            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])
            if (dist_to_Tr-dist_to_Sq)>firstPath:
                firstPath = dist_to_Tr-dist_to_Sq
            total_dist+=2*dist_to_Tr
        total_dist = total_dist - firstPath
        return total_dist 

[/Code]
[/STOP] </s>","from typing import List
def minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:
        firstPath = float('-inf')
        total_dist = 0
        for nut in nuts:
            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])
            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])
            if (dist_to_Tr-dist_to_Sq)>firstPath:
                firstPath = dist_to_Tr-dist_to_Sq
            total_dist+=2*dist_to_Tr
        total_dist = total_dist - firstPath
        return total_dist","assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3
assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18
assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14
assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2
assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"
"Best Time to Buy and Sell Stock II: You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Best Time to Buy and Sell Stock II: You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.



[/Question] [/INST] [Code]

from typing import List
def maxProfit(prices: List[int]) -> int:
    cur_hold, cur_not_hold = -float('inf'), 0
    
    for stock_price in prices:
        
        prev_hold, prev_not_hold = cur_hold, cur_not_hold
        cur_hold = max( prev_hold, prev_not_hold - stock_price )
        cur_not_hold = max( prev_not_hold, prev_hold + stock_price )
    return cur_not_hold 

[/Code]
[/STOP] </s>","from typing import List
def maxProfit(prices: List[int]) -> int:
    cur_hold, cur_not_hold = -float('inf'), 0
    
    for stock_price in prices:
        
        prev_hold, prev_not_hold = cur_hold, cur_not_hold
        cur_hold = max( prev_hold, prev_not_hold - stock_price )
        cur_not_hold = max( prev_not_hold, prev_hold + stock_price )
    return cur_not_hold","assert maxProfit([1,2,3,4,5])==4
assert maxProfit([1,2,100,2,1]) == 99"
