question,prompt,code,asserts
"Given a matrix of n*n size, the task is to find whether all rows are circular rotations of each other or not. ","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given a matrix of n*n size, the task is to find whether all rows are circular rotations of each other or not. 



[/Question] [/INST] [Code]


MAX = 1000

def isPermutedMatrix(mat: list) -> bool:
        
        n = len(mat)
        str_cat = """"
        for i in range(n) :
                str_cat = str_cat + ""-"" + str(mat[0][i])

        str_cat = str_cat + str_cat

        for i in range(1, n) :
                curr_str = """"
                
                for j in range(n) :
                        curr_str = curr_str + ""-"" + str(mat[i][j])

                if (str_cat.find(curr_str)) : 
                        return True
                        
        return False
 

[/Code]
[/STOP] </s>","
MAX = 1000

def isPermutedMatrix(mat: list) -> bool:
        
        n = len(mat)
        str_cat = """"
        for i in range(n) :
                str_cat = str_cat + ""-"" + str(mat[0][i])

        str_cat = str_cat + str_cat

        for i in range(1, n) :
                curr_str = """"
                
                for j in range(n) :
                        curr_str = curr_str + ""-"" + str(mat[i][j])

                if (str_cat.find(curr_str)) : 
                        return True
                        
        return False
","assert isPermutedMatrix([[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]]) == True
assert isPermutedMatrix([[1, 2, 3], [2, 3, 1], [3, 1, 2]]) == True
assert isPermutedMatrix([[5, 6], [6, 5]]) == True
assert isPermutedMatrix([[13, 5, 7, 9], [5, 7, 9, 13], [7, 9, 13, 5], [9, 13, 5, 7]]) == True
assert isPermutedMatrix([[3, 8], [8, 3]]) == True
assert isPermutedMatrix([[2, 4, 6, 8], [4, 6, 8, 2], [8, 2, 4, 6], [6, 8, 2, 4]]) == True"
"Given an integer matrix of odd dimensions (like 3 * 3 or 5 * 5), find the sum of the middle row & column elements. Return the values in an array, with the first element being the row sum and the second element being the column sum","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given an integer matrix of odd dimensions (like 3 * 3 or 5 * 5), find the sum of the middle row & column elements. Return the values in an array, with the first element being the row sum and the second element being the column sum

assert middlesum([[2, 5, 7],[3, 7, 2],[5, 6, 9]]) == [12, 18]
assert middlesum([[8, 2, 4], [1, 5, 9], [6, 3, 7]]) == [15, 10]
assert middlesum([[3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3]]) == [15, 15]
assert middlesum([[4]]) == [4, 4]

[/Question] [/INST] [Code]

def middlesum(mat: list) -> list:

        row_sum = 0
        col_sum = 0
        n = len(mat)

        for i in range(n):
                row_sum += mat[n // 2][i]
        
        for i in range(n):
                col_sum += mat[i][n // 2]

        mid_sum = [row_sum, col_sum]
        return mid_sum
        
        
 

[/Code]
[/STOP] </s>","def middlesum(mat: list) -> list:

        row_sum = 0
        col_sum = 0
        n = len(mat)

        for i in range(n):
                row_sum += mat[n // 2][i]
        
        for i in range(n):
                col_sum += mat[i][n // 2]

        mid_sum = [row_sum, col_sum]
        return mid_sum
        
        
","assert middlesum([[2, 5, 7],[3, 7, 2],[5, 6, 9]]) == [12, 18]
assert middlesum([[1, 3, 5, 6, 7], [3, 5, 3, 2, 1], [1, 2, 3, 4, 5], [7, 9, 2, 1, 6], [9, 1, 5, 3, 2]]) == [15, 18]
assert middlesum([[4]]) == [4, 4]
assert middlesum([[8, 2, 4], [1, 5, 9], [6, 3, 7]]) == [15, 10]
assert middlesum([[3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3]]) == [15, 15]"
"Word Pattern: Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Word Pattern: Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.



[/Question] [/INST] [Code]

def wordPattern(pattern: str, s: str) -> bool:
    map_char = {}
    map_word = {}
    
    words = s.split(' ')
    if len(words) != len(pattern):
        return False
    
    for c, w in zip(pattern, words):
        if c not in map_char:
            if w in map_word:
                return False
            else:
                map_char[c] = w
                map_word[w] = c
        else:
            if map_char[c] != w:
                return False
    return True 

[/Code]
[/STOP] </s>","def wordPattern(pattern: str, s: str) -> bool:
    map_char = {}
    map_word = {}
    
    words = s.split(' ')
    if len(words) != len(pattern):
        return False
    
    for c, w in zip(pattern, words):
        if c not in map_char:
            if w in map_word:
                return False
            else:
                map_char[c] = w
                map_word[w] = c
        else:
            if map_char[c] != w:
                return False
    return True","assert wordPattern(""abba"", ""dog cat cat dog"")==True
assert wordPattern(""aaaa"", ""dog dog dog dog"") == True
assert wordPattern(""xyz"", ""apple banana apple"") == False
assert wordPattern(""xyx"", ""apple banana apple"") == True
assert wordPattern(""abab"", ""dog cat dog cat"") == True
assert wordPattern(""aaaa"", ""dog dog dog cat"") == False
assert wordPattern(""aabb"", ""dog dog cat cat"") == True
assert wordPattern(""abc"", ""dog"") == False  # Not enough words
assert wordPattern("""", ""dog cat"") == False  # Empty pattern
assert wordPattern(""a"", ""dog cat dog cat"") == False  # Not enough pattern characters
assert wordPattern(""ab"", """") == False  # Empty string
assert wordPattern(""abb"", ""dog dog dog"") == False  # Same word for different pattern characters
assert wordPattern(""abba"", ""dog cat cat"") == False  # Not enough words for the pattern
assert wordPattern(""abba"", ""dog cat cat dog fish"") == False  # Extra words beyond the pattern length"
"Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order

assert kLargest([101, 755, 312], 2) == [755, 312]

[/Question] [/INST] [Code]

def kLargest(arr: list, k: int) -> list:
        arr.sort(reverse=True)
        return arr[0:k]
 

[/Code]
[/STOP] </s>","def kLargest(arr: list, k: int) -> list:
        arr.sort(reverse=True)
        return arr[0:k]
","assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]
assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]
assert kLargest([45, 67, 33, 21], 1) == [67]
assert kLargest([101, 755, 312], 2) == [755, 312]
assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]
assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]
assert kLargest([100], 1) == [100]
assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]
assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]
assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]
assert kLargest([], 0) == []
assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"
"Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

assert permutation_in_string(""eidoo"", ""eidbaooo"") == False  # s1 is longer than any permutation within s2
assert permutation_in_string(""hello"", ""ooollehhhhh"") == True
assert permutation_in_string(""ooo"", ""eidbaooo"") == True  # s1 is a suffix of s2
assert permutation_in_string(""pq"", ""qpqqp"") == True

[/Question] [/INST] [Code]


def permutation_in_string(s1: str, s2: str) -> bool:
  window = len(s1)
  if window > len(s2):
    return False
  freq1 = [0]*26
  freq2 = [0]*26
  for i in range(window):
    freq1[ord(s1[i])-ord('a')] += 1
    freq2[ord(s2[i])-ord('a')] += 1

  matches = 0
  for i in range(26):
    if freq1[i] == freq2[i]:
      matches += 1
  
  for l in range(len(s2) - window):
    if matches == 26:
      return True

    added = ord(s2[l + window]) - ord('a')
    freq2[added] += 1
    if freq1[added] == freq2[added]:
      matches += 1
    elif freq1[added] + 1 == freq2[added]:
      matches -= 1

    removed = ord(s2[l]) - ord('a')
    freq2[removed] -= 1
    if freq1[removed] == freq2[removed]:
      matches += 1
    elif freq1[removed] == freq2[removed] + 1:
      matches -= 1
    
  return matches == 26
 

[/Code]
[/STOP] </s>","
def permutation_in_string(s1: str, s2: str) -> bool:
  window = len(s1)
  if window > len(s2):
    return False
  freq1 = [0]*26
  freq2 = [0]*26
  for i in range(window):
    freq1[ord(s1[i])-ord('a')] += 1
    freq2[ord(s2[i])-ord('a')] += 1

  matches = 0
  for i in range(26):
    if freq1[i] == freq2[i]:
      matches += 1
  
  for l in range(len(s2) - window):
    if matches == 26:
      return True

    added = ord(s2[l + window]) - ord('a')
    freq2[added] += 1
    if freq1[added] == freq2[added]:
      matches += 1
    elif freq1[added] + 1 == freq2[added]:
      matches -= 1

    removed = ord(s2[l]) - ord('a')
    freq2[removed] -= 1
    if freq1[removed] == freq2[removed]:
      matches += 1
    elif freq1[removed] == freq2[removed] + 1:
      matches -= 1
    
  return matches == 26
","assert permutation_in_string(""hello"", ""ooollehhhhh"") == True
assert permutation_in_string(""abc"", ""ccccbbbbaaaa"") == False
assert permutation_in_string(""xyz"", ""zxyopqrstuv"") == True
assert permutation_in_string(""xyz"", ""xzygxzyzxyzk"") == True
assert permutation_in_string(""a"", ""a"") == True
assert permutation_in_string(""adc"", ""dcda"") == True
assert permutation_in_string(""pq"", ""qpqqp"") == True
assert permutation_in_string(""kitten"", ""sittingkite"") == False
assert permutation_in_string(""pq"", ""pqpqr"") == True
assert permutation_in_string(""aba"", ""aabaabaa"") == True
assert permutation_in_string("""", """") == True  # Edge case: both strings are empty
assert permutation_in_string(""longerstring"", ""short"") == False  # s1 is longer than s2
assert permutation_in_string(""a"", ""b"") == False  # Single character, no match
assert permutation_in_string(""aab"", ""baa"") == True  # s1 is a permutation of s2
assert permutation_in_string(""ab"", ""a"") == False  # s2 is shorter than s1
assert permutation_in_string(""ba"", ""eidbaooo"") == True  # Same characters as Example 1 but different permutation
assert permutation_in_string(""eid"", ""eidbaooo"") == True  # s1 is a prefix of s2
assert permutation_in_string(""ooo"", ""eidbaooo"") == True  # s1 is a suffix of s2
assert permutation_in_string(""db"", ""eidbaooo"") == True  # s1 is a permutation within s2
assert permutation_in_string(""eidoo"", ""eidbaooo"") == False  # s1 is longer than any permutation within s2"
"Given a positive integer n, write a function to find if it is a power of 2 or not","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given a positive integer n, write a function to find if it is a power of 2 or not

assert isPowerOfTwo(8192) == True
assert isPowerOfTwo(3) == False
assert isPowerOfTwo(16384) == True
assert isPowerOfTwo(64) == True

[/Question] [/INST] [Code]

import math

def Log2(x):
        if x == 0:
                return False

        return (math.log10(x) /
                        math.log10(2))

def isPowerOfTwo(n: int) -> bool:
        return (math.ceil(Log2(n)) ==
                        math.floor(Log2(n)))
 

[/Code]
[/STOP] </s>","import math

def Log2(x):
        if x == 0:
                return False

        return (math.log10(x) /
                        math.log10(2))

def isPowerOfTwo(n: int) -> bool:
        return (math.ceil(Log2(n)) ==
                        math.floor(Log2(n)))
","assert isPowerOfTwo(31) == False
assert isPowerOfTwo(1) == True
assert isPowerOfTwo(1024) == True
assert isPowerOfTwo(3) == False
assert isPowerOfTwo(64) == True
assert isPowerOfTwo(65) == False
assert isPowerOfTwo(8192) == True
assert isPowerOfTwo(16384) == True
assert isPowerOfTwo(999) == False
assert isPowerOfTwo(65536) == True"
Return nth number in the fibonacci sequence,"<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Return nth number in the fibonacci sequence

assert fibonacci(30) == 832040
assert fibonacci(35) == 9227465

[/Question] [/INST] [Code]

def fibonacci(n: int) -> int:
    a = 0
    b = 1
    if n < 0:
        print(""Incorrect input"")
    elif n == 0:
        return a
    elif n == 1:
        return b
    else:
        for i in range(2, n+1):
            c = a + b
            a = b
            b = c
        return b
    b = c
    return fib(n-1, a, b)
 

[/Code]
[/STOP] </s>","def fibonacci(n: int) -> int:
    a = 0
    b = 1
    if n < 0:
        print(""Incorrect input"")
    elif n == 0:
        return a
    elif n == 1:
        return b
    else:
        for i in range(2, n+1):
            c = a + b
            a = b
            b = c
        return b
    b = c
    return fib(n-1, a, b)
","assert fibonacci(9) == 34
assert fibonacci(10) == 55
assert fibonacci(5) == 5
assert fibonacci(2) == 1
assert fibonacci(0) == 0
assert fibonacci(11) == 89
assert fibonacci(15) == 610
assert fibonacci(20) == 6765
assert fibonacci(25) == 75025
assert fibonacci(3) == 2
assert fibonacci(1) == 1
assert fibonacci(6) == 8
assert fibonacci(30) == 832040
assert fibonacci(35) == 9227465
assert fibonacci(40) == 102334155"
