question,prompt,code,asserts
"Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.

assert max_distance([1, 1, 1, 1, 1]) == 4

[/Question] [/INST] [Code]

def max_distance(arr: list) -> int:
        n = len(arr) 
        max_d = -1
        for i in range(n - 1): 
                for j in range(i + 1, n): 
                        if arr[i] == arr[j]: 
                                temp = abs(j - i) 
                                max_d = max(max_d, temp) 
        return max_d 
 

[/Code]
[/STOP] </s>","def max_distance(arr: list) -> int:
        n = len(arr) 
        max_d = -1
        for i in range(n - 1): 
                for j in range(i + 1, n): 
                        if arr[i] == arr[j]: 
                                temp = abs(j - i) 
                                max_d = max(max_d, temp) 
        return max_d 
","assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5
assert max_distance([1, 1, 1, 1, 1]) == 4
assert max_distance([8, 8, 7, 8, 7]) == 3
assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6
assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6
assert max_distance([99]) == -1
assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"
Return the factorial of a given number n,"<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Return the factorial of a given number n

assert fact(0) == 1

[/Question] [/INST] [Code]


def fact(n: int) -> int:
  if n <= 1:
    return 1
  return n*fact(n-1)
 

[/Code]
[/STOP] </s>","
def fact(n: int) -> int:
  if n <= 1:
    return 1
  return n*fact(n-1)
","assert fact(5) == 120
assert fact(0) == 1
assert fact(1) == 1
assert fact(3) == 6
assert fact(7) == 5040
assert fact(10) == 3628800
assert fact(4) == 24
assert fact(8) == 40320
assert fact(2) == 2
assert fact(11) == 39916800"
"Given two arrays that have the same values but in a different order and having no duplicate elements in it, we need to make a second array the same as a first array using the minimum number of swaps. ","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given two arrays that have the same values but in a different order and having no duplicate elements in it, we need to make a second array the same as a first array using the minimum number of swaps. 

assert minSwapToMakeArraySame([3, 6, 4, 8], [4, 6, 8, 3]) == 2
assert minSwapToMakeArraySame([12, 14, 11, 15], [14, 12, 15, 11]) == 2
assert minSwapToMakeArraySame([1, 5, 3, 7, 2], [2, 3, 5, 1, 7]) == 3
assert minSwapToMakeArraySame([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == 2

[/Question] [/INST] [Code]

def minSwapsToSort(arr):
        n = len(arr)
        arrPos = [[0 for x in range(2)] 
                                for y in range(n)] 
        
        for i in range(n):         
                arrPos[i][0] = arr[i] 
                arrPos[i][1] = i 
        arrPos.sort() 
        vis = [False] * (n) 
        ans = 0

        for i in range(n): 
                if (vis[i] or arrPos[i][1] == i): 
                        continue
                cycle_size = 0
                j = i 
                
                while (not vis[j]):                 
                        vis[j] = 1
                        j = arrPos[j][1] 
                        cycle_size+= 1
                ans += (cycle_size - 1) 

        return ans 

def minSwapToMakeArraySame(a: list, b: list) -> int:
        n = len(a) 
        mp = {} 
        for i in range(n): 
                mp[b[i]] = i 
        for i in range(n): 
                b[i] = mp[a[i]] 
        return minSwapsToSort(b) 
 

[/Code]
[/STOP] </s>","def minSwapsToSort(arr):
        n = len(arr)
        arrPos = [[0 for x in range(2)] 
                                for y in range(n)] 
        
        for i in range(n):         
                arrPos[i][0] = arr[i] 
                arrPos[i][1] = i 
        arrPos.sort() 
        vis = [False] * (n) 
        ans = 0

        for i in range(n): 
                if (vis[i] or arrPos[i][1] == i): 
                        continue
                cycle_size = 0
                j = i 
                
                while (not vis[j]):                 
                        vis[j] = 1
                        j = arrPos[j][1] 
                        cycle_size+= 1
                ans += (cycle_size - 1) 

        return ans 

def minSwapToMakeArraySame(a: list, b: list) -> int:
        n = len(a) 
        mp = {} 
        for i in range(n): 
                mp[b[i]] = i 
        for i in range(n): 
                b[i] = mp[a[i]] 
        return minSwapsToSort(b) 
","assert minSwapToMakeArraySame([3, 6, 4, 8], [4, 6, 8, 3]) == 2
assert minSwapToMakeArraySame([1, 5, 3, 7, 2], [2, 3, 5, 1, 7]) == 3
assert minSwapToMakeArraySame([12, 14, 11, 15], [14, 12, 15, 11]) == 2
assert minSwapToMakeArraySame([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == 2"
Write a function to to convert a floating point number to binary,"<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Write a function to to convert a floating point number to binary



[/Question] [/INST] [Code]

def float_bin(number: float, places : int =  3) -> str:
    def decimal_converter(num): 
        while num > 1:
                num /= 10
        return num
    whole, dec = str(number).split(""."")
    whole = int(whole)
    dec = int (dec)
    res = bin(whole).lstrip(""0b"") + "".""
    for x in range(places):
            whole, dec = str((decimal_converter(dec)) * 2).split(""."")
            dec = int(dec)
            res += whole
    return res
 

[/Code]
[/STOP] </s>","def float_bin(number: float, places : int =  3) -> str:
    def decimal_converter(num): 
        while num > 1:
                num /= 10
        return num
    whole, dec = str(number).split(""."")
    whole = int(whole)
    dec = int (dec)
    res = bin(whole).lstrip(""0b"") + "".""
    for x in range(places):
            whole, dec = str((decimal_converter(dec)) * 2).split(""."")
            dec = int(dec)
            res += whole
    return res
","assert float_bin(11.234, 4) == '1011.0011'
assert float_bin(100.101, 6) == '1100100.000110'
assert float_bin(3.14159, 5) == '11.00100'
assert float_bin(255.255, 4) == '11111111.0100'
assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"
