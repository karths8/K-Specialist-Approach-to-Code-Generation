question,prompt,code,asserts
"Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. 

assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]

[/Question] [/INST] [Code]

def countDistinct(arr: list, K: int) -> list:
        def countWindowDistinct(win, K):
                dist_count = 0
                for i in range(K):
                        j = 0
                        while j < i:
                                if (win[i] == win[j]):
                                        break
                                else:
                                        j += 1
                        if (j == i):
                                dist_count += 1

                return dist_count
        N = len(arr)
        result = []
        for i in range(N - K + 1):
                result.append(countWindowDistinct(arr[i:K + i], K))
        return result
 

[/Code]
[/STOP] </s>","def countDistinct(arr: list, K: int) -> list:
        def countWindowDistinct(win, K):
                dist_count = 0
                for i in range(K):
                        j = 0
                        while j < i:
                                if (win[i] == win[j]):
                                        break
                                else:
                                        j += 1
                        if (j == i):
                                dist_count += 1

                return dist_count
        N = len(arr)
        result = []
        for i in range(N - K + 1):
                result.append(countWindowDistinct(arr[i:K + i], K))
        return result
","assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]
assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]
assert countDistinct([1], 1) == [1]
assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]
assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]
assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"
"You are given a string s and an integer array indices of the same length. The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.

Return the shuffled string.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
You are given a string s and an integer array indices of the same length. The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.

Return the shuffled string.

assert shuffle_string(""xy"", [0,1]) == ""xy""  # No shuffle required

[/Question] [/INST] [Code]

from typing import List
def shuffle_string(s: str, indices: List[int]) -> str:
    def partitionString(s):
      substrings = 1
      cur_str = set()
      for i in range(len(s)):
        if s[i] in cur_str:
          substrings += 1
          cur_str = {s[i]}
        else:
          cur_str.add(s[i])
      return substrings
    ret = ['_']*len(s)
    for idx, i in enumerate(indices):
        ret[i] = s[idx]
    return """".join(ret)
 

[/Code]
[/STOP] </s>","from typing import List
def shuffle_string(s: str, indices: List[int]) -> str:
    def partitionString(s):
      substrings = 1
      cur_str = set()
      for i in range(len(s)):
        if s[i] in cur_str:
          substrings += 1
          cur_str = {s[i]}
        else:
          cur_str.add(s[i])
      return substrings
    ret = ['_']*len(s)
    for idx, i in enumerate(indices):
        ret[i] = s[idx]
    return """".join(ret)
","assert shuffle_string(""reoc"", [2, 0, 1, 3]) == ""eorc""
assert shuffle_string(""aiohn"", [3,1,4,2,0]) == ""nihao""
assert shuffle_string(""aax"", [0,2,1]) == ""axa""
assert shuffle_string(""gh"", [1,0]) == ""hg""
assert shuffle_string("""", []) == """"  # Edge case: empty string
assert shuffle_string(""xy"", [0,1]) == ""xy""  # No shuffle required
assert shuffle_string(""pqrstuvwxyzabcdefghijklmno"", list(range(25, -1, -1))) == ""onmlkjihgfedcbazyxwvutsrqp""  # Reverse shuffle"
"Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.

For example:

A -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28 
...
","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.

For example:

A -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28 
...




[/Question] [/INST] [Code]

def titleToNumber(s: str) -> int:
    result = 0
    alpha_map = {chr(i + 65): i + 1 for i in range(26)}
    n = len(s)
    for i in range(n):
        cur_char = s[n - 1 - i]
        result += (alpha_map[cur_char] * (26 ** i))
    return result 

[/Code]
[/STOP] </s>","def titleToNumber(s: str) -> int:
    result = 0
    alpha_map = {chr(i + 65): i + 1 for i in range(26)}
    n = len(s)
    for i in range(n):
        cur_char = s[n - 1 - i]
        result += (alpha_map[cur_char] * (26 ** i))
    return result","assert titleToNumber(""AB"")==28
assert titleToNumber(""AAA"") == 703
assert titleToNumber(""ZZZ"") == 18278
assert titleToNumber(""BZ"") == 78
assert titleToNumber(""CV"") == 100
assert titleToNumber(""XFD"") == 16384
assert titleToNumber(""Q"") == 17"
"We are given an array of n distinct numbers. The task is to sort all even-placed numbers in increasing and odd-placed numbers in decreasing order. The modified array should contain all sorted even-placed numbers followed by reverse sorted odd-placed numbers. 
Note that the first element is considered as even placed because of its index 0. ","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
We are given an array of n distinct numbers. The task is to sort all even-placed numbers in increasing and odd-placed numbers in decreasing order. The modified array should contain all sorted even-placed numbers followed by reverse sorted odd-placed numbers. 
Note that the first element is considered as even placed because of its index 0. 

assert bitonicGenerator([0, 1, 2, 3, 4, 5, 6, 7]) == [0, 2, 4, 6, 7, 5, 3, 1]
assert bitonicGenerator([7, 4, 1, 9]) == [1, 7, 9, 4]
assert bitonicGenerator([6, 3, 1, 4, 5, 2]) == [1, 5, 6, 4, 3, 2]
assert bitonicGenerator([]) == []

[/Question] [/INST] [Code]

def bitonicGenerator(arr: list) -> list:
        n = len(arr) 
        evenArr = [] 
        oddArr = [] 
        for i in range(n): 
                if ((i % 2) == 0): 
                        evenArr.append(arr[i]) 
                else: 
                        oddArr.append(arr[i]) 
        evenArr = sorted(evenArr) 
        oddArr = sorted(oddArr) 
        oddArr = oddArr[::-1] 

        i = 0
        for j in range(len(evenArr)): 
                arr[i] = evenArr[j] 
                i += 1
        for j in range(len(oddArr)): 
                arr[i] = oddArr[j] 
                i += 1
        return arr
 

[/Code]
[/STOP] </s>","def bitonicGenerator(arr: list) -> list:
        n = len(arr) 
        evenArr = [] 
        oddArr = [] 
        for i in range(n): 
                if ((i % 2) == 0): 
                        evenArr.append(arr[i]) 
                else: 
                        oddArr.append(arr[i]) 
        evenArr = sorted(evenArr) 
        oddArr = sorted(oddArr) 
        oddArr = oddArr[::-1] 

        i = 0
        for j in range(len(evenArr)): 
                arr[i] = evenArr[j] 
                i += 1
        for j in range(len(oddArr)): 
                arr[i] = oddArr[j] 
                i += 1
        return arr
","assert bitonicGenerator([0, 1, 2, 3, 4, 5, 6, 7]) == [0, 2, 4, 6, 7, 5, 3, 1]
assert bitonicGenerator([4, 1, 3, 2, 8, 6, 7, 5]) == [3, 4, 7, 8, 6, 5, 2, 1]
assert bitonicGenerator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 3, 5, 7, 9, 11, 10, 8, 6, 4, 2]
assert bitonicGenerator([6, 3, 1, 4, 5, 2]) == [1, 5, 6, 4, 3, 2]
assert bitonicGenerator([7, 4, 1, 9]) == [1, 7, 9, 4]
assert bitonicGenerator([1]) == [1]
assert bitonicGenerator([]) == []"
