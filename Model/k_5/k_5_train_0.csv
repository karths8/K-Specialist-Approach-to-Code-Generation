question,prompt,code,asserts
You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.,"<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.

assert subset([5, 6, 9, 3, 4, 3, 4]) == 2
assert subset([]) == 0
assert subset([10]) == 1
assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5

[/Question] [/INST] [Code]

def subset(ar: list) -> int:
    n = len(ar)
    res = 0
 
    ar.sort()
    for i in range(0, n) :
        count = 1
 
        for i in range(n - 1):
            if ar[i] == ar[i + 1]:
                count+=1
            else:
                break
             
        res = max(res, count)
     
    return res
 

[/Code]
[/STOP] </s>","def subset(ar: list) -> int:
    n = len(ar)
    res = 0
 
    ar.sort()
    for i in range(0, n) :
        count = 1
 
        for i in range(n - 1):
            if ar[i] == ar[i + 1]:
                count+=1
            else:
                break
             
        res = max(res, count)
     
    return res
","assert subset([5, 6, 9, 3, 4, 3, 4]) == 2
assert subset([1, 1, 1, 1, 1]) == 5
assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2
assert subset([10]) == 1
assert subset([]) == 0
assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"
"Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order



[/Question] [/INST] [Code]

def kLargest(arr: list, k: int) -> list:
        arr.sort(reverse=True)
        return arr[0:k]
 

[/Code]
[/STOP] </s>","def kLargest(arr: list, k: int) -> list:
        arr.sort(reverse=True)
        return arr[0:k]
","assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]
assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]
assert kLargest([45, 67, 33, 21], 1) == [67]
assert kLargest([101, 755, 312], 2) == [755, 312]
assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]
assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]
assert kLargest([100], 1) == [100]
assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]
assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]
assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]
assert kLargest([], 0) == []
assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"
"Find and Replace Pattern: Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.

A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.

Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Find and Replace Pattern: Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.

A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.

Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.



[/Question] [/INST] [Code]

def findAndReplacePattern(words: list, pattern: str) -> list:
        def match(word):
            m1, m2 = {}, {}
            for w, p in zip(word, pattern):
                if w not in m1: m1[w] = p
                if p not in m2: m2[p] = w
                if (m1[w], m2[p]) != (p, w):
                    return False
            return True

        return list(filter(match, words))
 

[/Code]
[/STOP] </s>","def findAndReplacePattern(words: list, pattern: str) -> list:
        def match(word):
            m1, m2 = {}, {}
            for w, p in zip(word, pattern):
                if w not in m1: m1[w] = p
                if p not in m2: m2[p] = w
                if (m1[w], m2[p]) != (p, w):
                    return False
            return True

        return list(filter(match, words))
","assert findAndReplacePattern([""a"",""b"",""c""], ""a"")==[""a"",""b"",""c""]
assert findAndReplacePattern([""xx"", ""xy"", ""yy""], ""xx"") == [""xx"", ""yy""]
assert findAndReplacePattern([""abc"", ""def"", ""ghi"", ""jkl""], ""xyz"") == [""abc"", ""def"", ""ghi"", ""jkl""]
assert findAndReplacePattern([""aaa"", ""bbb"", ""ccc""], ""xyz"") == []"
"You are given a string s and an integer array indices of the same length. The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.

Return the shuffled string.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
You are given a string s and an integer array indices of the same length. The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.

Return the shuffled string.

assert shuffle_string(""aiohn"", [3,1,4,2,0]) == ""nihao""

[/Question] [/INST] [Code]

from typing import List
def shuffle_string(s: str, indices: List[int]) -> str:
    def partitionString(s):
      substrings = 1
      cur_str = set()
      for i in range(len(s)):
        if s[i] in cur_str:
          substrings += 1
          cur_str = {s[i]}
        else:
          cur_str.add(s[i])
      return substrings
    ret = ['_']*len(s)
    for idx, i in enumerate(indices):
        ret[i] = s[idx]
    return """".join(ret)
 

[/Code]
[/STOP] </s>","from typing import List
def shuffle_string(s: str, indices: List[int]) -> str:
    def partitionString(s):
      substrings = 1
      cur_str = set()
      for i in range(len(s)):
        if s[i] in cur_str:
          substrings += 1
          cur_str = {s[i]}
        else:
          cur_str.add(s[i])
      return substrings
    ret = ['_']*len(s)
    for idx, i in enumerate(indices):
        ret[i] = s[idx]
    return """".join(ret)
","assert shuffle_string(""reoc"", [2, 0, 1, 3]) == ""eorc""
assert shuffle_string(""aiohn"", [3,1,4,2,0]) == ""nihao""
assert shuffle_string(""aax"", [0,2,1]) == ""axa""
assert shuffle_string(""gh"", [1,0]) == ""hg""
assert shuffle_string("""", []) == """"  # Edge case: empty string
assert shuffle_string(""xy"", [0,1]) == ""xy""  # No shuffle required
assert shuffle_string(""pqrstuvwxyzabcdefghijklmno"", list(range(25, -1, -1))) == ""onmlkjihgfedcbazyxwvutsrqp""  # Reverse shuffle"
"You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.

Reconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).
","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.

Reconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).


assert reconstructQueue([[8,1],[5,0],[6,1],[5,2],[4,4],[7,1]]) == [[5, 0], [8, 1], [5, 2], [6, 1], [4, 4], [7, 1]]
assert reconstructQueue([[2,0], [1,1]]) == [[2, 0], [1, 1]]
assert reconstructQueue([[3,0], [3,2], [3,1]]) == [[3, 0], [3, 1], [3, 2]]
assert reconstructQueue([[12,0], [6,3], [4,4], [9,2], [7,1]]) == [[12, 0], [7, 1], [9, 2], [6, 3], [4, 4]]

[/Question] [/INST] [Code]


def reconstructQueue(people: list) -> list:
    output=[] 
    people.sort(key=lambda x: (-x[0], x[1]))                
    for a in people:
        output.insert(a[1], a)
    
    return output
 

[/Code]
[/STOP] </s>","
def reconstructQueue(people: list) -> list:
    output=[] 
    people.sort(key=lambda x: (-x[0], x[1]))                
    for a in people:
        output.insert(a[1], a)
    
    return output
","assert reconstructQueue([[8,1],[5,0],[6,1],[5,2],[4,4],[7,1]]) == [[5, 0], [8, 1], [5, 2], [6, 1], [4, 4], [7, 1]]
assert reconstructQueue([[12,0], [6,3], [4,4], [9,2], [7,1]]) == [[12, 0], [7, 1], [9, 2], [6, 3], [4, 4]]
assert reconstructQueue([[2,0], [1,1]]) == [[2, 0], [1, 1]]
assert reconstructQueue([[3,0], [3,2], [3,1]]) == [[3, 0], [3, 1], [3, 2]]"
"You are given two 0-indexed integer permutations A and B of length n.

A prefix common array of A and B is an array C such that C[i] is equal to the count of numbers that are present at or before the index i in both A and B.

Return the prefix common array of A and B.

A sequence of n integers is called a permutation if it contains all integers from 1 to n exactly once.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
You are given two 0-indexed integer permutations A and B of length n.

A prefix common array of A and B is an array C such that C[i] is equal to the count of numbers that are present at or before the index i in both A and B.

Return the prefix common array of A and B.

A sequence of n integers is called a permutation if it contains all integers from 1 to n exactly once.

assert findThePrefixCommonArray([1], [1]) == [1]

[/Question] [/INST] [Code]

def findThePrefixCommonArray(arr1: list, arr2: list) -> list:
  max = len(arr1) if len(arr1) > len(arr2) else len(arr2)
  seen = set()
  curCount = 0
  ret = []
  for i in range(max):
    cur1 = arr1[i]
    cur2 = arr2[i]
    if cur1 in seen:
      curCount += 1
    else:
      seen.add(cur1)
    if cur2 in seen:
      curCount += 1
    else:
      seen.add(cur2)
    ret.append(curCount)
  return ret
 

[/Code]
[/STOP] </s>","def findThePrefixCommonArray(arr1: list, arr2: list) -> list:
  max = len(arr1) if len(arr1) > len(arr2) else len(arr2)
  seen = set()
  curCount = 0
  ret = []
  for i in range(max):
    cur1 = arr1[i]
    cur2 = arr2[i]
    if cur1 in seen:
      curCount += 1
    else:
      seen.add(cur1)
    if cur2 in seen:
      curCount += 1
    else:
      seen.add(cur2)
    ret.append(curCount)
  return ret
","assert findThePrefixCommonArray([1,3,2,4], [3,1,2,4]) == [0,2,3,4]
assert findThePrefixCommonArray([1], [1]) == [1]
assert findThePrefixCommonArray([2,3,1], [3,1,2]) == [0,1,3]"
"You are given n activities with their start and finish times. Select the maximum number of activities that can be performed by a single person and return their indexes. Assume that a person can only work on a single activity at a time. 
","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
You are given n activities with their start and finish times. Select the maximum number of activities that can be performed by a single person and return their indexes. Assume that a person can only work on a single activity at a time. 


assert MaxActivities([1, 3, 0, 5, 8, 5], [2, 4, 6, 7, 9, 9]) == [0, 1, 3, 4]
assert MaxActivities([2, 4, 5, 6, 7, 8], [3, 5, 6, 7, 9, 10]) == [0, 1, 2, 3, 4]
assert MaxActivities([1], [2]) == [0]

[/Question] [/INST] [Code]

import numpy as np
def MaxActivities(s: list, f: list) -> list:
    indices = np.argsort(f)
    [s[i] for i in indices]
    [f[i] for i in indices]
    result = []
    n = len(f)
    i = 0
    result.append(i)
    for j in range(1, n):
        if s[j] >= f[i]:
            result.append(j)
            i = j
    return result
 

[/Code]
[/STOP] </s>","import numpy as np
def MaxActivities(s: list, f: list) -> list:
    indices = np.argsort(f)
    [s[i] for i in indices]
    [f[i] for i in indices]
    result = []
    n = len(f)
    i = 0
    result.append(i)
    for j in range(1, n):
        if s[j] >= f[i]:
            result.append(j)
            i = j
    return result
","assert MaxActivities([2, 4, 5, 6, 7, 8], [3, 5, 6, 7, 9, 10]) == [0, 1, 2, 3, 4]
assert MaxActivities([1, 3, 0, 5, 8, 5], [2, 4, 6, 7, 9, 9]) == [0, 1, 3, 4]
assert MaxActivities([1], [2]) == [0]"
"A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places

assert leftRotate(345, 8) == 88320
assert leftRotate(0, 1) == 0
assert leftRotate(29, 3) == 232

[/Question] [/INST] [Code]

INT_BITS = 32
def leftRotate(n: int, d: int) -> int:
        return (n << d)|(n >> (INT_BITS - d))
 

[/Code]
[/STOP] </s>","INT_BITS = 32
def leftRotate(n: int, d: int) -> int:
        return (n << d)|(n >> (INT_BITS - d))
","assert leftRotate(16, 2) == 64
assert leftRotate(29, 3) == 232
assert leftRotate(0, 1) == 0
assert leftRotate(1, 5) == 32
assert leftRotate(19, 4) == 304
assert leftRotate(345, 8) == 88320
assert leftRotate(256, 8) == 65536
assert leftRotate(2, 1) == 4"
