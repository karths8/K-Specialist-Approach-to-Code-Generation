question,prompt,code,asserts
"Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.

For example:

A -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28 
...
","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.

For example:

A -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28 
...


assert titleToNumber(""BZ"") == 78
assert titleToNumber(""AB"")==28
assert titleToNumber(""XFD"") == 16384
assert titleToNumber(""CV"") == 100

[/Question] [/INST] [Code]

def titleToNumber(s: str) -> int:
    result = 0
    alpha_map = {chr(i + 65): i + 1 for i in range(26)}
    n = len(s)
    for i in range(n):
        cur_char = s[n - 1 - i]
        result += (alpha_map[cur_char] * (26 ** i))
    return result 

[/Code]
[/STOP] </s>","def titleToNumber(s: str) -> int:
    result = 0
    alpha_map = {chr(i + 65): i + 1 for i in range(26)}
    n = len(s)
    for i in range(n):
        cur_char = s[n - 1 - i]
        result += (alpha_map[cur_char] * (26 ** i))
    return result","assert titleToNumber(""AB"")==28
assert titleToNumber(""AAA"") == 703
assert titleToNumber(""ZZZ"") == 18278
assert titleToNumber(""BZ"") == 78
assert titleToNumber(""CV"") == 100
assert titleToNumber(""XFD"") == 16384
assert titleToNumber(""Q"") == 17"
"Given a N x N binary matrix (elements in matrix can be either 1 or 0) where each row and column of the matrix is sorted in ascending order, count number of 0s present in it.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given a N x N binary matrix (elements in matrix can be either 1 or 0) where each row and column of the matrix is sorted in ascending order, count number of 0s present in it.

assert countZeroes([[0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 1

[/Question] [/INST] [Code]


def countZeroes(mat: list) -> int:
        
        N = 5;
        row = N - 1;
        col = 0;
        count = 0;

        while (col < N):
                while (mat[row][col]):
                        if (row < 0):
                                return count;
                        row = row - 1;
                count = count + (row + 1);
                col = col + 1;

        return count
 

[/Code]
[/STOP] </s>","
def countZeroes(mat: list) -> int:
        
        N = 5;
        row = N - 1;
        col = 0;
        count = 0;

        while (col < N):
                while (mat[row][col]):
                        if (row < 0):
                                return count;
                        row = row - 1;
                count = count + (row + 1);
                col = col + 1;

        return count
","assert countZeroes([[0, 0, 0, 0, 1],[0, 0, 0, 1, 1],[0, 1, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 1, 1]]) == 8
assert countZeroes([[0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 1
assert countZeroes([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]) == 25
assert countZeroes([[0, 0, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 4"
"Given an integer matrix of odd dimensions (like 3 * 3 or 5 * 5), find the sum of the middle row & column elements. Return the values in an array, with the first element being the row sum and the second element being the column sum","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given an integer matrix of odd dimensions (like 3 * 3 or 5 * 5), find the sum of the middle row & column elements. Return the values in an array, with the first element being the row sum and the second element being the column sum

assert middlesum([[3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3]]) == [15, 15]
assert middlesum([[2, 5, 7],[3, 7, 2],[5, 6, 9]]) == [12, 18]
assert middlesum([[4]]) == [4, 4]
assert middlesum([[8, 2, 4], [1, 5, 9], [6, 3, 7]]) == [15, 10]

[/Question] [/INST] [Code]

def middlesum(mat: list) -> list:

        row_sum = 0
        col_sum = 0
        n = len(mat)

        for i in range(n):
                row_sum += mat[n // 2][i]
        
        for i in range(n):
                col_sum += mat[i][n // 2]

        mid_sum = [row_sum, col_sum]
        return mid_sum
        
        
 

[/Code]
[/STOP] </s>","def middlesum(mat: list) -> list:

        row_sum = 0
        col_sum = 0
        n = len(mat)

        for i in range(n):
                row_sum += mat[n // 2][i]
        
        for i in range(n):
                col_sum += mat[i][n // 2]

        mid_sum = [row_sum, col_sum]
        return mid_sum
        
        
","assert middlesum([[2, 5, 7],[3, 7, 2],[5, 6, 9]]) == [12, 18]
assert middlesum([[1, 3, 5, 6, 7], [3, 5, 3, 2, 1], [1, 2, 3, 4, 5], [7, 9, 2, 1, 6], [9, 1, 5, 3, 2]]) == [15, 18]
assert middlesum([[4]]) == [4, 4]
assert middlesum([[8, 2, 4], [1, 5, 9], [6, 3, 7]]) == [15, 10]
assert middlesum([[3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3]]) == [15, 15]"
"Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.

assert swapBits(28, 0, 3, 2) == 7
assert swapBits(47, 1, 5, 3) == 227
assert swapBits(0, 2, 6, 1) == 0

[/Question] [/INST] [Code]

def swapBits(x: int, p1: int, p2: int, n: int) -> int:
        set1 = (x >> p1) & ((1<< n) - 1)
        set2 = (x >> p2) & ((1 << n) - 1)

        xor = (set1 ^ set2)
        xor = (xor << p1) | (xor << p2)
        result = x ^ xor

        return result
 

[/Code]
[/STOP] </s>","def swapBits(x: int, p1: int, p2: int, n: int) -> int:
        set1 = (x >> p1) & ((1<< n) - 1)
        set2 = (x >> p2) & ((1 << n) - 1)

        xor = (set1 ^ set2)
        xor = (xor << p1) | (xor << p2)
        result = x ^ xor

        return result
","assert swapBits(47, 1, 5, 3) == 227
assert swapBits(28, 0, 3, 2) == 7
assert swapBits(0, 2, 6, 1) == 0"
"Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. 

assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3
assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5
assert countDistinctSubarray([1]) == 1
assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1

[/Question] [/INST] [Code]


def countDistinctSubarray(arr: list) -> int:
        n = len(arr)
        unst1 = set(arr)
        totalDist = len(unst1)
        count = 0

        for i in range(n):
                unst = set()
                for j in range(i, n):
                        unst.add(arr[j])
                        if len(unst) == totalDist:
                                count += 1

        return count
 

[/Code]
[/STOP] </s>","
def countDistinctSubarray(arr: list) -> int:
        n = len(arr)
        unst1 = set(arr)
        totalDist = len(unst1)
        count = 0

        for i in range(n):
                unst = set()
                for j in range(i, n):
                        unst.add(arr[j])
                        if len(unst) == totalDist:
                                count += 1

        return count
","assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5
assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1
assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3
assert countDistinctSubarray([1]) == 1
assert countDistinctSubarray([]) == 0"
"Word Pattern: Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Word Pattern: Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.

assert wordPattern(""abab"", ""dog cat dog cat"") == True
assert wordPattern(""xyz"", ""apple banana apple"") == False

[/Question] [/INST] [Code]

def wordPattern(pattern: str, s: str) -> bool:
    map_char = {}
    map_word = {}
    
    words = s.split(' ')
    if len(words) != len(pattern):
        return False
    
    for c, w in zip(pattern, words):
        if c not in map_char:
            if w in map_word:
                return False
            else:
                map_char[c] = w
                map_word[w] = c
        else:
            if map_char[c] != w:
                return False
    return True 

[/Code]
[/STOP] </s>","def wordPattern(pattern: str, s: str) -> bool:
    map_char = {}
    map_word = {}
    
    words = s.split(' ')
    if len(words) != len(pattern):
        return False
    
    for c, w in zip(pattern, words):
        if c not in map_char:
            if w in map_word:
                return False
            else:
                map_char[c] = w
                map_word[w] = c
        else:
            if map_char[c] != w:
                return False
    return True","assert wordPattern(""abba"", ""dog cat cat dog"")==True
assert wordPattern(""aaaa"", ""dog dog dog dog"") == True
assert wordPattern(""xyz"", ""apple banana apple"") == False
assert wordPattern(""xyx"", ""apple banana apple"") == True
assert wordPattern(""abab"", ""dog cat dog cat"") == True
assert wordPattern(""aaaa"", ""dog dog dog cat"") == False
assert wordPattern(""aabb"", ""dog dog cat cat"") == True
assert wordPattern(""abc"", ""dog"") == False  # Not enough words
assert wordPattern("""", ""dog cat"") == False  # Empty pattern
assert wordPattern(""a"", ""dog cat dog cat"") == False  # Not enough pattern characters
assert wordPattern(""ab"", """") == False  # Empty string
assert wordPattern(""abb"", ""dog dog dog"") == False  # Same word for different pattern characters
assert wordPattern(""abba"", ""dog cat cat"") == False  # Not enough words for the pattern
assert wordPattern(""abba"", ""dog cat cat dog fish"") == False  # Extra words beyond the pattern length"
"Given two arrays that have the same values but in a different order and having no duplicate elements in it, we need to make a second array the same as a first array using the minimum number of swaps. ","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given two arrays that have the same values but in a different order and having no duplicate elements in it, we need to make a second array the same as a first array using the minimum number of swaps. 

assert minSwapToMakeArraySame([12, 14, 11, 15], [14, 12, 15, 11]) == 2

[/Question] [/INST] [Code]

def minSwapsToSort(arr):
        n = len(arr)
        arrPos = [[0 for x in range(2)] 
                                for y in range(n)] 
        
        for i in range(n):         
                arrPos[i][0] = arr[i] 
                arrPos[i][1] = i 
        arrPos.sort() 
        vis = [False] * (n) 
        ans = 0

        for i in range(n): 
                if (vis[i] or arrPos[i][1] == i): 
                        continue
                cycle_size = 0
                j = i 
                
                while (not vis[j]):                 
                        vis[j] = 1
                        j = arrPos[j][1] 
                        cycle_size+= 1
                ans += (cycle_size - 1) 

        return ans 

def minSwapToMakeArraySame(a: list, b: list) -> int:
        n = len(a) 
        mp = {} 
        for i in range(n): 
                mp[b[i]] = i 
        for i in range(n): 
                b[i] = mp[a[i]] 
        return minSwapsToSort(b) 
 

[/Code]
[/STOP] </s>","def minSwapsToSort(arr):
        n = len(arr)
        arrPos = [[0 for x in range(2)] 
                                for y in range(n)] 
        
        for i in range(n):         
                arrPos[i][0] = arr[i] 
                arrPos[i][1] = i 
        arrPos.sort() 
        vis = [False] * (n) 
        ans = 0

        for i in range(n): 
                if (vis[i] or arrPos[i][1] == i): 
                        continue
                cycle_size = 0
                j = i 
                
                while (not vis[j]):                 
                        vis[j] = 1
                        j = arrPos[j][1] 
                        cycle_size+= 1
                ans += (cycle_size - 1) 

        return ans 

def minSwapToMakeArraySame(a: list, b: list) -> int:
        n = len(a) 
        mp = {} 
        for i in range(n): 
                mp[b[i]] = i 
        for i in range(n): 
                b[i] = mp[a[i]] 
        return minSwapsToSort(b) 
","assert minSwapToMakeArraySame([3, 6, 4, 8], [4, 6, 8, 3]) == 2
assert minSwapToMakeArraySame([1, 5, 3, 7, 2], [2, 3, 5, 1, 7]) == 3
assert minSwapToMakeArraySame([12, 14, 11, 15], [14, 12, 15, 11]) == 2
assert minSwapToMakeArraySame([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == 2"
"Valid Parentheses: Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Valid Parentheses: Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.



[/Question] [/INST] [Code]

def isValid(s: str) -> bool:
    stack = []
    mapping = {"")"": ""("", ""}"": ""{"", ""]"": ""[""}
    for char in s:
        if char in mapping:
            top_element = stack.pop() if stack else '#'
            if mapping[char] != top_element:
                return False
        else:
            stack.append(char)
    return not stack
 

[/Code]
[/STOP] </s>","def isValid(s: str) -> bool:
    stack = []
    mapping = {"")"": ""("", ""}"": ""{"", ""]"": ""[""}
    for char in s:
        if char in mapping:
            top_element = stack.pop() if stack else '#'
            if mapping[char] != top_element:
                return False
        else:
            stack.append(char)
    return not stack
","assert isValid(""(]"")==False
assert isValid(""([)]"") == False
assert isValid(""{[]}"") == True
assert isValid(""((()))"") == True
assert isValid("")"") == False
assert isValid(""(}"") == False
assert isValid(""({})[]"") == True
assert isValid("""") == True
assert isValid(""([]{})"") == True
assert isValid(""[({(())}[()])]"") == True
assert isValid(""(((((({{{{{{{[[[[[[]]]]]]}}}}}}}))))))"") == True
assert isValid(""{[}]"") == False
assert isValid(""([{])"") == False
assert isValid(""(["") == False
assert isValid(""([]"") == False
assert isValid(""[])"") == False
assert isValid(""{"") == False
assert isValid(""{}}"") == False"
"Backspace String Compare: Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.

Note that after backspacing an empty text, the text will continue empty.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Backspace String Compare: Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.

Note that after backspacing an empty text, the text will continue empty.



[/Question] [/INST] [Code]

def backspaceCompare(S: str, T: str) -> bool:
    def build(S):
        ans = []
        for c in S:
            if c != '#':
                ans.append(c)
            elif ans:
                ans.pop()
        return """".join(ans)
    return build(S) == build(T)
 

[/Code]
[/STOP] </s>","def backspaceCompare(S: str, T: str) -> bool:
    def build(S):
        ans = []
        for c in S:
            if c != '#':
                ans.append(c)
            elif ans:
                ans.pop()
        return """".join(ans)
    return build(S) == build(T)
","assert backspaceCompare(""ab##"", ""c#d#"")==True
assert backspaceCompare(""a##c"", ""#a#c"") == True
assert backspaceCompare(""abc#d"", ""acc#c"") == False
assert backspaceCompare(""p##qr"", ""p#q#r"") == False
assert backspaceCompare(""####"", ""b#"") == True
assert backspaceCompare("""", ""b#"") == True
assert backspaceCompare(""a###b"", ""b"") == True
assert backspaceCompare(""a"", ""a#"") == False"
