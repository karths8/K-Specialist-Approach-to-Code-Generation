question,prompt,code,asserts
"Trapping Rain Water: Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Trapping Rain Water: Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

assert trap([2, 0, 2]) == 2
assert trap([2, 1, 0, 1, 2, 1, 2, 1]) == 5
assert trap([6, 5, 4, 3, 2, 1]) == 0
assert trap([3, 0, 1, 3, 0, 5]) == 8

[/Question] [/INST]","def trap(bars: list) -> int:
    if not bars or len(bars) < 3:
        return 0
    volume = 0
    left, right = 0, len(bars) - 1
    l_max, r_max = bars[left], bars[right]
    while left < right:
        l_max, r_max = max(bars[left], l_max), max(bars[right], r_max)
        if l_max <= r_max:
            volume += l_max - bars[left]
            left += 1
        else:
            volume += r_max - bars[right]
            right -= 1
    return volume
","assert trap([4,2,0,3,2,5])==9
assert trap([3, 0, 1, 3, 0, 5]) == 8
assert trap([1, 2, 3, 4, 5, 6]) == 0
assert trap([6, 5, 4, 3, 2, 1]) == 0
assert trap([1, 0, 1, 0, 1, 0, 1]) == 3
assert trap([2, 0, 2]) == 2
assert trap([5, 4, 1, 2]) == 1
assert trap([0, 7, 1, 4, 6]) == 7
assert trap([0, 0, 0, 0, 0]) == 0
assert trap([2, 1, 0, 1, 2, 1, 2, 1]) == 5
assert trap([1, 3, 2, 4, 1, 3, 1, 4, 5, 2, 2, 1, 4, 2, 2]) == 15"
"Minimum Time Visiting All Points: On a 2D plane, there are n points with integer coordinates points[i] = [xi, yi]. Return the minimum time in seconds to visit all the points in the order given by points.

You can move according to these rules:

In 1 second, you can either:
move vertically by one unit,
move horizontally by one unit, or
move diagonally sqrt(2) units (in other words, move one unit vertically then one unit horizontally in 1 second).
You have to visit the points in the same order as they appear in the array.
You are allowed to pass through points that appear later in the order, but these do not count as visits.","<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Minimum Time Visiting All Points: On a 2D plane, there are n points with integer coordinates points[i] = [xi, yi]. Return the minimum time in seconds to visit all the points in the order given by points.

You can move according to these rules:

In 1 second, you can either:
move vertically by one unit,
move horizontally by one unit, or
move diagonally sqrt(2) units (in other words, move one unit vertically then one unit horizontally in 1 second).
You have to visit the points in the same order as they appear in the array.
You are allowed to pass through points that appear later in the order, but these do not count as visits.



[/Question] [/INST]","from typing import List
def minTimeToVisitAllPoints(points: List[List[int]]) -> int:
    def rule(A, B):
        return max(abs(A[0] - B[0]), abs(A[1] - B[1]))
    s = 0
    for tup1, tup2 in zip(points[:-1], points[1:]):
        s += rule(tup1, tup2)
    return s","assert minTimeToVisitAllPoints([[3,2],[-2,2]])==5
assert minTimeToVisitAllPoints([[0,0],[1,1],[1,2]]) == 2
assert minTimeToVisitAllPoints([[1,1]]) == 0
assert minTimeToVisitAllPoints([[2,3],[4,4],[7,8],[10,12]]) == 10
assert minTimeToVisitAllPoints([[0,0],[2,3],[5,5],[7,2]]) == 9
assert minTimeToVisitAllPoints([[10,10],[10,10]]) == 0
assert minTimeToVisitAllPoints([[3,10],[4,8],[3,4],[5,1],[7,0]]) == 11"
Given an array reorder it so that even numbers appear first,"<s>[INST] <<SYS>>
You are an assistant tasked with generating code given a question and some Examples / Explanations along with the question. The question will be given under the heading ""Question:"" and the examples or explanations will be given under ""Example / Explanation:"". Your job is to generate the code and complete the content under the heading title ""Code:"". 
<</SYS>>


[Question]
        
Given an array reorder it so that even numbers appear first

assert even_odd_reorder([2, 4, 6, 8]) == [2, 4, 6, 8]

[/Question] [/INST]","def even_odd_reorder(arr: list) -> list:
  nextEven = 0
  nextOdd = len(arr) - 1
  while nextEven < nextOdd:
    if arr[nextEven] % 2 == 0:
      nextEven += 1
    else:
      temp = arr[nextEven]
      arr[nextEven] = arr[nextOdd]
      arr[nextOdd] = temp
      nextOdd -= 1
  return arr
","assert even_odd_reorder([1,2,3,4,5,6,7,8,9]) == [8, 2, 6, 4, 5, 7, 3, 9, 1]
assert even_odd_reorder([]) == []
assert even_odd_reorder([2, 4, 6, 8]) == [2, 4, 6, 8]
assert even_odd_reorder([7, 9, 2]) == [2, 9, 7]
assert even_odd_reorder([10, 13, 17, 16, 15, 12]) == [10, 12, 16, 15, 17, 13]"
