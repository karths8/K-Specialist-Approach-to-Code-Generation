[{"few_shot_keywords": "['square', 'permutation', 'math', 'loop', 'multiplication', 'iteration', 'sum', 'series']", "test_keywords": "['period', 'iteration', 'math', 'series', 'loop', 'sum', 'search', 'modification', 'time']", "prompt_tokens": 493, "total_tokens": 869, "completion_tokens": 376, "completion": "[Question 2]\n\nWrite a function to find the period of a given series. The period of a series is defined as the minimum number of iterations after which the series starts repeating. For example, in the series [2, 3, 5, 2, 3, 5, 2, 3, 5, ...], the period is 3 because after 3 iterations, the series starts repeating.\n\nWrite a function to find the period of a given series and handle cases where the series does not have a repeating pattern.\n\n[/Question 2]\n\n[Code 2]\n\ndef findPeriod(series: list) -> int:\n    n = len(series)\n    for period in range(1, n//2 + 1):\n        is_repeating = True\n        for i in range(n - period):\n            if series[i] != series[i + period]:\n                is_repeating = False\n                break\n        if is_repeating:\n            return period\n    return n\n\n[/Code 2]\n\n[Asserts 2]\n\nassert findPeriod([1, 2, 3, 1, 2, 3]) == 3\nassert findPeriod([2, 4, 6, 8, 10, 12, 14]) == 1\nassert findPeriod([3, 3, 3, 3, 3, 3]) == 1\nassert findPeriod([5, 6, 7, 5, 6, 7, 5, 6, 7, 5, 6, 7]) == 3\nassert findPeriod([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.791}, {"few_shot_keywords": "['math', 'while loop', 'perfect power', 'integer', 'graph', 'factorization', 'exponential', 'add', 'boolean', 'loop']", "test_keywords": "['numbers', 'math', 'input', 'integer', 'boolean', 'loop', 'exponential', 'perfect power', 'signs', 'factorization']", "prompt_tokens": 477, "total_tokens": 749, "completion_tokens": 272, "completion": "[Question 2]\n\nWrite a function that takes in a list of integers and returns True if the product of all the numbers is a perfect power (i.e., it can be expressed as an integer raised to an integer power), and False otherwise.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef isProductPerfectPower(numbers: List[int]) -> bool:\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    if product < 0:\n        product = -product\n    \n    if product == 1:\n        return True\n    \n    for base in range(2, product):\n        power = 2\n        while True:\n            pow_ = pow(base, power)\n            if pow_ == product:\n                return True\n            if pow_ > product:\n                break\n            power += 1\n            \n    return False\n\n[/Code 2]\n\n[Asserts 2]\n\nassert isProductPerfectPower([2, 3, 5])==False\nassert isProductPerfectPower([2, 3, 4])==True\nassert isProductPerfectPower([1, 2, 3, 4, 5, 6])==False\nassert isProductPerfectPower([2, 2, 2, 2])==True\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.73}, {"few_shot_keywords": "['factorial', 'division', 'series', 'sum', 'number', 'modulus', 'multiplication', 'math', 'calculation']", "test_keywords": "['series', 'size', 'even', 'calculation', 'math', 'multiplication', 'random', 'factorial', 'number', 'unique', 'input', 'sum']", "prompt_tokens": 462, "total_tokens": 690, "completion_tokens": 228, "completion": "[Question 2]\n\nWrite a Python function to calculate the sum of unique even numbers in a given list of numbers.\n\n[/Question 2]\n\n[Code 2]\n\ndef sumOfUniqueEvenNumbers(numbers):\n    unique_evens = set(num for num in numbers if num % 2 == 0)\n    return sum(unique_evens)\n\n[/Code 2]\n\n[Asserts 2]\n\nassert sumOfUniqueEvenNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 20\nassert sumOfUniqueEvenNumbers([2, 2, 4, 4, 6, 6, 8, 8, 10, 10]) == 30\nassert sumOfUniqueEvenNumbers([1, 3, 5, 7, 9]) == 0\nassert sumOfUniqueEvenNumbers([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 30\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.814}, {"few_shot_keywords": "['matrix', 'distance', 'boolean', 'groups', 'array', 'inverse', 'equality', 'MSB', 'numpy', 'transpose', 'definite integral']", "test_keywords": "['transpose', 'boolean', 'numpy', 'equality', 'matrix', 'trapezoidal rule', 'array', 'empty', 'inverse', 'equivalent', 'tuple', 'format']", "prompt_tokens": 558, "total_tokens": 864, "completion_tokens": 306, "completion": "[Question 2]\n\nWrite a function to check if two given matrices are equal or not. Return True if the matrices are equal, otherwise return False. The matrices are represented as 2D arrays and should be of the same dimensions.\n\n[/Question 2]\n\n[Code 2]\n\nimport numpy as np\n\ndef areMatricesEqual(matrix1: List[List[int]], matrix2: List[List[int]]) -> bool:\n\tmatrix1 = np.array(matrix1)\n\tmatrix2 = np.array(matrix2)\n\treturn np.array_equal(matrix1, matrix2)\n\n[/Code 2]\n\n[Asserts 2]\n\nassert areMatricesEqual([[1, 2], [3, 4]], [[1, 2], [3, 4]])==True\nassert areMatricesEqual([[1, 2], [3, 4]], [[1, 0], [3, 4]])==False\nassert areMatricesEqual([[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]])==True\nassert areMatricesEqual([[1, 2], [3, 4]], [[1, 2, 3], [4, 5, 6]])==False\nassert areMatricesEqual([[1, 0], [0, 1]], [[1, 0], [0, 1]])==True\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.817}, {"few_shot_keywords": "['sequence', 'print', 'element', 'Fibonacci', 'signs', 'common ratio', 'nested loop', 'inclusive', 'numbers', 'geometric progression']", "test_keywords": "['sequence', 'OR', 'movement', 'common ratio', 'numbers', 'print', 'geometric progression', 'range', 'counting']", "prompt_tokens": 552, "total_tokens": 735, "completion_tokens": 183, "completion": "[Question 2]\n\nWrite a program that takes a range of numbers and counts the movement in a Geometric Progression (GP) sequence within that range. The program should print the count of elements in the GP sequence within the given range.\n\n[/Question 2]\n\n[Code 2]\n\ndef countGPInRange(start: int, end: int, r: int) -> int:\n    count = 0\n    while start <= end:\n        count += 1\n        start *= r\n        if start > end:\n            break\n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countGPInRange(1, 100, 2) == 7\nassert countGPInRange(3, 500, 5) == 4\nassert countGPInRange(5, 1000, 3) == 5\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.932}, {"few_shot_keywords": "['URL', 'list', 'fractions', 'tuple', 'exist', 'typing', 'HCF', 'math', 'greater than', 'gcd', 'array', 'twice']", "test_keywords": "['gcd', 'tuple', 'typing', 'math', 'list', 'array', 'HCF', 'equivalent', 'cycle', 'fractions']", "prompt_tokens": 582, "total_tokens": 918, "completion_tokens": 336, "completion": "[Question 2]\n\nGiven a list of tuples, each containing two numbers, write a function to check if the two numbers in the tuple are equivalent fractions. An equivalent fraction is one where the ratio of the two numbers is the same.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List, Tuple\n\ndef checkEquivalentFractions(tuples: List[Tuple[int, int]]) -> List[bool]:\n    result = []\n    for t in tuples:\n        a, b = t\n        if a == 0 and b == 0:\n            result.append(True)\n        elif a == 0 or b == 0:\n            result.append(False)\n        else:\n            hcf_a_b = gcd(a, b)\n            if hcf_a_b != 0:\n                a = a // hcf_a_b\n                b = b // hcf_a_b\n            result.append((a, b) == t)\n    return result\n\n[/Code 2]\n\n[Asserts 2]\n\nassert checkEquivalentFractions([(1, 2), (2, 4), (3, 6)]) == [True, True, True]\nassert checkEquivalentFractions([(3, 5), (7, 11), (10, 20)]) == [False, False, True]\nassert checkEquivalentFractions([(4, 8), (6, 9), (4, 7)]) == [True, False, False]\nassert checkEquivalentFractions([(0, 5), (3, 0), (0, 0)]) == [False, False, True]\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.711}]