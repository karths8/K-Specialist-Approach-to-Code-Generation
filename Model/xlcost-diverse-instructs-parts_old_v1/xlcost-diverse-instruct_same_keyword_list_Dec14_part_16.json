[{"few_shot_keywords": "['inscribed', 'math', 'integer', 'tree traversal', 'conditional', 'iteration', 'leaf node', 'count', 'array', 'segments']", "test_keywords": "['segments', 'array', 'integer', 'count', 'iteration', 'size', 'conditional', 'replacements', 'math', 'direction']", "prompt_tokens": 555, "total_tokens": 881, "completion_tokens": 326, "completion": "[Question 2]\n\nWrite a program that takes an array of integers and replaces each negative integer with its absolute value. Then, it calculates the sum of all the positive integers in the array and returns the count of segments where the sum is greater than a given integer X.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\n\ndef replaceNegativesAndCountSegments(arr: List[int], X: int) -> int:\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[i] = abs(arr[i])\n    count = 0\n    segment_sum = 0\n    for num in arr:\n        if num >= 0:\n            segment_sum += num\n        else:\n            if segment_sum > X:\n                count += 1\n            segment_sum = 0\n    if segment_sum > X:\n        count += 1\n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert replaceNegativesAndCountSegments([-3, 4, -5, 6, 7], 10) == 2\nassert replaceNegativesAndCountSegments([1, -2, 3, -4, 5, 6, 7], 15) == 1\nassert replaceNegativesAndCountSegments([5, -6, 7, 8, -9, 10], 20) == 1\nassert replaceNegativesAndCountSegments([-2, -2, -2, -2], 0) == 4\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.925}, {"few_shot_keywords": "['sphere', 'counter', 'range', 'table', 'integer', 'array', 'frequency', 'inclusive']", "test_keywords": "['substrings', 'differences', 'counter', 'array', 'consecutive', 'range', 'integer', 'frequency', 'inclusive']", "prompt_tokens": 539, "total_tokens": 800, "completion_tokens": 261, "completion": "[Question 2]\n\nGiven an array of integers, find the number of unique differences between all possible pairs of consecutive integers within a given range.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\nfrom collections import Counter\n\ndef uniqueDifferencesInRange(arr: List[int], n: int, l: int, r: int) -> int:\n    diffs = set()\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if l <= diff <= r:\n                diffs.add(diff)\n    return len(diffs)\n\n[/Code 2]\n\n[Asserts 2]\n\nassert uniqueDifferencesInRange([1, 3, 5, 7], 4, 1, 3)==2\nassert uniqueDifferencesInRange([1, 3, 5, 7], 4, 4, 6)==1\nassert uniqueDifferencesInRange([3, 7, 9, 11], 4, 2, 5)==3\nassert uniqueDifferencesInRange([2, 4, 6, 8, 10], 5, 1, 3)==0\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.806}, {"few_shot_keywords": "['combinations', 'iteration', 'modulo', 'divisibility', 'consecutive', 'triplets', 'array', 'number']", "test_keywords": "['parallelogram', 'triplets', 'combinations', 'surface area', 'conditional', 'divisibility', 'array', 'iteration', 'loops', 'modulo', 'len']", "prompt_tokens": 571, "total_tokens": 1008, "completion_tokens": 437, "completion": "[Question 2]\n\nGiven a list of coordinates representing the vertices of several parallelograms, find the total surface area of all the parallelograms in the list.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef calculateParallelogramSurfaceArea(coords: List[List[int]]) -> float:\n    def calculateArea(x1, y1, x2, y2, x3, y3):\n        return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))\n    \n    totalArea = 0\n    for i in range(len(coords)):\n        for j in range(i+1, len(coords)):\n            for k in range(j+1, len(coords)):\n                x1, y1 = coords[i]\n                x2, y2 = coords[j]\n                x3, y3 = coords[k]\n                if (x1 + x2) % 2 == 0 and (y1 + y2) % 2 == 0 and (x2 + x3) % 2 == 0 and (y2 + y3) % 2 == 0 and (x1 + x3) % 2 == 0 and (y1 + y3) % 2 == 0:\n                    totalArea += calculateArea(x1, y1, x2, y2, x3, y3)\n    return totalArea\n\n[/Code 2]\n\n[Asserts 2]\n\nassert calculateParallelogramSurfaceArea([[0, 0], [1, 1], [2, 2]]) == 0\nassert calculateParallelogramSurfaceArea([[0, 0], [1, 1], [2, 0], [1, -1]]) == 3.0\nassert calculateParallelogramSurfaceArea([[0, 0], [1, 1], [2, 0], [1, -1], [0, -1], [-1, 0]]) == 8.0\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.824}, {"few_shot_keywords": "['range', 'array', 'sorting', 'sliding window', 'graph theory', 'largest', 'zeros', 'frequency', 'unsorted', 'integer', 'size', 'smallest', 'kth']", "test_keywords": "['integer', 'pi', 'quadrilateral', 'sin', 'kth', 'sorting', 'smallest', 'sets', 'range', 'wildcard', 'largest', 'array', 'unsorted']", "prompt_tokens": 544, "total_tokens": 738, "completion_tokens": 194, "completion": "[Question 2]\n\nYou are given an unsorted array of integers. Write a function to find the kth smallest integer in the array using a sorting algorithm.\n\n[/Question 2]\n\n[Code 2]\n\ndef kth_smallest(arr, k):\n    arr.sort()\n    return arr[k-1]\n\n[/Code 2]\n\n[Asserts 2]\n\nassert kth_smallest([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3) == 3\nassert kth_smallest([9, 2, 5, 3, 7, 11, 8, 5, 6], 5) == 6\nassert kth_smallest([10, 20, 15, 25, 30, 40], 4) == 25\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.77}, {"few_shot_keywords": "['equal', 'boolean', 'integers', 'search', 'even sum', 'ranges', 'check', 'queries', 'compare', 'determine', 'interval']", "test_keywords": "['queries', 'check', 'determine', 'perfect number', 'ranges', 'search', 'divisor', 'interval', 'boolean']", "prompt_tokens": 594, "total_tokens": 930, "completion_tokens": 336, "completion": "[Question 2]\n\nGiven a range of integers, determine whether each number in the range is a perfect number or not. A perfect number is a positive integer that is equal to the sum of its proper divisors, excluding itself. Implement a function that takes a range of integers and returns a boolean array indicating whether each number in the range is a perfect number or not.\n\n[/Question 2]\n\n[Code 2]\n\ndef is_perfect_number(num: int) -> bool:\n    if num <= 1:\n        return False\n    divisors_sum = 1\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            divisors_sum += i\n            if i != num // i:\n                divisors_sum += num // i\n    return divisors_sum == num\n\ndef check_perfect_numbers(start: int, end: int) -> List[bool]:\n    result = []\n    for num in range(start, end + 1):\n        result.append(is_perfect_number(num))\n    return result\n\n[/Code 2]\n\n[Asserts 2]\n\nassert check_perfect_numbers(1, 10) == [False, False, False, False, False, True, False, True, False, False]\nassert check_perfect_numbers(10, 20) == [False, False, False, False, False, False, False, False, False, False, False]\nassert check_perfect_numbers(20, 30) == [False, False, False, False, False, False, False, False, False, False]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.703}, {"few_shot_keywords": "['sorted', 'data structure', 'division', 'arrays', 'indexing', 'length', 'unsorted', 'merge', 'iteration', 'median']", "test_keywords": "['arrays', 'visited', 'sorted', 'length', 'iteration', 'merge', 'indexing', 'median', 'division', 'position']", "prompt_tokens": 670, "total_tokens": 900, "completion_tokens": 230, "completion": "[Question 2]\n\nGiven a sorted array of integers, write a function to find the median of the array.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\n\ndef findMedianSortedArray(nums: List[int]) -> float:\n    length = len(nums)\n    if length % 2 == 0:\n        return (nums[length // 2 - 1] + nums[length // 2]) / 2\n    else:\n        return nums[length // 2]\n\n[/Code 2]\n\n[Asserts 2]\n\nassert findMedianSortedArray([1, 3, 5]) == 3.0\nassert findMedianSortedArray([1, 3, 5, 7]) == 4.0\nassert findMedianSortedArray([1, 3, 5, 7, 9]) == 5.0\nassert findMedianSortedArray([2, 4, 6, 8, 10, 12]) == 7.0\nassert findMedianSortedArray([1]) == 1.0\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.798}]