[{"few_shot_keywords": "['maximum', 'order', 'matrix', 'search', 'interval', 'nested loop', 'dynamic programming', 'sum', 'submatrix', 'iteration', 'side lengths', '2D', 'modulo', 'non-decreasing']", "test_keywords": "['maximum', 'non-decreasing', 'order', 'nested loop', 'coordinates', 'multiplication', 'submatrix', 'iteration', 'dynamic programming', 'sum', '2D', 'matrix']", "prompt_tokens": 686, "total_tokens": 1143, "completion_tokens": 457, "completion": "[Question 2]\n\nGiven a 2D matrix, your task is to find the maximum sum of elements in any non-decreasing submatrix, where the submatrix is formed by selecting a rectangular area in the matrix.\n\nWrite a function `maxNonDecreasingSumSubmatrix` to find the maximum sum of elements in any non-decreasing submatrix of the given matrix.\n\n[/Question 2]\n\n[Code 2]\n\ndef maxNonDecreasingSumSubmatrix(matrix: List[List[int]]) -> int:\n    m, n = len(matrix), len(matrix[0])\n    result = 0\n    \n    for i in range(m):\n        for j in range(n):\n            for p in range(i, m):\n                for q in range(j, n):\n                    if isNonDecreasing(matrix, i, j, p, q):\n                        submatrixSum = calculateSubmatrixSum(matrix, i, j, p, q)\n                        result = max(result, submatrixSum)\n    \n    return result\n\ndef isNonDecreasing(matrix, top, left, bottom, right):\n    for i in range(top, bottom):\n        for j in range(left, right):\n            if matrix[i][j] > matrix[i+1][j] or matrix[i][j] > matrix[i][j+1]:\n                return False\n    return True\n\ndef calculateSubmatrixSum(matrix, top, left, bottom, right):\n    total = 0\n    for i in range(top, bottom+1):\n        for j in range(left, right+1):\n            total += matrix[i][j]\n    return total\n\n[/Code 2]\n\n[Asserts 2]\n\nassert maxNonDecreasingSumSubmatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 45\nassert maxNonDecreasingSumSubmatrix([[1, 2], [3, 4]]) == 10\nassert maxNonDecreasingSumSubmatrix([[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]]) == 33\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.835}, {"few_shot_keywords": "['odd', 'unchanged', 'queries', 'sort', 'list', 'non-decreasing', 'sub-array', 'tuple', 'rearrange', 'array']", "test_keywords": "['list', 'sub-array', 'array', 'rearrange', 'queries', 'sort', 'ascending order', 'tuple', 'positions', 'non-decreasing', 'recursion']", "prompt_tokens": 639, "total_tokens": 1146, "completion_tokens": 507, "completion": "[Question 2]\n\nYou are given a list of n integers and q queries. Each query contains two integers l and r. You have to rearrange the sub-array list[l...r] in ascending order and return the positions of the rearranged elements.\n\nWrite a function to solve the above problem, using recursion and return the list of positions after rearranging the sub-array for each query.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List, Tuple\n\ndef rearrangeSubarrayPositions(arr: List[int], queries: List[Tuple[int, int]]) -> List[List[int]]:\n    result = []\n\n    def rearrangeSubarray(arr, l, r):\n        if l == r:\n            return [l]\n        mid = (l + r) // 2\n        left = rearrangeSubarray(arr, l, mid)\n        right = rearrangeSubarray(arr, mid+1, r)\n        \n        merged = []\n        i, j = 0, 0\n        while i < len(left) and j < len(right):\n            if arr[left[i]] <= arr[right[j]]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n        merged += left[i:]\n        merged += right[j:]\n        return merged\n\n    for l, r in queries:\n        subarr = arr[l-1:r]\n        positions = [x+1 for x in rearrangeSubarray(subarr, 0, len(subarr)-1)]\n        result.append(positions)\n    return result\n\n[/Code 2]\n\n[Asserts 2]\n\nassert rearrangeSubarrayPositions([5, 3, 1, 9, 2, 8], [(1, 4), (2, 5)]) == [[3, 1, 2, 4], [1, 3, 2, 5]]\nassert rearrangeSubarrayPositions([1, 2, 3, 4, 5], [(1, 3), (2, 4)]) == [[1, 2, 3], [2, 3, 4]]\nassert rearrangeSubarrayPositions([5, 4, 3, 2, 1], [(2, 4), (3, 5)]) == [[3, 4, 5], [3, 4, 5]]\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.917}, {"few_shot_keywords": "['ratio', 'array', 'reverse', 'equality', 'subarray', 'comparison', 'list', 'deadline', 'vertices', 'operation']", "test_keywords": "['comparison', 'money', 'equality', 'subarray', 'max', 'list', 'operation', 'array', 'reverse', 'heights']", "prompt_tokens": 594, "total_tokens": 882, "completion_tokens": 288, "completion": "[Question 2]\n\nGiven an array of integers representing the heights of buildings, find the maximum amount of money you can make by selling the buildings. You can perform the following operation any number of times:\n\nChoose some subarray of buildings and reverse the heights. Then, for each building in the subarray, you will earn money equal to the height of the building.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef maxMoneyBySellingBuildings(heights: List[int]) -> int:\n    n = len(heights)\n    max_money = 0\n    for i in range(n):\n        for j in range(i, n):\n            money = sum(heights[i:j+1]) * len(heights[i:j+1])\n            max_money = max(max_money, money)\n    return max_money\n\n[/Code 2]\n\n[Asserts 2]\n\nassert maxMoneyBySellingBuildings([3, 1, 2, 4, 5])==40\nassert maxMoneyBySellingBuildings([1, 2, 3, 4, 5])==35\nassert maxMoneyBySellingBuildings([5, 4, 3, 2, 1])==35\nassert maxMoneyBySellingBuildings([1, 2, 3, 2, 1])==12\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.766}, {"few_shot_keywords": "['difference', 'optimization', 'minimum', 'comparison', 'minimize', 'replacement', 'remainder', 'abs', 'bitwise OR', 'maximum', 'sorting', 'array', 'integer']", "test_keywords": "['minimize', 'abs', 'reduction', 'segments', 'comparison', 'minimum', 'integer', 'subtraction', 'replacement', 'constraint', 'condition', 'maximum', 'sorting', 'array']", "prompt_tokens": 677, "total_tokens": 984, "completion_tokens": 307, "completion": "[Question 2]\n\nYou are given an array of integers representing segments on a line. The task is to minimize the absolute difference between the maximum and minimum lengths of segments after reducing the length of some segments by a certain amount. The reduction should be an integer value and the constraint is that the reduced length of a segment cannot be negative.\n\nWrite a function to find the minimum possible absolute difference between the maximum and minimum lengths of the segments after applying the reduction.\n\n[/Question 2]\n\n[Code 2]\n\ndef minimizeSegmentLengthDifference(segments: List[int], reduction: int) -> int:\n    segments.sort()\n    n = len(segments)\n    min_diff = float('inf')\n    for i in range(n):\n        reduced_segments = segments[:i] + [max(0, segments[j]-reduction) for j in range(i, n)]\n        max_len = max(reduced_segments)\n        min_len = min(reduced_segments)\n        min_diff = min(min_diff, abs(max_len - min_len))\n    return min_diff\n\n[/Code 2]\n\n[Asserts 2]\n\nassert minimizeSegmentLengthDifference([2, 5, 7, 11], 3) == 2\nassert minimizeSegmentLengthDifference([3, 8, 12, 15, 20], 5) == 7\nassert minimizeSegmentLengthDifference([1, 4, 6, 9, 27], 2) == 0\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.949}, {"few_shot_keywords": "['vertices', 'possible', 'empty', 'cyclic shifts', 'sorted', 'integers', 'performing', 'array', 'profit', 'sorting', 'merge', 'return', 'set']", "test_keywords": "['return', 'performing', 'sorted', 'selection', 'integers', 'array', 'sorting', 'rating', 'cyclic shifts', 'possible']", "prompt_tokens": 587, "total_tokens": 905, "completion_tokens": 318, "completion": "[Question 2]\n\nYou are given an array of integers representing the ratings of N movies. You want to sort the movies based on their ratings using at most K cyclic shifts. Write a function to return the sorted array after performing at most K cyclic shifts, or return an empty array if it's not possible to sort the movies using at most K cyclic shifts.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef sortMoviesByRating(arr: List[int], k: int) -> List[int]:\n    n = len(arr)\n    for i in range(k):\n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n\n[/Code 2]\n\n[Asserts 2]\n\nassert sortMoviesByRating([7, 5, 4, 3, 6], 2) == [4, 3, 5, 6, 7]\nassert sortMoviesByRating([7, 5, 4, 3, 6], 1) == [5, 4, 3, 6, 7]\nassert sortMoviesByRating([7, 5, 4, 3, 6], 3) == [3, 4, 5, 6, 7]\nassert sortMoviesByRating([7, 5, 4, 3, 6], 4) == []", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.724}, {"few_shot_keywords": "['maximum', 'array', 'integers', 'bitwise OR', 'length', 'obtained', 'subsequence', 'cyclic shifts', 'possible']", "test_keywords": "['array', 'integers', 'squares', 'length', 'prefix sum', 'possible', 'bitwise OR', 'maximum', 'subsequence']", "prompt_tokens": 589, "total_tokens": 972, "completion_tokens": 383, "completion": "[Question 2]\n\nGiven an array of integers arr[], the task is to find the maximum possible bitwise OR of subsequence of length at most K, where K is the length of the array. Additionally, the subsequence should be made up of the squares of the elements in the array.\n\n[/Question 2]\n\n[Code 2]\n\ndef maxBitwiseORSquares(arr: list) -> int:\n    n = len(arr)\n    prefix_sums = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1]\n    max_or = 0\n    for i in range(n):\n        for j in range(i, n):\n            subarray_sum = prefix_sums[j + 1] - prefix_sums[i]\n            if subarray_sum >= 0 and (subarray_sum & (subarray_sum - 1)) == 0:\n                max_or = max(max_or, subarray_sum)\n    return max_or\n\n[/Code 2]\n\n[Asserts 2]\n\nassert maxBitwiseORSquares([1, 2, 3, 4, 5]) == 5\nassert maxBitwiseORSquares([3, 4, 7, 10, 1, 2, 8, 9]) == 14\nassert maxBitwiseORSquares([2, 3, 6, 8, 10]) == 10\nassert maxBitwiseORSquares([5, 8, 9, 3, 11, 4, 3]) == 9\nassert maxBitwiseORSquares([1, 2, 3, 4, 5, 6]) == 5\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.897}]