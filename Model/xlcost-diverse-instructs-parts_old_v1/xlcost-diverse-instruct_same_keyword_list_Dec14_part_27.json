[{"few_shot_keywords": "['counting', 'combination', 'range', 'vector', 'sum', 'dp', 'undirected graph', 'recursion', 'algorithm', 'representation', 'subsequences', 'integer']", "test_keywords": "['representation', 'rows', 'row', 'divisible', 'counting', 'strings', 'sum', 'subsequence', 'algorithm', 'integer', 'combination', 'recursion', 'range']", "prompt_tokens": 556, "total_tokens": 799, "completion_tokens": 243, "completion": "[Question 2]\n\nGiven a list of strings where each string is a combination of integers, the task is to count the number of subsequences where the sum of the integers in the subsequence is divisible by a given integer K.\n\n[/Question 2]\n\n[Code 2]\n\ndef countSubsequences(arr, K):\n    n = len(arr)\n    count = 0\n    \n    for i in range(1, (1 << n)):\n        cur_sum = 0\n        for j in range(n):\n            if (i & (1 << j)):\n                cur_sum += int(arr[j])\n        \n        if cur_sum % K == 0:\n            count += 1\n    \n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countSubsequences(['1', '2', '3'], 3) == 2\nassert countSubsequences(['4', '5', '6'], 5) == 3\nassert countSubsequences(['7', '8', '9'], 4) == 4\nassert countSubsequences(['1', '2', '3', '4'], 5) == 4\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.948}, {"few_shot_keywords": "['sum', 'rows', 'chain', 'matrix', 'element', 'maximized', 'combinations', 'integer', 'columns']", "test_keywords": "['rows', 'element', 'cell', 'integer', 'matrix', 'sum', 'indexes', 'down', 'columns']", "prompt_tokens": 679, "total_tokens": 1117, "completion_tokens": 438, "completion": "[Question 2]\n\nYou are given a matrix of n rows and m columns containing integer elements. Write a function to find the maximum sum of elements starting from any cell and moving either down or right along the matrix.\n\n[/Question 2]\n\n[Code 2]\n\ndef maxSum(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    # Create a dp table to store the maximum sum till each cell\n    dp = [[0] * cols for _ in range(rows)]\n    \n    # Fill the dp table with maximum sum values\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                dp[i][j] = matrix[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + matrix[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + matrix[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    \n    return dp[rows-1][cols-1]\n\n[/Code 2]\n\n[Asserts 2]\n\nassert maxSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 29\nassert maxSum([[3, 2, 7], [1, 2, 1], [4, 1, 3]]) == 16\nassert maxSum([[1, 2, 3], [4, 5, 6]]) == 21\nassert maxSum([[5, 1, 1], [0, 2, 3], [3, 7, 1]]) == 13\nassert maxSum([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == 39\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.766}, {"few_shot_keywords": "['prime numbers', 'merge', 'integers', 'modulo', 'addition', 'math', 'decimal', 'list', 'array', 'less than or equal to']", "test_keywords": "['addition', 'factorial', 'array', 'integers', 'merge', 'math', 'set', 'list', 'prime numbers']", "prompt_tokens": 685, "total_tokens": 1176, "completion_tokens": 491, "completion": "[Question 2]\n\nWrite a function to merge two arrays of integers and return a new array containing the sum of elements at each index. If one of the arrays is shorter than the other, append the remaining elements of the longer array as is. Additionally, the function should filter out non-prime numbers from the result and return a set of unique prime numbers.\n\n[/Question 2]\n\n[Code 2]\n\ndef isPrime(n: int) -> bool: \n\tif n <= 1: \n\t\treturn False\n\tif n <= 3: \n\t\treturn True\n\tif n % 2 == 0 or n % 3 == 0: \n\t\treturn False\n\t\n\ti = 5\n\twhile i * i <= n: \n\t\tif n % i == 0 or n % (i + 2) == 0: \n\t\t\treturn False\n\t\ti += 6\n\treturn True\n\ndef mergeAndFilter(arr1: list, arr2: list) -> set:\n    result = []\n    for i in range(max(len(arr1), len(arr2))):\n        val1 = arr1[i] if i < len(arr1) else 0\n        val2 = arr2[i] if i < len(arr2) else 0\n        result.append(val1 + val2)\n    \n    prime_set = set()\n    for num in result:\n        if isPrime(num):\n            prime_set.add(num)\n    return prime_set\n\n[/Code 2]\n\n[Asserts 2]\n\nassert mergeAndFilter([2, 3, 5], [7, 11, 13, 17])== {2, 3, 5, 31}\nassert mergeAndFilter([1, 4, 6, 8], [2, 3, 5, 7])== {2, 3, 5, 7, 17}\nassert mergeAndFilter([11, 13, 17], [19, 23, 29])== {31, 41, 47}\nassert mergeAndFilter([], [2, 3, 5, 7, 11])== {2, 3, 5, 7, 11}\nassert mergeAndFilter([1, 4, 6, 8], [1, 4, 6, 8])== set()\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.746}, {"few_shot_keywords": "['adjacent', 'cycle', 'matching', 'subsequence', 'maximum', 'logic', 'circular', 'sum', 'constraint']", "test_keywords": "['maximum', 'subsequence', 'cycle', 'circular', 'tin', 'value', 'adjacent', 'constraint', 'block', 'sum', 'operations']", "prompt_tokens": 527, "total_tokens": 804, "completion_tokens": 277, "completion": "[Question 2]\n\nYou are given a list of integers representing the tin values of blocks in a circular sequence. You need to find the maximum sum of a subsequence with the constraint that no two elements in the subsequence should be adjacent in the circular sequence.\n\n[/Question 2]\n\n[Code 2]\n\ndef maxSumNoAdjacentCircular(arr):\n    def maxSumNoAdjacent(arr):\n        incl = 0\n        excl = 0\n        for i in arr:\n            new_excl = max(excl, incl)\n            incl = excl + i\n            excl = new_excl\n        return max(excl, incl)\n    max_val = maxSumNoAdjacent(arr)\n    circular_sum = sum(arr) - minSumNoAdjacent(arr)\n    return max(max_val, circular_sum)\n\n[/Code 2]\n\n[Asserts 2]\n\nassert maxSumNoAdjacentCircular([3, 2, 7, 10]) == 13\nassert maxSumNoAdjacentCircular([3, 2, 5, 10, 7]) == 15\nassert maxSumNoAdjacentCircular([5, 5, 10, 100, 10, 5]) == 110\nassert maxSumNoAdjacentCircular([1, 2, 3, 1]) == 4\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.859}, {"few_shot_keywords": "['consecutive pairs', 'node', 'subsequence', 'rank', 'sum', 'strings', 'digit sum', 'iteration', 'product', 'length', 'array', 'maximum', 'positive integers']", "test_keywords": "['array', 'node', 'consecutive pairs', 'knight', 'maximum', 'sum', 'product', 'length', 'iteration', 'subsequence', 'sort', 'positive integers', 'digit sum']", "prompt_tokens": 716, "total_tokens": 1154, "completion_tokens": 438, "completion": "[Question 2]\n\nGiven an array of positive integers, find the maximum product of the digit sum of consecutive pairs in a subsequence of length K. Additionally, ensure that the subsequence forms a knight's tour on a chessboard.\n\n[/Question 2]\n\n[Code 2]\n\ndef maxProductOfDigitSumWithKnightTour(arr: list, k: int) -> int:\n    def isKnightMove(x1, y1, x2, y2):\n        return (abs(x1 - x2) == 1 and abs(y1 - y2) == 2) or (abs(x1 - x2) == 2 and abs(y1 - y2) == 1)\n\n    n = len(arr)\n    maxSum = [0] * n\n    for i in range(n):\n        maxSum[i] = sum([int(x) for x in str(arr[i])])\n\n    res = 0\n    for i in range(n - k + 1):\n        for j in range(i + 1, n - k + 1):\n            if isKnightMove(i, maxSum[i], j, maxSum[j]):\n                res = max(res, maxSum[i] * maxSum[j])\n    \n    return res\n\n[/Code 2]\n\n[Asserts 2]\n\nassert maxProductOfDigitSumWithKnightTour([12, 33, 66, 44, 13], 3) == 132\nassert maxProductOfDigitSumWithKnightTour([22, 11, 64, 57, 34, 98, 67], 4) == 4160\nassert maxProductOfDigitSumWithKnightTour([123, 456, 789], 2) == 1872\nassert maxProductOfDigitSumWithKnightTour([5, 4, 8, 10], 2) == 72\nassert maxProductOfDigitSumWithKnightTour([1, 2, 3, 4, 5, 6, 7, 8], 3) == 42\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.787}, {"few_shot_keywords": "['factorial', 'permutations', 'prime numbers', 'students', 'combinations', 'maxVal', 'wickets', 'count', 'multiple', 'rank']", "test_keywords": "['count', 'students', 'dp', 'pattern', 'factorial', 'list', 'rank', 'combinations', 'multiple', 'permutations']", "prompt_tokens": 432, "total_tokens": 667, "completion_tokens": 235, "completion": "[Question 2]\n\nYou are given a list of N students. Find the number of ways to arrange the students in a pattern such that no two students with the same rank are adjacent to each other.\n\n[/Question 2]\n\n[Code 2]\n\ndef countValidArrangements(N: int) -> int:\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    else:\n        dp = [0] * (N + 1)\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, N + 1):\n            dp[i] = (i - 1) * (dp[i - 1] + dp[i - 2])\n        return dp[N]\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countValidArrangements(3) == 4\nassert countValidArrangements(4) == 18\nassert countValidArrangements(5) == 96\nassert countValidArrangements(1) == 1\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.763}, {"few_shot_keywords": "['boolean', 'loop', 'comparison', 'row', 'operation', 'fibonacci', 'wickets', 'conversion', 'minimization', 'probability distribution', 'power', 'math', 'integer']", "test_keywords": "['loop', 'GCD', 'comparison', 'operation', 'palindrome', 'allowed', 'power', 'boolean', 'conversion', 'math', 'integer', 'conditional', 'connected']", "prompt_tokens": 572, "total_tokens": 773, "completion_tokens": 201, "completion": "[Question 2]\n\nWrite a function to determine if a given integer is a palindrome, considering only the absolute value of the integer. The function should return True if the integer is a palindrome, and False otherwise.\n\n[/Question 2]\n\n[Code 2]\n\ndef is_palindrome(num: int) -> bool:\n    if num < 0:\n        return False\n    original_num = num\n    reverse_num = 0\n    while num > 0:\n        digit = num % 10\n        reverse_num = reverse_num * 10 + digit\n        num = num // 10\n    return original_num == reverse_num\n\n[/Code 2]\n\n[Asserts 2]\n\nassert is_palindrome(121) == True\nassert is_palindrome(-121) == False\nassert is_palindrome(10) == False\nassert is_palindrome(1221) == True\nassert is_palindrome(1234321) == True\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.773}, {"few_shot_keywords": "['edges', 'labelled nodes', 'removal', 'cycle', 'subtract', 'undirected graph', 'tree', 'remove', 'graph theory', 'connected', 'isValid', 'conditional', 'minimum']", "test_keywords": "['replace', 'tree', 'connected', 'edges', 'labelled nodes', 'cycle', 'undirected graph', 'side', 'pairs', 'minimization', 'remove', 'graph theory', 'minimum']", "prompt_tokens": 900, "total_tokens": 1434, "completion_tokens": 534, "completion": "[Question 2]\n\nYou are given an undirected tree with n nodes labelled from 0 to n - 1 and an integer array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\n\nA node is a labelled node if it has a label which is a non-negative integer not greater than n - 1. The tree is represented in a way where the ith node is the node labelled i and the edge between nodes ai and bi is represented by [ai, bi]. An undirected tree is a connected graph with no cycles.\n\nWrite a function to find the minimum number of pairs of nodes that should be removed from the tree such that there is no cycle and the tree is still connected.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef minPairsRemovalToAvoidCycle(n: int, edges: List[List[int]]) -> int:\n        adj_list = {}\n        \n        for u, v in edges:\n            if u in adj_list:\n                adj_list[u].append(v)\n            else:\n                adj_list[u] = [v]\n                \n            if v in adj_list:\n                adj_list[v].append(u)\n            else:\n                adj_list[v] = [u]\n                \n        def dfs(source, parent, visited):\n            visited.add(source)\n            for neighbor in adj_list[source]:\n                if neighbor != parent:\n                    dfs(neighbor, source, visited)\n            return\n        \n        dfs(0, -1, set())\n        \n        components = 0\n        for i in range(n):\n            if i not in visited:\n                components += 1\n                dfs(i, -1, visited)\n                \n        return components - 1\n\n[/Code 2]\n\n[Asserts 2]\n\nassert minPairsRemovalToAvoidCycle(5, [[0, 1], [1, 2], [2, 3], [1, 4]]) == 0\nassert minPairsRemovalToAvoidCycle(7, [[0, 1], [1, 2], [2, 3], [2, 4], [3, 5], [4, 6]]) == 3\nassert minPairsRemovalToAvoidCycle(5, [[0, 1], [1, 2], [2, 3], [1, 2], [2, 4]]) == 2\nassert minPairsRemovalToAvoidCycle(3, [[0, 1], [1, 2]]) == 0\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.859}, {"few_shot_keywords": "['product', 'prime factors', 'row', 'maximum', 'path', 'countPrimeFactors', '2D array', 'isPrime', 'count', 'unordered', 'cells']", "test_keywords": "['isPrime', 'count', 'countPrimeFactors', 'row', 'maximum', 'sum of digits', 'prime factors', '2D array', 'product', 'alternating']", "prompt_tokens": 823, "total_tokens": 1412, "completion_tokens": 589, "completion": "[Question 2]\n\nGiven a 2D array, find the row whose sum of digits of product of its elements is maximum and has an alternating count of prime factors.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef isPrime(n: int) -> bool:\n\tif (n <= 1):\n\t\treturn False\n\tif (n <= 3):\n\t\treturn True\n\tif (n % 2 == 0 or n % 3 == 0):\n\t\treturn False\n\ti = 5\n\twhile(i * i <= n):\n\t\tif (n % i == 0 or n % (i + 2) == 0):\n\t\t\treturn False\n\t\ti = i + 6\n\treturn True\n\ndef countPrimeFactors(n: int) -> int:\n\tcnt = 0\n\tif (n % 2 == 0):\n\t\twhile (n % 2 == 0):\n\t\t\tn //= 2\n\t\t\tcnt += 1\n\tfor i in range (3, int(n ** 0.5) + 1, 2):\n\t\tif (n % i == 0):\n\t\t\twhile (n % i == 0):\n\t\t\t\tn //= i\n\t\t\t\tcnt += 1\n\tif (n > 2):\n\t\tcnt += 1\n\treturn cnt\n\ndef sumOfDigits(n: int) -> int:\n\tsum = 0\n\twhile (n > 0):\n\t\tsum += n % 10\n\t\tn //= 10\n\treturn sum\n\ndef maxSumOfDigitsProduct(a: List[List[int]], n: int, m: int) -> int :\n\tmaxm = -1\n\trow = -1\n\tfor i in range(n):\n\t\tproduct = 1\n\t\tfor j in range(m):\n\t\t\tproduct *= a[i][j]\n\t\tsumOfProduct = sumOfDigits(product)\n\t\tif (sumOfProduct > maxm and countPrimeFactors(product) % 2 != 0):\n\t\t\tmaxm = sumOfProduct\n\t\t\trow = i\n\treturn row\n\n[/Code 2]\n\n[Asserts 2]\n\narr = [[10, 30, 5, 7],[31, 41, 3, 5],[22, 30, 44, 50]]\nassert maxSumOfDigitsProduct(arr, 3, 4) == 1\narr2 = [[2, 3, 5], [7, 11, 13], [17, 19, 23]]\nassert maxSumOfDigitsProduct(arr2, 3, 3) == 2\narr3 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert maxSumOfDigitsProduct(arr3, 3, 3) == -1\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.918}]