[{"few_shot_keywords": "['concentration', 'mass', 'chemistry', 'lexicographically', 'toggled', 'volume', 'solution', 'pairs']", "test_keywords": "['previous', 'volume', 'reductions', 'square', 'chemistry', 'concentration', 'mass', 'area', 'imaginary', 'solution']", "prompt_tokens": 434, "total_tokens": 580, "completion_tokens": 146, "completion": "[Question 2]\n\nWrite a function to calculate the percentage reduction in concentration of a solution given its previous and current concentrations.\n\n[/Question 2]\n\n[Code 2]\n\ndef calculate_percentage_reduction(previous_concentration: float, current_concentration: float) -> float:\n    percentage_reduction = ((previous_concentration - current_concentration) / previous_concentration) * 100\n    return percentage_reduction\n\n[/Code 2]\n\n[Asserts 2]\n\nassert calculate_percentage_reduction(10, 5) == 50.0\nassert calculate_percentage_reduction(20, 15) == 25.0\nassert calculate_percentage_reduction(100, 80) == 20.0\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.707}, {"few_shot_keywords": "['marks', 'overlap', 'placement', 'boolean', 'total', 'XOR', 'space', 'function', 'geometric', 'objects', 'shelves', 'circumscribed']", "test_keywords": "['shelves', 'quadratic equation', 'overlap', 'function', 'space', 'objects', 'division', 'placement', 'boolean', 'total']", "prompt_tokens": 577, "total_tokens": 1013, "completion_tokens": 436, "completion": "[Question 2]\n\nYou are given a set of N shelves and a collection of geometric objects. Each object can be described as a quadratic equation. Your task is to write a function, is_overlap_possible(N: int, objects: List[str]) -> bool, that determines if it's possible to place all the objects on the shelves without any overlap.\n\nThe quadratic equation representing each object is of the form ax^2 + bx + c = 0. You need to consider the space occupied by each object and ensure that no two objects overlap when placed on the shelves. Return True if overlap is possible and False if it's not.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\n\ndef is_overlap_possible(N: int, objects: List[str]) -> bool:\n    def get_space_required(object_eq: str) -> int:\n        # Calculate space required by the object represented by the quadratic equation\n        # You can implement the logic to calculate space required by parsing the quadratic equation\n        return space_required\n    \n    total_space_required = sum(get_space_required(obj) for obj in objects)\n    return total_space_required <= N\n\n[/Code 2]\n\n[Asserts 2]\n\nassert is_overlap_possible(5, ['2x^2 + 3x + 1', 'x^2 - 4x + 4', '3x^2 - 7x + 2']) == True\nassert is_overlap_possible(4, ['x^2 + 2x + 1', '2x^2 - x + 1', 'x^2 - 4x + 4']) == False\nassert is_overlap_possible(7, ['2x^2 + 3x + 1', '3x^2 - 7x + 2', 'x^2 - x + 1']) == True\nassert is_overlap_possible(3, ['2x^2 + 3x + 1', 'x^2 - 4x + 4', '3x^2 - 7x + 2']) == False\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.897}, {"few_shot_keywords": "['number', 'loop', 'iteration', 'factor', 'positive', 'range', 'same', 'sum', 'medians', 'count', 'smallest']", "test_keywords": "['number', 'connect nodes', 'list', 'factor', 'count', 'iteration', 'loop', 'sum', 'smallest']", "prompt_tokens": 510, "total_tokens": 870, "completion_tokens": 360, "completion": "[Question 2]\n\nYou are given a list of numbers representing nodes in a graph. Each number represents a node and is connected to all its factors. Write a function to find the smallest node in the graph that has the highest count of connections.\n\n[/Question 2]\n\n[Code 2]\n\nfrom collections import defaultdict\n\ndef smallestNodeWithMaxFactorConnections(nodes: list) -> int:\n    factors = defaultdict(int)\n    for num in nodes:\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                factors[i] += 1\n                if i != num // i:\n                    factors[num // i] += 1\n    max_connections = 0\n    smallest_node = float('inf')\n    for node, count in factors.items():\n        if count > max_connections or (count == max_connections and node < smallest_node):\n            max_connections = count\n            smallest_node = node\n    return smallest_node\n\n[/Code 2]\n\n[Asserts 2]\n\nassert smallestNodeWithMaxFactorConnections([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\nassert smallestNodeWithMaxFactorConnections([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 2\nassert smallestNodeWithMaxFactorConnections([25, 50, 100, 200, 500]) == 5\nassert smallestNodeWithMaxFactorConnections([13, 17, 21, 29, 31, 34, 37, 41, 43]) == 29", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.78}, {"few_shot_keywords": "['minimum', 'remainder', 'algorithm', 'year', 'day', 'calculation', 'date', 'Easter', 'Fibonacci numbers', 'Gauss', 'division', 'month', 'quotient']", "test_keywords": "['quotient', 'Easter', 'manipulation', 'remainder', 'combinations', 'date', 'Gauss', 'year', 'toggled', 'iterative', 'algorithm', 'month', 'calculation', 'day', 'division']", "prompt_tokens": 1146, "total_tokens": 1443, "completion_tokens": 297, "completion": "[Question 2]\n\nWrite a function to calculate the number of days in a given month of a year, considering leap years for February. Implement an iterative algorithm that manipulates the number of days based on the month, year, and whether it is a leap year. Use the remainder and quotient operations to handle the calculation of days and months. \n\n[/Question 2]\n\n[Code 2]\n\ndef calculateDaysInMonth(year: int, month: int) -> int:\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif month in [4, 6, 9, 11]:\n        return 30\n    else:  # February\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):  # Leap year condition\n            return 29\n        else:\n            return 28\n\n[/Code 2]\n\n[Asserts 2]\n\nassert calculateDaysInMonth(2023, 4) == 30\nassert calculateDaysInMonth(2024, 2) == 29\nassert calculateDaysInMonth(2025, 11) == 30\nassert calculateDaysInMonth(2026, 2) == 28\nassert calculateDaysInMonth(2027, 8) == 31\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.901}, {"few_shot_keywords": "['path', 'last two digits', 'combinations', 'traversal', 'matrix', 'cell', 'position', 'dynamic-programming', 'score', 'volume']", "test_keywords": "['path', 'position', 'traversal', 'dynamic-programming', 'algorithm', 'matrix', 'cell', 'adjacent', 'score', 'combinations', 'odd']", "prompt_tokens": 678, "total_tokens": 1053, "completion_tokens": 375, "completion": "[Question 2]\n\nYou are given a matrix of size N*N and the task is to find the maximum score of all possible paths from the top-left cell to the bottom-right cell. A path is valid as long as the sum of elements in the path is odd. Write a dynamic programming algorithm to solve this problem.\n\n[/Question 2]\n\n[Code 2]\n\ndef maxScorePath(matrix):\n    n = len(matrix)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if (i + j) % 2 != 0:\n                dp[i][j] = matrix[i][j] + max(dp[i-1][j] if i > 0 else 0, dp[i][j-1] if j > 0 else 0)\n    return dp[n-1][n-1]\n\n[/Code 2]\n\n[Asserts 2]\n\nassert maxScorePath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 25\nassert maxScorePath([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == 48\nassert maxScorePath([[2, 3, 4], [5, 6, 7], [8, 9, 10]]) == 0\nassert maxScorePath([[1, 2], [3, 4]]) == 4\nassert maxScorePath([[1, 3, 5], [7, 9, 11], [13, 15, 17]]) == 48\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.715}, {"few_shot_keywords": "['equal', 'integer', 'number', 'octadecagon', 'representation', 'smallest', 'balls', 'digits', 'approximate', 'range', 'greater', 'prefix', 'inclusive']", "test_keywords": "['greater', 'equation', 'number', 'longest', 'smallest', 'equal', 'digits', 'integer', 'inclusive', 'range', 'modulus', 'util', 'circumference']", "prompt_tokens": 557, "total_tokens": 795, "completion_tokens": 238, "completion": "[Question 2]\n\nGiven an integer N, find the smallest number that is greater than or equal to N and has the longest sequence of equal digits in its representation.\n\n[/Question 2]\n\n[Code 2]\n\ndef longestEqualDigitsNumber(N: int) -> int:\n    N += 1\n    while True:\n        num_str = str(N)\n        max_count = 1\n        count = 1\n        for i in range(1, len(num_str)):\n            if num_str[i] == num_str[i - 1]:\n                count += 1\n                max_count = max(max_count, count)\n            else:\n                count = 1\n        if max_count > 1:\n            return N\n        N += 1\n\n[/Code 2]\n\n[Asserts 2]\n\nassert longestEqualDigitsNumber(123) == 133\nassert longestEqualDigitsNumber(555) == 555\nassert longestEqualDigitsNumber(789123) == 789131\nassert longestEqualDigitsNumber(1100) == 1111\nassert longestEqualDigitsNumber(88765) == 88800\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.733}, {"few_shot_keywords": "['util', 'count', 'algorithm', 'binary', 'flipped', 'marks', 'representation', 'multiples', 'toggled', 'subarrays', 'bits', 'sum', 'function']", "test_keywords": "['count', 'previous', 'toggled', 'function', 'sequence', 'sum', 'util', 'pattern', 'bits', 'representation', 'binary', 'flipped', 'digits']", "prompt_tokens": 480, "total_tokens": 687, "completion_tokens": 207, "completion": "[Question 2]\n\nGiven a binary sequence, write a function to count the number of times a particular bit pattern is toggled from 0 to 1 or 1 to 0 in the previous 'n' digits of the sequence.\n\n[/Question 2]\n\n[Code 2]\n\ndef countToggledBits(sequence, n, pattern):\n    count = 0\n    for i in range(n, len(sequence)):\n        if sequence[i-n:i].count(pattern) % 2 == 1:\n            count += 1\n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countToggledBits(\"101011011010\", 3, \"10\") == 3\nassert countToggledBits(\"101010101010\", 4, \"01\") == 2\nassert countToggledBits(\"110110110110\", 2, \"11\") == 4\nassert countToggledBits(\"111000111000\", 3, \"00\") == 2", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.908}, {"few_shot_keywords": "['range', 'subsets', 'collection', 'octagonal', 'bitwise', 'integer', 'AND', 'inclusive', 'maximum']", "test_keywords": "['AND', 'removal', 'range', 'bitwise', 'integer', 'maximum', 'art']", "prompt_tokens": 465, "total_tokens": 690, "completion_tokens": 225, "completion": "[Question 2]\n\nGiven a collection of integers, the task is to find the maximum possible value obtained by performing a bitwise AND operation on any two distinct integers in the collection. If any integer in the collection is a power of 2, remove it from the collection before finding the maximum.\n\n[/Question 2]\n\n[Code 2]\n\ndef maxBitwiseAndAfterRemoval(arr: List[int]) -> int:\n    max_val = 0\n    for num1 in arr:\n        for num2 in arr:\n            if num1 != num2:\n                if num1 & num2 > max_val:\n                    max_val = num1 & num2\n    return max_val\n\n[/Code 2]\n\n[Asserts 2]\n\nassert maxBitwiseAndAfterRemoval([3, 5, 8, 12, 10])==7\nassert maxBitwiseAndAfterRemoval([1, 2, 4, 5, 7])==5\nassert maxBitwiseAndAfterRemoval([2, 6, 9, 10, 15])==12", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.752}, {"few_shot_keywords": "['brute force', 'date', 'contiguous', 'odd', 'sum', 'distinct', 'operations', 'ends with', 'check', 'selection', 'array', 'integer']", "test_keywords": "['distinct', 'matrix', 'selection', 'odd', 'integer', 'sum', 'array', 'check', 'list comprehension']", "prompt_tokens": 599, "total_tokens": 907, "completion_tokens": 308, "completion": "[Question 2]\n\nGiven a matrix mat[][] and an integer K, the task is to check if there exists a distinct selection of K integers from the matrix such that the sum of the selected distinct integers is an odd integer.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef isOddSumInMatrix(matrix: List[List[int]], k: int) -> bool:\n    elements = [val for row in matrix for val in row]\n    odd_count = sum(1 for num in elements if num % 2 != 0)\n    if k > odd_count:\n        return False\n    return k % 2 != 0\n\n[/Code 2]\n\n[Asserts 2]\n\nassert isOddSumInMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == True\nassert isOddSumInMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == False\nassert isOddSumInMatrix([[2, 4, 6], [8, 10, 12], [14, 16, 18]], 3) == False\nassert isOddSumInMatrix([[1, 3, 5], [7, 9, 11], [13, 15, 17]], 2) == True\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.76}, {"few_shot_keywords": "['dynamic programming', 'product', 'function', 'iteration', 'equations', 'number', 'smallest', 'prime factor', 'math', 'conditional']", "test_keywords": "['positive integers', 'iteration', 'math', 'function', 'prime factor', 'day', 'smallest', 'iterate', 'number', 'product', 'maximum value', 'flag', 'conditional']", "prompt_tokens": 519, "total_tokens": 759, "completion_tokens": 240, "completion": "[Question 2]\n\nGiven a positive integer N, write a function to find the smallest positive integer that has a product of prime factors equal to N. If no such integer exists, return -1.\n\n[/Question 2]\n\n[Code 2]\n\ndef isPrime(x):\n\tif x < 2:\n\t\treturn False\n\tfor i in range(2, int(x**0.5) + 1):\n\t\tif x % i == 0:\n\t\t\treturn False\n\treturn True\n\ndef smallestProductPrime(n: int) -> int:\n\tif n < 2:\n\t\treturn -1\n\tans = 1\n\tfor i in range(2, n+1):\n\t\tif isPrime(i):\n\t\t\twhile n % i == 0:\n\t\t\t\tans *= i\n\t\t\t\tn //= i\n\t\tif n == 1:\n\t\t\treturn ans\n\treturn -1\n\n[/Code 2]\n\n[Asserts 2]\n\nassert smallestProductPrime(6)==6\nassert smallestProductPrime(15)==15\nassert smallestProductPrime(28)==14\nassert smallestProductPrime(30)==30\nassert smallestProductPrime(49)==49\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.938}, {"few_shot_keywords": "['pattern', 'algorithm', 'sequence', 'mathematical', 'number', 'increment', 'terms', 'print', 'series', 'add', 'task']", "test_keywords": "['print', 'terms', 'increment', 'factorial', 'set', 'sequence', 'series', 'pattern', 'number', 'task']", "prompt_tokens": 515, "total_tokens": 723, "completion_tokens": 208, "completion": "[Question 2]\n\nWrite a Python function to print the factorial sequence for a given number of terms. The task is to print the factorial of each number up to the given terms.\n\n[/Question 2]\n\n[Code 2]\n\ndef printFactorialSequence(terms: int):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n        \n    sequence = [factorial(i) for i in range(terms)]\n    return sequence\n\n[/Code 2]\n\n[Asserts 2]\n\nassert printFactorialSequence(1)==[1]\nassert printFactorialSequence(2)==[1, 1]\nassert printFactorialSequence(3)==[1, 1, 2]\nassert printFactorialSequence(4)==[1, 1, 2, 6]\nassert printFactorialSequence(5)==[1, 1, 2, 6, 24]\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.863}, {"few_shot_keywords": "['decreasing', 'integers', 'pythagorean triple', 'math', 'prefix', 'positive', 'loop', 'pairs', 'counting', 'coin', 'integer']", "test_keywords": "['loop', 'pythagorean triple', 'divisors', 'process', 'ends with', 'math', 'integer', 'counting', 'pairs']", "prompt_tokens": 489, "total_tokens": 787, "completion_tokens": 298, "completion": "[Question 2]\n\nWrite a program to find all Pythagorean triples (a, b, c) where a, b, and c are integers less than or equal to a given integer N. Then, count the number of unique divisors of the product of each triple (a * b * c).\n\n[/Question 2]\n\n[Code 2]\n\nimport math\n\ndef countPythagoreanTripleDivisors(N: int) -> int:\n    count = 0\n    for a in range(1, N+1):\n        for b in range(a, N+1):\n            c = math.sqrt(a**2 + b**2)\n            if c.is_integer() and c <= N:\n                product = a * b * int(c)\n                count += countDivisors(product)\n    return count\n                \ndef countDivisors(num: int) -> int:\n    divisors = set()\n    for i in range(1, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            divisors.add(i)\n            divisors.add(num // i)\n    return len(divisors)\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countPythagoreanTripleDivisors(5)==8\nassert countPythagoreanTripleDivisors(10)==32\nassert countPythagoreanTripleDivisors(15)==80\nassert countPythagoreanTripleDivisors(20)==144\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.901}, {"few_shot_keywords": "['balls', 'runs', 'python', 'check', 'cricket', 'measure', 'program', 'score', 'calculate', 'mass', 'batting']", "test_keywords": "['given', 'surface area', 'triangular number', 'python', 'measure', 'runs', 'cricket', 'balls', 'score', 'program', 'calculate', 'batting']", "prompt_tokens": 533, "total_tokens": 689, "completion_tokens": 156, "completion": "[Question 2]\n\nWrite a Python program to calculate the surface area of a triangular number. Given a triangular number n, the surface area can be calculated using the formula: Surface Area = n * (n + 1) / 2\n\nWrite a program to calculate the surface area of a given triangular number.\n\n[/Question 2]\n\n[Code 2]\n\ndef calculateSurfaceArea(n: int) -> float:\n    surfaceArea = n * (n + 1) / 2\n    return surfaceArea\n\n[/Code 2]\n\n[Asserts 2]\n\nassert calculateSurfaceArea(5)==15.0\nassert calculateSurfaceArea(10)==55.0\nassert calculateSurfaceArea(7)==28.0\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.876}, {"few_shot_keywords": "['conditional', 'large number', 'prime', 'concentration', 'composite', 'function', 'area', 'positive integer', 'bool', 'divisors', 'iteration', 'result']", "test_keywords": "['prime', 'composite', 'iteration', 'longest', 'bool', 'function', 'positive integer', 'conditional', 'divisibility', 'divisors', 'gcd']", "prompt_tokens": 625, "total_tokens": 965, "completion_tokens": 340, "completion": "[Question 2]\n\nWrite a function to find the longest sequence of positive integers such that each number in the sequence is divisible by its preceding number, and the sequence contains at least one prime number. The function should return True if such a sequence exists and False otherwise.\n\n[/Question 2]\n\n[Code 2]\n\ndef isPrime(n: int) -> bool:\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n**0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\ndef longestDivisibleSequence(arr: List[int]) -> bool:\n\tsequence_found = False\n\tlongest_sequence = []\n\tfor i in range(len(arr)):\n\t\tcurrent_sequence = [arr[i]]\n\t\tfor j in range(i + 1, len(arr)):\n\t\t\tif arr[j] % current_sequence[-1] == 0:\n\t\t\t\tcurrent_sequence.append(arr[j])\n\t\tif len(current_sequence) > len(longest_sequence):\n\t\t\tlongest_sequence = current_sequence\n\t\tif any(isPrime(x) for x in current_sequence):\n\t\t\tsequence_found = True\n\treturn sequence_found\n\n[/Code 2]\n\n[Asserts 2]\n\nassert longestDivisibleSequence([2, 4, 8, 16, 32, 64])==True\nassert longestDivisibleSequence([3, 6, 12, 24, 48, 96])==True\nassert longestDivisibleSequence([1, 3, 9, 27, 81])==False\nassert longestDivisibleSequence([5, 10, 20, 40, 80])==True", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.893}, {"few_shot_keywords": "['nearest', 'search', 'possible', 'distance', 'lexicographically', 'arrangement', 'algorithm', 'calculation', 'positive integers', 'prime', 'array', 'math', 'program', 'loop']", "test_keywords": "['search', 'nearest', 'distance', 'math', 'prime factor', 'equation', 'prime', 'positive integers', 'flag', 'array', 'calculation', 'algorithm', 'calculate']", "prompt_tokens": 753, "total_tokens": 1271, "completion_tokens": 518, "completion": "[Question 2]\n\nGiven an array of positive integers, write a program to find the nearest prime factor for each element in the array. Return a new array containing the nearest prime factor for each element in the original array.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef isPrime(n: int) -> bool:\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n**0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\ndef nearestPrimeFactor(arr: List[int]) -> List[int]:\n\tdef primeFactors(n: int) -> List[int]:\n\t\tfactors = []\n\t\twhile n % 2 == 0:\n\t\t\tfactors.append(2)\n\t\t\tn = n // 2\n\t\tfor i in range(3, int(n**0.5) + 1, 2):\n\t\t\twhile n % i == 0:\n\t\t\t\tfactors.append(i)\n\t\t\t\tn = n // i\n\t\tif n > 2:\n\t\t\tfactors.append(n)\n\t\treturn factors\n\n\tprime_factors = {}\n\tfor num in arr:\n\t\tif num not in prime_factors:\n\t\t\tfactors = primeFactors(num)\n\t\t\tprime_factors[num] = factors\n\t\t\tfor factor in factors:\n\t\t\t\tprime_factors[factor] = [factor]\n\n\tresult = []\n\tfor num in arr:\n\t\tfactors = prime_factors[num]\n\t\tmin_diff = float('inf')\n\t\tnearest_prime_factor = float('inf')\n\t\tfor factor in factors:\n\t\t\tif isPrime(factor) and abs(factor - num) < min_diff:\n\t\t\t\tmin_diff = abs(factor - num)\n\t\t\t\tnearest_prime_factor = factor\n\t\tresult.append(nearest_prime_factor)\n\n\treturn result\n\n[/Code 2]\n\n[Asserts 2]\n\nassert nearestPrimeFactor([8, 12, 14, 21, 25])==[2, 2, 2, 3, 5]\nassert nearestPrimeFactor([17, 20, 22, 23, 28])==[17, 2, 2, 23, 2]\nassert nearestPrimeFactor([30, 35, 36, 40, 45])==[2, 5, 2, 2, 3]\nassert nearestPrimeFactor([49, 50, 55, 60, 64])==[7, 2, 5, 2, 2]\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.834}, {"few_shot_keywords": "['non-negative', 'manipulation', 'digits', 'traversal', 'series', 'iteration', 'position', 'binary', 'collection', 'power', 'digit']", "test_keywords": "['series', 'iteration', 'matrix', 'repetition', 'CGPA', 'digits', 'manipulation', 'position', 'binary']", "prompt_tokens": 604, "total_tokens": 915, "completion_tokens": 311, "completion": "[Question 2]\n\nGiven a student's CGPA in a matrix format, write a function to find the position of the student's CGPA in the given matrix. The matrix contains CGPA values in non-decreasing order, and the matrix is formed by repeating the digits of the CGPA in binary representation.\n\n[/Question 2]\n\n[Code 2]\n\ndef findCGPAPosition(matrix: List[List[int]], cgpa: int) -> Tuple[int, int]:\n    row = len(matrix)\n    col = len(matrix[0])\n    cgpa_binary = bin(cgpa)[2:]\n    i = 0\n    j = 0\n    for i in range(row):\n        for j in range(col):\n            current_cgpa = bin(matrix[i][j])[2:]\n            while len(current_cgpa) < len(cgpa_binary):\n                current_cgpa = '0' + current_cgpa\n            if current_cgpa == cgpa_binary:\n                return i, j\n    return -1, -1\n\n[/Code 2]\n\n[Asserts 2]\n\nmatrix = [\n    [2, 3, 4],\n    [5, 6, 7],\n    [8, 9, 10]\n]\n\nassert findCGPAPosition(matrix, 6) == (1, 1)\nassert findCGPAPosition(matrix, 9) == (2, 1)\nassert findCGPAPosition(matrix, 10) == (2, 2)", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.848}, {"few_shot_keywords": "['cubes', 'math', 'digit', 'marks', 'flipping', 'GCD', 'calculation', 'natural numbers', 'average']", "test_keywords": "['cubes', 'average', 'set bits', 'octadecagon', 'math', 'calculation', 'common', 'natural numbers']", "prompt_tokens": 424, "total_tokens": 712, "completion_tokens": 288, "completion": "[Question 2]\n\nYou are given an array of natural numbers. Write a function to calculate the average of the cubes of the numbers in the array with a specific number of set bits in their binary representation.\n\n[/Question 2]\n\n[Code 2]\n\ndef averageCubesWithSetBits(numbers: List[int], set_bits: int) -> float:\n    filtered_numbers = [num for num in numbers if bin(num).count('1') == set_bits]\n    if not filtered_numbers:\n        return 0\n    sum_cubes = sum(num ** 3 for num in filtered_numbers)\n    average = sum_cubes / len(filtered_numbers)\n    return average\n\n[/Code 2]\n\n[Asserts 2]\n\nassert averageCubesWithSetBits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == 4.666666666666667\nassert averageCubesWithSetBits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == 408.0\nassert averageCubesWithSetBits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == 0.0", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.785}, {"few_shot_keywords": "['adjacent', 'flipping', '0s', 'array', 'sequence', 'triangular', '1s', 'determine', 'smallest number', 'maximum']", "test_keywords": "['logical', '1s', 'infinite', 'quotient', 'adjacent', 'series', '0s', 'array', 'flipping', 'bits', 'maximum']", "prompt_tokens": 668, "total_tokens": 1055, "completion_tokens": 387, "completion": "[Question 2]\n\nGiven an infinite series of 0s and 1s in an array, we need to find the maximum logical quotient of flipping adjacent bits. The logical quotient is calculated as the maximum count of 1s divided by the count of 0s in any contiguous subarray.\n\n[/Question 2]\n\n[Code 2]\n\ndef maxLogicalQuotient(arr):\n    max_ones = 0\n    max_zeros = 0\n    ones = 0\n    zeros = 0\n    \n    for bit in arr:\n        if bit == 1:\n            ones += 1\n            max_ones = max(max_ones, ones)\n            zeros = 0\n        else:\n            zeros += 1\n            max_zeros = max(max_zeros, zeros)\n            ones = 0\n    \n    return (max_ones / max_zeros) if max_zeros != 0 else float('inf')\n\n[/Code 2]\n\n[Asserts 2]\n\nassert maxLogicalQuotient([1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0])==3.0\nassert maxLogicalQuotient([0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1])==2.0\nassert maxLogicalQuotient([1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0])==float('inf')\nassert maxLogicalQuotient([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1])==float('inf')\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.844}, {"few_shot_keywords": "['spaced', 'sorting', 'hendecagonal', 'ends with', 'medians', 'array', 'greatest', 'digits', 'modulo', 'elements', 'ranges', 'distinct', 'counting', 'integer']", "test_keywords": "['mass', 'distinct', 'aesthetic', 'perfect power', 'modulo', 'target', 'sorting', 'medians', 'integer', 'elements', 'counting', 'array', 'print', 'ranges']", "prompt_tokens": 628, "total_tokens": 1022, "completion_tokens": 394, "completion": "[Question 2]\n\nGiven an array arr[] of integers and an integer K, the task is to print the distinct medians possible for a perfect power of elements in the array within the given ranges, such that the medians are aesthetic and satisfy the target modulo.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef printDistinctMedians(arr: List[int], N: int, K: int) -> None:\n    distinct_medians = set()\n    for i in range(N):\n        for j in range(i, N):\n          sub = []\n          for k in range(i, j+1):\n            sub.append(arr[k])\n          sub.sort()\n          x = j - i + 1\n          if x % 2 != 0:\n            if j - i + 1 >= 3:\n              median = sub[(j - i) // 2]\n              if isAesthetic(median) and isPerfectPower(median) and median % K == 0:\n                distinct_medians.add(median)\n          else:\n            median = sub[(j - i) // 2]\n            if isAesthetic(median) and isPerfectPower(median) and median % K == 0:\n              distinct_medians.add(median)\n    for median in distinct_medians:\n        print(median)\n\ndef isAesthetic(num: int) -> bool:\n    # Function to check if a number is aesthetic\n    pass\n\ndef isPerfectPower(num: int) -> bool:\n    # Function to check if a number is a perfect power\n    pass\n\n[/Code 2]\n\n[Asserts 2]\n\nassert printDistinctMedians([2, 6, 2], 3, 2) == None\n# Output: 2\nassert printDistinctMedians([3, 7, 3], 3, 3) == None\n# Output: 3", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.945}, {"few_shot_keywords": "['bitwise', 'array', 'count', 'step size', 'twice', 'AND', 'while', 'pair', 'equality']", "test_keywords": "['count', 'bitwise', 'twice', 'probability', 'divisors', 'remainder', 'optimization', 'array', 'AND', 'ranges', 'pair', 'equality']", "prompt_tokens": 543, "total_tokens": 854, "completion_tokens": 311, "completion": "[Question 2]\n\nGiven an array arr[], the task is to count the number of pairs of indices (i, j) such that the bitwise AND of arr[i] and arr[j] is equal to the remainder when the product of arr[i] and arr[j] is divided by twice the value of a given divisor.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef pairCountWithRemainderAndDivisor(arr: List[int], divisor: int) -> int:\n\tcount = 0\n\tn = len(arr)\n\tfor i in range(n) :\n\t\tfor j in range(i + 1, n) :\n\t\t\tif ((arr[i] & arr[j]) == ((arr[i] * arr[j]) % (2 * divisor))) :\n\t\t\t\tcount += 1\n\treturn count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert pairCountWithRemainderAndDivisor([2, 4, 3, 7, 6, 1], 5)==5\nassert pairCountWithRemainderAndDivisor([9, 8, 7, 6, 5], 3)==4\nassert pairCountWithRemainderAndDivisor([5, 4, 3, 2, 1], 4)==3\nassert pairCountWithRemainderAndDivisor([1, 1, 1, 1, 1, 1], 2)==15\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.867}, {"few_shot_keywords": "['triangular number', 'points', 'centered', 'figurate number', 'limits', 'index', 'sequence', 'digits', 'length', 'grid', 'smallest', 'number']", "test_keywords": "['length', 'subarrays', 'points', 'index', 'digits', 'number', 'program', 'smallest', 'figurate number', 'sequence', 'triangular number', 'grid']", "prompt_tokens": 574, "total_tokens": 873, "completion_tokens": 299, "completion": "[Question 2]\n\nWrite a program to find the smallest figurate number in a given sequence of numbers. A figurate number is a number that can be represented as a regular, geometric arrangement of equally spaced points. Triangular numbers are an example of figurate numbers. Given a sequence of numbers, find the smallest number which is a figurate number.\n\n[/Question 2]\n\n[Code 2]\n\ndef isFigurateNumber(num: int) -> bool:\n    n = 1 + 8 * num\n    root = int(n ** 0.5)\n    return root * root == n\n\ndef findSmallestFigurateNumber(sequence: List[int]) -> int:\n    sequence.sort()\n    for num in sequence:\n        if isFigurateNumber(num):\n            return num\n    return -1  # If no figurate number is found in the sequence\n\n[/Code 2]\n\n[Asserts 2]\n\nassert findSmallestFigurateNumber([4, 12, 10, 15, 25, 7, 2])==10\nassert findSmallestFigurateNumber([20, 18, 30, 16, 22, 9])==16\nassert findSmallestFigurateNumber([5, 3, 8, 11, 14, 21, 6])==3\nassert findSmallestFigurateNumber([17, 23, 19, 27, 24])==17", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.818}, {"few_shot_keywords": "['least common multiple', 'smallest number', 'prime numbers', 'iterative', 'multiples', 'LCM', 'octadecagon', 'AND', 'math']", "test_keywords": "['math', 'least common multiple', 'multiples', 'LCM', 'smallest number', 'perfect square', 'prime numbers', 'ratio']", "prompt_tokens": 546, "total_tokens": 876, "completion_tokens": 330, "completion": "[Question 2]\n\nWrite a program to find the least common multiple (LCM) of two numbers where one number is a perfect square and the other number is a prime number. The LCM of two numbers is the smallest number that is a multiple of both of the given numbers. Given a perfect square and a prime number, the task is to find their LCM.\n\n[/Question 2]\n\n[Code 2]\n\nimport math\n\ndef is_prime(n: int) -> bool:\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n ** 0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\ndef find_lcm_with_perfect_square(perfect_square: int, prime_number: int) -> int:\n\tif (math.sqrt(perfect_square) == int(math.sqrt(perfect_square)) and is_prime(prime_number)):\n\t\treturn perfect_square * prime_number\n\telse:\n\t\treturn \"One input is not a perfect square or the other is not a prime number.\"\n\n[/Code 2]\n\n[Asserts 2]\n\nassert find_lcm_with_perfect_square(4, 5)==20\nassert find_lcm_with_perfect_square(9, 7)==63\nassert find_lcm_with_perfect_square(16, 3)==48\nassert find_lcm_with_perfect_square(25, 11)==275\nassert find_lcm_with_perfect_square(8, 3)==\"One input is not a perfect square or the other is not a prime number.\"\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.879}, {"few_shot_keywords": "['divisor', 'math', 'power', 'binary', 'dynamic programming', 'iteration', 'add', 'representation', 'digits', 'number', 'element', 'smallest', 'format', 'multiple']", "test_keywords": "['number', 'representation', 'smallest', 'iteration', 'bool', 'percentage', 'power', 'multiple', 'binary', 'digits', 'math']", "prompt_tokens": 456, "total_tokens": 607, "completion_tokens": 151, "completion": "[Question 2]\n\nWrite a function to find the smallest power of 2 which is a multiple of a given number N.\n\n[/Question 2]\n\n[Code 2]\n\ndef smallest_power_of_2_multiple(N: int) -> int:\n    power = 0\n    while True:\n        if 2**power % N == 0:\n            return 2**power\n        power += 1\n\n[/Code 2]\n\n[Asserts 2]\n\nassert smallest_power_of_2_multiple(3) == 8\nassert smallest_power_of_2_multiple(5) == 32\nassert smallest_power_of_2_multiple(10) == 64\nassert smallest_power_of_2_multiple(1) == 1", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.787}, {"few_shot_keywords": "['imaginary', 'discriminant', 'real', 'root', 'comparison', 'coefficient', 'equation', 'node', 'quadratic equation', 'condition', 'indices']", "test_keywords": "['path', 'prime factors', 'real', 'comparison', 'equation', 'condition', 'quadratic equation', 'least common multiple', 'root', 'coefficient', 'discriminant', 'imaginary']", "prompt_tokens": 617, "total_tokens": 884, "completion_tokens": 267, "completion": "[Question 2]\n\nWrite a function to find the lowest common multiple (LCM) of two given numbers, a and b. Additionally, check if the LCM is a prime number or not. Return True if it is prime, otherwise return False.\n\n[/Question 2]\n\n[Code 2]\n\ndef calculate_lcm(a: int, b: int) -> bool:\n    def calculate_gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    gcd = calculate_gcd(a, b)\n    lcm = abs(a*b) // gcd\n    \n    return is_prime(lcm)\n\n[/Code 2]\n\n[Asserts 2]\n\nassert calculate_lcm(12, 15) == False\nassert calculate_lcm(7, 11) == True\nassert calculate_lcm(8, 9) == False\nassert calculate_lcm(17, 19) == True\nassert calculate_lcm(5, 7) == True\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.945}, {"few_shot_keywords": "['expression', 'parity', 'proportion', 'check', 'math', 'even', 'odd', 'list', '1s', 'function', 'result', 'integer']", "test_keywords": "['expression', 'solution', 'integer', 'periodic function', 'function', 'result', 'parity', 'odd', 'even', 'equality', 'list', 'math']", "prompt_tokens": 705, "total_tokens": 1066, "completion_tokens": 361, "completion": "[Question 2]\n\nYou are given a list of integers representing the values of a periodic mathematical function over a certain range. Your task is to determine if the function is an even or odd function over the given range.\n\nWrite a function that takes a list of integers representing the values of a periodic function and determines if the function is even, odd, or neither over the given range.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\n\ndef checkFunctionParity(values: List[int]) -> str:\n    sum_of_odds = sum(values[i] for i in range(1, len(values), 2))\n    sum_of_evens = sum(values[i] for i in range(0, len(values), 2))\n    \n    if sum_of_odds == 0 and sum_of_evens != 0:\n        return \"even\"\n    elif sum_of_evens == 0 and sum_of_odds != 0:\n        return \"odd\"\n    else:\n        return \"neither\"\n\n[/Code 2]\n\n[Asserts 2]\n\nassert checkFunctionParity([2, -2, 4, -4, 6, -6]) == \"even\"\nassert checkFunctionParity([1, -2, 3, -4, 5, -6]) == \"odd\"\nassert checkFunctionParity([3, -3, 6, -6, 9, -9]) == \"neither\"\nassert checkFunctionParity([2, -3, 4, -5, 6, -7]) == \"neither\"\nassert checkFunctionParity([1, -1, 0, 0, 3, -3]) == \"even\"\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.801}, {"few_shot_keywords": "['logic', 'array', 'minimization', 'boolean', 'comparison', 'condition', 'chemistry', 'length', 'list', 'odd', 'integer', 'sum', 'unit']", "test_keywords": "['while', 'list', 'boolean', 'batting', 'array', 'comparison', 'odd', 'logic', 'sum', 'integer', 'condition']", "prompt_tokens": 573, "total_tokens": 826, "completion_tokens": 253, "completion": "[Question 2]\n\nWrite a Python function that takes a list of integers and returns the sum of all the odd integers in the list using a while loop and conditional logic.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef sumOfOddIntegers(nums: List[int]) -> int:\n    total = 0\n    i = 0\n    while i < len(nums):\n        if nums[i] % 2 != 0:\n            total += nums[i]\n        i += 1\n    return total\n\n[/Code 2]\n\n[Asserts 2]\n\nassert sumOfOddIntegers([1, 2, 3, 4, 5]) == 9\nassert sumOfOddIntegers([10, 20, 30, 40, 50]) == 0\nassert sumOfOddIntegers([11, 22, 33, 44, 55]) == 99\nassert sumOfOddIntegers([2, 4, 6, 8, 10]) == 0\nassert sumOfOddIntegers([1, 3, 5, 7, 9]) == 25\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.716}, {"few_shot_keywords": "['multiplication', 'last two digits', 'day', 'number', 'factorial', 'equations', 'math', 'recursion', 'smallest number', 'modulus']", "test_keywords": "['contiguous', 'modulus', 'number', 'recursion', 'last two digits', 'subjects', 'multiplication', 'math', 'factorial', 'difference', 'OR']", "prompt_tokens": 476, "total_tokens": 728, "completion_tokens": 252, "completion": "[Question 2]\n\nWrite a Python function to find the contiguous numbers whose factorial has the same last two digits and return the count of such numbers in a given range.\n\n[/Question 2]\n\n[Code 2]\n\ndef factorialLastTwoDigits(n: int) -> int :\n    if n < 5 :\n        res = 1\n        for i in range(1, n+1):\n            res = (res*i)%100\n        return res\n    else:\n        return 20*(factorialLastTwoDigits(n//5))*(factorialLastTwoDigits(n%10))%100\n\ndef contiguousFactorialCount(start: int, end: int) -> int:\n    count = 0\n    for i in range(start, end+1):\n        if factorialLastTwoDigits(i) == factorialLastTwoDigits(i+1):\n            count += 1\n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert contiguousFactorialCount(1, 10)==2\nassert contiguousFactorialCount(10, 20)==3\nassert contiguousFactorialCount(50, 60)==1\nassert contiguousFactorialCount(90, 100)==2\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.78}, {"few_shot_keywords": "['cubes', 'difference', 'positive', 'figurate', 'squares', 'integer', 'list']", "test_keywords": "['squares', 'positive', 'output', 'condition', 'list', 'integer', 'CGPA', \"Boole's Rule\", 'function', 'difference']", "prompt_tokens": 539, "total_tokens": 875, "completion_tokens": 336, "completion": "[Question 2]\n\nWrite a Python function that takes a list of integers as input and calculates the difference between the sum of squares of positive integers and the sum of squares of non-positive integers. The function should return the output based on the condition that if the difference is positive, it should return \"Difference is Positive\", if the difference is negative, it should return \"Difference is Negative\", and if the difference is zero, it should return \"No Difference\".\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\n\ndef calculateDifference(nums: List[int]) -> str:\n    sum_positive = sum(x*x for x in nums if x > 0)\n    sum_non_positive = sum(x*x for x in nums if x <= 0)\n    \n    difference = sum_positive - sum_non_positive\n    \n    if difference > 0:\n        return \"Difference is Positive\"\n    elif difference < 0:\n        return \"Difference is Negative\"\n    else:\n        return \"No Difference\"\n\n[/Code 2]\n\n[Asserts 2]\n\nassert calculateDifference([1, 2, -3, 4, -5, 6, -7])== \"Difference is Positive\"\nassert calculateDifference([2, -4, 6, -8, 10])== \"No Difference\"\nassert calculateDifference([5, -10, 15, -20, 25])== \"Difference is Positive\"\nassert calculateDifference([3, -6, 9, -12, 15, -18])== \"No Difference\"\nassert calculateDifference([4, -8, 12, -16])== \"No Difference\"\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.8}, {"few_shot_keywords": "['formula', 'probability', 'calculation', 'array', 'alternating', 'divisor', 'power', 'multiple', 'integral', 'merge']", "test_keywords": "['divisor', 'calculation', 'integral', 'power', 'probability', 'multiple', 'area', 'formula', 'contiguous']", "prompt_tokens": 442, "total_tokens": 750, "completion_tokens": 308, "completion": "[Question 2]\n\nWrite a program to calculate the probability that a random contiguous subarray of a given array has an integral area when each element is raised to the power of X and then divided by a divisor D. The probability can be calculated using the formula (number of subarrays with integral area) / (total number of contiguous subarrays).\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\n\ndef calculateProbability(arr: List[int], X: int, D: int) -> float:\n    total_subarrays = len(arr) * (len(arr) + 1) // 2\n    integral_subarrays = 0\n    \n    for i in range(len(arr)):\n        area = 0\n        for j in range(i, len(arr)):\n            area += arr[j] ** X\n            if area % D == 0:\n                integral_subarrays += 1\n    \n    return integral_subarrays / total_subarrays\n\n[/Code 2]\n\n[Asserts 2]\n\narr1 = [1, 2, 3, 4]\narr2 = [3, 6, 9, 12, 15]\narr3 = [2, 3, 5, 7, 11]\n\nassert calculateProbability(arr1, 2, 5) == 0.5\nassert calculateProbability(arr2, 3, 6) == 0.6\nassert calculateProbability(arr3, 2, 3) == 0.2", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.781}, {"few_shot_keywords": "['non-adjacent', 'area', 'concatenation', 'formula', 'chiliagon', 'given number', 'volume', 'perfect chiliagon', 'regular polygon', 'exact', 'geometry', 'math']", "test_keywords": "['perfect chiliagon', 'math', 'formula', 'prism', 'area', 'power', 'geometry', 'regular polygon', 'chiliagon', 'Nude Number', 'recursion']", "prompt_tokens": 582, "total_tokens": 899, "completion_tokens": 317, "completion": "[Question 2]\n\nA Nude Number is a perfect chiliagon number that is also a power of 2. Given an input number N, write a recursive function to determine if N is a Nude Number or not. A perfect chiliagon number is one where the area of the chiliagon is a whole number. The formula for the area of a chiliagon is given by area = (n \u00d7 s^2) / (4 \u00d7 tan(\u03c0 / n)) where n is the number of sides and s is the length of a side.\n\n\n[/Question 2]\n\n[Code 2]\n\ndef isPerfectChiliagonArea(n: int) -> bool:\n    area = (n * n * n) / (4 * tan(pi / n))\n    return area.is_integer()\n\ndef isPowerOfTwo(num):\n    if num == 1:\n        return True\n    elif num % 2 != 0 or num == 0:\n        return False\n    else:\n        return isPowerOfTwo(num // 2)\n\ndef isNudeNumber(n: int) -> bool:\n    if isPerfectChiliagonArea(n):\n        return isPowerOfTwo(n)\n    else:\n        return False\n\n[/Code 2]\n\n[Asserts 2]\n\nassert isNudeNumber(1024)==True\nassert isNudeNumber(4096)==True\nassert isNudeNumber(1000)==False\nassert isNudeNumber(800)==False\nassert isNudeNumber(250)==False\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.814}, {"few_shot_keywords": "['dictionary', 'string', 'removal', 'sequence', 'contiguous', 'common', 'permutations', 'subarrays']", "test_keywords": "['Easter', 'triplets', 'common', 'contiguous', 'sequence', 'dictionary', 'subarrays', 'permutations']", "prompt_tokens": 726, "total_tokens": 1224, "completion_tokens": 498, "completion": "[Question 2]\n\nYou are given an array of integers. Your task is to find all the common contiguous subarrays of length 3 (triplets) between the given array and its permutation. A subarray is a contiguous subsequence of an array.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List, Tuple\n\ndef findCommonTriplets(arr: List[int], perm: List[int]) -> List[Tuple[int, int, int]]:\n    def findTriplets(arr):\n        n = len(arr)\n        result = []\n        for i in range(n - 2):\n            for j in range(i + 3, n + 1):\n                result.append(arr[i:j])\n        return result\n\n    arr_triplets = findTriplets(arr)\n    perm_triplets = findTriplets(perm)\n\n    common_triplets = []\n    arr_triplets_dict = {tuple(subarr): True for subarr in arr_triplets}\n\n    for subarr in perm_triplets:\n        if arr_triplets_dict.get(tuple(subarr)):\n            common_triplets.append(subarr)\n\n    return common_triplets\n\n[/Code 2]\n\n[Asserts 2]\n\nassert findCommonTriplets([1, 2, 3, 4, 5], [2, 3, 1, 5, 4]) == [(1, 2, 3), (2, 3, 1), (1, 5, 4)]\nassert findCommonTriplets([4, 7, 1, 8, 3, 6, 2, 5], [8, 7, 5, 4, 6, 2, 3, 1]) == [(4, 7, 1), (7, 1, 8), (3, 6, 2), (6, 2, 5)]\nassert findCommonTriplets([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == []\nassert findCommonTriplets([3, 5, 7, 1, 2], [7, 3, 5, 1, 2]) == [(3, 5, 7), (5, 7, 1), (7, 1, 2)]\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.796}, {"few_shot_keywords": "['factorization', 'sum', 'dynamic programming', 'count', 'algorithm', 'even', 'hexagonal', 'representation', 'greater', 'odd', 'repetitions']", "test_keywords": "['flag', 'odd', 'sum', 'repetitions', 'representation', 'subsets', 'count', 'palindromic', 'dynamic programming', 'algorithm', 'logical', 'even']", "prompt_tokens": 652, "total_tokens": 850, "completion_tokens": 198, "completion": "[Question 2]\n\nYou are given an array of integers. Write a function to find the count of all palindromic subsets of the array where the sum of elements in the subset is even.\n\n[/Question 2]\n\n[Code 2]\n\ndef countPalindromicEvenSumSubsets(arr):\n    evenSumCount = 0\n    for num in arr:\n        if num % 2 != 0:\n            evenSumCount += 1\n    return 2 ** evenSumCount - 1\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countPalindromicEvenSumSubsets([1, 2, 3, 4]) == 7\nassert countPalindromicEvenSumSubsets([1, 2, 2, 1]) == 15\nassert countPalindromicEvenSumSubsets([2, 4, 6, 8, 10]) == 31", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.899}, {"few_shot_keywords": "['consecutive', 'order', 'math', 'smaller', 'perfect squares', 'Nude Number', 'represent', 'boolean', 'even', 'difference']", "test_keywords": "['decreasing', 'perfect squares', 'math', 'Nude Number', 'consecutive', 'boolean', 'octadecagon', 'difference']", "prompt_tokens": 519, "total_tokens": 734, "completion_tokens": 215, "completion": "[Question 2]\n\nWrite a function to check if a given number N is a Nude Number. A Nude Number is a positive integer that is the difference between two consecutive perfect squares. If N is a Nude Number, return True; otherwise, return False.\n\n[/Question 2]\n\n[Code 2]\n\ndef isPerfectSquare(n: int) -> bool:\n    root = n ** 0.5\n    return (root == int(root))\n\ndef isNudeNumber(n: int) -> bool:\n    for i in range(1, n):\n        if (isPerfectSquare(i) and isPerfectSquare(i+1)):\n            if (i+1 - i == n):\n                return True\n    return False\n\n[/Code 2]\n\n[Asserts 2]\n\nassert isNudeNumber(35)==True\nassert isNudeNumber(15)==False\nassert isNudeNumber(20)==True\nassert isNudeNumber(8)==True\nassert isNudeNumber(25)==False\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.702}, {"few_shot_keywords": "['loop', 'gcd', 'range', 'digits', 'day', 'same', 'prefix', 'objects', 'flag', 'division', 'overlap', 'integer', 'count']", "test_keywords": "['digits', 'same', 'range', 'flag', 'dynamic-programming', 'integer', 'loop', 'division', 'count', 'shelves']", "prompt_tokens": 522, "total_tokens": 731, "completion_tokens": 209, "completion": "[Question 2]\n\nYou have a set of integers and you need to count how many integers have the same digits as the integer x within a given range.\n\n[/Question 2]\n\n[Code 2]\n\ndef countSameDigitsInRange(x: int, l: int, r: int) -> int:\n    def hasSameDigits(a: int, b: int) -> bool:\n        return sorted(str(a)) == sorted(str(b))\n    \n    count = 0\n    for i in range(l, r + 1):\n        if hasSameDigits(x, i):\n            count += 1\n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countSameDigitsInRange(123, 100, 150) == 3\nassert countSameDigitsInRange(456, 400, 500) == 5\nassert countSameDigitsInRange(789, 700, 800) == 3\nassert countSameDigitsInRange(111, 100, 200) == 20", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.734}, {"few_shot_keywords": "['minimization', 'given number', 'loop', 'integer', 'search', 'math', 'triplets', 'counting', 'range']", "test_keywords": "['count', 'integer', 'month', 'triplets', 'loop', 'counting', 'math', 'range']", "prompt_tokens": 475, "total_tokens": 763, "completion_tokens": 288, "completion": "[Question 2]\n\nYou are given a list of integers representing the number of tasks for each month in a year. Your task is to write a function to find the count of triplets of months where the number of tasks in the first month is less than the number of tasks in the second month, and the number of tasks in the second month is less than the number of tasks in the third month.\n\nWrite a function to solve the given problem.\n\n[/Question 2]\n\n[Code 2]\n\ndef countTaskTriplets(tasks: List[int]) -> int:\n    count = 0\n    for i in range(len(tasks)):\n        for j in range(i + 1, len(tasks)):\n            for k in range(j + 1, len(tasks)):\n                if tasks[i] < tasks[j] and tasks[j] < tasks[k]:\n                    count += 1\n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countTaskTriplets([1, 2, 3, 2, 1, 4, 5]) == 10\nassert countTaskTriplets([3, 2, 1, 5, 6, 7, 8]) == 20\nassert countTaskTriplets([2, 2, 2, 2, 2, 2, 2]) == 0\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.702}, {"few_shot_keywords": "['smallest', 'lexicographically', 'indices', 'array', 'swap', 'Nude Number', 'common', 'adjacent']", "test_keywords": "['swap', 'lexicographically', 'expression', 'array', 'geometry', 'smallest', 'indices', 'adjacent']", "prompt_tokens": 631, "total_tokens": 897, "completion_tokens": 266, "completion": "[Question 2]\n\nYou are given an array of strings representing expressions in lexicographical order. Your task is to write a function to find the lexicographically smallest expression that can be obtained by performing at most one swap between each pair of adjacent indices in the array.\n\n[/Question 2]\n\n[Code 2]\n\ndef findSmallestExpression(arr):\n    n = len(arr)\n\n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            temp1 = arr[j] + arr[j + 1]\n            temp2 = arr[j + 1] + arr[j]\n\n            if temp1 > temp2:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n\n    return \"\".join(arr)\n\n[/Code 2]\n\n[Asserts 2]\n\nassert findSmallestExpression([\"geek\", \"for\", \"geeks\", \"abcd\", \"a\", \"g\"]) == 'abcdageekforgeeks'\nassert findSmallestExpression([\"aaa\", \"aab\", \"aac\", \"aad\"]) == 'aaaabacada'\nassert findSmallestExpression([\"aaa\", \"aab\", \"aac\", \"aad\", \"aae\"]) == 'aaaabacadaae'\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.928}, {"few_shot_keywords": "['sum', 'numbers', 'divisors', 'discriminant', 'iteration', 'perfect square', 'algorithm', 'overlap', 'math']", "test_keywords": "['divisors', 'sum', 'algorithm', 'perfect square', 'divisible', 'values', 'hexagonal', 'numbers', '0s', 'iteration', 'math']", "prompt_tokens": 460, "total_tokens": 629, "completion_tokens": 169, "completion": "[Question 2]\n\nWrite an algorithm to find the sum of all the values of hexagonal numbers that are divisible by a perfect square of any of the first 10 natural numbers.\n\n[/Question 2]\n\n[Code 2]\n\ndef isPerfectSquare(num):\n    return (int(num**0.5))**2 == num\n\ndef SumOfDivisibleHexagonalNumbers():\n\tsum = 0\n\tfor n in range(1, 100):\n\t\thexagonalNum = n * (2*n - 1)\n\t\tfor i in range(1, 11):\n\t\t\tif hexagonalNum % (i*i) == 0:\n\t\t\t\tsum += hexagonalNum\n\t\t\t\tbreak\n\treturn sum\n\n[/Code 2]\n\n[Asserts 2]\n\nassert SumOfDivisibleHexagonalNumbers() == 2720", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.904}, {"few_shot_keywords": "['indexing', 'boolean', 'binary', 'ends with', 'measure', 'representation', 'pattern', 'minimum']", "test_keywords": "['subtract', 'limits', 'binary', 'ends with', 'boolean', 'representation', 'periodic function']", "prompt_tokens": 429, "total_tokens": 618, "completion_tokens": 189, "completion": "[Question 2]\n\nWrite a function to check if the binary representation of a given positive integer ends with a specific pattern. If it does, return the result of subtracting the integer by a given limit, otherwise return the integer itself.\n\n[/Question 2]\n\n[Code 2]\n\ndef subtractIfEndsWithPattern(n: int, limit: int, pattern: str) -> int:\n    binary = bin(n).replace(\"0b\", \"\")\n    if binary.endswith(pattern):\n        return n - limit\n    else:\n        return n\n\n[/Code 2]\n\n[Asserts 2]\n\nassert subtractIfEndsWithPattern(10, 3, \"10\")==10\nassert subtractIfEndsWithPattern(15, 5, \"1111\")==10\nassert subtractIfEndsWithPattern(20, 5, \"00\")==15\nassert subtractIfEndsWithPattern(25, 7, \"101\")==25", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.727}, {"few_shot_keywords": "['float', 'operation', 'division', 'max', 'array', 'maximum', 'even', 'mathematical', 'cube root', 'integer', 'result', 'addition', 'math', 'trigonometry']", "test_keywords": "['division', 'moves', 'float', 'powerful number', 'integer', 'max', 'array', 'batting', 'math', 'maximum', 'split', 'numbers', 'result', 'operation', 'addition']", "prompt_tokens": 581, "total_tokens": 978, "completion_tokens": 397, "completion": "[Question 2]\n\nIn a batting competition, players take turns to bat. Each player has a list of integers representing the runs they scored in each move. The batting order is given by an array of player indices. The game involves a special operation known as \"powerful number\" where a player's score is split into two parts: the result of dividing the score by a given divisor, and then taking the maximum of the divided result and a specified floating-point number.\n\nWrite a function to find the maximum powerful number for a given batting order and list of player scores.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\n\ndef maxPowerfulNumber(batting_order: List[int], player_scores: List[List[int]], divisor: int, floating_number: float) -> float:\n    maximum = float(\"-inf\")\n    for player_index in batting_order:\n        score = player_scores[player_index]\n        for move in score:\n            result = max(move / divisor, floating_number)\n            maximum = max(maximum, result)\n    return maximum\n\n[/Code 2]\n\n[Asserts 2]\n\nassert maxPowerfulNumber([0, 1, 2], [[10, 15, 20], [5, 8, 12], [7, 14, 21]], 2, 3.5) == 10.0\nassert maxPowerfulNumber([2, 0, 1], [[12, 18, 24], [4, 7, 10], [9, 18, 27]], 3, 4.0) == 9.0\nassert maxPowerfulNumber([1, 2, 0], [[8, 12, 16], [6, 9, 13], [10, 20, 30]], 4, 5.0) == 9.0\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.797}, {"few_shot_keywords": "['large number', 'ends with', 'recursion', 'math', 'sets', 'GCD', 'figurate number', 'octadecagon', 'distinct', 'common factors']", "test_keywords": "['sets', 'GCD', 'math', 'chemical reaction', 'perfect chiliagon', 'common factors', 'distinct', 'dynamic programming']", "prompt_tokens": 859, "total_tokens": 1215, "completion_tokens": 356, "completion": "[Question 2]\n\nYou are given a list of numbers. Write a function to find the largest subset of numbers in the list such that the greatest common divisor (GCD) of any two numbers in the subset is greater than 1. \n\nFor example, given the list [10, 15, 20, 25, 30], the largest subset with GCD greater than 1 is [10, 15, 20, 25, 30] as all the numbers have a common factor of 5.\n\n[/Question 2]\n\n[Code 2]\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef largestSubsetWithGCDGreaterThan1(arr):\n    n = len(arr)\n    dp = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        dp[i] = 1\n        for j in range(i + 1, n):\n            if gcd(arr[i], arr[j]) > 1:\n                dp[i] = max(dp[i], 1 + dp[j])\n    return max(dp)\n\n[/Code 2]\n\n[Asserts 2]\n\nassert largestSubsetWithGCDGreaterThan1([2, 3, 5, 7, 11, 13, 17, 19, 23, 29])==1\nassert largestSubsetWithGCDGreaterThan1([10, 15, 20, 25, 30])==5\nassert largestSubsetWithGCDGreaterThan1([8, 12, 16, 20, 24, 28, 32])==7\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.701}, {"few_shot_keywords": "['balls', 'arrangement', 'positive integer', 'sequence', 'zero', 'sequence number', 'number', 'dots', 'smallest number', 'equilateral', 'triangular']", "test_keywords": "['sequence', 'subjects', 'positive integers', 'triangular', 'sequence number', 'divides', 'number', 'arrangement', 'powerful', 'equilateral', 'dots', 'loop', 'balls']", "prompt_tokens": 546, "total_tokens": 867, "completion_tokens": 321, "completion": "[Question 2]\n\nGiven a sequence of positive integers, the task is to find the sequence number of the first triangular number in the sequence. A triangular number is a number that can be represented as an equilateral arrangement of dots. If there is no triangular number in the sequence, return -1.\n\n[/Question 2]\n\n[Code 2]\n\ndef sequenceNumberofTriangularNumber(sequence: List[int]) -> int:\n    for i in range(len(sequence)):\n        num = sequence[i]\n        n = (sqrt(8 * num + 1) - 1) / 2\n        if n - int(n) == 0:\n            return i+1\n    return -1\n\n[/Code 2]\n\n[Asserts 2]\n\nassert sequenceNumberofTriangularNumber([3, 5, 6, 8, 10])==3\nassert sequenceNumberofTriangularNumber([1, 2, 3, 4, 5])==3\nassert sequenceNumberofTriangularNumber([2, 4, 6, 8, 10])==3\nassert sequenceNumberofTriangularNumber([1, 4, 9, 16, 25])==3\nassert sequenceNumberofTriangularNumber([1, 3, 6, 10, 15])==3\nassert sequenceNumberofTriangularNumber([2, 5, 8, 12, 16])==4\nassert sequenceNumberofTriangularNumber([7, 8, 9, 10, 11])==4", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.726}, {"few_shot_keywords": "['count', 'array', 'hash table', 'log', 'subarray', 'prefix sum', 'close', 'sum', 'XOR']", "test_keywords": "['probability', 'exact', 'hash table', 'calculate', 'count', 'subarray', 'array', 'distinct', 'prefix sum', 'XOR', 'sum']", "prompt_tokens": 593, "total_tokens": 976, "completion_tokens": 383, "completion": "[Question 2]\n\nGiven an array arr[] of N integers, the task is to calculate the probability of selecting a subarray with exactly K distinct integers.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef subarrayProbability(arr: List[int], N: int, K: int) -> float:\n    ans = 0.0\n    distinctCount = 0\n    hashTable = {}\n    left = 0\n    prefixSum = [0] * (N + 1)\n    prefixSum[0] = 0\n    for i in range(N):\n        if arr[i] not in hashTable or hashTable[arr[i]] < left:\n            distinctCount += 1\n        else:\n            left = hashTable[arr[i]] + 1\n        hashTable[arr[i]] = i\n        prefixSum[i + 1] = distinctCount\n    for i in range(1, N + 1):\n        for j in range(i):\n            if prefixSum[i] - prefixSum[j] == K:\n                ans += 1\n    return ans / ((N * (N + 1)) / 2)\n\n[/Code 2]\n\n[Asserts 2]\n\nassert subarrayProbability([1, 2, 3, 4, 1], 5, 2) == 0.6\nassert subarrayProbability([1, 2, 1, 2, 3], 5, 2) == 0.8\nassert subarrayProbability([1, 2, 1, 2, 3], 5, 3) == 0.6\nassert subarrayProbability([2, 2, 1, 3, 2], 5, 2) == 0.8\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.722}, {"few_shot_keywords": "['sum', 'hexagonal', 'nested loops', 'function', 'brute force', 'iteration', 'boolean', 'set', 'pairs', 'integers', 'prime', 'array', 'logical', 'count']", "test_keywords": "['iteration', 'integers', 'prefix sum', 'count', 'pairs', 'boolean', 'sum', 'brute force', 'nested loops', 'function', 'prime', 'array', 'approximate']", "prompt_tokens": 586, "total_tokens": 876, "completion_tokens": 290, "completion": "[Question 2]\n\nGiven an array arr of integers, write a function to approximate the count of pairs (i, j) where i < j, such that the sum of elements from index i to j (inclusive) is a prime number.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef isPrime(n: int) -> bool:\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n**0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\ndef countPairsWithPrimeSumApprox(arr: List[int]) -> int:\n    count = 0\n    for i in range(len(arr)):\n        prefix_sum = 0\n        for j in range(i, len(arr)):\n            prefix_sum += arr[j]\n            if isPrime(prefix_sum):\n                count += 1\n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countPairsWithPrimeSumApprox([1, 2, 3, 4, 5]) == 6\nassert countPairsWithPrimeSumApprox([10, 20, 30, 40, 50]) == 2\nassert countPairsWithPrimeSumApprox([2, 3, 5, 7, 11, 13, 17]) == 18\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.873}, {"few_shot_keywords": "['integer', 'digits', 'increment', 'count', 'modulo', 'array', 'figure', 'ends with']", "test_keywords": "['modulo', 'ends with', 'array', 'triangular', 'count', 'exponential', 'digits', 'integer', 'format', 'list comprehension']", "prompt_tokens": 537, "total_tokens": 840, "completion_tokens": 303, "completion": "[Question 2]\n\nGiven a list of integers, write a function to count the numbers that are triangular and end with a specific digit.\n\n[/Question 2]\n\n[Code 2]\n\ndef isTriangularNumber(num: int) -> bool:\n    x = (8 * num + 1)**0.5\n    return x == int(x)\n\ndef countTriangularNumbersEndingWithDigit(nums: List[int], digit: int) -> int:\n    count = sum(1 for num in nums if isTriangularNumber(num) and str(num)[-1] == str(digit))\n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countTriangularNumbersEndingWithDigit([3, 6, 10, 15, 21, 28, 36, 45], 5) == 2\nassert countTriangularNumbersEndingWithDigit([1, 3, 6, 10, 15, 21, 28, 36, 45], 6) == 3\nassert countTriangularNumbersEndingWithDigit([1, 3, 6, 10, 15, 21, 28, 36, 45], 2) == 0\nassert countTriangularNumbersEndingWithDigit([3, 6, 10, 15, 21, 28, 36, 45], 8) == 3\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.777}, {"few_shot_keywords": "['digit', 'smallest', 'approximation', 'addition', 'integer', 'product', 'function', 'prefix sum', 'loop', 'triangular', 'sequence', 'largest', 'while']", "test_keywords": "['digit', 'approximation', 'smallest', 'addition', 'product', 'largest', 'integer', 'perfect squares', 'sequence', 'function', 'while', 'recursion', 'loop', 'parity']", "prompt_tokens": 624, "total_tokens": 855, "completion_tokens": 231, "completion": "[Question 2]\n\nGiven an integer N, write a function to find the nearest perfect square whose sum of digits is a multiple of 3.\n\n[/Question 2]\n\n[Code 2]\n\ndef sum_of_digits(num: int) -> int:\n    sum = 0\n    while num != 0:\n        sum += num % 10\n        num = num // 10\n    return sum\n\ndef is_multiple_of_three(num: int) -> bool:\n    return sum_of_digits(num) % 3 == 0\n\ndef nearestPerfectSquare(N: int) -> int:\n    while True:\n        if is_multiple_of_three(N) and ((N ** 0.5) % 1 == 0):\n            return N\n        N += 1\n\n[/Code 2]\n\n[Asserts 2]\n\nassert nearestPerfectSquare(15) == 16\nassert nearestPerfectSquare(28) == 36\nassert nearestPerfectSquare(40) == 49\nassert nearestPerfectSquare(55) == 64\nassert nearestPerfectSquare(88) == 81\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.865}, {"few_shot_keywords": "['sum', 'subarray', 'array', 'count', 'frequency', 'dynamic programming', 'math', 'arrangement', 'perfect square', 'iteration', 'atoms']", "test_keywords": "['subarray', 'power', 'array', 'bits', 'count', 'frequency', 'math', 'iteration', 'sum', 'perfect square']", "prompt_tokens": 545, "total_tokens": 852, "completion_tokens": 307, "completion": "[Question 2]\n\nGiven an array of integers, write a function to find the count of subarrays whose sum is a power of 2.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef countSubarraysWithPowerOfTwoSum(arr: List[int], n: int) -> int:\n    ans = 0\n    sumFrequency = {0: 1}\n    currentSum = 0\n    for num in arr:\n        currentSum += num\n        for power in range(31):\n            targetSum = 1 << power\n            complement = currentSum - targetSum\n            if complement in sumFrequency:\n                ans += sumFrequency[complement]\n        if currentSum in sumFrequency:\n            sumFrequency[currentSum] += 1\n        else:\n            sumFrequency[currentSum] = 1\n    return ans\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countSubarraysWithPowerOfTwoSum([1, 2, 3, 4, 5], 5) == 2\nassert countSubarraysWithPowerOfTwoSum([1, 1, 1, 1, 1], 5) == 9\nassert countSubarraysWithPowerOfTwoSum([2, 2, 2], 3) == 6\nassert countSubarraysWithPowerOfTwoSum([8, 8, 8], 3) == 6\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.733}, {"few_shot_keywords": "['subsequences', 'boolean', 'equations', 'binary', 'roots', 'loop', 'chemistry', 'discriminant', 'math', 'common', 'quadratic']", "test_keywords": "['math', 'roots', 'optimization', 'equations', 'discriminant', 'quadratic', 'boolean', 'common', 'nature', 'quotient', 'Fibonacci numbers', 'condition']", "prompt_tokens": 670, "total_tokens": 1003, "completion_tokens": 333, "completion": "[Question 2]\n\nGiven a quadratic equation in the form of ax^2 + bx + c = 0, write a function to determine the nature of its roots. Return \"Real and Equal\" if the roots are real and equal, \"Real and Distinct\" if the roots are real and distinct, and \"Complex\" if the roots are complex.\n\n[/Question 2]\n\n[Code 2]\n\nimport math\n\ndef natureOfRoots(a: int, b: int, c: int) -> str:\n\t\n\t# Discriminant of the quadratic equation\n\tD = (b * b - 4 * a * c)\n\t\n\t# If discriminant is greater than 0, roots are real and distinct\n\tif (D > 0):\n\t\treturn \"Real and Distinct\"\n\t# If discriminant is equal to 0, roots are real and equal\n\telif (D == 0):\n\t\treturn \"Real and Equal\"\n\t# If discriminant is less than 0, roots are complex\n\telse:\n\t\treturn \"Complex\"\n\n[/Code 2]\n\n[Asserts 2]\n\nassert natureOfRoots(1, -2, 1) == \"Real and Equal\"\nassert natureOfRoots(1, 0, -4) == \"Real and Distinct\"\nassert natureOfRoots(1, 1, 1) == \"Complex\"\nassert natureOfRoots(1, 2, 1) == \"Real and Equal\"\nassert natureOfRoots(1, -5, 6) == \"Real and Distinct\"\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.858}, {"few_shot_keywords": "['comparison', 'quadratic equation', 'square', 'conditional', 'conditions', 'expression', 'product', 'math', 'discriminant', 'logical', 'roots']", "test_keywords": "['day', 'comparison', 'math', 'discriminant', 'nested loops', 'impossible', 'quadratic equation', 'roots', 'logical', 'conditions']", "prompt_tokens": 620, "total_tokens": 915, "completion_tokens": 295, "completion": "[Question 2]\n\nWrite a Python function to find the day of the week for a given date. The function should take three inputs: day, month, and year. You should use Zeller's Congruence formula to calculate the day of the week. If the given date is invalid (e.g., February 30), return \"Invalid date\".\n\n[/Question 2]\n\n[Code 2]\n\ndef findDay(day: int, month: int, year: int) -> str:\n\tmonths = [0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4]\n\tif month < 3:\n\t\tyear -= 1\n\treturn [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][(year + year//4 - year//100 + year//400 + months[month-1] + day) % 7]\n\n[/Code 2]\n\n[Asserts 2]\n\nassert findDay(15, 8, 2022)=='Monday'\nassert findDay(29, 2, 2024)=='Friday'\nassert findDay(30, 2, 2022)=='Invalid date'\nassert findDay(31, 12, 2021)=='Friday'\nassert findDay(1, 1, 2000)=='Saturday'\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.77}, {"few_shot_keywords": "['positive', 'counting', 'decreasing', 'circle', 'divisors', 'index', 'pairs', 'range', 'array', 'product', 'integers']", "test_keywords": "['index', 'probability', 'pairs', 'positive', 'integers', 'product', 'array', 'counting', 'range', 'balance']", "prompt_tokens": 530, "total_tokens": 832, "completion_tokens": 302, "completion": "[Question 2]\n\nYou are given an array of integers nums and a target integer k. Define a function positiveProductIndexPairs to calculate the probability of selecting a pair of indices (i, j) where the product of the elements at those indices is positive when the sum of the elements at those indices is equal to k.\n\nDesign a function positiveProductIndexPairs to accomplish this task.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef positiveProductIndexPairs(nums: List[int], k: int) -> float:\n    total_count = 0\n    positive_count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == k:\n                total_count += 1\n                if nums[i] * nums[j] > 0:\n                    positive_count += 1\n    return positive_count / total_count if total_count > 0 else 0.0\n\n[/Code 2]\n\n[Asserts 2]\n\nassert positiveProductIndexPairs([2, 3, 4, 5], 7)==0.6666666666666666\nassert positiveProductIndexPairs([1, -2, 3, -4], -1)==0.5\nassert positiveProductIndexPairs([-1, 2, 3, -4, 5, -6], 1)==0.4\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.943}, {"few_shot_keywords": "['iteration', 'collection', 'unordered', 'difference', 'aesthetic', 'count', 'pair', 'space', 'math', 'fifth power', 'integers']", "test_keywords": "['count', 'possible', 'cricket', 'fifth power', 'unit', 'difference', 'positive', 'collection', 'integers', 'math', 'unordered', 'pair', 'print']", "prompt_tokens": 519, "total_tokens": 776, "completion_tokens": 257, "completion": "[Question 2]\n\nYou have a collection of integers representing the scores of a cricket match. Write a program to count the number of unordered pairs of scores that have a positive difference equal to the fifth power of a positive integer. Print the count of possible pairs.\n\n[/Question 2]\n\n[Code 2]\n\ndef countCricketScorePairs(scores):\n    fifth_power_count = {}\n    count = 0\n    for score in scores:\n        fifth_power_count[score**5] = fifth_power_count.get(score**5, 0) + 1\n    for score_diff in fifth_power_count:\n        count += fifth_power_count[score_diff] * (fifth_power_count[score_diff] - 1) // 2\n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countCricketScorePairs([1, 2, 3, 4, 5])==0\nassert countCricketScorePairs([1, 2, 3, 4, 6])==1\nassert countCricketScorePairs([1, 2, 3, 4, 10])==0\nassert countCricketScorePairs([1, 2, 3, 4, 9])==1", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.769}, {"few_shot_keywords": "['nature', 'GCD', 'sum', 'numbers', 'range', 'principle', 'integer']", "test_keywords": "['numbers', 'optimization', 'distinct', 'sum', 'range', 'manipulation', 'GCD', 'target', 'integer', 'mathematical']", "prompt_tokens": 448, "total_tokens": 703, "completion_tokens": 255, "completion": "[Question 2]\n\nGiven an array of integers and a target sum, the task is to find the count of distinct pairs of numbers whose GCD is greater than the given target.\n\n[/Question 2]\n\n[Code 2]\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef countPairsWithGreaterGCD(arr, target):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if gcd(arr[i], arr[j]) > target:\n                count += 1\n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countPairsWithGreaterGCD([2, 3, 4, 5, 6], 2) == 6\nassert countPairsWithGreaterGCD([7, 8, 9, 10], 3) == 3\nassert countPairsWithGreaterGCD([15, 20, 25, 30], 5) == 6\nassert countPairsWithGreaterGCD([12, 15, 18, 21], 6) == 3\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.882}, {"few_shot_keywords": "['Fibonacci', 'divides', 'series', 'consecutive', 'sum', 'preceding', 'integers', 'array', 'quadratic']", "test_keywords": "['integers', 'Fibonacci', 'natural numbers', 'sum', 'array', 'series', 'boolean', 'preceding']", "prompt_tokens": 573, "total_tokens": 846, "completion_tokens": 273, "completion": "[Question 2]\n\nWrite a function to determine whether a given array of natural numbers can be represented as the sum of Fibonacci numbers. Return True if the array can be represented as the sum of Fibonacci numbers, otherwise return False.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\n\ndef isSumOfFibonacci(arr: List[int]) -> bool:\n    def isFibonacci(n: int) -> bool:\n        if n <= 1:\n            return True\n        a, b = 0, 1\n        while b < n:\n            a, b = b, a + b\n        return b == n\n\n    for num in arr:\n        if not isFibonacci(num):\n            return False\n    return True\n\n[/Code 2]\n\n[Asserts 2]\n\nassert isSumOfFibonacci([1, 2, 3, 5, 8, 13])==True\nassert isSumOfFibonacci([1, 2, 4, 7, 12])==False\nassert isSumOfFibonacci([3, 5, 8, 13, 21])==True\nassert isSumOfFibonacci([1, 3, 6, 10, 15])==False\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.772}, {"few_shot_keywords": "['digit', 'modulus', 'triplets', 'iteration', 'divisible', 'sum', 'integer', 'complex', 'math']", "test_keywords": "['regular polygon', 'modulus', 'integer', 'iteration', 'math', 'sum', 'divisible', 'non-negative']", "prompt_tokens": 510, "total_tokens": 724, "completion_tokens": 214, "completion": "[Question 2]\n\nA regular polygon is a polygon that is equiangular (all angles are equal in measure) and equilateral (all sides have the same length). Given an integer n representing the number of sides of the regular polygon, the task is to calculate the sum of interior angles of the regular polygon.\n\n[/Question 2]\n\n[Code 2]\n\ndef sumOfInteriorAngles(n: int) -> int:\n    if n < 3:\n        return -1  # Invalid for polygons with less than 3 sides\n    else:\n        return (n - 2) * 180  # Formula to calculate sum of interior angles of a polygon\n\n[/Code 2]\n\n[Asserts 2]\n\nassert sumOfInteriorAngles(3) == 180\nassert sumOfInteriorAngles(4) == 360\nassert sumOfInteriorAngles(5) == 540\nassert sumOfInteriorAngles(6) == 720\nassert sumOfInteriorAngles(8) == 1080\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.788}, {"few_shot_keywords": "['positive', 'root', 'distinct', 'rounding', 'bool', 'while loop', 'Fibonacci numbers', 'integer', 'sqrt', 'represent', 'Full Fibonacci', 'determine', 'math', 'sum', 'elements', 'sequence', 'perfect square', 'function']", "test_keywords": "['while loop', 'Fibonacci numbers', 'perfect square', 'sqrt', 'position', 'determine', 'sum', 'XOR', 'pairs', 'sequence', 'conditions', 'distinct', 'represent', 'positive', 'integer', 'bool', 'function', 'Full Fibonacci', 'math']", "prompt_tokens": 765, "total_tokens": 1074, "completion_tokens": 309, "completion": "[Question 2]\n\nGiven a positive integer 'n', write a function to determine the number of distinct pairs of positive integers (i, j) such that 1 \u2264 i < j \u2264 n and the sum of the square roots of i and j is a perfect square. Return the count of such distinct pairs.\n\nFor example, if n = 5, the pairs (1, 3) and (2, 4) satisfy the condition because sqrt(1) + sqrt(3) is 2, which is a perfect square, and sqrt(2) + sqrt(4) is 3, which is a perfect square.\n\n[/Question 2]\n\n[Code 2]\n\ndef isPerfectSquare(x):\n    s = int(math.sqrt(x))\n    return s*s == x\n\ndef countPerfectSquarePairs(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            if isPerfectSquare(math.sqrt(i) + math.sqrt(j)):\n                count += 1\n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countPerfectSquarePairs(5) == 2\nassert countPerfectSquarePairs(10) == 6\nassert countPerfectSquarePairs(15) == 9\nassert countPerfectSquarePairs(20) == 12\nassert countPerfectSquarePairs(25) == 16\nassert countPerfectSquarePairs(30) == 20", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.781}, {"few_shot_keywords": "['divisibility', 'check', 'moran number', 'math', 'boolean', 'modulo', 'large number', 'government contract', 'squares']", "test_keywords": "['check', 'math', 'large number', 'modulo', 'divisibility', 'operations', 'common', 'boolean']", "prompt_tokens": 455, "total_tokens": 636, "completion_tokens": 181, "completion": "[Question 2]\n\nWrite a function to check if a large number is divisible by both 7 and 11. Return True if the number is divisible by both 7 and 11, otherwise return False.\n\n[/Question 2]\n\n[Code 2]\n\ndef isDivisibleBy7And11(number: int) -> bool:\n    return number % 7 == 0 and number % 11 == 0\n\n[/Code 2]\n\n[Asserts 2]\n\nassert isDivisibleBy7And11(77)==True\nassert isDivisibleBy7And11(14)==False\nassert isDivisibleBy7And11(154)==True\nassert isDivisibleBy7And11(121)==False\nassert isDivisibleBy7And11(777)==True\nassert isDivisibleBy7And11(77)==True\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.908}, {"few_shot_keywords": "['multiplication', 'iteration', 'comparison', 'mathematical', 'ratio', 'positive integers', 'math', 'perfect square', 'greedy']", "test_keywords": "['centered', 'comparison', 'positive integers', 'ratio', 'surface area', 'perfect chiliagon', 'cell', 'math', 'repetition']", "prompt_tokens": 558, "total_tokens": 778, "completion_tokens": 220, "completion": "[Question 2]\n\nWrite a function to check if a given positive integer n is a perfect chiliagon number. A perfect chiliagon number is a centered figurate number that represents a chiliagon with a centered nonagon inside it. A centered figurate number is a centered polygonal number that represents a polygon with a dot in the center and all other dots surrounding the center dot in successive polygonal layers.\n\n[/Question 2]\n\n[Code 2]\n\ndef isPerfectChiliagon(n: int) -> bool :\n    if n<=0:\n        return False\n    if (n-1)%9==0 and (n-1)%10==0:\n        return True\n    else:\n        return False\n\n[/Code 2]\n\n[Asserts 2]\n\nassert isPerfectChiliagon(990)==True\nassert isPerfectChiliagon(1000)==False\nassert isPerfectChiliagon(1001)==False\nassert isPerfectChiliagon(891)==True\nassert isPerfectChiliagon(892)==False\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.931}, {"few_shot_keywords": "['sequence', 'nearest', 'maximum', 'output', 'removal', 'string', 'difference', 'digit', 'minimum', 'product']", "test_keywords": "['digit', 'marks', 'minimum', 'sequence', 'perfect squares', 'difference', 'maximum', 'comparison', 'product']", "prompt_tokens": 474, "total_tokens": 751, "completion_tokens": 277, "completion": "[Question 2]\n\nYou are given a list of marks obtained by students in a class. Write a function to find the minimum difference between the marks of any two students in the class. If the difference is a perfect square, return the product of the two marks. Otherwise, return the maximum mark in the sequence.\n\n[/Question 2]\n\n[Code 2]\n\ndef minDifferenceProduct(marks: list) -> int:\n    marks.sort()\n    min_diff = float('inf')\n    for i in range(len(marks)-1):\n        diff = marks[i+1] - marks[i]\n        if diff > 0:\n            if int(diff**0.5) == diff**0.5:\n                return marks[i] * marks[i+1]\n            min_diff = min(min_diff, diff)\n    return max(marks)\n\n[/Code 2]\n\n[Asserts 2]\n\nassert minDifferenceProduct([3, 8, 1, 5, 10])==15\nassert minDifferenceProduct([12, 7, 25, 5, 10, 15])==25\nassert minDifferenceProduct([30, 25, 15, 10, 8, 5, 3])==900\nassert minDifferenceProduct([5, 10, 15, 20, 25, 30])==30", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.711}, {"few_shot_keywords": "['solution', 'integer', 'node', 'determine', 'decagonal', 'number', 'figurate', 'square', 'function', 'triangular', 'sqrt', 'alternate', 'collection', 'calculate']", "test_keywords": "['integer', 'sqrt', 'function', 'alternate', 'number', 'determine', 'natural numbers', 'square', 'decagonal', 'triangular', 'representation', 'figurate', 'given number', 'common']", "prompt_tokens": 556, "total_tokens": 773, "completion_tokens": 217, "completion": "[Question 2]\n\nWrite a function to determine if a given number is a Common Square-Triangular Number. A common square-triangular number is a number that is both a square number and a triangular number. For a given number N, write a function to determine if it is a common square-triangular number.\n\n[/Question 2]\n\n[Code 2]\n\ndef is_common_square_triangular(N: int) -> bool:\n    if ((sqrt(8 * N + 1) - 1) / 2).is_integer() and sqrt(N).is_integer():\n        return True\n    return False\n\n[/Code 2]\n\n[Asserts 2]\n\nassert is_common_square_triangular(1) == True\nassert is_common_square_triangular(36) == True\nassert is_common_square_triangular(1225) == True\nassert is_common_square_triangular(10) == False\nassert is_common_square_triangular(30) == False\nassert is_common_square_triangular(100) == False\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.77}, {"few_shot_keywords": "['quotient', 'moves', 'prime numbers', 'iteration', 'factor', 'counting', 'dynamic programming', 'subsequences', 'math', 'array']", "test_keywords": "['multiplication', 'subsequences', 'approximate', 'counting', 'math', 'dynamic programming', 'iteration', 'array', 'prime numbers']", "prompt_tokens": 752, "total_tokens": 1050, "completion_tokens": 298, "completion": "[Question 2]\n\nGiven an array of integers, find the approximate multiplication of all prime numbers in the array, considering only the subsequences of the array.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\nimport math\n\ndef isPrime(n):\n\tif (n <= 1):\n\t\treturn False\n\tfor i in range(2, int(n ** 0.5) + 1):\n\t\tif (n % i == 0):\n\t\t\treturn False\n\treturn True\n\ndef approximatePrimeMultiplication(arr: List[int]) -> int:\n\tprime_product = 1\n\tfor num in arr:\n\t\tif isPrime(num):\n\t\t\tprime_product *= num\n\treturn prime_product\n\ndef approximateMultiplicationOfPrimeSubsequences(arr: List[int]) -> int:\n\tresult = 1\n\tfor i in range(len(arr)):\n\t\tfor j in range(i, len(arr)):\n\t\t\tsubsequence = arr[i:j+1]\n\t\t\tresult *= approximatePrimeMultiplication(subsequence)\n\treturn result\n\n[/Code 2]\n\n[Asserts 2]\n\nassert approximateMultiplicationOfPrimeSubsequences([2, 3, 4, 5]) == 120\nassert approximateMultiplicationOfPrimeSubsequences([2, 3, 4, 5, 7]) == 50400\nassert approximateMultiplicationOfPrimeSubsequences([2, 11, 4, 6]) == 22\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.926}, {"few_shot_keywords": "['quadratic equation', 'even', 'odd', 'combinations', 'array', 'alternating', 'longest', 'subarray', 'XOR', 'integers', 'length', 'gcd']", "test_keywords": "['perfect square', 'matrix', 'array', 'exact', 'integers', 'alternating', 'subarray', 'longest', 'odd', 'length', 'even']", "prompt_tokens": 597, "total_tokens": 987, "completion_tokens": 390, "completion": "[Question 2]\n\nGiven a matrix of integers, write a function to find the length of the longest subarray where the sum of elements is a perfect square.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\nimport math\n\ndef isPerfectSquare(num: int) -> bool:\n    sqrt_num = int(math.sqrt(num))\n    return sqrt_num * sqrt_num == num\n\ndef maxPerfectSquareSumSubarray(matrix: List[List[int]]) -> int:\n    max_len = 0\n    for row in matrix:\n        prefix_sum = 0\n        prefix_sums = [0]\n        for val in row:\n            prefix_sum += val\n            prefix_sums.append(prefix_sum)\n        for i in range(len(prefix_sums)):\n            for j in range(i + 1, len(prefix_sums)):\n                subarray_sum = prefix_sums[j] - prefix_sums[i]\n                if isPerfectSquare(subarray_sum):\n                    max_len = max(max_len, j - i)\n    return max_len\n\n[/Code 2]\n\n[Asserts 2]\n\nassert maxPerfectSquareSumSubarray([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 2\nassert maxPerfectSquareSumSubarray([[3, 1, 4, 6], [5, 3, 7, 8], [9, 4, 6, 8]]) == 3\nassert maxPerfectSquareSumSubarray([[16, 7, 8], [2, 15, 9], [10, 23, 4]]) == 3\nassert maxPerfectSquareSumSubarray([[2, 7, 2], [9, 6, 5], [1, 2, 8]]) == 2\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.826}, {"few_shot_keywords": "['sqrt', 'prime factors', 'loop', 'objects', 'boolean', 'sum', 'moran number', 'subtract']", "test_keywords": "['twice', 'pythagorean triple', 'prime factors', 'moran number', 'hexadecagonal', 'traversal', 'sum', 'sqrt', 'loop', 'boolean']", "prompt_tokens": 628, "total_tokens": 1267, "completion_tokens": 639, "completion": "[Question 2]\n\nWrite a Python program to find all Pythagorean Triples whose sum is a Moran Number and one of the legs is a hexadecagonal number. Return the list of all such Pythagorean Triples.\n\n[/Question 2]\n\n[Code 2]\n\ndef isPrime(n: int) -> bool: \n\tif n <= 1: \n\t\treturn False\n\tif n <= 3: \n\t\treturn True\n\tif n % 2 == 0 or n % 3 == 0: \n\t\treturn False\n\t\n\tfor i in range(5, int(sqrt(n)+1), 6): \n\t\tif n % i == 0 or n %(i + 2) == 0: \n\t\t\treturn False\n\treturn True\n\ndef moranNumber(N: int) -> bool:\n\tsum = 0\n\t\n\t# Find all prime factors of N and add them\n\tfor i in range(2, N + 1):\n\t\twhile N % i == 0 and isPrime(i) :  \n\t\t\tsum += i\n\t\t\tN //= i\n\t\tif N == 1:\n\t\t\tbreak\n\treturn sum == N\n\ndef hexadecagonal(n: int) -> bool:\n\treturn (2 * n * n - n) % 16 == 0\n\ndef pythagoreanTriple(n: int) -> list:\n\ttriples = []\n\tfor b in range(1, n):\n\t\tfor a in range(1, b):\n\t\t\tc = sqrt(a*a + b*b)\n\t\t\tif c == int(c):\n\t\t\t\ttriples.append((a, b, int(c)))\n\treturn triples\n\ndef moranPythagoreanHexadecagonalTriples(limit: int) -> list:\n\ttriples = pythagoreanTriple(limit)\n\tresult = []\n\tfor triple in triples:\n\t\tif moranNumber(sum(triple)) and (hexadecagonal(triple[0]) or hexadecagonal(triple[1])):\n\t\t\tresult.append(triple)\n\treturn result\n\n[/Code 2]\n\n[Asserts 2]\n\nassert moranPythagoreanHexadecagonalTriples(20) == [(3, 4, 5), (5, 12, 13)]\nassert moranPythagoreanHexadecagonalTriples(50) == [(3, 4, 5), (5, 12, 13), (7, 24, 25), (9, 40, 41), (8, 15, 17)]\nassert moranPythagoreanHexadecagonalTriples(100) == [(3, 4, 5), (5, 12, 13), (7, 24, 25), (9, 40, 41), (8, 15, 17), (20, 21, 29), (12, 35, 37), (11, 60, 61), (28, 45, 53), (33, 56, 65), (16, 63, 65), (32, 63, 65)]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.716}, {"few_shot_keywords": "['boolean', 'sqrt', 'inclusive', 'figurate number', 'hendecagonal', 'polygon', 'formula', 'longest', 'integer']", "test_keywords": "['sqrt', 'integer', 'hendecagonal', 'formula', 'util', 'bitwise', 'figurate number', 'boolean', 'polygon']", "prompt_tokens": 585, "total_tokens": 1081, "completion_tokens": 496, "completion": "[Question 2]\n\nYou are given a list of integers representing the sides of polygons. You need to find the longest hendecagonal number in the list. A hendecagonal number is a figurate number that represents a hendecagon. It is an 11-sided polygon. The nth hendecagonal number can be calculated by the formula: n * (10n - 3) / 2. If there are no hendecagonal numbers in the list, return 0.\n\nImplement the function find_longest_hendecagonal_number(polygons) that takes a list of integers representing the sides of polygons and returns the longest hendecagonal number in the list or 0 if none are found.\n\n**Function Signature:** def find_longest_hendecagonal_number(polygons: List[int]) -> int:\n\n[/Question 2]\n\n[Code 2]\n\n```python\nfrom math import sqrt\n\ndef is_hendecagonal(N: int) -> bool:\n    n = (1 + sqrt(4 * (10 * N - 3) + 1)) / 5\n    return (n - int(n)) == 0\n\ndef find_longest_hendecagonal_number(polygons: List[int]) -> int:\n    longest_hendecagonal = 0\n    for num in polygons:\n        if is_hendecagonal(num) and num > longest_hendecagonal:\n            longest_hendecagonal = num\n    return longest_hendecagonal\n```\n\n[/Code 2]\n\n[Asserts 2]\n\n```python\nassert find_longest_hendecagonal_number([3, 11, 15, 20, 22, 26, 30, 35, 40]) == 26\nassert find_longest_hendecagonal_number([4, 10, 14, 18, 21, 25, 31, 37, 41]) == 0\nassert find_longest_hendecagonal_number([8, 12, 18, 22, 26, 28, 32, 36, 40, 44, 50, 55]) == 50\nassert find_longest_hendecagonal_number([11, 22, 33, 44, 55, 66, 77, 88, 99]) == 55\n```\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.785}, {"few_shot_keywords": "['figurate', 'number', 'iterative', 'circumscribed', 'series', 'hexadecagonal', 'sqrt', 'triangular', 'boolean']", "test_keywords": "['grade points', 'triangular', 'figurate', 'series', 'boolean', 'hexadecagonal', 'sqrt', 'number', 'modulo', 'sorting']", "prompt_tokens": 557, "total_tokens": 853, "completion_tokens": 296, "completion": "[Question 2]\n\nCreate a function to calculate the Grade Point Average (GPA) for a list of grade points. The GPA is calculated by taking the sum of the grade points and dividing it by the total number of courses. Grade points are represented on a scale of 0 to 4, and they correspond to letter grades A, B, C, D, and F. For example, A=4, B=3, C=2, D=1, F=0. If the GPA is a triangular number, return True; otherwise, return False.\n\n[/Question 2]\n\n[Code 2]\n\ndef calculate_gpa(grade_points: List[int]) -> bool:\n    total_grade_points = sum(grade_points)\n    total_courses = len(grade_points)\n    gpa = total_grade_points / total_courses\n    return isTriangular(gpa)\n\ndef isTriangular(n: float) -> bool:\n    x = sqrt(8*n + 1)\n    return x == int(x)\n\n[/Code 2]\n\n[Asserts 2]\n\nassert calculate_gpa([4, 3, 2, 3, 4])==True\nassert calculate_gpa([3, 2, 4, 3, 2])==False\nassert calculate_gpa([4, 4, 4, 4])==True\nassert calculate_gpa([3, 3, 3, 3])==False", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.892}, {"few_shot_keywords": "['pairs', 'range', 'decreasing', 'number', 'OR', 'check', 'representation', 'count', 'keys', 'loop']", "test_keywords": "['powerful', 'range', 'pairs', 'decreasing', 'sin', 'number', 'loop', 'triplets', 'count']", "prompt_tokens": 437, "total_tokens": 656, "completion_tokens": 219, "completion": "[Question 2]\n\nWrite a program to find the count of powerful triplets within a given range between start and end. A powerful triplet is a set of three numbers (i, j, k) such that i < j < k and sin(i) > sin(j) > sin(k).\n\n[/Question 2]\n\n[Code 2]\n\nimport math\n\ndef countPowerfulTriplets(start, end):\n\tcount = 0\n\tfor i in range(start, end + 1):\n\t\tfor j in range(i + 1, end + 1):\n\t\t\tfor k in range(j + 1, end + 1):\n\t\t\t\tif math.sin(i) > math.sin(j) > math.sin(k):\n\t\t\t\t\tcount += 1\n\treturn count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countPowerfulTriplets(1, 5) == 3\nassert countPowerfulTriplets(2, 6) == 2\nassert countPowerfulTriplets(3, 8) == 4\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.946}, {"few_shot_keywords": "['greedy', 'values', 'integer', 'division', 'dynamic programming', 'AND', 'recursion', 'minimum', 'math']", "test_keywords": "['math', 'division', 'operation', 'factor', '0s', 'greedy', 'recursion', 'dynamic programming', 'integer', 'minimum']", "prompt_tokens": 476, "total_tokens": 703, "completion_tokens": 227, "completion": "[Question 2]\n\nGiven a list of integers, the task is to find the minimum number of operations required to make all elements of the list divisible by a given factor.\n\n[/Question 2]\n\n[Code 2]\n\ndef minOperationsToDivisible(arr: List[int], factor: int) -> int:\n    count = 0\n    for num in arr:\n        if num % factor != 0:\n            count += factor - (num % factor)\n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert minOperationsToDivisible([4, 7, 9, 12, 15], 3) == 6\nassert minOperationsToDivisible([10, 20, 30, 40, 50], 5) == 0\nassert minOperationsToDivisible([18, 22, 33, 47, 50], 7) == 9\nassert minOperationsToDivisible([3, 6, 9, 12, 15], 3) == 0\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.761}, {"few_shot_keywords": "['array', 'perfect square', 'measure', 'math', 'sum', 'dictionary', 'Circumference', 'iteration', 'mathematical']", "test_keywords": "['mathematical', 'perfect square', 'iteration', 'sum', 'array', 'dynamic programming', 'math', 'operations']", "prompt_tokens": 563, "total_tokens": 856, "completion_tokens": 293, "completion": "[Question 2]\n\nGiven an array of integers, write a function to determine whether there exists a subarray with a sum that is a perfect square. If such a subarray exists, return True; otherwise, return False.\n\n[/Question 2]\n\n[Code 2]\n\nimport math\n\ndef isPerfectSquare(num):\n    sqrt = math.isqrt(num)\n    return sqrt * sqrt == num\n\ndef hasPerfectSquareSubarray(nums):\n    prefix_sum = 0\n    seen = {0}\n    for num in nums:\n        prefix_sum += num\n        for i in range(1, int(math.sqrt(prefix_sum)) + 1):\n            if prefix_sum - i*i in seen:\n                return True\n        seen.add(prefix_sum)\n    return False\n\n[/Code 2]\n\n[Asserts 2]\n\nassert hasPerfectSquareSubarray([1, 4, 2, 3, 5]) == True\nassert hasPerfectSquareSubarray([3, 1, 4, 2, 5, 6]) == False\nassert hasPerfectSquareSubarray([7, 9, 14, 16]) == True\nassert hasPerfectSquareSubarray([2, 8, 6, 5, 1]) == True\nassert hasPerfectSquareSubarray([10, 15, 20, 12, 4]) == False\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.884}, {"few_shot_keywords": "['heptagonal', 'decagonal', 'integer', 'search', 'formula', 'figurate', 'centered']", "test_keywords": "['centered', 'largest', 'integer', 'formula', 'objects', 'figurate', 'CG Corporation', 'decagonal']", "prompt_tokens": 512, "total_tokens": 689, "completion_tokens": 177, "completion": "[Question 2]\n\nCG Corporation is planning to create a large collection of centered decagonal objects for a new project. They want to find the largest centered decagonal number that can be represented as an integer. Write a function to calculate the largest centered decagonal number that can be represented as an integer.\n\n[/Question 2]\n\n[Code 2]\n\ndef largestCenteredDecagonal() -> int:\n    n = 1\n    while True:\n        centered_decagonal = n * (4 * n - 1)\n        if centered_decagonal > 0 and centered_decagonal % 1 == 0:\n            n += 1\n        else:\n            return (n - 1) * (4 * (n - 1) - 1)\n\n[/Code 2]\n\n[Asserts 2]\n\nassert largestCenteredDecagonal() == 910", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.738}, {"few_shot_keywords": "['math', 'integer', 'loop', 'base', 'approximate', 'perfect square', 'conditional', 'periodic function', 'Nude Number']", "test_keywords": "['art', 'integer', 'points', 'conditional', 'base', 'loop', 'math', 'perfect square']", "prompt_tokens": 728, "total_tokens": 1154, "completion_tokens": 426, "completion": "[Question 2]\n\nYou are given a set of 2D points represented as (x, y) coordinates. Write a function `count_perfect_squares(points: List[Tuple[int, int]]) -> int` to count the number of points that lie on a perfect square grid in the Cartesian coordinate system. A perfect square grid is a grid where the x and y coordinates are both integers and form a perfect square when plotted on the Cartesian plane.\n\nFor example, if the input points are [(0, 0), (1, 1), (4, 2), (9, 3), (16, 4)], the points (0, 0), (1, 1), and (16, 4) lie on a perfect square grid.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List, Tuple\n\ndef is_perfect_square(n: int) -> bool:\n    root = int(n**0.5)\n    return root * root == n\n\ndef count_perfect_squares(points: List[Tuple[int, int]]) -> int:\n    count = 0\n    for point in points:\n        x, y = point\n        if is_perfect_square(x) and is_perfect_square(y):\n            count += 1\n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert count_perfect_squares([(0, 0), (1, 1), (4, 2), (9, 3), (16, 4)]) == 3\nassert count_perfect_squares([(25, 16), (36, 49), (64, 81), (100, 121)]) == 4\nassert count_perfect_squares([(3, 3), (5, 7), (8, 2), (10, 11)]) == 0\nassert count_perfect_squares([(0, 4), (4, 0), (16, 16), (25, 25)]) == 4\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.703}, {"few_shot_keywords": "['rounding', 'exponential', 'equal', 'result', 'cube root', 'math', 'function', 'common factors', 'log', '1s']", "test_keywords": "['cube root', 'addition', 'function', 'possibility', 'exponential', 'node', 'factor', 'math', 'log', 'AND', 'rounding']", "prompt_tokens": 457, "total_tokens": 738, "completion_tokens": 281, "completion": "[Question 2]\n\nWrite a function to calculate the sum of cube roots of all the nodes in a binary tree. Given a binary tree, the task is to calculate the sum of cube roots of all the nodes using a function.\n\n[/Question 2]\n\n[Code 2]\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef sumOfCubeRoots(root: Node) -> float:\n    if root is None:\n        return 0\n    return round(math.exp(math.log(root.value)/3) + sumOfCubeRoots(root.left) + sumOfCubeRoots(root.right), 5)\n\n[/Code 2]\n\n[Asserts 2]\n\n# Create a binary tree\nroot = Node(1)\nroot.left = Node(2)\nroot.right = Node(3)\nroot.left.left = Node(4)\nroot.left.right = Node(5)\n\nassert sumOfCubeRoots(root) == 5.84804\n\n# Create another binary tree\nroot2 = Node(8)\nroot2.left = Node(27)\nroot2.right = Node(64)\nroot2.left.left = Node(125)\nroot2.left.right = Node(216)\n\nassert sumOfCubeRoots(root2) == 55.24908\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.847}, {"few_shot_keywords": "['optimization', 'iteration', 'factor', 'format', 'step size', 'math', 'sin', 'trigonometry', 'maximum value', 'range', 'square', 'periodic function']", "test_keywords": "['range', 'optimization', 'periodic function', 'iteration', 'smallest number', 'math', 'maximum value', 'integer', 'iterative', 'sin', 'trigonometry', 'divisible']", "prompt_tokens": 599, "total_tokens": 873, "completion_tokens": 274, "completion": "[Question 2]\n\nGiven a periodic function f(x) = A * sin(B * x) for a given range [L, R], find the smallest integer value of x in the given range such that the value of the periodic function is divisible by a given integer N.\n\n[/Question 2]\n\n[Code 2]\n\nimport math\n\ndef smallestDivisibleValue(A: int, B: int, L: int, R: int, N: int) -> int:\n    for x in range(L, R+1):\n        val = A * math.sin(B * x)\n        if val % N == 0:\n            return x\n    return -1\n\n[/Code 2]\n\n[Asserts 2]\n\nassert smallestDivisibleValue(1, 1, 0, 10, 2) == 4\nassert smallestDivisibleValue(1, 2, 0, 10, 3) == 3\nassert smallestDivisibleValue(2, 1, 0, 10, 5) == 1\nassert smallestDivisibleValue(3, 3, 0, 10, 4) == 2\nassert smallestDivisibleValue(1, 4, 0, 10, 6) == 1\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.908}, {"few_shot_keywords": "['iteration', 'distance', 'sum', 'factor', 'calculation', 'minimum', 'coin', 'cell', 'octadecagon', 'manipulation', 'surface area', 'moves', 'matrix']", "test_keywords": "['score', 'palindromic', 'cell', 'manipulation', 'moves', 'matrix', 'iteration', \"Boole's Rule\", 'minimum', 'coin', 'sum', 'calculation', 'dynamic-programming']", "prompt_tokens": 668, "total_tokens": 965, "completion_tokens": 297, "completion": "[Question 2]\n\nGiven a matrix of integers, write a function to calculate the minimum sum of palindromic scores that can be achieved by manipulating the cells using a limited set of moves. Each move involves adding or subtracting 1 from a cell's value. You may perform multiple iterations of moves until the scores form a palindromic sequence.\n\n[/Question 2]\n\n[Code 2]\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef minPalindromicScore(matrix):\n    min_sum = float('inf')\n    n, m = len(matrix), len(matrix[0])\n    \n    for move in range(-9, 10):\n        for i in range(n):\n            for j in range(m):\n                total_sum = 0\n                for x in range(n):\n                    for y in range(m):\n                        total_sum += abs(matrix[x][y] + move * (abs(i - x) + abs(j - y)))\n                \n                if is_palindrome(total_sum):\n                    min_sum = min(min_sum, total_sum)\n    \n    return min_sum\n\n[/Code 2]\n\n[Asserts 2]\n\nassert minPalindromicScore([[1, 2, 3], [4, 5, 6]]) == 24\nassert minPalindromicScore([[5, 8, 2], [9, 3, 4]]) == 53", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.928}, {"few_shot_keywords": "['integer', 'triangular number', 'set', 'add', 'squares', 'boolean', 'integral', 'flipping', 'sqrt', 'consecutive', 'sum']", "test_keywords": "['factors', 'unordered', 'integer', 'boolean', 'cubes', 'consecutive', 'squares', 'sum', 'sqrt']", "prompt_tokens": 510, "total_tokens": 707, "completion_tokens": 197, "completion": "[Question 2]\n\nWrite a function to determine if a given integer is a sum of the cubes of two consecutive integers. If the given integer can be represented as the sum of cubes of two consecutive integers, return True, else return False.\n\n[/Question 2]\n\n[Code 2]\n\ndef isSumOfConsecutiveCubes(N: int) -> bool:\n\tfor i in range(1, int(sqrt(N))):\n\t\tif (i*i*i + (i+1)*(i+1)*(i+1) == N):\n\t\t\treturn True\n\treturn False\n\n[/Code 2]\n\n[Asserts 2]\n\nassert isSumOfConsecutiveCubes(9)==True\nassert isSumOfConsecutiveCubes(17)==False\nassert isSumOfConsecutiveCubes(35)==True\nassert isSumOfConsecutiveCubes(48)==False\nassert isSumOfConsecutiveCubes(61)==True\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.766}, {"few_shot_keywords": "['figurate', 'heptagonal', 'centered', 'flipping', 'boolean', 'math', 'sqrt', 'prime numbers', 'number']", "test_keywords": "['number', 'heptagonal', 'sorting', 'output', 'figurate', 'math', 'boolean', 'centered', 'sqrt']", "prompt_tokens": 548, "total_tokens": 788, "completion_tokens": 240, "completion": "[Question 2]\n\nWrite a program that takes a number N as input and outputs the first N heptagonal numbers in sorted order.\n\n[/Question 2]\n\n[Code 2]\n\ndef isHeptagonalNumber(num: int) -> bool:\n    n = (1 + sqrt(1 + 24 * num)) / 7\n    return n == int(n)\n\ndef generateHeptagonalNumbers(N: int) -> List[int]:\n    heptagonal_nums = [n * (5 * n - 3) // 2 for n in range(1, N+1) if isHeptagonalNumber(n * (5 * n - 3) // 2)]\n    return sorted(heptagonal_nums)\n\n[/Code 2]\n\n[Asserts 2]\n\nassert generateHeptagonalNumbers(1) == [1]\nassert generateHeptagonalNumbers(5) == [1, 7, 18, 34, 55]\nassert generateHeptagonalNumbers(8) == [1, 7, 18, 34, 55, 91, 120, 153]\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.752}, {"few_shot_keywords": "['formula', 'figurate', 'cube root', 'sqrt', 'polygon', 'boolean', 'number', 'equal', 'nonadecagonal', 'centered']", "test_keywords": "['sqrt', 'centered', 'longest', 'cell', 'balance', 'number', 'polygon', 'formula', 'prime', 'nonadecagonal', 'boolean', 'figurate']", "prompt_tokens": 531, "total_tokens": 815, "completion_tokens": 284, "completion": "[Question 2]\n\nWrite a function to determine if a given number is a prime centered nonadecagonal number. A prime centered nonadecagonal number is a centered nonadecagonal number that is also a prime number. In other words, it is both a centered nonadecagonal number and a prime number. Use the formula 19n^2 - 18n + 5 to generate centered nonadecagonal numbers, and check if the number is also a prime number.\n\n[/Question 2]\n\n[Code 2]\n\ndef isPrime(n):\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(sqrt(n)) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\ndef isPrimeCenterednonadecagonal(N: int) -> bool:\n\tn = (1 + sqrt(3 + 3 * N / 19)) / 3\n\tif (n - int(n)) == 0:\n\t\treturn isPrime(N)\n\treturn False\n\n[/Code 2]\n\n[Asserts 2]\n\nassert isPrimeCenterednonadecagonal(1846)==True\nassert isPrimeCenterednonadecagonal(2952)==False\nassert isPrimeCenterednonadecagonal(5688)==False\nassert isPrimeCenterednonadecagonal(2401)==True", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.81}, {"few_shot_keywords": "['circle', 'close', 'bits', 'circumference', 'discriminant', 'geometric', 'spaced', 'sqrt', 'cell', 'math', 'maximum', 'centered', 'octadecagon', 'LCM', 'figure']", "test_keywords": "['centered', 'discriminant', 'circle', 'close', 'octadecagon', 'traversal', 'math', 'figure', 'connect nodes', 'spaced', 'geometric', 'sqrt', 'circumference']", "prompt_tokens": 574, "total_tokens": 826, "completion_tokens": 252, "completion": "[Question 2]\n\nWrite a Python function to calculate the maximum circumference of a circle that can be formed by connecting the nodes of a geometric figure. The geometric figure is a centered octadecagon with evenly spaced nodes. Given the distance between two consecutive nodes, calculate the maximum circumference of a circle that can be formed by connecting these nodes.\n\n[/Question 2]\n\n[Code 2]\n\nimport math\n\ndef max_circle_circumference(distance: float) -> float:\n    side_length = distance / (2 * math.sin(math.pi / 18))\n    return 2 * math.pi * (side_length / (2 * math.sin(math.pi / 18)))\n\n[/Code 2]\n\n[Asserts 2]\n\nassert math.isclose(max_circle_circumference(5.0), 21.694282)\nassert math.isclose(max_circle_circumference(7.5), 32.541423)\nassert math.isclose(max_circle_circumference(10.0), 43.388565)\nassert math.isclose(max_circle_circumference(12.5), 54.235706)\nassert math.isclose(max_circle_circumference(15.0), 65.082847)", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.946}, {"few_shot_keywords": "['array', 'count', 'comparison', 'multiple', 'integer', 'hendecagonal', 'iteration', 'subarray']", "test_keywords": "['iteration', 'subsequences', 'dynamic-programming', 'integer', 'count', 'subarray', 'array', 'roots', 'comparison']", "prompt_tokens": 492, "total_tokens": 719, "completion_tokens": 227, "completion": "[Question 2]\n\nGiven an array of integers, find the count of subsequences in the array where the sum of the subsequence is a perfect square.\n\n[/Question 2]\n\n[Code 2]\n\nfrom math import isqrt\nfrom typing import List\n\ndef countPerfectSquareSubsequences(arr: List[int]) -> int:\n    count = 0\n    N = len(arr)\n    for i in range(1, 1 << N):\n        subarray = [arr[j] for j in range(N) if (i & (1 << j))]\n        subarray_sum = sum(subarray)\n        if isqrt(subarray_sum) ** 2 == subarray_sum:\n            count += 1\n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countPerfectSquareSubsequences([1, 2, 3, 4]) == 4\nassert countPerfectSquareSubsequences([2, 2, 6]) == 3\nassert countPerfectSquareSubsequences([4, 6, 11]) == 0\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.849}, {"few_shot_keywords": "['exact', 'count', 'array', 'unique', 'length', 'repetition', 'figurate', 'distinct', 'comparison']", "test_keywords": "['CGPA', 'repetition', 'array', '0s', 'unique', 'aesthetic', 'distinct', 'length', 'palindromic', 'count']", "prompt_tokens": 559, "total_tokens": 863, "completion_tokens": 304, "completion": "[Question 2]\n\nYou are given a list of CGPA scores of students represented by an array. Write a function to count the number of unique palindromic CGPA scores in the list and return the count.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef countPalindromicCGPA(cgpaList: List[str]) -> int:\n    count = 0\n    for cgpa in cgpaList:\n        if cgpa == cgpa[::-1]:\n            count += 1\n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countPalindromicCGPA(['3.2', '4.5', '3.2', '2.1', '5.5', '4.4']) == 2\nassert countPalindromicCGPA(['3.5', '4.2', '3.6', '2.2', '5.5', '4.4']) == 1\nassert countPalindromicCGPA(['4.5', '3.3', '2.1', '5.5', '4.4', '3.3']) == 3\nassert countPalindromicCGPA(['3.2', '4.5', '3.2', '2.1', '5.5', '4.4', '3.2']) == 3\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.901}, {"few_shot_keywords": "['minimum', 'subarray', 'palindromic', 'absolute difference', 'integers', \"Boole's Rule\", 'maximum', 'length', 'array']", "test_keywords": "['minimum', 'maximum', 'common factors', 'integers', 'array', 'length', 'absolute difference', 'node', 'subarray']", "prompt_tokens": 654, "total_tokens": 1034, "completion_tokens": 380, "completion": "[Question 2]\n\nGiven two arrays arr1[] and arr2[] of n no. of integers, the task is to find the length of the maximum subarray of the two arrays such that the absolute difference between the common factors of the elements of the subarray is minimum.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\n\ndef gcd(a: int, b: int) -> int:\n\twhile b:\n\t\ta, b = b, a % b\n\treturn a\n\ndef commonFactorsLength(arr1: List[int], arr2: List[int], n: int) -> int:\n\tmaxLen = 0\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tgcdVal = gcd(arr1[i], arr2[j])\n\t\t\tif gcdVal > 1:\n\t\t\t\tlen = 1\n\t\t\t\tx, y = i+1, j+1\n\t\t\t\twhile x < n and y < n and gcd(arr1[x], arr2[y]) > 1:\n\t\t\t\t\tlen += 1\n\t\t\t\t\tx += 1\n\t\t\t\t\ty += 1\n\t\t\t\tmaxLen = max(maxLen, len)\n\treturn maxLen\n\n[/Code 2]\n\n[Asserts 2]\n\nassert commonFactorsLength([2, 3, 4, 6, 8], [3, 5, 7, 9, 11], 5) == 3\nassert commonFactorsLength([12, 15, 20, 25, 28], [3, 5, 7, 9, 11], 5) == 2\nassert commonFactorsLength([7, 9, 14, 18, 21], [3, 5, 7, 9, 11], 5) == 1\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.726}, {"few_shot_keywords": "['array', 'sum', 'subarray', 'same', 'total', 'counting', 'integer', 'nested loop', 'process']", "test_keywords": "['total', 'sum', 'integer', 'nested loop', 'subsets', 'array', 'counting', 'prime factors', 'GCD', 'subarray']", "prompt_tokens": 540, "total_tokens": 846, "completion_tokens": 306, "completion": "[Question 2]\n\nGiven an array of integers \\(arr[]\\), the task is to find the total number of subsets whose sum is a prime number.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef isPrime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef countSubsetsWithPrimeSum(arr: List[int]) -> int:\n    count = 0\n    n = len(arr)\n    for i in range(1, 1 << n):\n        subsetSum = 0\n        for j in range(n):\n            if (i & (1 << j)) != 0:\n                subsetSum += arr[j]\n        if isPrime(subsetSum):\n            count += 1\n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countSubsetsWithPrimeSum([2, 3, 5, 7]) == 7\nassert countSubsetsWithPrimeSum([1, 2, 3, 4, 5]) == 10\nassert countSubsetsWithPrimeSum([10, 15, 20]) == 0\nassert countSubsetsWithPrimeSum([17, 19, 23, 29]) == 15\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.702}, {"few_shot_keywords": "['power', 'equality', 'hash table', 'minimum', 'value', 'boolean', 'addition', 'impossible', 'non-negative', 'integer']", "test_keywords": "['integer', 'exact', 'equation', 'non-negative', 'value', 'addition', 'equality', 'minimum', 'impossible', 'perfect cube']", "prompt_tokens": 558, "total_tokens": 759, "completion_tokens": 201, "completion": "[Question 2]\n\nWrite a function to find the minimum non-negative integer value that needs to be added to a given integer N to make it a perfect cube. If it is not possible to make N a perfect cube by adding any non-negative value, return -1.\n\n[/Question 2]\n\n[Code 2]\n\ndef makePerfectCube(N: int) -> int:\n    diff = (int(N ** (1/3)) + 1) ** 3 - N\n    return diff if diff != 0 else 0 if N != 0 else -1\n\n[/Code 2]\n\n[Asserts 2]\n\nassert makePerfectCube(27) == 0\nassert makePerfectCube(30) == 2\nassert makePerfectCube(64) == 0\nassert makePerfectCube(0) == 0\nassert makePerfectCube(1) == 26\nassert makePerfectCube(100) == -1\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.845}, {"few_shot_keywords": "['odd', 'output', 'integer', 'sum', 'swap', 'nonadecagonal', 'repeated', 'negative', 'perfect cube', 'possible']", "test_keywords": "['sum', 'repeated', 'output', 'odd', 'integer', 'batting', 'possible', 'Full Fibonacci']", "prompt_tokens": 604, "total_tokens": 990, "completion_tokens": 386, "completion": "[Question 2]\n\nGiven an integer N, write a function to calculate the sum of the first N odd numbers in the Fibonacci sequence. The Fibonacci sequence is defined as: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. If N is greater than the length of the full Fibonacci sequence, the function should repeat the sequence and continue summing the odd numbers until N odd numbers are summed.\n\nFor Example:\nIf N = 5, the Fibonacci sequence is 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, ...\nSo, the sum of the first 5 odd numbers in the sequence is 1 + 1 + 3 + 5 + 13 = 23.\n\nWrite a function to calculate the sum of the first N odd numbers in the Fibonacci sequence and return the result.\n\n[/Question 2]\n\n[Code 2]\n\ndef sumOfFirstNOddInFibonacci(N: int) -> int:\n    fibonacci = [0, 1]\n    while len(fibonacci) < 2 * N:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    odd_numbers = [num for num in fibonacci if num % 2 != 0][:N]\n    return sum(odd_numbers)\n\n[/Code 2]\n\n[Asserts 2]\n\nassert sumOfFirstNOddInFibonacci(5) == 23\nassert sumOfFirstNOddInFibonacci(7) == 94\nassert sumOfFirstNOddInFibonacci(3) == 4\nassert sumOfFirstNOddInFibonacci(10) == 188", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.861}, {"few_shot_keywords": "['integer', 'process', 'gcd', 'minimum', 'probability', 'while loop', 'reductions', 'subtract', 'division']", "test_keywords": "['digit', 'gcd', 'division', 'reductions', 'while loop', 'subarray', 'process', 'integer', 'previous', 'subtract']", "prompt_tokens": 493, "total_tokens": 763, "completion_tokens": 270, "completion": "[Question 2]\n\nGiven an array of integers, find the length of the longest subarray such that the GCD of all the elements in the subarray is greater than 1. \n\n[/Question 2]\n\n[Code 2]\n\ndef LongestSubarrayLength(arr: List[int]) -> int:\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    result = 0\n    n = len(arr)\n\n    for i in range(n):\n        g = arr[i]\n        for j in range(i, n):\n            g = gcd(g, arr[j])\n            if g > 1:\n                result = max(result, j - i + 1)\n    return result\n\n\n[/Code 2]\n\n[Asserts 2]\n\nassert LongestSubarrayLength([2, 4, 6, 8]) == 4\nassert LongestSubarrayLength([3, 5, 7, 9, 11]) == 1\nassert LongestSubarrayLength([4, 8, 12, 16, 20]) == 5\nassert LongestSubarrayLength([6, 15, 21, 33, 99]) == 3\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.845}, {"few_shot_keywords": "['integers', 'zero', 'array', 'pair', 'element', 'check', 'order', 'chemical reaction', 'merge', 'possibility', 'odd', 'split']", "test_keywords": "['function', 'formula', 'concentration', 'array', 'split', 'check', 'Nude Number', 'integers', 'atoms', 'element', 'possibility', 'zero', 'merge', 'order']", "prompt_tokens": 678, "total_tokens": 1028, "completion_tokens": 350, "completion": "[Question 2]\n\nWrite a function to check the possibility of merging two arrays of integers to form an array that represents the concentration of atoms in a chemical reaction. The concentration array is represented by the formula C = (A * X + B * Y) / (X + Y), where A and B are the arrays of atoms, X and Y are the arrays of integers, and C is the resulting concentration array.\n\nFor example, given A = [4, 5, 6] and B = [7, 8, 9], and X = [2, 1, 3] and Y = [1, 2, 2], the resulting concentration array C would be [3.4, 4.3, 5.3].\n\n[/Question 2]\n\n[Code 2]\n\ndef mergeArrays(A, B, X, Y):\n    C = []\n    for i in range(len(A)):\n        concentration = (A[i] * X[i] + B[i] * Y[i]) / (X[i] + Y[i])\n        C.append(concentration)\n    return C\n\n[/Code 2]\n\n[Asserts 2]\n\nassert mergeArrays([4, 5, 6], [7, 8, 9], [2, 1, 3], [1, 2, 2]) == [3.4, 4.3, 5.3]\nassert mergeArrays([1, 2, 3], [2, 3, 4], [1, 1, 1], [2, 2, 2]) == [1.6, 2.3, 3.2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.767}, {"few_shot_keywords": "['given number', 'sum', 'parity', 'integer', 'natural numbers', 'negative', 'equations', 'twice', 'index', 'positive', 'cubes', 'set bits', 'alternating']", "test_keywords": "['negative', 'increment', 'integer', 'index', 'sum', 'positive', 'balance', 'alternating', 'natural numbers', 'digit', 'cell', 'cubes', 'overlap']", "prompt_tokens": 544, "total_tokens": 919, "completion_tokens": 375, "completion": "[Question 2]\n\nYou are given an array of integers. Write a program to find the sum of cubes of the positive integers at even indices and the cubes of the negative integers at odd indices. If the sum of the cubes of positive integers is greater than the sum of the cubes of negative integers, increment each element of the array by 1; otherwise, leave the array unchanged.\n\n[/Question 2]\n\n[Code 2]\n\ndef update_array(arr):\n    sum_positive = 0\n    sum_negative = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] > 0:\n            sum_positive += arr[i] ** 3\n        elif i % 2 != 0 and arr[i] < 0:\n            sum_negative += arr[i] ** 3\n    if sum_positive > sum_negative:\n        return [x + 1 for x in arr]\n    else:\n        return arr\n\n[/Code 2]\n\n[Asserts 2]\n\nassert update_array([1, -2, 3, -4, 5, -6]) == [2, -1, 4, -3, 6, -5]\nassert update_array([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert update_array([-1, 2, -3, 4, -5, 6]) == [-1, 2, -3, 4, -5, 6]\nassert update_array([1, 2, 3, 4, -5, -6]) == [1, 2, 3, 4, -5, -6]\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.81}, {"few_shot_keywords": "['minimum', 'arithmetic', 'division', 'decreasing', 'array', 'target', 'Gauss', 'smallest', 'sum', 'integer', 'percentage']", "test_keywords": "['minimum', 'integral', 'sum', 'division', 'array', 'smallest', 'integer', 'perfect squares', 'twice', 'search', 'exponent', 'target']", "prompt_tokens": 643, "total_tokens": 1004, "completion_tokens": 361, "completion": "[Question 2]\n\nGiven an array of integers, find the smallest positive integer that can be expressed as the sum of perfect squares of the elements of the array, each taken at most twice.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\n\ndef smallestSumOfPerfectSquares(arr: List[int]) -> int:\n    maxNum = max(arr)\n    dp = [float('inf')] * (maxNum + 1)\n    dp[0] = 0\n    for num in range(1, maxNum + 1):\n        for val in [x*x for x in range(1, int(num**0.5)+1)]:\n            dp[num] = min(dp[num], 1 + dp[num - val])\n    res = 1\n    while True:\n        canExpress = False\n        for num in arr:\n            if res - num >= 0 and dp[res-num] <= 2:\n                canExpress = True\n                break\n        if not canExpress:\n            break\n        res += 1\n    return res\n\n[/Code 2]\n\n[Asserts 2]\n\nassert smallestSumOfPerfectSquares([1, 2, 3, 4, 5]) == 2\nassert smallestSumOfPerfectSquares([1, 1, 1, 1, 1]) == 5\nassert smallestSumOfPerfectSquares([10, 15, 20]) == 2\nassert smallestSumOfPerfectSquares([2, 3, 5, 7, 11]) == 1\nassert smallestSumOfPerfectSquares([12, 15, 20, 25]) == 3\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.889}, {"few_shot_keywords": "['triplets', 'cost', 'integer', 'nested loop', 'divides', 'count', 'check', 'array']", "test_keywords": "['array', 'nested loop', 'hexadecagonal', 'divides', 'triplets', 'count', 'integer', 'selection']", "prompt_tokens": 482, "total_tokens": 792, "completion_tokens": 310, "completion": "[Question 2]\n\nGiven an array of integers, write a function to count the number of triplets (a, b, c) such that a divides b, b divides c, and the sum of a, b, and c forms a hexadecagonal number.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\n\ndef countHexadecagonalTriplets(arr: List[int]) -> int:\n    def isHexadecagonal(n):\n        root = (1 + (1 + 8*n)**0.5) / 4\n        return root.is_integer()\n    \n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[j] % arr[i] == 0 and arr[k] % arr[j] == 0: # a divides b, b divides c\n                    if isHexadecagonal(arr[i] + arr[j] + arr[k]): # sum forms hexadecagonal number\n                        count += 1\n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countHexadecagonalTriplets([1, 2, 3, 4, 5, 6, 7]) == 1\nassert countHexadecagonalTriplets([2, 4, 8, 16, 32, 64, 128]) == 6", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.949}, {"few_shot_keywords": "['integer', 'sum', 'perfect number', 'pattern', 'odd', 'points', 'array', 'max', 'set bits', 'pair', 'parity', 'even', 'possible']", "test_keywords": "['probability', 'array', 'pair', 'set bits', 'max', 'Circumference', 'parity', 'odd', 'OR', 'integer', 'exponent', 'sorting', 'sum', 'even']", "prompt_tokens": 618, "total_tokens": 968, "completion_tokens": 350, "completion": "[Question 2]\n\nGiven an array arr of N integers, find the probability of selecting a pair of elements with odd parity (i.e., both elements have an odd number of set bits).\n\n[/Question 2]\n\n[Code 2]\n\ndef countSetBits(num):\n\tcount = 0\n\twhile (num):\n\t\tcount += num & 1\n\t\tnum >>= 1\n\treturn count\n\ndef oddParityPairProbability(arr):\n\todd = []\n\tfor i in range(len(arr)):\n\t\tif countSetBits(arr[i]) % 2 != 0:\n\t\t\todd.append(arr[i])\n\ttotal_pairs = len(odd) * (len(odd) - 1) / 2\n\todd_pairs = 0\n\tfor i in range(len(odd)):\n\t\tfor j in range(i+1, len(odd)):\n\t\t\tif (odd[i] | odd[j]) % 2 != 0:\n\t\t\t\todd_pairs += 1\n\treturn odd_pairs / total_pairs if total_pairs > 0 else 0\n\n[/Code 2]\n\n[Asserts 2]\n\nassert oddParityPairProbability([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==0.2\nassert oddParityPairProbability([32, 13, 18, 15, 20, 7, 14, 19])==0.2857142857142857\nassert oddParityPairProbability([3, 4, 5, 6, 7, 8, 9, 10, 12])==0.3333333333333333\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.761}, {"few_shot_keywords": "['program', 'check', 'formula', 'figurate', 'number', 'sqrt', 'imaginary', 'boolean', 'sequence', 'hexagonal']", "test_keywords": "['figurate', 'toggled', 'sequence', 'boolean', 'hexagonal', 'number', 'sqrt', 'process', 'traversal', 'check', 'aesthetic', 'formula']", "prompt_tokens": 556, "total_tokens": 851, "completion_tokens": 295, "completion": "[Question 2]\n\nYou are given a sequence of boolean values represented as 0s and 1s. This sequence is an aesthetic sequence if the process of toggling any bit (changing 0 to 1 or 1 to 0) exactly one time results in a sequence that represents Hexagonal Numbers. The Hexagonal Number is given by the formula: n(2n-1).\n\nWrite a function to check if the given sequence is an aesthetic sequence or not.\n\n[/Question 2]\n\n[Code 2]\n\nfrom math import sqrt\n\ndef isHexagonal(N: int) -> bool:\n    n = (1 + sqrt(1 + 8 * N)) / 4\n    return (n - int(n) == 0)\n\ndef isAestheticSequence(sequence: str) -> bool:\n    sequence = [int(bit) for bit in sequence]\n    for i in range(len(sequence)):\n        sequence[i] = 1 - sequence[i]\n        hexagonal_str = ''.join(map(str, sequence))\n        if isHexagonal(int(hexagonal_str, 2)):\n            return True\n        sequence[i] = 1 - sequence[i]\n    return False\n\n[/Code 2]\n\n[Asserts 2]\n\nassert isAestheticSequence(\"1010\")==True\nassert isAestheticSequence(\"1100\")==True\nassert isAestheticSequence(\"1110\")==False\nassert isAestheticSequence(\"1001\")==False", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.888}, {"few_shot_keywords": "['prefix sum', 'count', 'array', 'difference', 'subarray', 'squares', 'year', 'integers', 'positive integer', 'discriminant', 'sum']", "test_keywords": "['combinations', 'common', 'mathematical', 'integers', 'repetitions', 'array', 'prefix sum', 'subarray', 'sum', 'squares', 'triplets', 'difference', 'count']", "prompt_tokens": 654, "total_tokens": 1101, "completion_tokens": 447, "completion": "[Question 2]\n\nGiven an array of integers with possible repetitions, find the count of all unique triplets (a, b, c) such that a + b = c, where a, b, and c are all integers in the array. Return the count of such unique triplets.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef countSumTriplets(arr: List[int]) -> int:\n    count = 0\n    freq_map = {}\n    for num in arr:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n    keys = list(freq_map.keys())\n    n = len(keys)\n    for i in range(n):\n        for j in range(i, n):\n            a = keys[i]\n            b = keys[j]\n            c = a + b\n            if c in freq_map:\n                if c == a and c == b:\n                    count += (freq_map[c] * (freq_map[c] - 1) * (freq_map[c] - 2)) // 6\n                elif c == a:\n                    count += (freq_map[c] * (freq_map[c] - 1)) // 2 * freq_map[b]\n                elif c == b:\n                    count += (freq_map[c] * (freq_map[c] - 1)) // 2 * freq_map[a]\n                else:\n                    count += freq_map[a] * freq_map[b] * freq_map[c]\n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countSumTriplets([1, 2, 3, 4, 5]) == 4\nassert countSumTriplets([3, 3, 3, 3, 3]) == 10\nassert countSumTriplets([2, 4, 6, 8, 10]) == 0\nassert countSumTriplets([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == 8\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.836}, {"few_shot_keywords": "['subsequences', 'length', 'product', 'sorted', 'search', 'periodic function', 'array', 'indices', 'factors', 'gcd', 'integers', 'lexicographically']", "test_keywords": "['gcd', 'factors', 'product', 'length', 'sorted', 'integers', 'prime factor', 'array', 'natural numbers', 'subsequences']", "prompt_tokens": 620, "total_tokens": 1040, "completion_tokens": 420, "completion": "[Question 2]\n\nGiven an array of natural numbers, find the length of the longest sorted subsequence, whose product is a prime factor of the GCD of all integers in the subsequence.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\nimport math\n\ndef longestSortedSubsequenceLength(arr: List[int]) -> int:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def product_of_subsequence(subseq):\n        product = 1\n        for num in subseq:\n            product *= num\n        return product\n\n    n = len(arr)\n    max_length = 0\n    for i in range(n):\n        subseq = [arr[i]]\n        for j in range(i+1, n):\n            if arr[j] >= subseq[-1]:\n                subseq.append(arr[j])\n        if len(subseq) > max_length:\n            product = product_of_subsequence(subseq)\n            if is_prime(product) and math.gcd(*subseq) % product == 0:\n                max_length = len(subseq)\n    return max_length\n\n[/Code 2]\n\n[Asserts 2]\n\nassert longestSortedSubsequenceLength([1, 2, 3, 4, 5, 6, 7, 8]) == 3\nassert longestSortedSubsequenceLength([2, 3, 5, 7, 11, 13, 17, 19]) == 8\nassert longestSortedSubsequenceLength([1, 4, 7, 11, 10, 18, 12, 3, 6, 5]) == 5\nassert longestSortedSubsequenceLength([3, 5, 7, 11, 13, 17, 19]) == 7\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.871}, {"few_shot_keywords": "['product', 'math', 'pythagorean triple', 'integer', 'greedy', 'squares', 'circle', 'trigonometry']", "test_keywords": "['octagonal', 'hexagonal', 'math', 'product', 'Fibonacci numbers', 'integer', 'squares']", "prompt_tokens": 507, "total_tokens": 697, "completion_tokens": 190, "completion": "[Question 2]\n\nGiven an integer N, the task is to find the product of the Nth and (N+1)th octagonal numbers.\n\n[/Question 2]\n\n[Code 2]\n\ndef octagonal_number(n):\n    return n * (3 * n - 2)\n\ndef productOfNthAndNextOctagonalNumbers(N: int) -> int:\n    nth_octagonal = octagonal_number(N)\n    next_octagonal = octagonal_number(N + 1)\n    return nth_octagonal * next_octagonal\n\n[/Code 2]\n\n[Asserts 2]\n\nassert productOfNthAndNextOctagonalNumbers(1) == 40\nassert productOfNthAndNextOctagonalNumbers(3) == 408\nassert productOfNthAndNextOctagonalNumbers(5) == 1100\nassert productOfNthAndNextOctagonalNumbers(10) == 5076", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.774}, {"few_shot_keywords": "['arithmetic', 'natural numbers', 'sequence', 'operations', 'solution', 'indexing', 'cricket', 'Gauss', 'distinct', 'node', 'alternating']", "test_keywords": "['sequence', 'pairs', 'represent', 'arithmetic', 'alternating', 'determine', 'operations', 'range', 'distinct', 'indexing']", "prompt_tokens": 626, "total_tokens": 947, "completion_tokens": 321, "completion": "[Question 2]\n\nYou are given a sequence of pairs (a, b) where a and b both represent natural numbers. Each pair represents an operation in an alternating arithmetic sequence. Your task is to determine if the given sequence forms an alternating arithmetic sequence. If it does, return True; otherwise, return False.\n\nWrite a function to determine if the given sequence forms an alternating arithmetic sequence.\n\n[/Question 2]\n\n[Code 2]\n\ndef is_alternating_arithmetic_sequence(sequence: list) -> bool:\n    if len(sequence) < 3:\n        return False\n    diff = sequence[1][0] - sequence[0][0]\n    for i in range(1, len(sequence)):\n        if i % 2 == 0:\n            if sequence[i][0] - sequence[i - 1][0] != diff or sequence[i][1] - sequence[i - 1][1] != diff:\n                return False\n        else:\n            if sequence[i][0] - sequence[i - 1][0] != -diff or sequence[i][1] - sequence[i - 1][1] != -diff:\n                return False\n    return True\n\n[/Code 2]\n\n[Asserts 2]\n\nassert is_alternating_arithmetic_sequence([(1, 3), (2, 6), (3, 9), (4, 12)]) == True\nassert is_alternating_arithmetic_sequence([(1, 3), (2, 6), (4, 12)]) == False\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.928}, {"few_shot_keywords": "['iterative', 'product', 'power', 'length', 'subsets', 'positive integer', 'numbers', 'atoms', 'while loop', 'same', 'math', 'sum', 'sphere', 'divisors']", "test_keywords": "['figurate', 'divisors', 'subsets', 'iterative', 'sum', 'power', 'product', 'road construction', 'while loop', 'positive integer', 'step size', 'task', 'math', 'CGPA']", "prompt_tokens": 578, "total_tokens": 863, "completion_tokens": 285, "completion": "[Question 2]\n\nFor a given positive integer N, write a function to calculate the sum of the product of all possible subsets of the divisors of N.\n\n[/Question 2]\n\n[Code 2]\n\ndef sum_of_product_of_divisor_subsets(N):\n    res = 1\n    for i in range(2, N + 1):\n        count = 0\n        while N % i == 0:\n            N //= i\n            count += 1\n        if count > 0:\n            res *= ((power(i, count + 1) - 1) // (i - 1))\n    return res\n\ndef power(x, y):\n    result = 1\n    while y > 0:\n        if y & 1 == 1:\n            result *= x\n        y = y // 2\n        x *= x\n    return result\n\n[/Code 2]\n\n[Asserts 2]\n\nassert sum_of_product_of_divisor_subsets(6) == 252\nassert sum_of_product_of_divisor_subsets(10) == 1072\nassert sum_of_product_of_divisor_subsets(12) == 5962\nassert sum_of_product_of_divisor_subsets(15) == 20520\nassert sum_of_product_of_divisor_subsets(18) == 114712\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.839}, {"few_shot_keywords": "['powerful number', 'set', 'conditional', 'subsequence', 'array', 'longest', \"Boole's Rule\", 'integer']", "test_keywords": "['powerful number', 'subsequence', 'set', 'equality', 'array', 'modulo', 'integer']", "prompt_tokens": 588, "total_tokens": 1018, "completion_tokens": 430, "completion": "[Question 2]\n\nGiven an array of integers, find the length of the longest subsequence such that all the elements are powerful numbers and the sum of the elements in the subsequence is equal to a given integer K.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef longestPowerfulSubsequence(arr: List[int], K: int) -> int:\n    s = set()\n    for i in range(33):\n        for j in range(2, 33):\n            if i ** j <= 10**6:\n                s.add(i ** j)\n    n = len(arr)\n    dp = [[0 for i in range(K+1)] for j in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, K+1):\n            if arr[i-1] <= j and arr[i-1] in s:\n                dp[i][j] = dp[i-1][j-arr[i-1]] + dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n    res = 0\n    for i in range(K+1):\n        res = max(res, dp[n][i])\n    return res\n\n[/Code 2]\n\n[Asserts 2]\n\nassert longestPowerfulSubsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10)==1\nassert longestPowerfulSubsequence([2, 8, 9, 3, 25, 36, 5, 7], 10)==2\nassert longestPowerfulSubsequence([9, 8, 64, 6, 25, 7], 16)==3\nassert longestPowerfulSubsequence([5, 6, 7, 8, 9], 10)==0\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.737}, {"few_shot_keywords": "['array', 'Fibonacci numbers', 'alternating', 'OR', 'bitwise', 'distance', 'periodic function', 'manipulation', 'binary', 'count', 'loop', 'maximum', 'integer']", "test_keywords": "['maximum', 'score', 'integer', 'float', 'OR', 'LCM', 'array', 'manipulation', 'nonadecagonal', 'bitwise', 'binary', 'loop', 'count']", "prompt_tokens": 617, "total_tokens": 961, "completion_tokens": 344, "completion": "[Question 2]\n\nYou are given an array of non-negative integers arr[] and an integer k. Your task is to find the maximum possible score by selecting two different indices i and j such that the bitwise OR of arr[i] and arr[j] is maximum. The score is calculated as the bitwise OR of arr[i], arr[j], and the least common multiple (LCM) of arr[i] and arr[j].\n\n[/Question 2]\n\n[Code 2]\n\nfrom math import gcd\n\ndef bitwiseORWithLCM(arr: list, k: int) -> int:\n    max_score = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            score = arr[i] | arr[j] | (arr[i] * arr[j] // gcd(arr[i], arr[j]))\n            max_score = max(max_score, score)\n    return max_score\n\n[/Code 2]\n\n[Asserts 2]\n\nassert bitwiseORWithLCM([3, 7, 5, 9, 12], 5) == 45\nassert bitwiseORWithLCM([10, 15, 20, 25, 30], 5) == 190\nassert bitwiseORWithLCM([8, 12, 16, 20, 24], 5) == 112\nassert bitwiseORWithLCM([5, 10, 15, 20, 25], 5) == 175\nassert bitwiseORWithLCM([14, 21, 28, 35, 42], 5) == 294\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.81}, {"few_shot_keywords": "['prefix', 'set bits', 'XOR', 'integer', 'query', 'bitwise', 'equality', 'element', 'range', 'array', 'perfect square', 'iterate']", "test_keywords": "['element', 'query', 'heptagonal', 'iterate', 'prefix', 'factorization', 'range', 'integer', 'bitwise', 'XOR', 'array']", "prompt_tokens": 659, "total_tokens": 995, "completion_tokens": 336, "completion": "[Question 2]\n\nYou are given an array A of n integers. Design a function that takes a range [L, R] and returns the XOR of the heptagonal numbers present within that range. A heptagonal number is a figurate number that represents a heptagon. It can be calculated using the formula n(5n-3)/2, where n is an integer greater than or equal to 1.\n\n[/Question 2]\n\n[Code 2]\n\ndef isHeptagonal(num: int) -> bool:\n    n = (1 + (1 + 40*num)**0.5) / 10\n    return n.is_integer()\n\ndef heptagonalXorInRange(arr: List[int], L: int, R: int) -> int:\n    result = 0\n    for i in range(L, R+1):\n        if isHeptagonal(arr[i]):\n            result ^= arr[i]\n    return result\n\n[/Code 2]\n\n[Asserts 2]\n\nassert heptagonalXorInRange([1, 7, 11, 18, 22, 28, 35, 42], 2, 5) == 5\nassert heptagonalXorInRange([10, 17, 29, 45, 8, 6, 30, 19], 0, 7) == 31\nassert heptagonalXorInRange([55, 90, 46, 23, 9, 2, 72, 14], 3, 6) == 0\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.806}, {"few_shot_keywords": "['length', 'subarray', 'unique', '1s', 'minimization', 'removal', 'array', 'square']", "test_keywords": "['subarray', 'unique', 'length', 'removal', 'minimization', 'solution', 'array', 'composite']", "prompt_tokens": 540, "total_tokens": 883, "completion_tokens": 343, "completion": "[Question 2]\n\nYou are given an array of integers. Write a function to find the length of the shortest subarray that needs to be removed to make the array contain only unique composite numbers.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef shortestSubarrayToBeRemovedForUniqueComposite(arr: List[int]) -> int:\n    def isComposite(n):\n        if n < 4:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n    \n    n = len(arr)\n    left = {}\n    ans = n\n    for i in range(n):\n        if isComposite(arr[i]):\n            if arr[i] in left:\n                ans = min(ans, i - left[arr[i]] + 1)\n            left[arr[i]] = i\n    if ans == n:\n        ans = -1\n    return ans\n\n[/Code 2]\n\n[Asserts 2]\n\nassert shortestSubarrayToBeRemovedForUniqueComposite([1, 4, 6, 8, 9, 10])==3\nassert shortestSubarrayToBeRemovedForUniqueComposite([4, 6, 8, 9, 10])==1\nassert shortestSubarrayToBeRemovedForUniqueComposite([1, 3, 5, 7, 11, 13])==0\nassert shortestSubarrayToBeRemovedForUniqueComposite([4, 6, 8, 9, 10, 12, 15, 18])==1\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.845}, {"few_shot_keywords": "['range', 'values', 'keys', 'positive integer', 'list comprehension', 'dictionary', 'smaller', 'gcd', 'regular polygon', 'divisors', 'natural numbers']", "test_keywords": "['dictionary', 'aesthetic', 'keys', 'range', 'positive integer', 'natural numbers', 'divisors', 'large number', 'list comprehension', 'values']", "prompt_tokens": 632, "total_tokens": 1029, "completion_tokens": 397, "completion": "[Question 2]\n\nYou are given a large positive integer N. Find the dictionary where keys are the divisors of N and values are True if the divisors are aesthetic, and False otherwise. An aesthetic number is a number where the absolute difference between each pair of adjacent digits is a natural number.\n\nFor example, if N = 30, the divisors of 30 are 1, 2, 3, 5, 6, 10, 15, 30. The dictionary for 30 will be:\n{1: True, 2: True, 3: True, 5: True, 6: True, 10: False, 15: False, 30: False}\n\nWrite a function that takes a large positive integer N as input and returns a dictionary as described above.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import Dict\ndef findAestheticDivisors(N: int) -> Dict[int, bool]:\n    result = {}\n    for i in range(1, N+1):\n        if N%i==0:\n            digits = [int(d) for d in str(i)]\n            is_aesthetic = all(abs(digits[j] - digits[j+1]) in range(1, len(digits)) for j in range(len(digits)-1))\n            result[i] = is_aesthetic\n    return result\n\n[/Code 2]\n\n[Asserts 2]\n\nassert findAestheticDivisors(30)== {1: True, 2: True, 3: True, 5: True, 6: True, 10: False, 15: False, 30: False}\nassert findAestheticDivisors(24)== {1: True, 2: True, 3: True, 4: False, 6: True, 8: True, 12: True, 24: False}\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.898}, {"few_shot_keywords": "['list comprehension', 'exact', 'integer', 'overlap', 'prime', 'factors', 'maximum']", "test_keywords": "['integer', 'exact', 'atoms', 'hendecagonal', 'factors', 'maximum', 'perfect number', 'sets', 'prime']", "prompt_tokens": 466, "total_tokens": 791, "completion_tokens": 325, "completion": "[Question 2]\n\nWrite a function to find the maximum hendecagonal number that is also a perfect number, and return the sets of prime factors of that maximum hendecagonal number.\n\n[/Question 2]\n\n[Code 2]\n\ndef isPrime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef maxHendecagonalPerfect():\n    # Start with the largest hendecagonal number\n    n = 1\n    while True:\n        hendecagonal = n * (3*n - 1) / 2\n        perfect_sum = 1 + sum([i for i in range(2, int(hendecagonal**0.5)+1) if hendecagonal%i==0])\n        if perfect_sum == hendecagonal and isPrime(hendecagonal):\n            factors = [i for i in range(2, hendecagonal) if hendecagonal % i == 0 and isPrime(i)]\n            return (hendecagonal, factors)\n        n += 1\n\n[/Code 2]\n\n[Asserts 2]\n\nassert maxHendecagonalPerfect() == (40755, [3, 5, 7, 11, 19, 37, 47])\nassert maxHendecagonalPerfect() == (40755, [3, 5, 7, 11, 19, 37, 47])", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.754}, {"few_shot_keywords": "['previous', 'average', 'percentage', 'comparison', 'marks', 'grade points', 'subjects', 'shelves', 'CGPA']", "test_keywords": "['percentage', 'average', 'year', 'CGPA', 'grade points', 'arithmetic', 'keys', 'marks', 'subjects']", "prompt_tokens": 710, "total_tokens": 1061, "completion_tokens": 351, "completion": "[Question 2]\n\nWrite a program to calculate the average CGPA of students in a given year. Given the grade points and subjects of each student, the task is to calculate the average CGPA of all students in that year.\n\nThe grade points for each subject are provided. The average CGPA is calculated as the arithmetic mean of the CGPAs of all students in that year.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import Dict, List\ndef calculateAverageCGPA(students: Dict[str, List[int]]) -> float:\n    total_CGPA = 0\n    num_students = len(students)\n    for grades in students.values():\n        total_CGPA += sum(grades) / len(grades)\n    return total_CGPA / num_students\n\n[/Code 2]\n\n[Asserts 2]\n\nassert calculateAverageCGPA({'Alice': [8, 9, 7, 8], 'Bob': [7, 6, 5, 8], 'Charlie': [9, 9, 8, 9]}) == 7.75\nassert calculateAverageCGPA({'Eve': [6, 7, 7, 8], 'Frank': [8, 8, 9, 7], 'Grace': [7, 7, 8, 8]}) == 7.625\nassert calculateAverageCGPA({'David': [9, 8, 7, 8], 'Emma': [7, 6, 8, 7], 'Fiona': [8, 9, 9, 8]}) == 7.875\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.786}, {"few_shot_keywords": "['subarray', 'array', 'month', 'minimum', 'addition', 'integer', 'sorting', 'steps', 'day', 'XOR']", "test_keywords": "['aesthetic', 'XOR', 'arrangement', 'subarray', 'quadratic equation', 'sorting', 'integer', 'minimum', 'array']", "prompt_tokens": 552, "total_tokens": 763, "completion_tokens": 211, "completion": "[Question 2]\n\nGiven an array of integers, find the minimum aesthetic value of the XOR of subarrays after arranging the array in a specific order.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef minAestheticXor(arr: List[int]) -> int:\n    arr.sort()\n    result = float('inf')\n    for i in range(len(arr) - 1):\n        result = min(result, arr[i] ^ arr[i+1])\n    return result\n\n[/Code 2]\n\n[Asserts 2]\n\nassert minAestheticXor([4, 5, 7, 2, 8])==0\nassert minAestheticXor([3, 6, 9, 1, 5])==2\nassert minAestheticXor([10, 15, 13, 5, 7])==2\nassert minAestheticXor([8, 12, 10, 3, 6])==2\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.873}, {"few_shot_keywords": "['subsequences', 'digits', 'greatest', 'iteration', 'sorting', 'integers', 'positive integers', 'array', 'octagonal', 'largest', 'pair']", "test_keywords": "['array', 'integers', 'optimization', 'sorting', 'greatest', 'limits', 'digits', 'representation', 'pair']", "prompt_tokens": 523, "total_tokens": 772, "completion_tokens": 249, "completion": "[Question 2]\n\nYou are given an array of integers. The task is to find the greatest possible sum that can be obtained by taking a pair of integers from the array, where the pair's sum does not exceed a given limit.\n\nWrite a function that takes in the array of integers and a limit, and returns the greatest possible sum that satisfies the given condition.\n\n[/Question 2]\n\n[Code 2]\n\ndef greatestSumWithLimit(arr, limit):\n    arr.sort(reverse=True)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] <= limit:\n                return arr[i] + arr[j]\n    return 0\n\n[/Code 2]\n\n[Asserts 2]\n\nassert greatestSumWithLimit([1, 2, 3, 4, 5], 8) == 7\nassert greatestSumWithLimit([9, 8, 7, 6, 5, 4], 15) == 14\nassert greatestSumWithLimit([3, 3, 3, 3, 3, 3], 6) == 6\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.808}, {"few_shot_keywords": "['equality', 'aesthetic', 'search', 'approximate', 'proportion', 'principle', 'circumference', 'art', 'golden ratio', 'nature', 'util', 'cone', 'math']", "test_keywords": "['atoms', 'aesthetic', 'proportion', 'equality', 'string', 'principle', 'art', 'math', 'subsequence', 'nature', 'concentration', 'approximate', 'golden ratio', 'inclusive']", "prompt_tokens": 588, "total_tokens": 872, "completion_tokens": 284, "completion": "[Question 2]\n\nWrite a Python function to check if a given string contains an \"artistic subsequence\". An artistic subsequence is a subsequence of the given string where the frequency of each character in the subsequence follows the golden ratio (1.618) or is approximately close to it. The concept of the golden ratio is often associated with aesthetics and is found in various art forms and natural phenomena.\n\n[/Question 2]\n\n[Code 2]\n\nfrom collections import Counter\n\ndef isArtisticSubsequence(s: str) -> bool:\n    count = Counter(s)\n    total_chars = sum(count.values())\n    if len(count) < 2:\n        return False\n    \n    max_freq = max(count.values())\n    min_freq = min(count.values())\n    \n    if min_freq == 0:\n        return False\n    \n    ratio = max_freq / min_freq\n    return abs(ratio - 1.618) < 0.1\n\n[/Code 2]\n\n[Asserts 2]\n\nassert isArtisticSubsequence(\"aabbbbbcccd\")==True\nassert isArtisticSubsequence(\"abc\")==False\nassert isArtisticSubsequence(\"aabbccd\")==False\nassert isArtisticSubsequence(\"aaaaabbbbbcccd\")==True\nassert isArtisticSubsequence(\"abbcccdddd\")==True\nassert isArtisticSubsequence(\"aabbccddeee\")==False", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.864}, {"few_shot_keywords": "['addition', 'government contract', 'fifth power', 'minimum', 'integer', 'power', 'operations']", "test_keywords": "['minimum', 'integer', 'adjacent', 'values', 'power', 'operations', 'brute force', 'addition', 'while loop', 'infinite']", "prompt_tokens": 511, "total_tokens": 781, "completion_tokens": 270, "completion": "[Question 2]\n\nGiven a list of integers, write a function to find the minimum number of operations required to make each integer in the list a power of the next integer in the list. The operation is to add the minimum number x to each integer, such that it becomes a power of the next integer in the list.\n\n[/Question 2]\n\n[Code 2]\n\ndef minAddToMakePowerOfNext(nums: List[int]) -> int:\n    res = 0\n    for i in range(len(nums) - 1):\n        current, next_num = nums[i], nums[i + 1]\n        while current != next_num ** (1 / current):\n            current += 1\n            res += 1\n    return res\n\n[/Code 2]\n\n[Asserts 2]\n\nassert minAddToMakePowerOfNext([2, 4, 16, 256]) == 0\nassert minAddToMakePowerOfNext([3, 9, 81, 6561]) == 0\nassert minAddToMakePowerOfNext([2, 5, 20, 400]) == 3\nassert minAddToMakePowerOfNext([2, 3, 5, 7, 11]) == 4\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.752}, {"few_shot_keywords": "['while loop', 'OR', 'math', 'given number', 'number', 'perfect square', 'previous', 'program', 'perfect cube', 'smaller']", "test_keywords": "['perfect cube', 'given number', 'program', 'smaller', 'greater', 'perfect square', 'circle', 'number', 'previous', 'math']", "prompt_tokens": 550, "total_tokens": 787, "completion_tokens": 237, "completion": "[Question 2]\n\nWrite a program to determine if a given number is a perfect square, perfect cube, or neither. If the number is a perfect square, print \"Perfect Square\", if it is a perfect cube, print \"Perfect Cube\", and if it is neither, print \"Neither Perfect Square nor Perfect Cube\".\n\n[/Question 2]\n\n[Code 2]\n\ndef perfectSquareOrCube(number: int) -> str:\n    square_root = number ** 0.5\n    cube_root = number ** (1/3)\n    \n    if square_root.is_integer():\n        if cube_root.is_integer():\n            return \"Perfect Square and Perfect Cube\"\n        else:\n            return \"Perfect Square\"\n    elif cube_root.is_integer():\n        return \"Perfect Cube\"\n    else:\n        return \"Neither Perfect Square nor Perfect Cube\"\n\n[/Code 2]\n\n[Asserts 2]\n\nassert perfectSquareOrCube(16)==\"Perfect Square\"\nassert perfectSquareOrCube(27)==\"Perfect Cube\"\nassert perfectSquareOrCube(25)==\"Perfect Square\"\nassert perfectSquareOrCube(30)==\"Neither Perfect Square nor Perfect Cube\"\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.781}, {"few_shot_keywords": "['ratio', 'pair', 'values', 'minimization', 'count', 'array', 'odd', 'even', 'float']", "test_keywords": "['multiplication', 'count', 'odd', 'even', 'array', 'pair', 'binary']", "prompt_tokens": 551, "total_tokens": 795, "completion_tokens": 244, "completion": "[Question 2]\n\nGiven an array of integers, the task is to find the count of pairs in the array whose multiplication results in an even number.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef countEvenMultiplicationPairs(arr: List[int]) -> int:\n    even_count = 0\n    odd_count = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countEvenMultiplicationPairs([1, 2, 3, 4, 5]) == 8\nassert countEvenMultiplicationPairs([3, 2, 4, 6, 7, 8, 9, 11, 12]) == 40\nassert countEvenMultiplicationPairs([2, 4, 6, 8, 10]) == 0\nassert countEvenMultiplicationPairs([1, 3, 5, 7, 9]) == 0\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.734}, {"few_shot_keywords": "['modulo', 'distinct', 'set', 'math', 'multiplication', 'Gauss', 'product', 'iteration', 'array', 'subarray', 'roots']", "test_keywords": "['iteration', 'array', 'set', 'digits', 'distinct', 'product', 'subarray', 'multiplication', 'math', 'regular polygon', 'factor']", "prompt_tokens": 581, "total_tokens": 852, "completion_tokens": 271, "completion": "[Question 2]\n\nYou are given an array of integers representing the digits of a number. Write a function to return the product of all non-repeating subarrays of the given number.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\n\ndef productOfNonRepeatingSubarrays(arr: List[int]) -> int:\n    n = len(arr)\n    result = 1\n    for i in range(n):\n        myset = set()\n        for j in range(i, n):\n            if arr[j] in myset:\n                break\n            result *= arr[j]\n            myset.add(arr[j])\n    return result\n\n[/Code 2]\n\n[Asserts 2]\n\nassert productOfNonRepeatingSubarrays([1, 2, 3, 4])==144\nassert productOfNonRepeatingSubarrays([3, 3, 3, 3])==3\nassert productOfNonRepeatingSubarrays([1, 2, 3, 4, 5])==120\nassert productOfNonRepeatingSubarrays([4, 3, 2, 1])==24\nassert productOfNonRepeatingSubarrays([1, 2, 2, 3, 3, 4, 4])==240\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.903}, {"few_shot_keywords": "['sum', 'sorting', 'prime numbers', 'integer', 'prism', 'greedy', 'maximum', 'concatenation', 'array']", "test_keywords": "['adjacent', 'consecutive', 'array', 'sum', 'sorting', 'greedy', 'integer', 'same', 'concatenation', 'maximum']", "prompt_tokens": 621, "total_tokens": 864, "completion_tokens": 243, "completion": "[Question 2]\n\nGiven an array of integers, find the maximum sum of any two consecutive (adjacent) integers in the array and return the maximum sum.\n\n[/Question 2]\n\n[Code 2]\n\ndef maxConsecutiveSum(arr: List[int]) -> int:\n    max_sum = float('-inf')\n    for i in range(len(arr) - 1):\n        consecutive_sum = arr[i] + arr[i+1]\n        max_sum = max(max_sum, consecutive_sum)\n    return max_sum\n\n[/Code 2]\n\n[Asserts 2]\n\nassert maxConsecutiveSum([1, 2, 3, 4, 5])==9\nassert maxConsecutiveSum([10, -20, 15, 25, 30, -10])==55\nassert maxConsecutiveSum([-2, -3, -4, -1, -2, -5])== -3\nassert maxConsecutiveSum([5, 5, 5, 5, 5])==10\nassert maxConsecutiveSum([-10, -5, -3, -12, -9, -7])== -8\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.89}, {"few_shot_keywords": "['factor', 'math', 'road construction', 'array', 'powerful number', 'count', 'imaginary', '1s', 'division', 'integer']", "test_keywords": "['math', 'division', 'factor', 'count', 'nested loop', 'divisor', 'array', 'length', 'integer']", "prompt_tokens": 524, "total_tokens": 867, "completion_tokens": 343, "completion": "[Question 2]\n\nWrite a function that takes an array of integers and returns the count of numbers that have a specific divisor. The divisor for each number is calculated by finding all the factors of the number and then counting how many of these factors are even.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef countNumbersWithEvenDivisors(arr: List[int]) -> int:\n    def countFactors(num):\n        count = 0\n        for i in range(1, num + 1):\n            if num % i == 0:\n                count += 1\n        return count\n    \n    def countEvenFactors(num):\n        factors = countFactors(num)\n        evenCount = 0\n        for i in range(1, factors + 1):\n            if factors % i == 0 and i % 2 == 0:\n                evenCount += 1\n        return evenCount\n    \n    result = 0\n    for num in arr:\n        if countEvenFactors(num) > 0:\n            result += 1\n    return result\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countNumbersWithEvenDivisors([6, 7, 8, 9, 10]) == 3\nassert countNumbersWithEvenDivisors([12, 15, 18, 20, 25]) == 5\nassert countNumbersWithEvenDivisors([4, 5, 6, 7, 8]) == 4\nassert countNumbersWithEvenDivisors([10, 11, 12, 13, 14]) == 3\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.922}, {"few_shot_keywords": "['imaginary', 'format', 'Easter', 'multiplication', 'hendecagonal', 'unit', 'complex', 'string', 'numbers', 'terms', 'real', 'even']", "test_keywords": "['greatest', 'string', 'real', 'repetitions', 'multiplication', 'complex', 'format', 'numbers', 'unit', 'base', 'imaginary']", "prompt_tokens": 597, "total_tokens": 852, "completion_tokens": 255, "completion": "[Question 2]\n\nWrite a function to find the greatest common base of two complex numbers represented as strings in the format \"a+bi\", where 'a' and 'b' are real numbers and 'i' is the imaginary unit. The function should return the greatest common base as an integer.\n\n[/Question 2]\n\n[Code 2]\n\ndef greatestCommonBase(num1: str, num2: str) -> int:\n    a, b = map(int, num1[:-1].split('+'))\n    c, d = map(int, num2[:-1].split('+'))\n    base1 = a**2 + b**2\n    base2 = c**2 + d**2\n    return base1 if base1 > base2 else base2\n\n[/Code 2]\n\n[Asserts 2]\n\nassert greatestCommonBase(\"3+4i\", \"2+6i\") == 25\nassert greatestCommonBase(\"1+2i\", \"3+4i\") == 25\nassert greatestCommonBase(\"5+12i\", \"9+12i\") == 169\nassert greatestCommonBase(\"8+15i\", \"9+12i\") == 289\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.73}, {"few_shot_keywords": "['integer', 'batting', 'perfect number', 'ascending', 'palindromic', 'subarray', 'length', 'array', 'math']", "test_keywords": "['length', 'math', 'array', 'ends with', 'series', 'integer', 'subarray', 'perfect number']", "prompt_tokens": 641, "total_tokens": 1025, "completion_tokens": 384, "completion": "[Question 2]\n\nGiven an array of integers, write a function to find the length of the longest subarray whose sum is a perfect number.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\n\ndef isPerfect(num: int) -> bool:\n    if num < 6:\n        return False\n    sum_divisors = 1\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            if i == num // i:\n                sum_divisors += i\n            else:\n                sum_divisors += i + num // i\n    return sum_divisors == num\n\ndef longestSubarrayWithPerfectSum(arr: List[int]) -> int:\n    n = len(arr)\n    prefix_sum = 0\n    max_length = 0\n    prefix_sum_map = {0: -1}\n    \n    for i in range(n):\n        prefix_sum += arr[i]\n        if isPerfect(prefix_sum):\n            max_length = i + 1\n        elif prefix_sum - 1 in prefix_sum_map:\n            max_length = max(max_length, i - prefix_sum_map[prefix_sum - 1])\n        prefix_sum_map[prefix_sum] = i\n    \n    return max_length\n\n[/Code 2]\n\n[Asserts 2]\n\nassert longestSubarrayWithPerfectSum([3, 5, 1, 2, 7, 9, 10, 4, 2]) == 5\nassert longestSubarrayWithPerfectSum([6, 7, 2, 14, 15, 8, 18]) == 4\nassert longestSubarrayWithPerfectSum([28, 39, 33, 6, 496, 151, 8]) == 5\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.809}, {"few_shot_keywords": "['powerful', 'perfect chiliagon', 'CG Corporation', 'prime factors', 'largest', 'subarray', 'repetitions', 'integers', 'length', 'operation', 'array', 'volume', 'frequency']", "test_keywords": "['powerful', 'array', 'prime factors', 'frequency', 'perfect number', 'subarray', 'integers', 'connect nodes', 'length', 'largest', 'figurate number']", "prompt_tokens": 788, "total_tokens": 1173, "completion_tokens": 385, "completion": "[Question 2]\n\nYou are given an array of integers. Write a function to find the length of the largest subarray in the given array where the sum of the elements forms a figurate number. A figurate number is a number that can be represented as a regular, geometric arrangement of equally spaced points - like a triangle, square, pentagon, etc. \n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\n\ndef isFigurateNumber(num: int) -> bool:\n    if num < 1:\n        return False\n    n = int((2*num)**0.5)\n    return n*(n+1)//2 == num\n\ndef largestFigurateSubarray(arr: List[int]) -> int:\n    n = len(arr)\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub_len = j - i + 1\n            sub_array_sum = sum(arr[i:j+1])\n            if isFigurateNumber(sub_array_sum):\n                max_len = max(max_len, sub_len)\n    return max_len\n\n[/Code 2]\n\n[Asserts 2]\n\nassert largestFigurateSubarray([3, 5, 13, 12, 8, 21, 15, 1]) == 3\nassert largestFigurateSubarray([2, 7, 4, 10, 6, 15, 7, 5]) == 4\nassert largestFigurateSubarray([12, 30, 4, 6, 8, 10, 14, 9]) == 6\nassert largestFigurateSubarray([7, 9, 5, 18, 3, 4, 6, 10, 11]) == 4\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.832}, {"few_shot_keywords": "['adjacent', 'set', 'approximation', 'arithmetic', 'dynamic programming', 'array', 'non-adjacent', 'removal', 'root', 'integer', 'maximum', 'sum']", "test_keywords": "['non-adjacent', 'ends with', 'complex', 'adjacent', 'maximum', 'array', 'dynamic programming', 'util', 'integer', 'sum']", "prompt_tokens": 580, "total_tokens": 839, "completion_tokens": 259, "completion": "[Question 2]\n\nGiven an array of integers, find the maximum sum of non-adjacent elements, where the integer is a multiple of 3.\n\n[/Question 2]\n\n[Code 2]\n\ndef maxSumNonAdjacentMultipleOf3(arr):\n    incl = 0\n    excl = 0\n    for i in arr:\n        if i % 3 == 0:\n            new_excl = max(incl, excl)\n            incl = excl + i\n            excl = new_excl\n    return max(incl, excl)\n\n[/Code 2]\n\n[Asserts 2]\n\nassert maxSumNonAdjacentMultipleOf3([3, 2, 6, 8, 1, 7]) == 18\nassert maxSumNonAdjacentMultipleOf3([5, 7, 9, 2, 4, 6]) == 0\nassert maxSumNonAdjacentMultipleOf3([6, 7, 12, 15, 3, 8, 9]) == 33\nassert maxSumNonAdjacentMultipleOf3([3, 6, 6, 9, 12, 15, 18, 21]) == 75\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.849}, {"few_shot_keywords": "['prefix', 'sum', 'math', 'pattern', 'digits', 'form', 'palindromic', 'divisible', 'integer']", "test_keywords": "['digits', 'divisible', 'pattern', 'sum', 'fifth power', 'Full Fibonacci', 'math', 'form', 'palindromic', 'integer']", "prompt_tokens": 568, "total_tokens": 820, "completion_tokens": 252, "completion": "[Question 2]\n\nWrite a function to find the sum of all palindromic numbers formed by the fifth power of their digits, within the first N numbers of the Full Fibonacci sequence, that are divisible by 3.\n\n[/Question 2]\n\n[Code 2]\n\ndef isPalindromic(n: int) -> bool:\n    return str(n) == str(n)[::-1]\n\ndef sumOfPalindromicFifthPower(N: int) -> int:\n    fib = [1, 1]\n    sum = 0\n    for i in range(2, N):\n        fib.append(fib[i-1] + fib[i-2])\n    \n    for num in fib:\n        if num % 3 == 0:\n            if isPalindromic(int(str(num**5))):\n                sum += num\n                \n    return sum\n\n[/Code 2]\n\n[Asserts 2]\n\nassert(sumOfPalindromicFifthPower(10))==145\nassert(sumOfPalindromicFifthPower(15))==11935\nassert(sumOfPalindromicFifthPower(20))==1841545\nassert(sumOfPalindromicFifthPower(25))==277671235", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.765}, {"few_shot_keywords": "['base', 'hash table', 'sqrt', 'loop', 'integer', 'operations', 'counting', 'range', 'prism', 'math', 'value']", "test_keywords": "['matrix', 'numerical integration', 'removal', 'range', 'math', 'base', 'integer', 'loop', 'counting']", "prompt_tokens": 532, "total_tokens": 833, "completion_tokens": 301, "completion": "[Question 2]\n\nYou are given a matrix M of size N x N and a range R. Your task is to compute the numerical integration of the matrix elements within the specified range R. Then, remove the elements within the range R from the matrix M and return the modified matrix.\n\n[/Question 2]\n\n[Code 2]\n\ndef numericalIntegrationAndRemoval(matrix, R):\n    N = len(matrix)\n    integration = 0\n    for i in range(N):\n        for j in range(N):\n            if i**2 + j**2 <= R**2:\n                integration += matrix[i][j]\n                matrix[i][j] = 0\n    return integration, matrix\n\n[/Code 2]\n\n[Asserts 2]\n\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert numericalIntegrationAndRemoval(matrix, 2) == (15, [[0, 0, 3], [0, 0, 6], [7, 8, 9]])\n\nmatrix = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\nassert numericalIntegrationAndRemoval(matrix, 1) == (5, [[0, 0, 0], [0, 0, 0], [0, 0, 0]])\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.723}, {"few_shot_keywords": "['total', 'iteration', 'smallest', 'condition', 'repeated', 'add', 'sqrt', 'comparison', 'math', 'perfect square', 'number']", "test_keywords": "['positive integers', 'condition', 'iteration', 'comparison', 'number', 'math', 'moran number', 'perfect square', 'balls', 'sqrt', 'exponential']", "prompt_tokens": 490, "total_tokens": 766, "completion_tokens": 276, "completion": "[Question 2]\n\nWrite a function to find the number of positive integers that are both Moran numbers and perfect squares in a given range from 1 to N (inclusive). A Moran number is a positive integer that can be expressed as a sum of two perfect squares in more than one way.\n\n[/Question 2]\n\n[Code 2]\n\nimport math\n\ndef isPerfectSquare(num):\n    sqrt_num = int(math.sqrt(num))\n    return sqrt_num*sqrt_num == num\n\ndef countMoranPerfectSquares(N: int) -> int:\n    count = 0\n    for i in range(1, N+1):\n        num_ways = 0\n        for j in range(1, int(math.sqrt(i)) + 1):\n            if isPerfectSquare(i - j*j):\n                num_ways += 1\n                if num_ways > 1:\n                    count += 1\n                    break\n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countMoranPerfectSquares(10)==1\nassert countMoranPerfectSquares(15)==3\nassert countMoranPerfectSquares(20)==4\nassert countMoranPerfectSquares(25)==5\nassert countMoranPerfectSquares(30)==6\nassert countMoranPerfectSquares(5)==0", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.753}, {"few_shot_keywords": "['reductions', 'cost', 'sin', 'government contract', 'array', 'circle', 'road construction', 'node', 'minimum cost', 'CG Corporation', 'connectivity', 'element', 'sum', 'connect nodes', 'Circumference', 'log']", "test_keywords": "['minimum cost', 'node', 'aesthetic', 'sum', 'Circumference', 'road construction', 'subjects', 'circle', 'connect nodes', 'government contract', 'cost', \"Boole's Rule\", 'array', 'connectivity', 'distance', 'CG Corporation']", "prompt_tokens": 666, "total_tokens": 899, "completion_tokens": 233, "completion": "[Question 2]\n\nAs part of a government contract, CG Corporation has been tasked with connecting a series of nodes situated along the Circumference of a city to create an aesthetic road construction. Each node represents a different subject, and the corporation needs to ensure that the distance between connected nodes is minimized to enhance the aesthetic appeal. Given an array 'distance[]' representing the distance between adjacent nodes, the task is to find the minimum cost required to connect all the nodes in an aesthetically pleasing manner, considering the distance between connected nodes.\n\n[/Question 2]\n\n[Code 2]\n\ndef minAestheticCost(distance: list) -> int:\n    total_distance = sum(distance)\n    return min(total_distance, (len(distance)-1)*max(distance))\n\n[/Code 2]\n\n[Asserts 2]\n\nassert minAestheticCost([2, 3, 4, 5])==14\nassert minAestheticCost([1, 3, 1, 3, 5])==8\nassert minAestheticCost([10, 20, 30, 40, 50])==100\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.736}, {"few_shot_keywords": "['quadratic equation', 'algorithm', 'form', 'GCD', 'Full Fibonacci', 'pair', 'pattern', 'math', 'array', 'recursion', 'division', 'marks']", "test_keywords": "['stair', 'math', 'GCD', 'sum', 'pair', 'array', 'algorithm', 'recursion', 'division', 'geometry']", "prompt_tokens": 504, "total_tokens": 815, "completion_tokens": 311, "completion": "[Question 2]\n\nGiven an array representing the heights of stairs, the task is to find the sum of heights of all possible pairs of stairs that form a right-angled triangle with the ground.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef sumOfRightAngledTrianglePairs(arr: List[int]) -> int:\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n    \n    result = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                base = abs(arr[i] - arr[j])\n                height = min(arr[i], arr[j])\n                if gcd(base, height) == 1:  # Checking if the pair forms a right-angled triangle\n                    result += arr[i] + arr[j]\n    return result\n\n[/Code 2]\n\n[Asserts 2]\n\nassert sumOfRightAngledTrianglePairs([3, 4, 5, 6, 7])==36\nassert sumOfRightAngledTrianglePairs([5, 12, 13, 15])==80\nassert sumOfRightAngledTrianglePairs([8, 15, 17, 9])==59\nassert sumOfRightAngledTrianglePairs([7, 24, 25, 10, 11])==67\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.846}, {"few_shot_keywords": "['minimum', 'while loop', 'stair', 'perfect power', 'infinite', 'arithmetic', 'prime factors', 'steps', 'factors', 'process', 'ascending']", "test_keywords": "['perfect power', 'maximum', 'ascending', 'steps', 'infinite', 'longest', 'perfect squares', 'geometric', '0s', 'stair', 'minimum']", "prompt_tokens": 558, "total_tokens": 830, "completion_tokens": 272, "completion": "[Question 2]\n\nYou are in an infinite stair. The stair has N numbers engraved on it in ascending order. You are initially standing on the first stair. You have to reach the Nth stair using steps of perfect squares.\n\nYou have to find the maximum number of steps to reach the Nth stair such that the number of 0s encountered while going up the stairs is minimized.\n\n[/Question 2]\n\n[Code 2]\n\ndef maxStepsWithMinZerosToReachNthStair(n: int) -> int:\n    maxSteps = 0\n    minZeros = float('inf')\n    \n    for i in range(1, n+1):\n        if i*i <= n:\n            zeros = bin(i*i).count('0')\n            if zeros < minZeros:\n                minZeros = zeros\n                maxSteps = i\n    \n    return maxSteps\n\n[/Code 2]\n\n[Asserts 2]\n\nassert maxStepsWithMinZerosToReachNthStair(10) == 3\nassert maxStepsWithMinZerosToReachNthStair(25) == 5\nassert maxStepsWithMinZerosToReachNthStair(30) == 5\nassert maxStepsWithMinZerosToReachNthStair(50) == 7", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.799}, {"few_shot_keywords": "['iteration', 'perfect square', 'array', 'subarray', 'binary', 'determine', 'check', 'set', 'calculate', 'integer', 'math', 'sum', 'Fibonacci', 'greedy']", "test_keywords": "['ranges', 'integer', 'array', 'set', 'cost', 'subarray', 'math', 'Fibonacci', 'sorted', 'perfect square', 'sum', 'iteration']", "prompt_tokens": 725, "total_tokens": 1048, "completion_tokens": 323, "completion": "[Question 2]\n\nGiven an array arr of integers and a cost c, determine the minimum number of iterations to calculate the sum of all subarrays of arr where the sum is a perfect square and within the cost c.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef minIterationsForSum(arr: List[int], c: int) -> int:\n    max_val = max(arr)\n    max_sum = max_val * len(arr)\n    dp = [float('inf')] * (max_sum + 1)\n    dp[0] = 0\n    for x in arr:\n        for s in range(max_sum, x - 1, -1):\n            root = int(s ** 0.5)\n            if root * root == s:\n                dp[s] = min(dp[s], dp[s - x] + 1)\n    ans = 0\n    for s in range(1, max_sum + 1):\n        if s * s <= c * 2:\n            ans += dp[s]\n    return ans\n\n[/Code 2]\n\n[Asserts 2]\n\nassert minIterationsForSum([1, 2, 3, 4, 5], 10) == 4\nassert minIterationsForSum([3, 4, 7, 6, 8], 20) == 7\nassert minIterationsForSum([1, 2, 3, 4, 8, 9, 10], 50) == 11\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.944}, {"few_shot_keywords": "['permutations', 'combinations', 'prefix', 'math', 'util', 'dynamic programming', 'factorial', 'counting', 'inclusive', 'boolean', 'recursion']", "test_keywords": "['combinations', 'dynamic programming', 'reductions', 'values', 'recursion', 'factorial', 'counting', 'math', 'iteration', 'permutations', 'format']", "prompt_tokens": 463, "total_tokens": 814, "completion_tokens": 351, "completion": "[Question 2]\n\nYou are given a list of integers and a target sum. Write a function to find all unique combinations of the integers in the list that sum up to the target. Each number in the list may only be used once in the combination.\n\n[/Question 2]\n\n[Code 2]\n\ndef find_combinations(nums, target):\n    result = []\n    nums.sort()\n    \n    def backtrack(remaining, path, start):\n        if remaining == 0:\n            result.append(path)\n            return\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            if nums[i] > remaining:\n                break\n            backtrack(remaining - nums[i], path + [nums[i]], i + 1)\n    \n    backtrack(target, [], 0)\n    return result\n\n[/Code 2]\n\n[Asserts 2]\n\nassert find_combinations([10, 1, 2, 7, 6, 1, 5], 8) == [[1, 1, 6], [1, 2, 5], [1, 7], [2, 6]]\nassert find_combinations([2, 5, 2, 1, 2], 5) == [[1, 2, 2], [5]]\nassert find_combinations([4, 4, 2, 1, 4, 2, 2], 8) == [[1, 2, 2, 2, 1], [1, 2, 4, 1], [2, 2, 4], [4, 4]]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.715}, {"few_shot_keywords": "['minimum', 'minimum cost', 'cone', 'formula', 'program', 'volume', 'geometry', 'sphere', 'radius', 'calculate', 'circumscribed']", "test_keywords": "['trigonometry', 'cone', 'volume', 'parity', 'formula', 'radius', 'objects', 'calculate', 'subsets', 'program', 'minimum', 'math', 'sphere', 'circumscribed']", "prompt_tokens": 539, "total_tokens": 817, "completion_tokens": 278, "completion": "[Question 2]\n\nWrite a program to calculate the minimum volume of a cone that can be circumscribed about a sphere of radius R, using trigonometric and mathematical concepts. The program should also determine the parity of the volume, i.e., whether the volume is odd or even. The volume of the cone can be calculated using the formula: V = (1/3) * \u03c0 * R^2 * h, where R is the radius of the base of the cone, and h is the height of the cone from the center of the base to the apex.\n\n[/Question 2]\n\n[Code 2]\n\nimport math\n\ndef minVolumeConeTrigonometry(R: float) -> (float, str):\n\tvolume = (1/3) * math.pi * R * R * R\n\tparity = \"even\" if volume % 2 == 0 else \"odd\"\n\treturn volume, parity\n\n[/Code 2]\n\n[Asserts 2]\n\nassert minVolumeConeTrigonometry(3) == (28.274333882308138, 'even')\nassert minVolumeConeTrigonometry(2) == (16.755160819145562, 'even')\nassert minVolumeConeTrigonometry(5) == (261.7993877991494, 'odd')\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.703}, {"few_shot_keywords": "['octagonal', 'geometry', 'surface area', 'program', 'circle', 'math', 'volume', 'sqrt', 'shelves', 'calculation', 'smallest', 'prism']", "test_keywords": "['pair', 'longest', 'factorial', 'math', 'calculation', 'program', 'surface area', 'geometry', 'octagonal', 'area', 'volume', 'factor', 'prism', 'sqrt']", "prompt_tokens": 572, "total_tokens": 870, "completion_tokens": 298, "completion": "[Question 2]\n\nWrite a program to find the pair of numbers within a given range that has the longest factorial chain. The factorial chain is defined as the consecutive multiplication of integers starting from 1. For example, the factorial chain of 5 is 1*2*3*4*5 = 120. Return the pair of numbers and the length of the longest factorial chain within the given range.\n\n[/Question 2]\n\n[Code 2]\n\ndef factorial_chain(start: int, end: int):\n    max_length = 0\n    pair = ()\n    for i in range(start, end+1):\n        factorial = 1\n        length = 0\n        num = i\n        while True:\n            factorial *= num\n            length += 1\n            if factorial > end:\n                break\n            if length > max_length:\n                max_length = length\n                pair = (i, i+length-1)\n            num += 1\n    return pair, max_length\n\n[/Code 2]\n\n[Asserts 2]\n\nassert factorial_chain(1, 10) == ((1, 5), 5)\nassert factorial_chain(5, 20) == ((5, 5), 1)\nassert factorial_chain(1, 100) == ((1, 5), 5)\nassert factorial_chain(10, 50) == ((10, 14), 5)\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.798}, {"few_shot_keywords": "['math', 'powerful number', 'product', 'LCM', 'regular polygon', 'pair', 'query', 'number', 'count']", "test_keywords": "['pair', 'number', 'hexagonal', 'product', 'LCM', 'query', 'count', 'math', 'perfect power', 'prime']", "prompt_tokens": 518, "total_tokens": 890, "completion_tokens": 372, "completion": "[Question 2]\n\nYou are given a number N and Q queries which are represented as an integer. For each query, you need to find the count of pairs up to N (inclusive) whose LCM (Least Common Multiple) is a perfect power and also a prime number.\n\n[/Question 2]\n\n[Code 2]\n\ndef gcd(a, b):\n    if b==0 :\n        return a\n    return gcd(b, a%b)\n\ndef isPerfectPower(n):\n    if n < 2:\n        return False\n    for x in range(2, int(n**0.5) + 1):\n        p = x\n        while p <= n:\n            p *= x\n            if p == n:\n                return True\n    return False\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef countPairs(N, Q):\n    for i in range(0, Q):\n        count = 0\n        for l in range(1, N+1) :\n            for m in range(l+1, N+1) :\n                if(gcd(l, m) == 1):\n                    lcm = l * m // gcd(l, m)\n                    if isPerfectPower(lcm) and isPrime(lcm):\n                        count += 1\n        print(count)\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countPairs(5, 2)==[0, 0] \nassert countPairs(3, 1)==[0] \nassert countPairs(8, 3)==[0, 0, 1]\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.765}, {"few_shot_keywords": "['equation', 'balance', 'elements', 'repetitions', 'chemical reaction', 'coefficient', 'Gauss', 'atoms', 'chemistry']", "test_keywords": "['elements', 'subarrays', 'chemical reaction', 'equation', 'chemistry', 'indices', 'atoms', 'coefficient', 'balance', 'repeated']", "prompt_tokens": 629, "total_tokens": 1074, "completion_tokens": 445, "completion": "[Question 2]\n\nWrite a program to find all the repeated subarrays in a given list of chemical equations. Each chemical equation is represented as a string and you need to identify the repeated subarrays of elements within the equations. For example, if the list of chemical equations is [\"H2 + O2 = H2O\", \"CH4 + O2 = CO2 + H2O\", \"H2 + O2 = H2O\"], the repeated subarray would be \"H2 + O2 = H2O\".\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\n\ndef findRepeatedSubarrays(equations: List[str]) -> List[str]:\n    # Your code to find repeated subarrays goes here\n    pass\n\n[/Code 2]\n\n[Asserts 2]\n\nassert findRepeatedSubarrays([\"H2 + O2 = H2O\", \"CH4 + O2 = CO2 + H2O\", \"H2 + O2 = H2O\"]) == [\"H2 + O2 = H2O\"]\nassert findRepeatedSubarrays([\"H2 + O2 = H2O\", \"CH4 + O2 = CO2 + H2O\", \"H2 + O2 = H2O\", \"CH4 + O2 = CO2 + H2O\"]) == [\"H2 + O2 = H2O\", \"CH4 + O2 = CO2 + H2O\"]\nassert findRepeatedSubarrays([\"H2 + O2 = H2O\", \"CH4 + O2 = CO2 + H2O\", \"H2O = H2 + O2\", \"CH4 + O2 = CO2 + H2O\"]) == []\nassert findRepeatedSubarrays([\"H2O = H2 + O2\", \"CH4 + O2 = CO2 + H2O\", \"H2 + O2 = H2O\", \"CH4 + O2 = CO2 + H2O\"]) == [\"H2 + O2 = H2O\", \"CH4 + O2 = CO2 + H2O\"] \n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.803}, {"few_shot_keywords": "['integer', 'greedy', 'maximum', 'equations', 'dynamic programming', 'subsequence', 'sum', 'adjacent', 'alternate', 'digit', 'array']", "test_keywords": "['adjacent', 'sum', 'traversal', 'dynamic programming', 'subsequence', 'alternate', 'integer', 'smallest number', 'cricket', 'terms', 'array', 'greedy', 'maximum']", "prompt_tokens": 538, "total_tokens": 749, "completion_tokens": 211, "completion": "[Question 2]\n\nYou are given an array of integers representing the scores of a cricket team during a match. Write a function to find the maximum sum of scores for a subsequence where no two selected elements are adjacent in the original array.\n\n[/Question 2]\n\n[Code 2]\n\ndef maxNonAdjacentSum(arr):\n    incl = 0\n    excl = 0\n    for i in arr:\n        new_excl = excl if excl > incl else incl\n        incl = excl + i\n        excl = new_excl\n    return max(excl, incl)\n\n[/Code 2]\n\n[Asserts 2]\n\nassert maxNonAdjacentSum([3, 2, 7, 10]) == 13\nassert maxNonAdjacentSum([5, 5, 10, 100, 10, 5]) == 110\nassert maxNonAdjacentSum([1, 2, 3, 4, 5, 6]) == 12\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.807}, {"few_shot_keywords": "['subarray', 'array', 'set', 'operation', 'integer', 'add', 'octagonal', 'root', 'sorted', 'batting', 'length', 'maximum value', 'unique']", "test_keywords": "['unique', 'length', 'array', 'set', 'points', 'traversal', 'add', 'operation', 'integer', 'difference', 'subarray']", "prompt_tokens": 775, "total_tokens": 1040, "completion_tokens": 265, "completion": "[Question 2]\n\nYou are given an array of integers. Write a function to find the length of the longest subarray with a unique set of integers. \n\n[/Question 2]\n\n[Code 2]\n\ndef longestUniqueSubarray(arr):\n    max_length = 0\n    start = 0\n    seen = {}\n    \n    for end in range(len(arr)):\n        if arr[end] in seen:\n            start = max(start, seen[arr[end]] + 1)\n        \n        seen[arr[end]] = end\n        max_length = max(max_length, end - start + 1)\n    \n    return max_length\n\n[/Code 2]\n\n[Asserts 2]\n\nassert longestUniqueSubarray([1, 2, 3, 4, 1, 2, 3, 4, 5]) == 5\nassert longestUniqueSubarray([1, 2, 3, 3, 4, 5, 6, 7, 8, 3, 9, 10]) == 8\nassert longestUniqueSubarray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.757}, {"few_shot_keywords": "['array', 'nested loop', 'positive', 'mathematical', 'math', 'factorization', 'loop', 'toggled', 'power', 'exponential', 'prime', 'product', 'counting', 'divisibility', 'integers']", "test_keywords": "['factorization', 'brute force', 'program', 'positive', 'exponential', 'nested loop', 'cell', 'power', 'loop', 'math', 'integers', 'array', 'counting', 'prime']", "prompt_tokens": 696, "total_tokens": 998, "completion_tokens": 302, "completion": "[Question 2]\n\nWrite a program to find all positive integers up to a given limit that can be expressed as the product of two distinct prime numbers in more than one way. Return the count of such integers.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\n\ndef countIntegersWithMultiplePrimeFactorization(limit: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, limit) if is_prime(num)]\n    count = 0\n    for num in range(4, limit+1):\n        ways = 0\n        for i in primes:\n            if num % i == 0:\n                factor = num // i\n                if factor != i and is_prime(factor):\n                    ways += 1\n            if ways > 1:\n                count += 1\n                break\n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countIntegersWithMultiplePrimeFactorization(10)==2\nassert countIntegersWithMultiplePrimeFactorization(20)==3\nassert countIntegersWithMultiplePrimeFactorization(30)==4\nassert countIntegersWithMultiplePrimeFactorization(50)==6\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.738}, {"few_shot_keywords": "['iteration', 'set', 'exponent', 'list', 'array', 'expression', 'math', 'circumference', 'print', 'concatenation', 'power', 'integer', 'close', 'subsets']", "test_keywords": "['GCD', 'max', 'array', 'expression', 'exponent', 'math', 'integer', 'discriminant', 'iteration', 'set', 'percentage', 'power', 'exact', 'list']", "prompt_tokens": 602, "total_tokens": 826, "completion_tokens": 224, "completion": "[Question 2]\n\nYou are given an array of integers. Write a function to find the maximum GCD (Greatest Common Divisor) of any two numbers in the array.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef maxGCD(arr: List[int]) -> int:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            result = max(result, gcd(arr[i], arr[j]))\n    return result\n\n[/Code 2]\n\n[Asserts 2]\n\nassert maxGCD([10, 15, 20, 25, 30]) == 5\nassert maxGCD([14, 28, 42, 56, 70]) == 14\nassert maxGCD([3, 5, 7, 9, 11]) == 1\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.725}, {"few_shot_keywords": "['integers', 'difference', 'subsequences', 'keys', 'array', 'count', 'product', 'equation', 'sets']", "test_keywords": "['subsequences', 'product', 'difference', 'integers', 'count', 'regular polygon', 'merge', 'check', 'array']", "prompt_tokens": 533, "total_tokens": 787, "completion_tokens": 254, "completion": "[Question 2]\n\nYou are given an array of integers. Write a function to find and return the count of subsequences whose product is the difference between the square of two integers.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef countSubsequencesWithProductDifference(arr: List[int]) -> int:\n    ans = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j]*arr[j] - arr[i]*arr[i])\n            root = int(diff ** 0.5)\n            if root*root == diff:\n                ans += 1\n    return ans\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countSubsequencesWithProductDifference([1, 2, 3, 4, 5]) == 4\nassert countSubsequencesWithProductDifference([5, 4, 3, 2, 1]) == 10\nassert countSubsequencesWithProductDifference([2, 6, 8]) == 3\nassert countSubsequencesWithProductDifference([5, 6, 7, 8, 9]) == 1\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.749}, {"few_shot_keywords": "['task', 'integer', 'given', 'subarray', 'grade points', 'count', 'subsequence', 'array', 'circumference', 'length', 'concentration', 'circle', 'real']", "test_keywords": "['count', 'integer', 'length', 'discriminant', 'task', 'subarray', 'given', 'division', 'array', 'subsequence']", "prompt_tokens": 560, "total_tokens": 866, "completion_tokens": 306, "completion": "[Question 2]\n\nYou are given an array of integers and a task is to count the number of subarrays in the given array where the sum of elements is divisible by a given integer.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef countSubarraysWithSumDivisibleByK(arr: List[int], k: int) -> int:\n    prefix_sum_remainders = [0] * k\n    prefix_sum_remainders[0] = 1\n    prefix_sum = 0\n    count = 0\n    for num in arr:\n        prefix_sum = (prefix_sum + num) % k\n        count += prefix_sum_remainders[prefix_sum]\n        prefix_sum_remainders[prefix_sum] += 1\n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countSubarraysWithSumDivisibleByK([4, 5, 0, -2, -3, 1], 5)==7\nassert countSubarraysWithSumDivisibleByK([9, 7, 5, 3, 11, 2, 6, 4, 1], 5)==7\nassert countSubarraysWithSumDivisibleByK([5, 10, 15, 20], 10)==6\nassert countSubarraysWithSumDivisibleByK([3, 3, 3, 3], 6)==5\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.916}, {"few_shot_keywords": "['limits', 'numerical integration', \"Boole's Rule\", 'function', 'form', 'integral', 'step size', 'approximation', 'equations']", "test_keywords": "['limits', 'function', 'approximation', \"Boole's Rule\", 'distance', 'numerical integration', 'integral', 'absolute difference', 'smallest', 'comparison', 'inclusive', 'step size']", "prompt_tokens": 721, "total_tokens": 1144, "completion_tokens": 423, "completion": "[Question 2]\n\nGiven two functions f(x) and g(x), find the value of x within the limits [a, b] for which the absolute difference between the integrals of f(x) and g(x) using Boole's Rule is the smallest.\n\nWrite a function to find the value of x that minimizes the absolute difference between the integrals of f(x) and g(x) within the given limits using Boole's Rule. The function should take the two functions f(x) and g(x), the integration limits a and b, and the step size as input, and return the value of x that minimizes the absolute difference.\n\n[/Question 2]\n\n[Code 2]\n\ndef absolute_difference_minimization(f, g, a, b, step_size):\n    min_x = a\n    min_diff = abs(booles_rule(f, a, b, step_size) - booles_rule(g, a, b, step_size))\n    x = a + step_size\n    while x <= b:\n        current_diff = abs(booles_rule(f, a, x, step_size) - booles_rule(g, a, x, step_size))\n        if current_diff < min_diff:\n            min_x = x\n            min_diff = current_diff\n        x += step_size\n    return min_x\n\n[/Code 2]\n\n[Asserts 2]\n\ndef f(x):\n    return x**2 - 5*x + 6\n\ndef g(x):\n    return 2*x + 1\n\nassert absolute_difference_minimization(f, g, 0, 2, 0.1) == 1.1\nassert absolute_difference_minimization(f, g, -1, 1, 0.1) == 0.9\nassert absolute_difference_minimization(f, g, 2, 4, 0.1) == 2.1\nassert absolute_difference_minimization(f, g, 1, 3, 0.1) == 1.9\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.771}]