[{"few_shot_keywords": "['arithmetic', 'sum', 'dynamic programming', 'series', 'pattern', 'iteration', 'shape', 'sequence', 'update']", "test_keywords": "['numbers', 'iteration', 'winning', 'tournament', 'output', 'arithmetic', 'sum', 'pattern', 'series', 'sequence']", "prompt_tokens": 477, "total_tokens": 725, "completion_tokens": 248, "completion": "[Question 2]\n\nYou are given a list of scores obtained by players in a tournament. Your task is to find the winning score by summing up the scores in an arithmetic sequence pattern and then iterating through the numbers to find the maximum sum.\n\n[/Question 2]\n\n[Code 2]\n\ndef find_winning_score(scores: List[int]) -> int:\n    max_score = float('-inf')\n    for start in range(len(scores)):\n        for end in range(start, len(scores)):\n            total = 0\n            for i in range(start, end + 1):\n                total += scores[i]\n                max_score = max(max_score, total)\n    return max_score\n\n[/Code 2]\n\n[Asserts 2]\n\nassert find_winning_score([10, 20, 30, 40, 50]) == 150\nassert find_winning_score([5, 7, 3, 11, 2]) == 28\nassert find_winning_score([1, 2, 3, 4, 5, 6, 7]) == 28\nassert find_winning_score([100, 200, 300, 400]) == 1000", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.882}, {"few_shot_keywords": "['identical', 'exponentiation', 'increase', 'opposite', 'boolean', 'n', 'integer', 'ratio', 'prime', 'equation', 'straight line']", "test_keywords": "['integer', 'identical', 'boolean', 'cocktail glass', 'largest power', 'straight line', 'candidates', 'equation', 'ratio']", "prompt_tokens": 591, "total_tokens": 870, "completion_tokens": 279, "completion": "[Question 2]\n\nGiven a list of integers, write a function to find the largest power of a candidate integer that is identical to a straight line equation representing a cocktail glass. The function should return True if such a power exists, otherwise return False.\n\n[/Question 2]\n\n[Code 2]\n\ndef findLargestPowerIdenticalToLine(candidate: int, integers: List[int]) -> bool:\n    max_power = max(integers)\n    for power in range(2, max_power+1):\n        if any(candidate**power == a*power + b for a in integers for b in integers):\n            return True\n    return False\n\n[/Code 2]\n\n[Asserts 2]\n\nassert findLargestPowerIdenticalToLine(2, [1, 2, 3, 4])==True\nassert findLargestPowerIdenticalToLine(3, [1, 2, 4, 8])==False\nassert findLargestPowerIdenticalToLine(5, [3, 5, 7, 9])==True\nassert findLargestPowerIdenticalToLine(2, [1, 3, 5, 7])==False\nassert findLargestPowerIdenticalToLine(4, [1, 4, 9, 16])==True\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.762}, {"few_shot_keywords": "['jump', 'integers', 'loss', 'zero', 'positive', 'multiple', 'count', 'array', 'product', 'divisible', 'length']", "test_keywords": "['integers', 'negative', 'semicircle', 'zero', 'rotation', 'product', 'positive', 'count', 'multiple', 'length', 'divisible', 'array']", "prompt_tokens": 872, "total_tokens": 1223, "completion_tokens": 351, "completion": "[Question 2]\n\nYou are given an array of integers representing the heights of a semicircular fence. The fence is being rotated around its center. Your task is to count the number of different configurations that can be formed such that the product of the heights of the chosen sections is divisible by a given integer.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef countRotations(heights: List[int], k: int) -> int:\n    n = len(heights)\n    prefix = [1] * (n + 1)\n    for i in range(1, n + 1):\n        prefix[i] = prefix[i-1] * heights[i-1]\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if prefix[j+1] % k == 0:\n                count += 1\n    return count\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countRotations([2, 3, 4, 5, 6], 10) == 7\nassert countRotations([1, 2, 3, 4, 5, 6], 3) == 11\nassert countRotations([5, 10, 15, 20, 25, 30], 5) == 16\nassert countRotations([2, 4, 6, 8, 10, 12], 4) == 21\nassert countRotations([3, 5, 7, 9, 11, 13, 15], 15) == 21\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.744}, {"few_shot_keywords": "['array', 'integer', 'distinct', 'left', 'count', 'last digit', 'frequency']", "test_keywords": "['array', 'permutations', 'computation', 'count', 'frequency', 'distinct', 'integer']", "prompt_tokens": 524, "total_tokens": 675, "completion_tokens": 151, "completion": "[Question 2]\n\nGiven an array of integers, write a function to compute the count of distinct permutations of the array elements.\n\n[/Question 2]\n\n[Code 2]\n\nfrom itertools import permutations\n\ndef countDistinctPermutations(arr):\n    perm_set = set(permutations(arr))\n    return len(perm_set)\n\n[/Code 2]\n\n[Asserts 2]\n\nassert countDistinctPermutations([1, 2, 3])==6\nassert countDistinctPermutations([3, 3, 3])==1\nassert countDistinctPermutations([1, 2, 2, 3])==12\nassert countDistinctPermutations([1, 2, 3, 4])==24\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.932}, {"few_shot_keywords": "['geometry', 'frequency', 'combinations', 'slope', 'equation', 'intercept', 'straight line', 'bisect', 'mathematics', 'point']", "test_keywords": "['prime numbers', 'item', 'inscribed', 'slope', 'bisect', 'computation', 'straight line', 'geometry', 'point', 'equation', 'powers', 'intercept']", "prompt_tokens": 591, "total_tokens": 906, "completion_tokens": 315, "completion": "[Question 2]\n\nYou are given a set of points in the XY plane. Write a program to determine the equation of the straight line that passes through a given point and bisects the line segment joining two other given points.\n\n[/Question 2]\n\n[Code 2]\n\nclass Point:\n\tdef __init__(self, a, b):\n\t\tself.x = a\n\t\tself.y = b\n\ndef getLineEquation(p1: Point, p2: Point, p3: Point) -> str:\n\tslope = (p2.y - p1.y) / (p2.x - p1.x)\n\tintercept = (p1.y + p2.y) / 2 - slope * (p1.x + p2.x) / 2\n\treturn \"y = \" + str(slope) + \"x + \" + str(intercept)\n\n[/Code 2]\n\n[Asserts 2]\n\nassert getLineEquation(Point(1, 2), Point(3, 4), Point(5, 6))==\"y = 1.0x + 0.0\"\nassert getLineEquation(Point(-1, 0), Point(1, 0), Point(0, 2))==\"y = 0.0x + 1.0\"\nassert getLineEquation(Point(3, 3), Point(6, 6), Point(9, 9))==\"y = 1.0x + 0.0\"\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.936}, {"few_shot_keywords": "['n', 'bisect', 'row', 'valid', 'matrix', 'boolean', 'greedy', 'XOR', 'column', 'original', 'minimization', 'largest element']", "test_keywords": "['matrix', 'column', 'largest element', 'circular cone', 'odd days', 'minimization', 'valid', 'queries', 'original', 'final value', 'ratio', 'row', 'greedy']", "prompt_tokens": 682, "total_tokens": 1179, "completion_tokens": 497, "completion": "[Question 2]\n\nYou are given a matrix of integers and you need to process queries based on the given conditions. Each query consists of a row or column index and you need to perform a specific operation on that row or column. The operations involve finding the largest element, minimization, or calculating the final value based on the given ratio. Write a function to process these queries and return the final values after processing all the queries.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\n\ndef processQueries(matrix: List[List[int]], queries: List[str]) -> List[int]:\n    result = []\n    for query in queries:\n        if query[0] == 'R':\n            row = int(query[1:])\n            result.append(max(matrix[row-1]))\n        elif query[0] == 'C':\n            col = int(query[1:])\n            result.append(max(matrix[i][col-1] for i in range(len(matrix))))\n        elif query.startswith('MIN'):\n            parts = query.split()\n            if parts[1] == 'R':\n                row = int(parts[2])\n                matrix[row-1] = [min(matrix[row-1])] * len(matrix[row-1])\n            elif parts[1] == 'C':\n                col = int(parts[2])\n                max_val = max(matrix[i][col-1] for i in range(len(matrix)))\n                for i in range(len(matrix)):\n                    matrix[i][col-1] = max_val\n        elif query.startswith('RATIO'):\n            parts = query.split()\n            row = int(parts[1])\n            ratio = int(parts[2])\n            for i in range(len(matrix[row-1])):\n                matrix[row-1][i] *= ratio\n    return result\n\n[/Code 2]\n\n[Asserts 2]\n\nassert processQueries([[1, 2, 3], [4, 5, 6], [7, 8, 9]], ['R2', 'C3', 'MIN R1', 'RATIO 2 3']) == [6, 9, 1, 6]\nassert processQueries([[10, 20, 30], [40, 50, 60], [70, 80, 90]], ['C1', 'R3', 'MIN C2', 'RATIO 2 2']) == [70, 90, 20, 40]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.75}]