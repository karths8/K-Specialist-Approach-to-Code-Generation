[{"few_shot_keywords": "['integers', 'sum', 'array', 'column', 'comparison', 'sorting', 'equality']", "test_keywords": "['anti-clockwise', 'comparison', 'length', 'looping', '3D space', 'array', 'sum', 'perfect square', 'equality', 'integers']", "prompt_tokens": 537, "total_tokens": 1229, "completion_tokens": 692, "completion": "[Question 2]\n\nYou are given a 3D array of integers representing a maze. Each cell in the maze contains an integer value. You need to write a function to determine if the sum of values in the cells of any anti-clockwise loop in the maze is a perfect square or not. Return True if such a loop exists, else return False.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\ndef isPerfectSquareLoopExist(maze: List[List[List[int]]]) -> bool:\n    def isPerfectSquare(num):\n        return int(num**0.5)**2 == num\n\n    def isAntiClockwiseLoop(i, j, di, dj):\n        return (maze[i+di][j+dj] > maze[i+di-1][j+dj] and\n                maze[i+di][j+dj] > maze[i+di][j+dj-1] and\n                maze[i+di][j+dj] > maze[i+di+1][j+dj] and\n                maze[i+di][j+dj] > maze[i+di][j+dj+1])\n\n    n = len(maze)\n    m = len(maze[0])\n    for i in range(1, n-1):\n        for j in range(1, m-1):\n            if isAntiClockwiseLoop(i, j, 0, 1) and isAntiClockwiseLoop(i, j, 1, 0) and isAntiClockwiseLoop(i, j, 0, -1) and isAntiClockwiseLoop(i, j, -1, 0):\n                loop_sum = maze[i][j] + maze[i][j+1] + maze[i+1][j+1] + maze[i+1][j]\n                if isPerfectSquare(loop_sum):\n                    return True\n    return False\n\n[/Code 2]\n\n[Asserts 2]\n\nassert isPerfectSquareLoopExist([\n  [[9, 4, 3], [3, 5, 8], [7, 2, 4]],\n  [[2, 3, 2], [6, 1, 1], [2, 3, 3]],\n  [[3, 4, 5], [1, 2, 6], [2, 3, 4]]\n])==True\n\nassert isPerfectSquareLoopExist([\n  [[1, 2, 1], [2, 3, 4], [1, 2, 1]],\n  [[2, 3, 2], [3, 4, 5], [2, 3, 4]],\n  [[1, 2, 1], [2, 3, 4], [1, 2, 1]]\n])==False\n\nassert isPerfectSquareLoopExist([\n  [[16, 2, 15], [2, 3, 14], [13, 4, 12]],\n  [[3, 13, 4], [12, 5, 11], [6, 10, 7]],\n  [[9, 8, 1], [5, 6, 7], [8, 9, 10]]\n])==True\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.71}, {"few_shot_keywords": "['integers', 'prime number', 'find', 'product', 'reduced form', 'array', 'smallest', 'search', 'missing']", "test_keywords": "['divisors', 'missing', 'integers', 'array', 'prime number', 'program', 'smallest', 'consecutive', 'successive', 'divisor', 'search']", "prompt_tokens": 583, "total_tokens": 908, "completion_tokens": 325, "completion": "[Question 2]\n\nWrite a program to find the smallest prime number missing from an array of consecutive integers. Given an array of consecutive integers, find the smallest prime number that is missing in the array. If no prime number is missing, return -1.\n\nExample: \nInput: [10, 11, 12, 13, 14]\nOutput: -1\n\n[/Question 2]\n\n[Code 2]\n\ndef isPrime(n: int) -> bool:\n\tif (n <= 1):\n\t\treturn False\n\tfor i in range(2, n):\n\t\tif (n % i == 0):\n\t\t\treturn False\n\treturn True\n\ndef smallestMissingPrimeConsecutive(arr: List[int]) -> int:\n\tmaxNum = max(arr)\n\tprime = 2\n\tmissing = -1\n\twhile(prime <= maxNum):\n\t\tif (isPrime(prime) and prime not in arr):\n\t\t\tmissing = prime\n\t\t\tbreak\n\t\tprime += 1\n\treturn missing\n\n[/Code 2]\n\n[Asserts 2]\n\nassert smallestMissingPrimeConsecutive([10, 11, 12, 13, 14])==-1\nassert smallestMissingPrimeConsecutive([1, 2, 3, 4, 5])==7\nassert smallestMissingPrimeConsecutive([20, 21, 22, 23, 24, 25])==29\nassert smallestMissingPrimeConsecutive([8, 9, 10, 11, 12, 13, 14])==2\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.895}, {"few_shot_keywords": "['questions', 'greatest common divisor', 'combinations', 'integer', 'positive number', 'loss', 'remainder', 'formed', 'termination', 'divisor', 'loop', 'division', 'successive']", "test_keywords": "['loop', 'termination', 'successive', 'remainder', 'positive number', 'integer', 'iteration', 'divisor', 'division', 'steps']", "prompt_tokens": 545, "total_tokens": 826, "completion_tokens": 281, "completion": "[Question 2]\n\nYou are given a positive integer \\texttt{num} and a divisor \\texttt{div}. Write a program to find the number of steps required to reach 1 if we perform the following operation: If the number is even, divide it by 2, and if it is odd, multiply it by 3 and add 1.\n\nFor example, if the number is 6, the successive steps would be: 6 -> 3 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1. So, the number of steps required is 8.\n\n[/Question 2]\n\n[Code 2]\n\ndef stepsToReachOne(num: int) -> int:\n    steps = 0\n    while num != 1:\n        if num % 2 == 0:\n            num //= 2\n        else:\n            num = num * 3 + 1\n        steps += 1\n    return steps\n\n[/Code 2]\n\n[Asserts 2]\n\nassert stepsToReachOne(6) == 8\nassert stepsToReachOne(10) == 6\nassert stepsToReachOne(27) == 111\nassert stepsToReachOne(50) == 24\nassert stepsToReachOne(1) == 0\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.707}, {"few_shot_keywords": "['minimum', 'array', 'ratio calculation', 'pairs', 'difference', 'decrement', 'semi-prime', 'sorting', 'last two digits']", "test_keywords": "['array', 'difference', 'graph', 'standard deviation', 'pairs', 'binary', 'sorting', 'digit', 'primality', 'minimum']", "prompt_tokens": 530, "total_tokens": 798, "completion_tokens": 268, "completion": "[Question 2]\n\nGiven an array of integers, the task is to find the minimum difference between any pair of elements in the array and return the standard deviation of all such minimum differences.\n\n[/Question 2]\n\n[Code 2]\n\nfrom typing import List\nimport math\n\ndef minDifferenceStandardDeviation(arr: List[int]) -> float:\n    arr.sort()\n    min_diff = float('inf')\n    n = len(arr)\n    for i in range(n-1):\n        min_diff = min(min_diff, abs(arr[i] - arr[i+1]))\n    standard_deviation = math.sqrt(min_diff)\n    return standard_deviation\n\n[/Code 2]\n\n[Asserts 2]\n\nassert minDifferenceStandardDeviation([1, 5, 9, 2, 12, 18, 6]) == 1.0\nassert minDifferenceStandardDeviation([10, 20, 30, 40, 50]) == 10.0\nassert minDifferenceStandardDeviation([5, 5, 5, 5, 5, 5]) == 0.0\nassert minDifferenceStandardDeviation([1, 3, 5, 7, 9, 11]) == 2.0\n\n[/Asserts 2]", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.704}, {"few_shot_keywords": "['negative', 'selling price', 'elements', 'cost price', 'loss', 'profit', 'items', 'access', 'positive', 'calculation', 'largest number', 'sums']", "test_keywords": "['profit', 'positive', 'calculation', 'cost price', 'loss', 'ones', 'unique', 'powerful', 'items', 'selling price', 'negative', 'integral']", "prompt_tokens": 552, "total_tokens": 867, "completion_tokens": 315, "completion": "[Question 2]\n\nWrite a program to find the largest number formed by the sum of unique elements from two given lists.\n\nThe program should take two lists as input and then find the sum of unique elements from both lists. It should then return the largest number that can be formed by rearranging the digits of this sum.\n\nFor example, if the input lists are [1, 2, 3, 4] and [3, 4, 5], the unique elements sum would be 1 + 2 + 3 + 4 + 5 = 15. The largest number formed by rearranging the digits of 15 is 51.\n\n[/Question 2]\n\n[Code 2]\n\nfrom itertools import permutations\n\ndef largestNumberFromSum(list1: List[int], list2: List[int]) -> int:\n    unique_sum = sum(set(list1 + list2))\n    digits = [int(d) for d in str(unique_sum)]\n    perms = permutations(digits)\n    max_num = max([int(''.join(p)) for p in perms])\n    return max_num\n\n[/Code 2]\n\n[Asserts 2]\n\nassert largestNumberFromSum([1, 2, 3, 4], [3, 4, 5])==51\nassert largestNumberFromSum([5, 5, 5, 5], [5, 5, 5])==555\nassert largestNumberFromSum([1, 2, 3], [4, 5, 6])==653", "model_name": "gpt-3.5-turbo-1106", "source": "xlcost-diverse-instruct", "temperature": 0.851}]