[{"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 854, "total_tokens": 1029, "completion_tokens": 175, "completion": "Write a function to count the number of set bits (bits with value 1) in a given integer.\n\n###Code: \n\n```python\ndef countSetBits(num: int) -> int:\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n```\n\n###Testcases: \n\n```python\nassert countSetBits(10) == 2\nassert countSetBits(15) == 4\nassert countSetBits(7) == 3\nassert countSetBits(0) == 0\nassert countSetBits(255) == 8\nassert countSetBits(12345) == 6\nassert countSetBits(1) == 1\nassert countSetBits(1024) == 1\n```\n\n[/Example 4]", "temperature": 0.896, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 796, "total_tokens": 966, "completion_tokens": 170, "completion": "Write a function to count the number of set bits (binary 1s) in a given integer.\n\n###Code:\n\n```python\ndef countSetBits(num: int) -> int:\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n```\n\n###Testcases:\n\n```python\nassert countSetBits(5) == 2\nassert countSetBits(10) == 2\nassert countSetBits(15) == 4\nassert countSetBits(255) == 8\nassert countSetBits(16) == 1\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\nassert countSetBits(100) == 3\n```\n\n[/Example 4]", "temperature": 0.704, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 810, "total_tokens": 990, "completion_tokens": 180, "completion": "Write a function to check if a given number is a power of two.\n\n###Code:\n\n```python\ndef is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases:\n\n```python\nassert is_power_of_two(1) == True\nassert is_power_of_two(2) == True\nassert is_power_of_two(16) == True\nassert is_power_of_two(64) == True\nassert is_power_of_two(7) == False\nassert is_power_of_two(11) == False\nassert is_power_of_two(0) == False\nassert is_power_of_two(128) == True\nassert is_power_of_two(1024) == True\nassert is_power_of_two(15) == False\n```\n\n[/Example 4]", "temperature": 0.803, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 772, "total_tokens": 931, "completion_tokens": 159, "completion": "Write a function to determine whether a given number is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(15) == False\nassert isPowerOfTwo(128) == True\nassert isPowerOfTwo(100) == False\n```", "temperature": 0.721, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 847, "total_tokens": 1005, "completion_tokens": 158, "completion": "Create a function to check if a given number is a power of 2.\n\n###Code:\n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases:\n\n```python\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(128) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(10) == False\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(-16) == False\n``` \n\n[/Example 4]", "temperature": 0.826, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 850, "total_tokens": 1014, "completion_tokens": 164, "completion": "Write a function to count the number of set bits (bits with value 1) in a given integer.\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(255) == 8\nassert count_set_bits(0) == 0\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(1023) == 10\n\n[/Example 4]", "temperature": 0.783, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 844, "total_tokens": 1036, "completion_tokens": 192, "completion": "Write a function that counts the number of set bits (1s) in a given integer.\n\n###Code:\n\n```python\ndef count_set_bits(num: int) -> int:\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n```\n\n###Testcases:\n\n```python\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(511) == 9\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\n```\n\n[/Example 4]", "temperature": 0.855, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 853, "total_tokens": 1014, "completion_tokens": 161, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code: \n\n```python\ndef countSetBits(num: int) -> int:\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n```\n\n###Testcases: \n\n```python\nassert countSetBits(7) == 3\nassert countSetBits(15) == 4\nassert countSetBits(32) == 1\nassert countSetBits(255) == 8\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\nassert countSetBits(100) == 3\nassert countSetBits(1023) == 10\n```", "temperature": 0.747, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 937, "total_tokens": 1216, "completion_tokens": 279, "completion": "Write a function to count the total set bits in all numbers from 1 to n.\n\n###Code:\n\n```python\ndef countSetBits(n: int) -> int:\n    if n == 0:\n        return 0\n    \n    x = largestPowerOf2InRange(n)\n    bitsBeforePowerOf2 = x * (1 << (x - 1))\n    msbBitsTillX = n - (1 << x) + 1\n    rest = n - (1 << x)\n    totalSetBits = bitsBeforePowerOf2 + msbBitsTillX + countSetBits(rest)\n    return totalSetBits\n\ndef largestPowerOf2InRange(n: int) -> int:\n    x = 0\n    while (1 << x) <= n:\n        x += 1\n    return x - 1\n```\n\n###Testcases:\n\n```python\nassert countSetBits(1) == 1\nassert countSetBits(5) == 7\nassert countSetBits(10) == 17\nassert countSetBits(15) == 24\nassert countSetBits(20) == 31\nassert countSetBits(50) == 115\nassert countSetBits(100) == 217\nassert countSetBits(255) == 511\n```\n\n[/Example 4]", "temperature": 0.729, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 886, "total_tokens": 1054, "completion_tokens": 168, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code: \n\n```python\ndef count_set_bits(num: int) -> int:\n    count = 0\n    while (num):\n        count += num & 1\n        num >>= 1\n    return count\n```\n\n###Testcases: \n\n```python\nassert count_set_bits(10) == 2\nassert count_set_bits(7) == 3\nassert count_set_bits(15) == 4\nassert count_set_bits(255) == 8\nassert count_set_bits(0) == 0\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(255255) == 12\n```\n\n[/Example 4]", "temperature": 0.895, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 852, "total_tokens": 1166, "completion_tokens": 314, "completion": "Given an array of integers, write a function to find the maximum XOR value between two numbers in the array.\n\n###Code: \n\n```python\ndef findMaximumXOR(nums: List[int]) -> int:\n        max_xor = 0\n        mask = 0\n        for i in range(31, -1, -1):\n            mask |= (1 << i)\n            temp_set = set()\n            for num in nums:\n                temp_set.add(num & mask)\n            greedy_try = max_xor | (1 << i)\n            for prefix in temp_set:\n                if (greedy_try ^ prefix) in temp_set:\n                    max_xor = greedy_try\n                    break\n        return max_xor\n```\n\n###Testcases: \n\n```python\nassert findMaximumXOR([3, 10, 5, 25, 2, 8]) == 28\nassert findMaximumXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127\nassert findMaximumXOR([32, 18, 33, 42, 29, 20, 26, 36, 15, 46]) == 62\nassert findMaximumXOR([7, 14, 28, 56, 112, 98, 99, 100, 101, 103, 105]) == 15\n```\n\n[/Example 4]", "temperature": 0.85, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 866, "total_tokens": 1172, "completion_tokens": 306, "completion": "Given an array of integers, write a function to find two numbers that appear only once in the array, all other numbers appear exactly twice.\n\n###Code:\n\n```python\ndef findSingleNumbers(nums: List[int]) -> List[int]:\n    xor = 0\n    for num in nums:\n        xor ^= num\n    rightmost_set_bit = xor & -xor\n    res1, res2 = 0, 0\n    for num in nums:\n        if num & rightmost_set_bit:\n            res1 ^= num\n        else:\n            res2 ^= num\n    return [res1, res2]\n```\n\n###Testcases:\n\n```python\nassert findSingleNumbers([4, 2, 6, 3, 4, 5, 2, 3]) == [5, 6]\nassert findSingleNumbers([1, 2, 1, 3, 2, 5]) == [3, 5]\nassert findSingleNumbers([7, 9, 9, 8, 8, 10]) == [7, 10]\nassert findSingleNumbers([15, 16, 17, 16, 17, 18, 19, 19]) == [15, 18]\nassert findSingleNumbers([20, 21, 21, 22, 22, 23, 23, 24]) == [20, 24]\n```\n\n[/Example 4]", "temperature": 0.873, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 828, "total_tokens": 962, "completion_tokens": 134, "completion": "Given an integer, write a function to check if it is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(218) == False\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(15) == False\n```", "temperature": 0.846, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 903, "total_tokens": 1062, "completion_tokens": 159, "completion": "Given a positive integer n, write a function to determine if it is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(2) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(10) == False\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(4096) == True\n```", "temperature": 0.783, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 906, "total_tokens": 1058, "completion_tokens": 152, "completion": "Given an integer, write a function to check if it is a power of two.\n\n###Code: \n\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n\n###Testcases: \n\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(2) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(218) == False\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(333) == False\n\n[/Example 4]", "temperature": 0.819, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 900, "total_tokens": 1183, "completion_tokens": 283, "completion": "Given an array of integers, write a function to find the maximum XOR value between two numbers in the array.\n\n###Code:\n\n```python\ndef findMaximumXOR(nums: list) -> int:\n    max_xor = 0\n    mask = 0\n    for i in range(31, -1, -1):\n        mask |= (1 << i)\n        prefixes = set()\n        for num in nums:\n            prefixes.add(num & mask)\n        temp_max = max_xor | (1 << i)\n        for prefix in prefixes:\n            if (prefix ^ temp_max) in prefixes:\n                max_xor = temp_max\n                break\n    return max_xor\n```\n\n###Testcases: \n\n```python\nassert findMaximumXOR([3, 10, 5, 25, 2, 8]) == 28\nassert findMaximumXOR([8, 10, 2]) == 10\nassert findMaximumXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127\nassert findMaximumXOR([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 15\n```\n\n[/Example 4]", "temperature": 0.858, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 909, "total_tokens": 1187, "completion_tokens": 278, "completion": "Given an array of integers, write a function to find the maximum XOR value between any two elements in the array. \n\n###Code: \n\n```python\ndef findMaximumXOR(nums: List[int]) -> int:\n    result = 0\n    mask = 0\n    for i in range(31, -1, -1):\n        mask = mask | (1 << i)\n        uniquePrefixes = set()\n        for num in nums:\n            uniquePrefixes.add(num & mask)\n        temp = result | (1 << i)\n        for prefix in uniquePrefixes:\n            if (temp ^ prefix) in uniquePrefixes:\n                result = temp\n                break\n    return result\n```\n\n###Testcases: \n\n```python\nassert findMaximumXOR([3, 10, 5, 25, 2, 8]) == 28\nassert findMaximumXOR([8, 10, 2]) == 10\nassert findMaximumXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127\nassert findMaximumXOR([1, 2, 4, 8, 16, 32, 64, 128]) == 255\n```", "temperature": 0.768, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 993, "total_tokens": 1218, "completion_tokens": 225, "completion": "Write a function to count the total set bits in all numbers from 1 to n.\n\n###Code: \n\n```python\ndef countSetBits(n: int) -> int:\n    n += 1\n    powerOf2 = 2\n    cnt = n // 2\n    while powerOf2 <= n:\n        totalPairs = n // powerOf2\n        cnt += (totalPairs // 2) * powerOf2\n        cnt += (totalPairs % 2) * (n % powerOf2)\n        powerOf2 = powerOf2 << 1\n    return cnt\n```\n\n###Testcases: \n\n```python\nassert countSetBits(5) == 7\nassert countSetBits(10) == 17\nassert countSetBits(15) == 24\nassert countSetBits(20) == 31\nassert countSetBits(25) == 37\nassert countSetBits(50) == 87\nassert countSetBits(100) == 217\nassert countSetBits(500) == 1247\n```", "temperature": 0.764, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 942, "total_tokens": 1091, "completion_tokens": 149, "completion": "Write a function to count the number of set bits (1s) in a given integer.\n\n###Code: \n\n```python\ndef countSetBits(num: int) -> int:\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n```\n\n###Testcases: \n\n```python\nassert countSetBits(10) == 2\nassert countSetBits(15) == 4\nassert countSetBits(7) == 3\nassert countSetBits(0) == 0\nassert countSetBits(255) == 8\nassert countSetBits(1023) == 10\n```\n\n[/Example 4]", "temperature": 0.706, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 808, "total_tokens": 996, "completion_tokens": 188, "completion": "Write a function that returns the bitwise XOR of all the numbers from 1 to n (inclusive).\n\n###Code: \n\n```python\ndef xorOfNumbers(n: int) -> int:\n    if n % 4 == 0:\n        return n\n    if n % 4 == 1:\n        return 1\n    if n % 4 == 2:\n        return n + 1\n    return 0\n```\n\n###Testcases: \n\n```python\nassert xorOfNumbers(5) == 1\nassert xorOfNumbers(10) == 11\nassert xorOfNumbers(15) == 0\nassert xorOfNumbers(8) == 8\nassert xorOfNumbers(3) == 0\nassert xorOfNumbers(20) == 21\nassert xorOfNumbers(7) == 0\nassert xorOfNumbers(12) == 12\n```", "temperature": 0.724, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 770, "total_tokens": 899, "completion_tokens": 129, "completion": "Write a function to check if a given integer is a power of two.\n\n###Code:\n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases:\n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(32) == True\nassert isPowerOfTwo(15) == False\n```", "temperature": 0.764, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 845, "total_tokens": 1081, "completion_tokens": 236, "completion": "Given an array of integers, write a function to find the element that appears once while all other elements appear thrice.\n\n###Code: \n\n```python\ndef singleNumber(nums: List[int]) -> int:\n        ones = 0\n        twos = 0\n        for num in nums:\n            ones = (ones ^ num) & ~twos\n            twos = (twos ^ num) & ~ones\n        return ones\n```\n\n###Testcases: \n\n```python\nassert singleNumber([3, 3, 3, 4]) == 4\nassert singleNumber([5, 5, 5, 8]) == 8\nassert singleNumber([7, 7, 7, 10]) == 10\nassert singleNumber([15, 15, 15, 20]) == 20\nassert singleNumber([1, 1, 1, 2]) == 2\nassert singleNumber([0, 0, 0, 5]) == 5\nassert singleNumber([-1, -1, -1, 3]) == 3\n```", "temperature": 0.729, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 848, "total_tokens": 997, "completion_tokens": 149, "completion": "Write a function to check if a given integer is a power of two.\n\n###Code: \n\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n\n###Testcases: \n\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(2) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(10) == False\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(32) == True\nassert isPowerOfTwo(15) == False\n\n[/Example 4]", "temperature": 0.807, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 842, "total_tokens": 1004, "completion_tokens": 162, "completion": "Given an integer, write a function to count the total number of set bits in its binary representation.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert countSetBits(7) == 3\nassert countSetBits(10) == 2\nassert countSetBits(15) == 4\nassert countSetBits(32) == 1\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\nassert countSetBits(255) == 8\nassert countSetBits(1023) == 10\n\n[/Example 4]", "temperature": 0.73, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 851, "total_tokens": 1000, "completion_tokens": 149, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code: \n\n```python\ndef countSetBits(num: int) -> int:\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n```\n\n###Testcases: \n\n```python\nassert countSetBits(10) == 2\nassert countSetBits(7) == 3\nassert countSetBits(15) == 4\nassert countSetBits(0) == 0\nassert countSetBits(255) == 8\nassert countSetBits(16) == 1\nassert countSetBits(31) == 5\n```", "temperature": 0.759, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 935, "total_tokens": 1157, "completion_tokens": 222, "completion": "Write a function to count the total set bits in all numbers from 1 to n.\n\n###Code:\n\n```python\ndef countSetBits(n: int) -> int:\n    n += 1\n    powerOf2 = 2\n    count = n // 2\n    while powerOf2 <= n:\n        totalPairs = n // powerOf2\n        count += (totalPairs // 2) * powerOf2\n        count += (totalPairs % 2) * (n % powerOf2)\n        powerOf2 = powerOf2 << 1\n    return count\n```\n\n###Testcases:\n\n```python\nassert countSetBits(5) == 7\nassert countSetBits(10) == 17\nassert countSetBits(20) == 42\nassert countSetBits(50) == 132\nassert countSetBits(100) == 241\nassert countSetBits(15) == 35\nassert countSetBits(8) == 13\nassert countSetBits(3) == 4\n```", "temperature": 0.799, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 884, "total_tokens": 1103, "completion_tokens": 219, "completion": "Write a function to swap the odd and even bits in an integer with as few instructions as possible.\n\n###Code: \n\n```python\ndef swapOddEvenBits(x: int) -> int:\n    return ((x & 0xaaaaaaaa) >> 1) | ((x & 0x55555555) << 1)\n```\n\n###Testcases: \n\n```python\nassert swapOddEvenBits(0b10101010) == 0b01010101\nassert swapOddEvenBits(0b11110000) == 0b11110000\nassert swapOddEvenBits(0b01010101) == 0b10101010\nassert swapOddEvenBits(0b11001100) == 0b01100110\nassert swapOddEvenBits(0b00001111) == 0b00001111\nassert swapOddEvenBits(0b11111111) == 0b11111111\nassert swapOddEvenBits(0b01010101) == 0b10101010\n```", "temperature": 0.744, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 784, "total_tokens": 966, "completion_tokens": 182, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n        if n <= 0:\n            return False\n        return (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(256) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(15) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(100) == False\nassert isPowerOfTwo(128) == True\nassert isPowerOfTwo(255) == False\n```", "temperature": 0.861, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 859, "total_tokens": 1044, "completion_tokens": 185, "completion": "Write a function to check if a given integer is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(2) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(10) == False\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(1023) == False\nassert isPowerOfTwo(4096) == True\nassert isPowerOfTwo(2047) == False\n```\n\n[/Example 4]", "temperature": 0.808, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 862, "total_tokens": 1035, "completion_tokens": 173, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\ndef isPowerOfTwo(n: int) -> bool:\n    return n != 0 and (n & (n - 1)) == 0\n\n###Testcases: \n\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(128) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(255) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(12) == False\nassert isPowerOfTwo(4096) == True\n\n[/Example 4]", "temperature": 0.853, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 856, "total_tokens": 1076, "completion_tokens": 220, "completion": "Write a function to toggle the kth bit of a given integer.\n\n###Code: \n\n```python\ndef toggle_kth_bit(num: int, k: int) -> int:\n    return num ^ (1 << (k-1))\n```\n\n###Testcases: \n\n```python\nassert toggle_kth_bit(5, 1) == 4\nassert toggle_kth_bit(7, 2) == 5\nassert toggle_kth_bit(10, 3) == 14\nassert toggle_kth_bit(0, 5) == 16\nassert toggle_kth_bit(15, 4) == 7\nassert toggle_kth_bit(255, 8) == 127\nassert toggle_kth_bit(1023, 10) == 1019\nassert toggle_kth_bit(12345, 6) == 12409\nassert toggle_kth_bit(1, 1) == 0\nassert toggle_kth_bit(100, 3) == 104\n```\n\n[/Example 4]", "temperature": 0.709, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 865, "total_tokens": 1042, "completion_tokens": 177, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(2) == True\nassert isPowerOfTwo(4) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(5) == False\nassert isPowerOfTwo(15) == False\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(1023) == False\n```", "temperature": 0.707, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 949, "total_tokens": 1264, "completion_tokens": 315, "completion": "Write a function to find the single non-duplicate element in a non-empty array. All elements except for one appear twice.\n\n###Code:\n\n```python\ndef singleNonDuplicate(nums: list) -> int:\n    l, r = 0, len(nums) - 1\n    while l < r:\n        mid = l + (r - l) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if nums[mid] != nums[mid + 1]:\n            r = mid\n        else:\n            l = mid + 2\n    return nums[l]\n```\n\n###Testcases:\n\n```python\nassert singleNonDuplicate([1, 1, 2, 3, 3, 4, 4, 8, 8]) == 2\nassert singleNonDuplicate([3, 3, 7, 7, 10, 11, 11]) == 10\nassert singleNonDuplicate([1, 1, 2, 3, 3, 4, 4, 5, 5]) == 2\nassert singleNonDuplicate([0, 1, 1, 2, 2, 3, 3]) == 0\nassert singleNonDuplicate([1, 1, 2]) == 2\nassert singleNonDuplicate([1, 2, 2]) == 1\nassert singleNonDuplicate([1]) == 1\n```\n\n[/Example 4]", "temperature": 0.815, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 898, "total_tokens": 1074, "completion_tokens": 176, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert is_power_of_two(1) == True\nassert is_power_of_two(2) == True\nassert is_power_of_two(3) == False\nassert is_power_of_two(4) == True\nassert is_power_of_two(8) == True\nassert is_power_of_two(16) == True\nassert is_power_of_two(15) == False\nassert is_power_of_two(0) == False\nassert is_power_of_two(-8) == False\nassert is_power_of_two(1024) == True\n```", "temperature": 0.873, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 821, "total_tokens": 975, "completion_tokens": 154, "completion": "Write a function to check if a given integer is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(218) == False\nassert isPowerOfTwo(256) == True\n```", "temperature": 0.852, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 824, "total_tokens": 974, "completion_tokens": 150, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\ndef isPowerOfTwo(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n\n###Testcases: \n\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(100) == False\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(255) == False", "temperature": 0.805, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 818, "total_tokens": 1011, "completion_tokens": 193, "completion": "Write a function that takes an integer and returns its binary representation as a string.\n\n###Code: \n\n```python\ndef binaryRepresentation(num: int) -> str:\n    if num < 0:\n        return '-' + bin(num & 0xFFFFFFFF)[2:]\n    else:\n        return bin(num)[2:]\n```\n\n###Testcases: \n\n```python\nassert binaryRepresentation(10) == '1010'\nassert binaryRepresentation(5) == '101'\nassert binaryRepresentation(16) == '10000'\nassert binaryRepresentation(0) == '0'\nassert binaryRepresentation(-3) == '-11'\nassert binaryRepresentation(-16) == '-10000'\nassert binaryRepresentation(255) == '11111111'\nassert binaryRepresentation(1023) == '1111111111'\nassert binaryRepresentation(-1023) == '-1111111111'\nassert binaryRepresentation(65535) == '1111111111111111'\n```", "temperature": 0.855, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 827, "total_tokens": 990, "completion_tokens": 163, "completion": "Write a function to calculate the bitwise AND of all numbers in the given range.\n\n###Code: \n\n```python\ndef rangeBitwiseAnd(m: int, n: int) -> int:\n        while n > m:\n            n = n & (n-1)\n        return n\n```\n\n###Testcases: \n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 10) == 8\nassert rangeBitwiseAnd(0, 0) == 0\nassert rangeBitwiseAnd(1, 2147483647) == 0\n```", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 911, "total_tokens": 1115, "completion_tokens": 204, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers in the range [a, b] (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b-1)\n    return a & b\n```\n\n###Testcases: \n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(16, 19) == 16\nassert rangeBitwiseAnd(600, 700) == 0\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(8, 10) == 8\nassert rangeBitwiseAnd(0, 0) == 0\n```", "temperature": 0.803, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 860, "total_tokens": 1012, "completion_tokens": 152, "completion": "Write a function to check if a given number is a power of two.\n\n###Code:\n\n```python\ndef isPowerOfTwo(num: int) -> bool:\n    return num != 0 and (num & (num - 1)) == 0\n```\n\n###Testcases:\n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(15) == False\nassert isPowerOfTwo(128) == True\n```", "temperature": 0.766, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 899, "total_tokens": 1156, "completion_tokens": 257, "completion": "Given a positive integer n, write a function to count the total number of set bits in the binary representation of all numbers from 1 to n. Modulo the result with 10^9+7.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n        mod = 1000000007\n        n += 1\n        count = n // 2\n        powerOf2 = 2\n        while powerOf2 <= n:\n            totalPairs = n // powerOf2\n            count += (totalPairs // 2) * powerOf2\n            count += (totalPairs % 2 == 1) * (n % powerOf2)\n            count %= mod\n            powerOf2 <<= 1\n        return count\n\n###Testcases: \n\nassert countSetBits(3) == 4\nassert countSetBits(5) == 8\nassert countSetBits(10) == 23\nassert countSetBits(15) == 35\nassert countSetBits(20) == 48\nassert countSetBits(25) == 60\nassert countSetBits(50) == 111\nassert countSetBits(100) == 217\n\n[/Example 4]", "temperature": 0.805, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 893, "total_tokens": 1150, "completion_tokens": 257, "completion": "Given an integer n, write a function to count the total set bits in all numbers from 1 to n.\n\n###Code:\n\ndef countSetBits(n: int) -> int:\n    n += 1\n    power_of_2 = 2\n    count = n // 2\n    while power_of_2 <= n:\n        total_pairs = n // power_of_2\n        count += (total_pairs // 2) * power_of_2\n        if total_pairs % 2 == 1:\n            count += n % power_of_2\n        power_of_2 = power_of_2 << 1\n    return count\n\n###Testcases:\n\nassert countSetBits(5) == 7\nassert countSetBits(10) == 17\nassert countSetBits(15) == 24\nassert countSetBits(20) == 31\nassert countSetBits(25) == 38\nassert countSetBits(50) == 109\nassert countSetBits(100) == 217\nassert countSetBits(200) == 411\nassert countSetBits(500) == 1257\nassert countSetBits(1000) == 2477\n\n[/Example 4]", "temperature": 0.716, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 902, "total_tokens": 1063, "completion_tokens": 161, "completion": "Given a non-negative integer num, write a function to count the number of 1 bits in its binary representation.\n\n###Code: \n\n```python\ndef countOneBits(num: int) -> int:\n    count = 0\n    while num:\n        num = num & (num - 1)\n        count += 1\n    return count\n```\n\n###Testcases: \n\n```python\nassert countOneBits(10) == 2\nassert countOneBits(7) == 3\nassert countOneBits(15) == 4\nassert countOneBits(32) == 1\nassert countOneBits(255) == 8\nassert countOneBits(0) == 0\nassert countOneBits(1023) == 10\n```", "temperature": 0.791, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 986, "total_tokens": 1185, "completion_tokens": 199, "completion": "Given two integers, write a function to check if the kth bit of the first integer is set (1) or not (0).\n\n###Code:\n\n```python\ndef isKthBitSet(n: int, k: int) -> bool:\n    return (n & (1 << (k - 1))) != 0\n```\n\n###Testcases:\n\n```python\nassert isKthBitSet(5, 1) == True\nassert isKthBitSet(5, 2) == False\nassert isKthBitSet(10, 2) == True\nassert isKthBitSet(10, 3) == False\nassert isKthBitSet(16, 5) == False\nassert isKthBitSet(16, 4) == True\nassert isKthBitSet(0, 1) == False\nassert isKthBitSet(1, 1) == True\n```", "temperature": 0.822, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 935, "total_tokens": 1089, "completion_tokens": 154, "completion": "Given a non-negative integer, write a function to calculate the bitwise complement of the integer.\n\n###Code:\n\n```python\ndef bitwiseComplement(N: int) -> int:\n    if N == 0:\n        return 1\n    num_bits = N.bit_length()\n    all_ones = (1 << num_bits) - 1\n    return N ^ all_ones\n```\n\n###Testcases:\n\n```python\nassert bitwiseComplement(5) == 2\nassert bitwiseComplement(10) == 5\nassert bitwiseComplement(0) == 1\nassert bitwiseComplement(7) == 0\nassert bitwiseComplement(15) == 0\nassert bitwiseComplement(255) == 0\n```", "temperature": 0.838, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 896, "total_tokens": 1224, "completion_tokens": 328, "completion": "Given an array of integers, write a function to find the only element that appears once while all the other elements appear twice.\n\n###Code: \n\ndef findSingle(arr: List[int]) -> int:\n        result = 0\n        for num in arr:\n            result ^= num\n        return result\n\n###Testcases: \n\nassert findSingle([4, 3, 2, 4, 1, 2, 3]) == 1\nassert findSingle([7, 3, 5, 4, 5, 3, 4]) == 7\nassert findSingle([1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1]) == 7\nassert findSingle([1, 1, 2, 2, 3, 3, 4, 5, 5]) == 4\nassert findSingle([2, 2, 1]) == 1\nassert findSingle([1, 1, 2]) == 2\nassert findSingle([12, 12, 5, 5, 6, 6, 8, 8, 10, 10, 15, 15, 18, 18, 20, 22, 20, 22]) == 4\nassert findSingle([0, 0, 0, 0, 0, 0, 1]) == 1\n\n[/Example 4]", "temperature": 0.79, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 905, "total_tokens": 1062, "completion_tokens": 157, "completion": "Write a function that returns the number of set bits in a given integer.\n\n###Code:\n\ndef countSetBits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases:\n\nassert countSetBits(7) == 3\nassert countSetBits(15) == 4\nassert countSetBits(32) == 1\nassert countSetBits(0) == 0\nassert countSetBits(255) == 8\nassert countSetBits(1023) == 10\nassert countSetBits(65535) == 16\nassert countSetBits(21845) == 10\n\n[/Example 4]", "temperature": 0.853, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 989, "total_tokens": 1306, "completion_tokens": 317, "completion": "Given an array of integers, write a function to find the two non-repeating elements. All repeating elements appear exactly twice except for the two non-repeating elements which appear only once.\n\n###Code:\n\ndef findNonRepeating(arr: list) -> (int, int):\n        xor = 0\n        for num in arr:\n            xor = xor ^ num\n        \n        set_bit = xor & ~(xor - 1)\n        \n        x, y = 0, 0\n        for num in arr:\n            if num & set_bit:\n                x = x ^ num\n            else:\n                y = y ^ num\n        \n        return x, y\n\n###Testcases:\n\nassert findNonRepeating([1, 2, 3, 2, 1, 4]) == (3, 4)\nassert findNonRepeating([5, 7, 2, 7, 5, 4]) == (2, 4)\nassert findNonRepeating([10, 20, 30, 40, 30, 20, 10, 50]) == (40, 50)\nassert findNonRepeating([8, 4, 6, 8, 6, 4, 9, 9]) == (9, 9)\nassert findNonRepeating([3, 5, 6, 3, 6, 7, 5, 8, 8, 9]) == (7, 9)\n\n[/Example 4]", "temperature": 0.885, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 938, "total_tokens": 1077, "completion_tokens": 139, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\ndef isPowerOfTwo(n: int) -> bool:\n        return n and (not(n & (n - 1)))\n\n\n###Testcases: \n\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(100) == False\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(4096) == True", "temperature": 0.81, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 899, "total_tokens": 1164, "completion_tokens": 265, "completion": "Given an array of integers, write a function to find the element that appears once, while all other elements appear thrice.\n\n###Code: \n\ndef singleNumber(nums: List[int]) -> int:\n        ones = 0\n        twos = 0\n        for num in nums:\n            ones = (ones ^ num) & ~twos\n            twos = (twos ^ num) & ~ones\n        return ones\n\n\n###Testcases: \n\nassert singleNumber([3, 3, 3, 4]) == 4\nassert singleNumber([5, 5, 5, 8]) == 8\nassert singleNumber([7, 7, 7, 6]) == 6\nassert singleNumber([15, 15, 15, 10]) == 10\nassert singleNumber([11, 11, 11, 12]) == 12\nassert singleNumber([3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9]) == 9\n\n[/Example 4]", "temperature": 0.724, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 983, "total_tokens": 1168, "completion_tokens": 185, "completion": "Given two integers, write a function to check if they have opposite signs.\n\n###Code: \n\ndef oppositeSigns(a: int, b: int) -> bool:\n        return (a ^ b) < 0\n\n###Testcases: \n\nassert oppositeSigns(3, -5) == True\nassert oppositeSigns(10, 20) == False\nassert oppositeSigns(7, -13) == True\nassert oppositeSigns(-111, 222) == False\nassert oppositeSigns(0, 0) == False\nassert oppositeSigns(1, -100) == True\nassert oppositeSigns(-5, 10) == True\nassert oppositeSigns(-10, -20) == False\nassert oppositeSigns(15, -15) == True\nassert oppositeSigns(16, -16) == True\n\n[/Example 4]", "temperature": 0.73, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 932, "total_tokens": 1115, "completion_tokens": 183, "completion": "Write a function to count the number of set bits in a binary representation of a given integer.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert countSetBits(10) == 2\nassert countSetBits(15) == 4\nassert countSetBits(7) == 3\nassert countSetBits(127) == 7\nassert countSetBits(255) == 8\nassert countSetBits(3) == 2\nassert countSetBits(31) == 5\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\nassert countSetBits(100) == 3\n\n[/Example 4]", "temperature": 0.768, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 992, "total_tokens": 1155, "completion_tokens": 163, "completion": "Given an integer, write a function to check if it is a power of 2.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(128) == True\nassert isPowerOfTwo(15) == False\nassert isPowerOfTwo(1024) == True\n```", "temperature": 0.779, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 941, "total_tokens": 1108, "completion_tokens": 167, "completion": "Given a non-negative integer num, write a function to count the number of 1 bits in its binary representation.\n\n###Code:\n\n```python\ndef countBits(num: int) -> int:\n    count = 0\n    while num:\n        count += 1\n        num &= (num - 1)\n    return count\n```\n\n###Testcases:\n\n```python\nassert countBits(0) == 0\nassert countBits(5) == 2\nassert countBits(8) == 1\nassert countBits(15) == 4\nassert countBits(255) == 8\nassert countBits(1023) == 10\nassert countBits(1024) == 1\nassert countBits(65535) == 16\n```\n\n[/Example 4]", "temperature": 0.729, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to swap them without using a temporary variable.", "code": "def swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b", "asserts": ["assert swapWithoutTempVar(3, 5) == (5, 3)", "assert swapWithoutTempVar(10, 20) == (20, 10)", "assert swapWithoutTempVar(7, 13) == (13, 7)", "assert swapWithoutTempVar(111, 222) == (222, 111)", "assert swapWithoutTempVar(0, 0) == (0, 0)", "assert swapWithoutTempVar(1, 100) == (100, 1)", "assert swapWithoutTempVar(-5, 10) == (10, -5)", "assert swapWithoutTempVar(-10, -20) == (-20, -10)"], "author": "GPT", "UUID": "0bc12a7e-23bb-4551-9aec-26fba7667a86", "tc_status": [["assert swapWithoutTempVar(3, 5) == (5, 3)", "Passed"], ["assert swapWithoutTempVar(10, 20) == (20, 10)", "Passed"], ["assert swapWithoutTempVar(7, 13) == (13, 7)", "Passed"], ["assert swapWithoutTempVar(111, 222) == (222, 111)", "Passed"], ["assert swapWithoutTempVar(0, 0) == (0, 0)", "Passed"], ["assert swapWithoutTempVar(1, 100) == (100, 1)", "Passed"], ["assert swapWithoutTempVar(-5, 10) == (10, -5)", "Passed"], ["assert swapWithoutTempVar(-10, -20) == (-20, -10)", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 1025, "total_tokens": 1190, "completion_tokens": 165, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code:\n\n```python\ndef countSetBits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\n\n###Testcases:\n\n```python\nassert countSetBits(5) == 2\nassert countSetBits(10) == 2\nassert countSetBits(16) == 1\nassert countSetBits(255) == 8\nassert countSetBits(1023) == 10\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\nassert countSetBits(7) == 3\n```\n\n[/Example 4]", "temperature": 0.802, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 800, "total_tokens": 946, "completion_tokens": 146, "completion": "Create a function to count the number of set bits in a given integer.\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(255) == 8\nassert count_set_bits(16) == 1\nassert count_set_bits(0) == 0\nassert count_set_bits(123456) == 5\n\n[/Example 4]", "temperature": 0.861, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 814, "total_tokens": 989, "completion_tokens": 175, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef is_power_of_two(n: int) -> bool:\n    return n != 0 and (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert is_power_of_two(1) == True\nassert is_power_of_two(2) == True\nassert is_power_of_two(4) == True\nassert is_power_of_two(8) == True\nassert is_power_of_two(16) == True\nassert is_power_of_two(3) == False\nassert is_power_of_two(5) == False\nassert is_power_of_two(10) == False\nassert is_power_of_two(15) == False\nassert is_power_of_two(0) == False\n```", "temperature": 0.791, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 776, "total_tokens": 907, "completion_tokens": 131, "completion": "Create a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(num: int) -> bool:\n    return num > 0 and (num & (num - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(128) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(15) == False\n```", "temperature": 0.865, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 851, "total_tokens": 1003, "completion_tokens": 152, "completion": "Write a function to check if a given number is a power of two.\n\n###Code:\n\n```python\ndef is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases:\n\n```python\nassert is_power_of_two(1) == True\nassert is_power_of_two(16) == True\nassert is_power_of_two(3) == False\nassert is_power_of_two(128) == True\nassert is_power_of_two(0) == False\nassert is_power_of_two(15) == False\nassert is_power_of_two(1024) == True\nassert is_power_of_two(218) == False\n```", "temperature": 0.769, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 854, "total_tokens": 1004, "completion_tokens": 150, "completion": "Create a function to check if a given number is a power of two.\n\n###Code: \n\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n\n###Testcases: \n\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(100) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(128) == True\n\n[/Example 4]", "temperature": 0.736, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 848, "total_tokens": 1041, "completion_tokens": 193, "completion": "Write a function to count the number of set bits (1s) in a given integer.\n\n###Code:\n\n```python\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\n\n###Testcases:\n\n```python\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(16) == 1\nassert count_set_bits(3) == 2\nassert count_set_bits(1023) == 10\nassert count_set_bits(65535) == 16\nassert count_set_bits(123456) == 5\n```\n\n[/Example 4]", "temperature": 0.718, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 857, "total_tokens": 1006, "completion_tokens": 149, "completion": "Create a function to count the number of set bits (1s) in the binary representation of a given number.\n\n###Code: \n\n```python\ndef countSetBits(num: int) -> int:\n    count = 0\n    while num:\n        num = num & (num - 1)\n        count += 1\n    return count\n```\n\n###Testcases: \n\n```python\nassert countSetBits(5) == 2\nassert countSetBits(15) == 4\nassert countSetBits(255) == 8\nassert countSetBits(7) == 3\nassert countSetBits(16) == 1\nassert countSetBits(0) == 0\n```", "temperature": 0.719, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 941, "total_tokens": 1124, "completion_tokens": 183, "completion": "Write a function to count the total number of set bits in all numbers from 1 to n.\n\n###Code: \n\n```python\ndef countSetBits(n: int) -> int:\n    count = 0\n    for i in range(1, n+1):\n        x = i\n        while x:\n            count += x & 1\n            x >>= 1\n    return count\n```\n\n###Testcases: \n\n```python\nassert countSetBits(5) == 7\nassert countSetBits(10) == 17\nassert countSetBits(15) == 28\nassert countSetBits(20) == 42\nassert countSetBits(25) == 58\nassert countSetBits(50) == 132\nassert countSetBits(100) == 314\nassert countSetBits(500) == 1559\n```", "temperature": 0.866, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 890, "total_tokens": 1046, "completion_tokens": 156, "completion": "Write a function to count the total number of set bits in all numbers from 1 to n.\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    for i in range(1, n+1):\n        x = i\n        while x:\n            count += x & 1\n            x >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(5) == 7\nassert count_set_bits(10) == 17\nassert count_set_bits(15) == 28\nassert count_set_bits(20) == 34\nassert count_set_bits(25) == 47\nassert count_set_bits(30) == 57\n\n[/Example 4]", "temperature": 0.81, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 756, "total_tokens": 932, "completion_tokens": 176, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert is_power_of_two(1) == True\nassert is_power_of_two(16) == True\nassert is_power_of_two(3) == False\nassert is_power_of_two(1024) == True\nassert is_power_of_two(0) == False\nassert is_power_of_two(15) == False\nassert is_power_of_two(128) == True\nassert is_power_of_two(255) == False\nassert is_power_of_two(512) == True\nassert is_power_of_two(31) == False\n```", "temperature": 0.748, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 718, "total_tokens": 868, "completion_tokens": 150, "completion": "Create a function to return the complement of a given number. The complement is calculated by flipping the bits of the number.\n\n###Code: \n\n```python\ndef findComplement(num: int) -> int:\n    mask = 1\n    while mask < num:\n        mask = (mask << 1) + 1\n    return num ^ mask\n```\n\n###Testcases: \n\n```python\nassert findComplement(5) == 2\nassert findComplement(10) == 5\nassert findComplement(50) == 13\nassert findComplement(0) == 1\nassert findComplement(15) == 0\nassert findComplement(255) == 0\n```", "temperature": 0.708, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 793, "total_tokens": 947, "completion_tokens": 154, "completion": "Write a function to check if the given number is a power of two.\n\n###Code: \n\n```python\ndef is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert is_power_of_two(16) == True\nassert is_power_of_two(5) == False\nassert is_power_of_two(1) == True\nassert is_power_of_two(1024) == True\nassert is_power_of_two(0) == False\nassert is_power_of_two(128) == True\nassert is_power_of_two(255) == False\nassert is_power_of_two(64) == True\n```", "temperature": 0.814, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 796, "total_tokens": 953, "completion_tokens": 157, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(1) == 1\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(100) == 3\n\n[/Example 4]", "temperature": 0.733, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 790, "total_tokens": 980, "completion_tokens": 190, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code:\n\n```python\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        n &= (n - 1)\n        count += 1\n    return count\n```\n\n###Testcases:\n\n```python\nassert count_set_bits(5) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(255) == 8\nassert count_set_bits(16) == 1\nassert count_set_bits(0) == 0\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(1023) == 10\nassert count_set_bits(4096) == 1\nassert count_set_bits(65535) == 16\n```\n\n[/Example 4]", "temperature": 0.74, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 799, "total_tokens": 949, "completion_tokens": 150, "completion": "Create a function to count the number of set bits (1s) in the binary representation of a given number.\n\n###Code:\n\n```python\ndef count_set_bits(num: int) -> int:\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n```\n\n###Testcases:\n\n```python\nassert count_set_bits(10) == 2\nassert count_set_bits(7) == 3\nassert count_set_bits(15) == 4\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(16) == 1\n```\n\n[/Example 4]", "temperature": 0.797, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 883, "total_tokens": 1058, "completion_tokens": 175, "completion": "Write a function that takes an integer as input and returns the number of bits that are set to 1 in the binary representation of that number.\n\n###Code: \n\n```python\ndef countSetBits(num: int) -> int:\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n```\n\n###Testcases: \n\n```python\nassert countSetBits(5) == 2\nassert countSetBits(15) == 4\nassert countSetBits(31) == 5\nassert countSetBits(255) == 8\nassert countSetBits(1023) == 10\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\nassert countSetBits(7) == 3\n```", "temperature": 0.79, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 832, "total_tokens": 967, "completion_tokens": 135, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code: \n\ndef count_set_bits(num: int) -> int:\n    count = 0\n    while (num):\n        count += num & 1\n        num >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(7) == 3\nassert count_set_bits(15) == 4\nassert count_set_bits(31) == 5\nassert count_set_bits(8) == 1\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\n\n[/Example 4]", "temperature": 0.877, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 732, "total_tokens": 912, "completion_tokens": 180, "completion": "Write a function to check if the given number is a power of two.\n\n###Code:\n\n```python\ndef is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases:\n\n```python\nassert is_power_of_two(1) == True\nassert is_power_of_two(16) == True\nassert is_power_of_two(3) == False\nassert is_power_of_two(64) == True\nassert is_power_of_two(0) == False\nassert is_power_of_two(128) == True\nassert is_power_of_two(255) == False\nassert is_power_of_two(1024) == True\nassert is_power_of_two(100) == False\nassert is_power_of_two(512) == True\n```\n\n[/Example 4]", "temperature": 0.862, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 807, "total_tokens": 976, "completion_tokens": 169, "completion": "Write a function to check if a given number is a power of two.\n\n###Code:\n\n```python\ndef is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases:\n\n```python\nassert is_power_of_two(1) == True\nassert is_power_of_two(2) == True\nassert is_power_of_two(16) == True\nassert is_power_of_two(3) == False\nassert is_power_of_two(0) == False\nassert is_power_of_two(64) == True\nassert is_power_of_two(15) == False\nassert is_power_of_two(128) == True\nassert is_power_of_two(1024) == True\n```\n\n[/Example 4]", "temperature": 0.745, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 810, "total_tokens": 984, "completion_tokens": 174, "completion": "Write a function that checks if a given number is a power of two.\n\n###Code: \n\ndef is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n\n###Testcases: \n\nassert is_power_of_two(16) == True\nassert is_power_of_two(5) == False\nassert is_power_of_two(1024) == True\nassert is_power_of_two(0) == False\nassert is_power_of_two(1) == True\nassert is_power_of_two(128) == True\nassert is_power_of_two(255) == False\nassert is_power_of_two(512) == True\nassert is_power_of_two(12345) == False\nassert is_power_of_two(2048) == True\n\n[/Example 4]", "temperature": 0.749, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 804, "total_tokens": 1020, "completion_tokens": 216, "completion": "Create a function to check if the nth bit of a given number is set or not.\n\n###Code: \n\n```python\ndef is_nth_bit_set(number: int, n: int) -> bool:\n    return (number & (1 << (n - 1))) != 0\n```\n\n###Testcases: \n\n```python\nassert is_nth_bit_set(5, 1) == True\nassert is_nth_bit_set(8, 3) == False\nassert is_nth_bit_set(15, 4) == True\nassert is_nth_bit_set(0, 5) == False\nassert is_nth_bit_set(17, 2) == True\nassert is_nth_bit_set(10, 1) == False\nassert is_nth_bit_set(255, 8) == True\nassert is_nth_bit_set(100, 5) == True\nassert is_nth_bit_set(3, 2) == True\nassert is_nth_bit_set(7, 3) == True\n```\n\n[/Example 4]", "temperature": 0.79, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 813, "total_tokens": 956, "completion_tokens": 143, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert is_power_of_two(16) == True\nassert is_power_of_two(5) == False\nassert is_power_of_two(64) == True\nassert is_power_of_two(0) == False\nassert is_power_of_two(1) == True\nassert is_power_of_two(1024) == True\nassert is_power_of_two(255) == False\n```", "temperature": 0.722, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 897, "total_tokens": 1200, "completion_tokens": 303, "completion": "Write a function to find the single number in an array where every element appears twice except for one.\n\n###Code: \n\n```python\ndef find_single_number(nums: List[int]) -> int:\n    result = 0\n    for num in nums:\n        result ^= num\n    return result\n```\n\n###Testcases: \n\n```python\nassert find_single_number([4, 3, 2, 4, 1, 2, 3]) == 1\nassert find_single_number([2, 2, 3, 3, 4, 5, 4]) == 5\nassert find_single_number([1, 1, 2, 2, 3, 4, 4]) == 3\nassert find_single_number([5, 7, 7]) == 5\nassert find_single_number([0, 0, 1, 1, 2, 2, 3, 4, 4]) == 3\nassert find_single_number([9, 9, 8, 8, 7, 7, 6, 6, 5]) == 5\nassert find_single_number([11, 11, 12, 12, 13, 14, 14]) == 13\nassert find_single_number([15, 16, 16, 17, 17, 18, 18]) == 15\n```", "temperature": 0.758, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 846, "total_tokens": 1021, "completion_tokens": 175, "completion": "Write a function to check if the given number is a power of two.\n\n###Code: \n\n```python\ndef is_power_of_two(n: int) -> bool:\n    return n & (n - 1) == 0 and n != 0\n```\n\n###Testcases: \n\n```python\nassert is_power_of_two(16) == True\nassert is_power_of_two(256) == True\nassert is_power_of_two(7) == False\nassert is_power_of_two(0) == False\nassert is_power_of_two(1024) == True\nassert is_power_of_two(12) == False\nassert is_power_of_two(64) == True\nassert is_power_of_two(1) == True\nassert is_power_of_two(100) == False\nassert is_power_of_two(128) == True\n```", "temperature": 0.81, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 769, "total_tokens": 929, "completion_tokens": 160, "completion": "Create a function to check if the given number is a power of two.\n\n###Code: \n\n```python\ndef is_power_of_two(num: int) -> bool:\n    if num <= 0:\n        return False\n    return (num & (num - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert is_power_of_two(1) == True\nassert is_power_of_two(16) == True\nassert is_power_of_two(3) == False\nassert is_power_of_two(128) == True\nassert is_power_of_two(0) == False\nassert is_power_of_two(15) == False\nassert is_power_of_two(1024) == True\nassert is_power_of_two(63) == False\n```", "temperature": 0.719, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 772, "total_tokens": 923, "completion_tokens": 151, "completion": "Write a function to check if a given number is a power of two.\n\n###Code:\n\n```python\ndef is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases:\n\n```python\nassert is_power_of_two(1) == True\nassert is_power_of_two(2) == True\nassert is_power_of_two(3) == False\nassert is_power_of_two(4) == True\nassert is_power_of_two(16) == True\nassert is_power_of_two(18) == False\nassert is_power_of_two(32) == True\nassert is_power_of_two(100) == False\n```", "temperature": 0.766, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 766, "total_tokens": 971, "completion_tokens": 205, "completion": "Create a function to return the bitwise AND of all numbers in a given range.\n\n###Code: \n\ndef rangeBitwiseAnd(m: int, n: int) -> int:\n    while n > m:\n        n = n & (n - 1)\n    return n\n\n###Testcases: \n\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(8, 12) == 8\nassert rangeBitwiseAnd(1, 2147483647) == 0\nassert rangeBitwiseAnd(5, 11) == 0\nassert rangeBitwiseAnd(4, 6) == 4\nassert rangeBitwiseAnd(7, 7) == 7\nassert rangeBitwiseAnd(10, 15) == 8\nassert rangeBitwiseAnd(3, 6) == 0\n\n[/Example 4]", "temperature": 0.806, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 775, "total_tokens": 907, "completion_tokens": 132, "completion": "Create a function that checks if a given number is a power of two.\n\n###Code: \n\n```python\ndef is_power_of_two(num: int) -> bool:\n    return num > 0 and (num & (num - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert is_power_of_two(4) == True\nassert is_power_of_two(16) == True\nassert is_power_of_two(3) == False\nassert is_power_of_two(0) == False\nassert is_power_of_two(1024) == True\nassert is_power_of_two(218) == False\n```", "temperature": 0.713, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 859, "total_tokens": 1013, "completion_tokens": 154, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(5) == False\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(128) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(1024) == True\n```", "temperature": 0.813, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 808, "total_tokens": 966, "completion_tokens": 158, "completion": "Write a function to check if a given number is a power of two.\n\n###Code:\n\n```python\ndef is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases:\n\n```python\nassert is_power_of_two(16) == True\nassert is_power_of_two(5) == False\nassert is_power_of_two(64) == True\nassert is_power_of_two(1) == True\nassert is_power_of_two(0) == False\nassert is_power_of_two(1024) == True\nassert is_power_of_two(255) == False\nassert is_power_of_two(128) == True\n```\n\n[/Example 4]", "temperature": 0.792, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 847, "total_tokens": 992, "completion_tokens": 145, "completion": "Write a function to check if a given number is a power of 2.\n\n###Code: \n\ndef is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n\n###Testcases: \n\nassert is_power_of_two(4) == True\nassert is_power_of_two(16) == True\nassert is_power_of_two(3) == False\nassert is_power_of_two(0) == False\nassert is_power_of_two(1024) == True\nassert is_power_of_two(15) == False\nassert is_power_of_two(64) == True\nassert is_power_of_two(1) == True", "temperature": 0.832, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 841, "total_tokens": 965, "completion_tokens": 124, "completion": "Create a function to check if the given number is even or odd using bitwise operations.\n\n###Code:\n\ndef is_even(number: int) -> bool:\n    return (number & 1) == 0\n\n###Testcases:\n\nassert is_even(10) == True\nassert is_even(77) == False\nassert is_even(0) == True\nassert is_even(255) == False\nassert is_even(100) == True\nassert is_even(33) == False\nassert is_even(4096) == True\nassert is_even(7) == False\n\n[/Example 4]", "temperature": 0.755, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 850, "total_tokens": 1004, "completion_tokens": 154, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(15) == False\nassert isPowerOfTwo(128) == True\n```", "temperature": 0.753, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 934, "total_tokens": 1304, "completion_tokens": 370, "completion": "Write a function to find the only odd occurring number in a given array of integers where all other numbers occur even times.\n\n###Code:\n\n```python\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result ^= num\n    return result\n```\n\n###Testcases:\n\n```python\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 5]) == 4\nassert findOddOccurring([8, 7, 7, 8, 8]) == 8\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == 3\nassert findOddOccurring([15, 18, 15, 18, 18, 21, 21]) == 18\nassert findOddOccurring([9, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5]) == 9\nassert findOddOccurring([11, 22, 11, 22, 11, 22, 33]) == 33\nassert findOddOccurring([100, 100, 200, 200, 300, 400, 300, 400, 500]) == 500\nassert findOddOccurring([1, 2, 2, 1, 3, 3, 4, 4, 5, 6, 6, 7, 7]) == 5\n```\n\n[/Example 4]", "temperature": 0.77, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 883, "total_tokens": 1037, "completion_tokens": 154, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef is_power_of_two(num: int) -> bool:\n    return num != 0 and (num & (num - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert is_power_of_two(4) == True\nassert is_power_of_two(16) == True\nassert is_power_of_two(7) == False\nassert is_power_of_two(64) == True\nassert is_power_of_two(0) == False\nassert is_power_of_two(1) == True\nassert is_power_of_two(1024) == True\nassert is_power_of_two(255) == False\n```", "temperature": 0.749, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 844, "total_tokens": 1040, "completion_tokens": 196, "completion": "Write a function to count the total bits set in a range of numbers from 1 to n.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n        i = 0\n        while ((1 << i) <= n):\n            i += 1\n              \n        return (n * i - (1 << i) - n + 1)\n\n###Testcases: \n\nassert countSetBits(10) == 17\nassert countSetBits(5) == 7\nassert countSetBits(15) == 35\nassert countSetBits(20) == 42\nassert countSetBits(8) == 13\nassert countSetBits(3) == 4\nassert countSetBits(25) == 57\nassert countSetBits(16) == 31\nassert countSetBits(1) == 1\nassert countSetBits(50) == 110\n\n[/Example 4]", "temperature": 0.729, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 853, "total_tokens": 1007, "completion_tokens": 154, "completion": "Create a function to check if a given number is a power of two using bitwise operations.\n\n###Code: \n\ndef is_power_of_two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n\n###Testcases: \n\nassert is_power_of_two(4) == True\nassert is_power_of_two(16) == True\nassert is_power_of_two(7) == False\nassert is_power_of_two(32) == True\nassert is_power_of_two(0) == False\nassert is_power_of_two(1) == True\nassert is_power_of_two(1024) == True\nassert is_power_of_two(1023) == False", "temperature": 0.806, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 937, "total_tokens": 1107, "completion_tokens": 170, "completion": "Write a function to count the total set bits in all numbers from 1 to n where n is a non-negative integer.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n        count = 0\n        for i in range(1, n+1):\n                count += bin(i).count('1')\n        return count\n\n###Testcases: \n\nassert countSetBits(5) == 7\nassert countSetBits(10) == 21\nassert countSetBits(0) == 0\nassert countSetBits(15) == 35\nassert countSetBits(8) == 13\nassert countSetBits(20) == 42\nassert countSetBits(3) == 4\nassert countSetBits(25) == 61\n\n[/Example 4]", "temperature": 0.714, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 886, "total_tokens": 1038, "completion_tokens": 152, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(7) == 3\nassert count_set_bits(15) == 4\nassert count_set_bits(255) == 8\nassert count_set_bits(0) == 0\nassert count_set_bits(1) == 1\nassert count_set_bits(1023) == 10\nassert count_set_bits(123456) == 5\nassert count_set_bits(17) == 2", "temperature": 0.706, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 847, "total_tokens": 1026, "completion_tokens": 179, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code:\n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases:\n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(255) == 8\nassert count_set_bits(0) == 0\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(1024) == 1\nassert count_set_bits(4096) == 1\nassert count_set_bits(65535) == 16\n\n[/Example 4]", "temperature": 0.795, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 931, "total_tokens": 1180, "completion_tokens": 249, "completion": "Given a non-empty array of integers, every element appears twice except for one. Write a function to find that single one.\n\n###Code: \n\ndef find_single_number(nums: list) -> int:\n    result = 0\n    for num in nums:\n        result ^= num\n    return result\n\n###Testcases: \n\nassert find_single_number([4, 3, 2, 4, 1, 2, 3]) == 1\nassert find_single_number([2, 2, 1]) == 1\nassert find_single_number([1, 5, 8, 5, 1]) == 8\nassert find_single_number([7, 9, 3, 9, 4, 3, 4]) == 7\nassert find_single_number([11, 11, 5, 7, 5]) == 7\nassert find_single_number([6, 6, 8, 9, 9]) == 8\nassert find_single_number([15, 12, 15]) == 12\nassert find_single_number([20, 25, 20]) == 25\n\n[/Example 4]", "temperature": 0.737, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 880, "total_tokens": 1058, "completion_tokens": 178, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code:\n\ndef count_set_bits(num: int) -> int:\n    count = 0\n    while (num):\n        count += num & 1\n        num >>= 1\n    return count\n\n###Testcases:\n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(255) == 8\nassert count_set_bits(0) == 0\nassert count_set_bits(1) == 1\nassert count_set_bits(16) == 1\nassert count_set_bits(31) == 5\nassert count_set_bits(100) == 3\nassert count_set_bits(12345) == 6\n\n[/Example 4]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 940, "total_tokens": 1100, "completion_tokens": 160, "completion": "Create a function that counts the number of set bits in a given integer.\n\n###Code: \n\n```python\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\n\n###Testcases: \n\n```python\nassert count_set_bits(5) == 2\nassert count_set_bits(8) == 1\nassert count_set_bits(15) == 4\nassert count_set_bits(16) == 1\nassert count_set_bits(255) == 8\nassert count_set_bits(100) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(1) == 1\n```", "temperature": 0.808, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 889, "total_tokens": 1040, "completion_tokens": 151, "completion": "Create a function that counts the number of set bits (1s) in the binary representation of a given number.\n\n###Code:\n\n```python\ndef count_set_bits(num: int) -> int:\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n```\n\n###Testcases:\n\n```python\nassert count_set_bits(10) == 2\nassert count_set_bits(7) == 3\nassert count_set_bits(15) == 4\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(12345) == 6\n```\n\n[/Example 4]", "temperature": 0.823, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106", "question": "Create a function to toggle the nth bit of a given number.", "code": "def toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))", "asserts": ["assert toggle_nth_bit(5, 1) == 4", "assert toggle_nth_bit(8, 3) == 12", "assert toggle_nth_bit(15, 4) == 7", "assert toggle_nth_bit(0, 5) == 16", "assert toggle_nth_bit(17, 2) == 19", "assert toggle_nth_bit(10, 1) == 11", "assert toggle_nth_bit(255, 8) == 127", "assert toggle_nth_bit(100, 5) == 116"], "author": "GPT", "UUID": "8ecdf576-067f-45ed-b180-77703cdb6453", "tc_status": [["assert toggle_nth_bit(5, 1) == 4", "Passed"], ["assert toggle_nth_bit(8, 3) == 12", "Passed"], ["assert toggle_nth_bit(15, 4) == 7", "Passed"], ["assert toggle_nth_bit(0, 5) == 16", "Passed"], ["assert toggle_nth_bit(17, 2) == 19", "Passed"], ["assert toggle_nth_bit(10, 1) == 11", "Passed"], ["assert toggle_nth_bit(255, 8) == 127", "Passed"], ["assert toggle_nth_bit(100, 5) == 116", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 973, "total_tokens": 1134, "completion_tokens": 161, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code: \n\n```python\ndef count_set_bits(num: int) -> int:\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n```\n\n###Testcases: \n\n```python\nassert count_set_bits(5) == 2\nassert count_set_bits(16) == 1\nassert count_set_bits(255) == 8\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(127) == 7\nassert count_set_bits(10) == 2\nassert count_set_bits(1023) == 10\n```", "temperature": 0.715, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 812, "total_tokens": 996, "completion_tokens": 184, "completion": "Given an integer, write a function to check if it is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(256) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(15) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(5) == False\nassert isPowerOfTwo(128) == True\n```", "temperature": 0.745, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 774, "total_tokens": 980, "completion_tokens": 206, "completion": "Given an array of integers, write a function to return the bitwise XOR of all elements in the array.\n\n###Code: \n\n```python\ndef bitwiseXOR(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n```\n\n###Testcases: \n\n```python\nassert bitwiseXOR([1, 2, 3, 4, 5]) == 1\nassert bitwiseXOR([5, 5, 5, 5, 5]) == 5\nassert bitwiseXOR([0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert bitwiseXOR([2, 3, 4, 5]) == 0\nassert bitwiseXOR([9, 8, 7, 6, 5, 4, 3, 2, 1]) == 0\n```", "temperature": 0.739, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 849, "total_tokens": 1086, "completion_tokens": 237, "completion": "Given a non-empty array of integers, every element appears three times except for one, which appears exactly once. Find that single one.\n\n###Code: \n\n```python\ndef singleNumber(nums: List[int]) -> int:\n    ones, twos = 0, 0\n    for num in nums:\n        ones = (ones ^ num) & ~twos\n        twos = (twos ^ num) & ~ones\n    return ones\n```\n\n###Testcases: \n\n```python\nassert singleNumber([2, 2, 3, 2]) == 3\nassert singleNumber([0, 1, 0, 1, 0, 1, 99]) == 99\nassert singleNumber([5, 5, 5, 8]) == 8\nassert singleNumber([10, 10, 10, 5]) == 5\nassert singleNumber([20, 30, 20, 20, 30, 30, 40]) == 40\nassert singleNumber([7, 7, 7, 4]) == 4\n```", "temperature": 0.714, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 852, "total_tokens": 1003, "completion_tokens": 151, "completion": "Write a function that returns the number of 1 bits in the binary representation of an integer.\n\n###Code: \n\ndef hammingWeight(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n = n >> 1\n    return count\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(15) == 4\nassert hammingWeight(7) == 3\nassert hammingWeight(33) == 2\n\n[/Example 4]", "temperature": 0.831, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 846, "total_tokens": 985, "completion_tokens": 139, "completion": "Given an integer, write a function to count the total number of set bits in its binary representation.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert countSetBits(10) == 2\nassert countSetBits(15) == 4\nassert countSetBits(7) == 3\nassert countSetBits(20) == 2\nassert countSetBits(31) == 5\nassert countSetBits(1) == 1\n\n[/Example 4]", "temperature": 0.78, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 855, "total_tokens": 1008, "completion_tokens": 153, "completion": "Given a non-negative integer num, write a function to convert it to its binary representation as a string.\n\n###Code: \n\n```python\ndef toBinary(num: int) -> str:\n    if num == 0:\n        return \"0\"\n    result = \"\"\n    while num > 0:\n        result = str(num % 2) + result\n        num //= 2\n    return result\n```\n\n###Testcases: \n\n```python\nassert toBinary(5) == \"101\"\nassert toBinary(16) == \"10000\"\nassert toBinary(8) == \"1000\"\nassert toBinary(0) == \"0\"\nassert toBinary(15) == \"1111\"\n```\n\n[/Example 4]", "temperature": 0.863, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 939, "total_tokens": 1092, "completion_tokens": 153, "completion": "Write a function to count the total number of set bits in all numbers from 1 to n.\n\n###Code:\n\n```python\ndef countSetBits(n: int) -> int:\n    count = 0\n    for i in range(1, n+1):\n        x = i\n        while x:\n            count += x & 1\n            x >>= 1\n    return count\n```\n\n###Testcases:\n\n```python\nassert countSetBits(5) == 7\nassert countSetBits(10) == 17\nassert countSetBits(15) == 23\nassert countSetBits(20) == 31\nassert countSetBits(25) == 38\n```\n\n[/Example 4]", "temperature": 0.829, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 888, "total_tokens": 1085, "completion_tokens": 197, "completion": "Given a non-empty array of integers, every element appears twice except for one. Write a function to find that single one.\n\n###Code: \n\n```python\ndef findSingleNumber(nums: List[int]) -> int:\n    result = 0\n    for num in nums:\n        result ^= num\n    return result\n```\n\n###Testcases: \n\n```python\nassert findSingleNumber([4, 1, 2, 1, 2]) == 4\nassert findSingleNumber([2, 2, 1]) == 1\nassert findSingleNumber([7, 3, 5, 4, 5, 3, 4]) == 7\nassert findSingleNumber([10, 10, 2, 2, 3, 4, 3]) == 4\nassert findSingleNumber([1, 1, 2, 3, 3]) == 2\n```", "temperature": 0.732, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 788, "total_tokens": 939, "completion_tokens": 151, "completion": "Write a function to swap two numbers without using a temporary variable.\n\n###Code: \n\ndef swapNumbers(a: int, b: int) -> Tuple[int, int]:\n    a = a ^ b\n    b = a ^ b\n    a = a ^ b\n    return a, b\n\n###Testcases: \n\nassert swapNumbers(5, 10) == (10, 5)\nassert swapNumbers(15, 30) == (30, 15)\nassert swapNumbers(8, 4) == (4, 8)\nassert swapNumbers(0, 7) == (7, 0)\nassert swapNumbers(255, 100) == (100, 255)\n\n[/Example 4]", "temperature": 0.716, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 863, "total_tokens": 1021, "completion_tokens": 158, "completion": "Write a function to swap two integers without using a temporary variable.\n\n###Code: \n\n```python\ndef swapWithoutTemp(a: int, b: int) -> tuple:\n    a = a ^ b\n    b = a ^ b\n    a = a ^ b\n    return a, b\n```\n\n###Testcases: \n\n```python\nassert swapWithoutTemp(5, 10) == (10, 5)\nassert swapWithoutTemp(15, 28) == (28, 15)\nassert swapWithoutTemp(100, 200) == (200, 100)\nassert swapWithoutTemp(0, 0) == (0, 0)\nassert swapWithoutTemp(255, 127) == (127, 255)\n```", "temperature": 0.767, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 866, "total_tokens": 1099, "completion_tokens": 233, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers in the range [a, b] (inclusive).\n\n###Code: \n\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n\n###Testcases: \n\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(1, 2147483647) == 0\nassert rangeBitwiseAnd(16, 19) == 16\nassert rangeBitwiseAnd(10, 11) == 10\nassert rangeBitwiseAnd(23, 26) == 16\nassert rangeBitwiseAnd(153, 169) == 128\nassert rangeBitwiseAnd(200, 205) == 192\nassert rangeBitwiseAnd(3, 5) == 0\nassert rangeBitwiseAnd(8, 10) == 8\n\n[/Example 4]", "temperature": 0.807, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 860, "total_tokens": 1205, "completion_tokens": 345, "completion": "Given an array of integers, write a function to find two non-repeating numbers where every other number repeats twice.\n\n###Code: \n\ndef findNonRepeating(arr: list) -> list:\n    xor_result = 0\n    for num in arr:\n        xor_result = xor_result ^ num\n    \n    # Find the rightmost set bit in xor_result\n    rightmost_set_bit = xor_result & -xor_result\n    \n    # Initialize the result\n    res1 = 0\n    res2 = 0\n    \n    # Divide the numbers into two groups based on the rightmost set bit\n    for num in arr:\n        if num & rightmost_set_bit:\n            res1 = res1 ^ num\n        else:\n            res2 = res2 ^ num\n    \n    return [res1, res2]\n\n###Testcases: \n\nassert findNonRepeating([2, 4, 7, 9, 2, 4]) == [7, 9]\nassert findNonRepeating([1, 2, 3, 2, 3, 4]) == [1, 4]\nassert findNonRepeating([4, 5, 4, 5, 6, 7, 8, 8]) == [6, 7]\nassert findNonRepeating([10, 20, 30, 40, 30, 20, 10, 50, 50, 60]) == [40, 60]\nassert findNonRepeating([11, 22, 33, 44, 22, 33]) == [11, 44]\n\n[/Example 4]", "temperature": 0.847, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 869, "total_tokens": 1002, "completion_tokens": 133, "completion": "Write a function to check if a given number is a power of 2.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(15) == False\n```", "temperature": 0.756, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 953, "total_tokens": 1220, "completion_tokens": 267, "completion": "Find the single number that appears only once in an array where every other element occurs three times.\n\n###Code: \n\n```python\ndef singleNumber(arr: list) -> int:\n    ones = 0\n    twos = 0\n    for num in arr:\n        ones = (ones ^ num) & ~twos\n        twos = (twos ^ num) & ~ones\n    return ones\n```\n\n###Testcases: \n\n```python\nassert singleNumber([1, 1, 1, 2, 2, 2, 3]) == 3\nassert singleNumber([4, 4, 4, 5, 5, 5, 6]) == 6\nassert singleNumber([7, 7, 7, 8, 8, 8, 9]) == 9\nassert singleNumber([10, 10, 10, 11, 11, 11, 12]) == 12\nassert singleNumber([13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21]) == 21\n```", "temperature": 0.794, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 902, "total_tokens": 1134, "completion_tokens": 232, "completion": "Write a function to check if the kth bit is set in a given number\n\n###Code: \n\n```python\ndef is_kth_bit_set(n: int, k: int) -> bool:\n    if n & (1 << (k - 1)):\n        return True\n    else:\n        return False\n```\n\n###Testcases: \n\n```python\nassert is_kth_bit_set(5, 1) == True\nassert is_kth_bit_set(5, 2) == False\nassert is_kth_bit_set(10, 2) == True\nassert is_kth_bit_set(10, 4) == False\nassert is_kth_bit_set(0, 1) == False\nassert is_kth_bit_set(15, 4) == True\nassert is_kth_bit_set(255, 8) == True\nassert is_kth_bit_set(7, 3) == True\nassert is_kth_bit_set(16, 5) == False\nassert is_kth_bit_set(3, 2) == True\n```\n\n[/Example 4]", "temperature": 0.822, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 825, "total_tokens": 1214, "completion_tokens": 389, "completion": "Given an array of integers, write a function to find the maximum XOR value between two numbers in the array.\n\n###Code:\n\n```python\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        \nclass Solution:\n    def findMaximumXOR(self, nums: List[int]) -> int:\n        L = len(bin(max(nums))) - 2\n        nums = [[(num >> i) & 1 for i in range(L)][::-1] for num in nums]\n        root = TrieNode()\n        ans = 0\n        for num in nums:\n            node = root\n            xorNode = root\n            cur_xor = 0\n            for bit in num:\n                if bit not in node.children:\n                    node.children[bit] = TrieNode()\n                node = node.children[bit]\n                \n                toggled_bit = 1 - bit\n                if toggled_bit in xorNode.children:\n                    cur_xor = (cur_xor << 1) | 1\n                    xorNode = xorNode.children[toggled_bit]\n                else:\n                    cur_xor = cur_xor << 1\n                    xorNode = xorNode.children[bit]\n                    \n            ans = max(ans, cur_xor)\n        return ans\n```\n\n###Testcases:\n\n```python\nassert Solution().findMaximumXOR([3, 10, 5, 25, 2, 8]) == 28\nassert Solution().findMaximumXOR([8, 10, 2]) == 10\nassert Solution().findMaximumXOR([14, 70, 53, 83, 49, 91]) == 127\nassert Solution().findMaximumXOR([32, 18, 33, 42, 29, 20, 26, 36, 15, 46]) == 63\n```\n\n[/Example 4]", "temperature": 0.886, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 828, "total_tokens": 1007, "completion_tokens": 179, "completion": "Given two integers, write a function to find the bitwise AND of all numbers between them, inclusive.\n\n###Code: \n\ndef rangeBitwiseAnd(m: int, n: int) -> int:\n    while n > m:\n        n = n & (n - 1)\n    return n\n\n###Testcases: \n\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(1, 2147483647) == 0\nassert rangeBitwiseAnd(4, 6) == 4\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(9, 12) == 8\nassert rangeBitwiseAnd(600, 800) == 512\n\n[/Example 4]", "temperature": 0.789, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 822, "total_tokens": 974, "completion_tokens": 152, "completion": "Create a function that swaps two integers without using a temporary variable.\n\n###Code: \n\ndef swapIntegers(a: int, b: int) -> (int, int):\n    a = a ^ b\n    b = a ^ b\n    a = a ^ b\n    return a, b\n\n###Testcases: \n\nassert swapIntegers(5, 10) == (10, 5)\nassert swapIntegers(100, 200) == (200, 100)\nassert swapIntegers(0, 0) == (0, 0)\nassert swapIntegers(-5, 5) == (5, -5)\nassert swapIntegers(256, 512) == (512, 256)", "temperature": 0.84, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 831, "total_tokens": 1039, "completion_tokens": 208, "completion": "Given a non-empty array of integers, every element appears three times except for one, which appears exactly once. Find that single one.\n\n###Code: \n\n```python\ndef singleNumber(nums: List[int]) -> int:\n    ones, twos = 0, 0\n    for num in nums:\n        ones = (ones ^ num) & ~twos\n        twos = (twos ^ num) & ~ones\n    return ones\n```\n\n###Testcases: \n\n```python\nassert singleNumber([2, 2, 3, 2]) == 3\nassert singleNumber([0, 1, 0, 1, 0, 1, 99]) == 99\nassert singleNumber([-2, -2, 1, 1, -3, 1, -3, -3, -4, -2]) == -4\nassert singleNumber([5, 7, 5, 5]) == 7\n```", "temperature": 0.881, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 915, "total_tokens": 1047, "completion_tokens": 132, "completion": "Write a function to check if a given number is a power of 2.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(12) == False\nassert isPowerOfTwo(128) == True\n```", "temperature": 0.752, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 864, "total_tokens": 1034, "completion_tokens": 170, "completion": "Given an array of integers, find the bitwise AND of all elements.\n\n###Code: \n\n```python\ndef bitwise_and(nums: List[int]) -> int:\n    result = nums[0]\n    for num in nums[1:]:\n        result &= num\n    return result\n```\n\n###Testcases:\n\n```python\nassert bitwise_and([5, 7, 9, 11]) == 1\nassert bitwise_and([3, 5, 8, 6, 2]) == 0\nassert bitwise_and([16, 8, 4, 2, 1]) == 0\nassert bitwise_and([10, 12, 14, 8, 6]) == 0\nassert bitwise_and([7, 3, 5, 1]) == 1\n```", "temperature": 0.746, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 903, "total_tokens": 1055, "completion_tokens": 152, "completion": "Given an integer, write a function to check if it is a power of two.\n\n###Code: \n\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n\n###Testcases: \n\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(32) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(100) == False\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(255) == False\n\n[/Example 4]", "temperature": 0.702, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 897, "total_tokens": 1133, "completion_tokens": 236, "completion": "Given an integer n, write a function to return the next power of 2 greater than or equal to n.\n\n###Code:\n\n```python\ndef nextPowerOfTwo(n: int) -> int:\n    count = 0\n    \n    if (n and not(n & (n - 1))):\n        return n\n    \n    while (n != 0):\n        n >>= 1\n        count += 1\n    \n    return 1 << count\n```\n\n###Testcases:\n\n```python\nassert nextPowerOfTwo(5) == 8\nassert nextPowerOfTwo(16) == 16\nassert nextPowerOfTwo(31) == 32\nassert nextPowerOfTwo(255) == 256\nassert nextPowerOfTwo(1024) == 1024\nassert nextPowerOfTwo(1000) == 1024\nassert nextPowerOfTwo(1) == 1\nassert nextPowerOfTwo(0) == 1\nassert nextPowerOfTwo(1023) == 1024\nassert nextPowerOfTwo(65535) == 65536\n```\n\n[/Example 4]", "temperature": 0.877, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 906, "total_tokens": 1041, "completion_tokens": 135, "completion": "Find if a given number is a power of two using bitwise operations.\n\n###Code:\n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases:\n\n```python\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(10) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(0) == False\n```\n\n[/Example 4]", "temperature": 0.85, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 990, "total_tokens": 1283, "completion_tokens": 293, "completion": "Given a non-empty array of integers, every element appears three times except for one, which appears exactly once. Find that single one.\n\n###Code: \n\n```python\ndef singleNumber(nums: list) -> int:\n    ones = 0\n    twos = 0\n    for num in nums:\n        ones = (ones ^ num) & ~twos\n        twos = (twos ^ num) & ~ones\n    return ones\n```\n\n###Testcases: \n\n```python\nassert singleNumber([2, 2, 3, 2]) == 3\nassert singleNumber([0, 1, 0, 1, 0, 1, 99]) == 99\nassert singleNumber([5, 7, 5, 5]) == 7\nassert singleNumber([-2, -2, 1, 1, -3, 1, -3, -3, -4, -2]) == -4\nassert singleNumber([10, 10, 3, 10]) == 3\nassert singleNumber([20, 20, 20, 15]) == 15\nassert singleNumber([8, 8, 8, 2]) == 2\nassert singleNumber([30, 30, 4, 30, 4, 4, 8]) == 8\n```", "temperature": 0.795, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 939, "total_tokens": 1166, "completion_tokens": 227, "completion": "Given a non-empty array of integers, every element appears three times except for one, which appears exactly once. Find that single one.\n\n###Code: \n\n```python\ndef singleNumber(nums: List[int]) -> int:\n    ones, twos = 0, 0\n    for num in nums:\n        ones = (ones ^ num) & ~twos\n        twos = (twos ^ num) & ~ones\n    return ones\n```\n\n###Testcases: \n\n```python\nassert singleNumber([2, 2, 3, 2]) == 3\nassert singleNumber([0, 1, 0, 1, 0, 1, 99]) == 99\nassert singleNumber([-2, -2, 1, 1, -3, 1, -3, -3, -4, -2]) == -4\nassert singleNumber([5, 5, 5, 3]) == 3\nassert singleNumber([10, 20, 20, 20]) == 10\n```", "temperature": 0.71, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 900, "total_tokens": 1097, "completion_tokens": 197, "completion": "Given two integers, write a function to find the bitwise AND of all the numbers in the range between the two integers (inclusive).\n\n###Code: \n\ndef rangeBitwiseAnd(m: int, n: int) -> int:\n    while n > m:\n        n = n & (n - 1)\n    return n\n\n###Testcases: \n\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(4, 5) == 4\nassert rangeBitwiseAnd(7, 15) == 0\nassert rangeBitwiseAnd(8, 12) == 8\nassert rangeBitwiseAnd(10, 25) == 8\nassert rangeBitwiseAnd(17, 18) == 16\nassert rangeBitwiseAnd(600, 700) == 0\n\n[/Example 4]", "temperature": 0.875, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 909, "total_tokens": 1043, "completion_tokens": 134, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code: \n\ndef countSetBits(num: int) -> int:\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n\n###Testcases: \n\nassert countSetBits(10) == 2\nassert countSetBits(15) == 4\nassert countSetBits(7) == 3\nassert countSetBits(255) == 8\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\n\n[/Example 4]", "temperature": 0.891, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 993, "total_tokens": 1336, "completion_tokens": 343, "completion": "Given an integer array, find the maximum XOR of any two elements.\n\n###Code: \n\ndef findMaxXOR(nums: List[int]) -> int:\n    max_xor = 0\n    mask = 0\n    for i in range(31, -1, -1):\n        mask |= 1 << i\n        prefixes = {num & mask for num in nums}\n        temp = max_xor | 1 << i\n        for prefix in prefixes:\n            if temp ^ prefix in prefixes:\n                max_xor = temp\n                break\n    return max_xor\n\n###Testcases: \n\nassert findMaxXOR([3, 10, 5, 25, 2, 8]) == 28\nassert findMaxXOR([8, 10, 2]) == 10\nassert findMaxXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127\nassert findMaxXOR([1, 2, 4, 8]) == 12\nassert findMaxXOR([0, 1, 3, 7, 8, 12, 17, 19, 23]) == 26\nassert findMaxXOR([5, 25, 3, 10, 2, 8]) == 28\nassert findMaxXOR([1, 2, 3, 4]) == 7\nassert findMaxXOR([0, 0, 0, 0]) == 0\n\n[/Example 4]", "temperature": 0.725, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 942, "total_tokens": 1225, "completion_tokens": 283, "completion": "Given an array of integers, write a function to find two numbers in the array that have opposite signs when represented in binary.\n\n###Code: \n\ndef oppositeSigns(arr: list) -> (int, int):\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] ^ arr[j] < 0:\n                return (arr[i], arr[j])\n    return None\n\n###Testcases: \n\nassert oppositeSigns([2, 4, -3, 5, -6, 8]) == (3, -3)\nassert oppositeSigns([1, -2, 3, -4, 5, -6, 7, -8]) == (2, -2)\nassert oppositeSigns([10, 20, 30, -40, -50, -60, 70, 80]) == (30, -40)\nassert oppositeSigns([0, 0, 0, 0, 0, 0, 0, 0]) == None\nassert oppositeSigns([1, -1, 2, -2]) == (1, -1)\nassert oppositeSigns([3, 5, 6, 7, -3, -5, -6, -7]) == (3, -3)\n\n[/Example 4]", "temperature": 0.848, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 903, "total_tokens": 1088, "completion_tokens": 185, "completion": "Given a non-empty array of integers, every element appears three times except for one, which appears exactly once. Find that single one.\n\n###Code: \n\ndef singleNumber(nums: list) -> int:\n    ones, twos = 0, 0\n    for num in nums:\n        ones = (ones ^ num) & ~twos\n        twos = (twos ^ num) & ~ones\n    return ones\n\n###Testcases: \n\nassert singleNumber([2, 2, 3, 2]) == 3\nassert singleNumber([3, 4, 3, 3]) == 4\nassert singleNumber([0, 1, 0, 1, 0, 1, 99]) == 99\nassert singleNumber([10, 10, 10, 5]) == 5\n\n[/Example 4]", "temperature": 0.876, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 987, "total_tokens": 1135, "completion_tokens": 148, "completion": "Find the total number of set bits in all numbers from 1 to n.\n\n###Code:\n\ndef countSetBits(n: int) -> int:\n    count = 0\n    for i in range(1, n+1):\n        count += bin(i).count('1')\n    return count\n\n###Testcases:\n\nassert countSetBits(5) == 7\nassert countSetBits(10) == 17\nassert countSetBits(15) == 28\nassert countSetBits(20) == 42\nassert countSetBits(25) == 58\nassert countSetBits(30) == 75\nassert countSetBits(50) == 132\n\n[/Example 4]", "temperature": 0.701, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 936, "total_tokens": 1094, "completion_tokens": 158, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code: \n\ndef countSetBits(num: int) -> int:\n    count = 0\n    while (num):\n        count += num & 1\n        num >>= 1\n    return count\n\n\n###Testcases: \n\nassert countSetBits(10) == 2\nassert countSetBits(7) == 3\nassert countSetBits(15) == 4\nassert countSetBits(31) == 5\nassert countSetBits(1) == 1\nassert countSetBits(255) == 8\nassert countSetBits(0) == 0\nassert countSetBits(1023) == 10\n\n[/Example 4]", "temperature": 0.831, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 996, "total_tokens": 1174, "completion_tokens": 178, "completion": "Given two integers, write a function to return the hamming distance between the two integers. The hamming distance is the number of positions at which the corresponding bits are different.\n\n###Code:\n\n```python\ndef hammingDistance(x: int, y: int) -> int:\n    xor_result = x ^ y\n    distance = 0\n    while xor_result:\n        distance += xor_result & 1\n        xor_result = xor_result >> 1\n    return distance\n```\n\n###Testcases:\n\n```python\nassert hammingDistance(1, 4) == 2\nassert hammingDistance(6, 8) == 3\nassert hammingDistance(0, 15) == 4\nassert hammingDistance(7, 7) == 0\nassert hammingDistance(99, 121) == 5\n```", "temperature": 0.856, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 945, "total_tokens": 1076, "completion_tokens": 131, "completion": "Write a function that returns the number of 1 bits in the binary representation of an integer.\n\n###Code: \n\n```python\ndef countSetBits(num: int) -> int:\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n```\n\n###Testcases: \n\n```python\nassert countSetBits(7) == 3\nassert countSetBits(15) == 4\nassert countSetBits(31) == 5\nassert countSetBits(255) == 8\nassert countSetBits(0) == 0\n```", "temperature": 0.876, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106", "question": "Find the only odd occurring element in an array where every other element occurs even number of times.", "code": "def findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result", "asserts": ["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7"], "author": "GPT", "UUID": "d31cf754-74c2-47a5-b49b-2ecae65134ee", "tc_status": [["assert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1", "Passed"], ["assert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1", "Passed"], ["assert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40", "Passed"], ["assert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 1029, "total_tokens": 1200, "completion_tokens": 171, "completion": "Write a function to count the total number of set bits in all numbers from 1 to n.\n\n###Code: \n\n```python\ndef countSetBits(n: int) -> int:\n    count = 0\n    x = 1\n    while x <= n:\n        for i in range(n+1):\n            if i & x:\n                count += 1\n        x = x << 1\n    return count\n```\n\n###Testcases: \n\n```python\nassert countSetBits(5) == 7\nassert countSetBits(10) == 17\nassert countSetBits(15) == 24\nassert countSetBits(20) == 31\nassert countSetBits(0) == 0   # Additional test case with 0 as input\n```\n\n[/Example 4]", "temperature": 0.828, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 730, "total_tokens": 900, "completion_tokens": 170, "completion": "Given two integers a and b, write a function to return the bitwise OR of all numbers between a and b (inclusive).\n\n###Code: \n\n```python\ndef rangeBitwiseOr(a: int, b: int) -> int:\n    while b > a:\n        b = b | (b - 1)\n    return b\n```\n\n###Testcases: \n\n```python\nassert rangeBitwiseOr(5, 7) == 7\nassert rangeBitwiseOr(0, 1) == 1\nassert rangeBitwiseOr(12, 15) == 15\nassert rangeBitwiseOr(8, 11) == 11\nassert rangeBitwiseOr(3, 3) == 3\nassert rangeBitwiseOr(0, 15) == 15\n```", "temperature": 0.759, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 805, "total_tokens": 980, "completion_tokens": 175, "completion": "Write a function to check if a given integer is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(15) == False\nassert isPowerOfTwo(128) == True\nassert isPowerOfTwo(100) == False\nassert isPowerOfTwo(256) == True\nassert isPowerOfTwo(255) == False\n```", "temperature": 0.819, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 808, "total_tokens": 1062, "completion_tokens": 254, "completion": "Given an array of integers, write a function to find the element which appears once while all other elements appear thrice. Assume that the array will always have only one element that appears once and all other elements appear thrice.\n\n###Code: \n\ndef singleNumber(nums: List[int]) -> int:\n        ones, twos = 0, 0\n        for num in nums:\n            ones = (ones ^ num) & ~twos\n            twos = (twos ^ num) & ~ones\n        return ones\n\n###Testcases: \n\nassert singleNumber([3, 3, 3, 2, 2, 2, 1]) == 1\nassert singleNumber([5, 5, 5, 8, 8, 8, 7]) == 7\nassert singleNumber([10, 10, 10, 15, 15, 15, 20]) == 20\nassert singleNumber([6, 6, 6, 4, 4, 4, 9]) == 9\nassert singleNumber([1, 1, 1, 2, 2, 2, 4]) == 4\n\n", "temperature": 0.732, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 802, "total_tokens": 976, "completion_tokens": 174, "completion": "Write a function to swap two integers without using a temporary variable.\n\n###Code: \n\ndef swap_without_temp(a: int, b: int) -> (int, int):\n    a = a ^ b\n    b = a ^ b\n    a = a ^ b\n    return a, b\n\n###Testcases: \n\nassert swap_without_temp(5, 7) == (7, 5)\nassert swap_without_temp(10, 20) == (20, 10)\nassert swap_without_temp(100, 200) == (200, 100)\nassert swap_without_temp(0, 0) == (0, 0)\nassert swap_without_temp(1, 2) == (2, 1)\nassert swap_without_temp(255, 0) == (0, 255)\n\n[/Example 4]", "temperature": 0.78, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 811, "total_tokens": 924, "completion_tokens": 113, "completion": "Write a function to toggle the nth bit of a given integer.\n\n###Code:\n\n```python\ndef toggle_nth_bit(num: int, n: int) -> int:\n    return num ^ (1 << (n - 1))\n```\n\n###Testcases:\n\n```python\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 4) == 12\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(15, 2) == 13\n```", "temperature": 0.865, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 895, "total_tokens": 1032, "completion_tokens": 137, "completion": "Write a function to toggle the nth bit of a given integer.\n\n###Code:\n\n```python\ndef toggle_nth_bit(num: int, n: int) -> int:\n    return num ^ (1 << n)\n```\n\n###Testcases:\n\n```python\nassert toggle_nth_bit(5, 1) == 7\nassert toggle_nth_bit(10, 2) == 14\nassert toggle_nth_bit(3, 0) == 2\nassert toggle_nth_bit(8, 3) == 0\nassert toggle_nth_bit(16, 4) == 0\nassert toggle_nth_bit(7, 2) == 3\n```", "temperature": 0.815, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 844, "total_tokens": 1020, "completion_tokens": 176, "completion": "Write a function to check if the given number is a power of two.\n\n###Code: \n\n```python\ndef is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert is_power_of_two(1) == True\nassert is_power_of_two(16) == True\nassert is_power_of_two(3) == False\nassert is_power_of_two(64) == True\nassert is_power_of_two(0) == False\nassert is_power_of_two(1024) == True\nassert is_power_of_two(15) == False\nassert is_power_of_two(128) == True\nassert is_power_of_two(255) == False\nassert is_power_of_two(512) == True\n```", "temperature": 0.708, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 767, "total_tokens": 906, "completion_tokens": 139, "completion": "Given an integer, write a function to check if it is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(4) == True\nassert isPowerOfTwo(15) == False\nassert isPowerOfTwo(32) == True\n```", "temperature": 0.829, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 770, "total_tokens": 909, "completion_tokens": 139, "completion": "Write a function to check if a given number is a power of two.\n\n###Code:\n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    if n <= 0:\n        return False\n    else:\n        return (n & (n - 1)) == 0\n```\n\n###Testcases:\n\n```python\nassert isPowerOfTwo(4) == True\nassert isPowerOfTwo(7) == False\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(1024) == True\n```", "temperature": 0.794, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 764, "total_tokens": 925, "completion_tokens": 161, "completion": "Write a function to swap two integers without using a temporary variable.\n\n###Code: \n\ndef swapIntegers(a: int, b: int) -> (int, int):\n    a = a ^ b\n    b = a ^ b\n    a = a ^ b\n    return a, b\n\n###Testcases: \n\nassert swapIntegers(5, 7) == (7, 5)\nassert swapIntegers(10, 20) == (20, 10)\nassert swapIntegers(0, 0) == (0, 0)\nassert swapIntegers(15, 255) == (255, 15)\nassert swapIntegers(1024, 4096) == (4096, 1024)\n\n[/Example 4]", "temperature": 0.798, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 773, "total_tokens": 939, "completion_tokens": 166, "completion": "Given a non-negative integer num, write a function to return the complement of num (bitwise complement). The complement of a number is the number that results from flipping all the bits of the input.\n\n###Code: \n\n```python\ndef findComplement(num: int) -> int:\n    bit_length = num.bit_length()\n    all_ones = (1 << bit_length) - 1\n    return num ^ all_ones\n```\n\n###Testcases: \n\n```python\nassert findComplement(5) == 2\nassert findComplement(10) == 5\nassert findComplement(0) == 1\nassert findComplement(7) == 0\nassert findComplement(2) == 1\nassert findComplement(15) == 0\n```", "temperature": 0.74, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 857, "total_tokens": 1084, "completion_tokens": 227, "completion": "Given an integer, write a function to return the next smaller number with the same number of set bits in its binary representation. If no such number exists, return -1.\n\n###Code: \n\n```python\ndef nextSmallerSameBits(num: int) -> int:\n    count = bin(num).count('1')\n    next_num = num - 1\n    while bin(next_num).count('1') != count:\n        next_num -= 1\n        if next_num < 0:\n            return -1\n    return next_num\n```\n\n###Testcases: \n\n```python\nassert nextSmallerSameBits(6) == 5\nassert nextSmallerSameBits(12) == 10\nassert nextSmallerSameBits(18) == 17\nassert nextSmallerSameBits(22) == 20\nassert nextSmallerSameBits(56) == 52\nassert nextSmallerSameBits(80) == 72\nassert nextSmallerSameBits(100) == 92\nassert nextSmallerSameBits(128) == 64\n```", "temperature": 0.771, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 806, "total_tokens": 943, "completion_tokens": 137, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(128) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(15) == False\n```", "temperature": 0.84, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 845, "total_tokens": 997, "completion_tokens": 152, "completion": "Given an integer, write a function to check if it is a power of two.\n\n###Code: \n\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n\n###Testcases: \n\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(128) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(15) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(218) == False\n\n[/Example 4]", "temperature": 0.872, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 839, "total_tokens": 1010, "completion_tokens": 171, "completion": "Write a function to swap two integers without using a temporary variable.\n\n###Code: \n\ndef swapWithoutTemp(a: int, b: int) -> tuple:\n    a = a ^ b\n    b = a ^ b\n    a = a ^ b\n    return a, b\n\n###Testcases: \n\nassert swapWithoutTemp(5, 7) == (7, 5)\nassert swapWithoutTemp(10, 20) == (20, 10)\nassert swapWithoutTemp(3, 3) == (3, 3)\nassert swapWithoutTemp(115, 87) == (87, 115)\nassert swapWithoutTemp(0, 15) == (15, 0)\nassert swapWithoutTemp(255, 0) == (0, 255)\n\n[/Example 4]", "temperature": 0.862, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 848, "total_tokens": 967, "completion_tokens": 119, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    return n & (n - 1) == 0 and n != 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(128) == True\n```", "temperature": 0.889, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 932, "total_tokens": 1157, "completion_tokens": 225, "completion": "Given a non-empty array of integers, every element appears twice except for one. Write a function to find that single one.\n\n###Code: \n\n```python\ndef findSingleNumber(nums: List[int]) -> int:\n    result = 0\n    for num in nums:\n        result ^= num\n    return result\n```\n\n###Testcases: \n\n```python\nassert findSingleNumber([4, 3, 2, 4, 1, 2, 3]) == 1\nassert findSingleNumber([2, 2, 1]) == 1\nassert findSingleNumber([1, 1, 2, 3, 2]) == 3\nassert findSingleNumber([4, 5, 4]) == 5\nassert findSingleNumber([7, 3, 5, 3, 7]) == 5\nassert findSingleNumber([9, 8, 8]) == 9\nassert findSingleNumber([6, 6, 7, 7, 8]) == 8\n```", "temperature": 0.745, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 881, "total_tokens": 1019, "completion_tokens": 138, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(256) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(15) == False\nassert isPowerOfTwo(1024) == True\n```", "temperature": 0.859, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 842, "total_tokens": 1157, "completion_tokens": 315, "completion": "Given an array of integers, write a function to find the bitwise AND of all elements.\n\n###Code: \n\ndef bitwiseAndOfArray(arr: List[int]) -> int:\n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = result & arr[i]\n    return result\n\n###Testcases: \n\nassert bitwiseAndOfArray([5, 7, 12, 9, 10]) == 0\nassert bitwiseAndOfArray([8, 16, 24, 12, 4]) == 0\nassert bitwiseAndOfArray([10, 15, 25, 30, 20]) == 8\nassert bitwiseAndOfArray([3, 6, 9, 12, 15]) == 0\nassert bitwiseAndOfArray([7, 14, 21, 28, 35]) == 0\nassert bitwiseAndOfArray([1, 2, 3, 4, 5]) == 0\nassert bitwiseAndOfArray([2, 4, 8, 16, 32]) == 0\nassert bitwiseAndOfArray([3, 5, 7, 9, 11]) == 1\nassert bitwiseAndOfArray([1, 3, 5, 7, 9]) == 1\nassert bitwiseAndOfArray([128, 64, 32, 16, 8]) == 0\n\n[/Example 4]", "temperature": 0.82, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 851, "total_tokens": 1003, "completion_tokens": 152, "completion": "Write a function that counts the number of set bits (bits with value 1) in a given integer.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert countSetBits(10) == 2\nassert countSetBits(15) == 4\nassert countSetBits(7) == 3\nassert countSetBits(32) == 1\nassert countSetBits(0) == 0\nassert countSetBits(255) == 8\nassert countSetBits(511) == 9\n\n[/Example 4]", "temperature": 0.711, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 935, "total_tokens": 1186, "completion_tokens": 251, "completion": "Given a non-empty array of integers, every element appears three times except for one, which appears exactly once. Find that single one.\n\n###Code: \n\ndef singleNumber(nums: list) -> int:\n        ones = 0\n        twos = 0\n        for num in nums:\n            ones = (ones ^ num) & ~twos\n            twos = (twos ^ num) & ~ones\n        return ones\n\n###Testcases: \n\nassert singleNumber([2, 2, 3, 2]) == 3\nassert singleNumber([0, 1, 0, 1, 0, 1, 99]) == 99\nassert singleNumber([1, 1, 5, 1]) == 5\nassert singleNumber([4, 1, 2, 1, 2, 1, 2]) == 4\nassert singleNumber([-2, -2, 1, 1, -3, 1, -3, -3, -4, -2]) == -4\nassert singleNumber([7, 7, 7, 8]) == 8\n\n[/Example 4]", "temperature": 0.769, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 884, "total_tokens": 1087, "completion_tokens": 203, "completion": "Given an array of integers, write a function to find the bitwise AND of all elements in the array.\n\n###Code:\n\ndef arrayBitwiseAnd(nums: List[int]) -> int:\n    result = nums[0]\n    for i in range(1, len(nums)):\n        result &= nums[i]\n    return result\n\n###Testcases:\n\nassert arrayBitwiseAnd([5, 7, 8, 3]) == 0\nassert arrayBitwiseAnd([12, 15, 20, 25]) == 8\nassert arrayBitwiseAnd([1, 2, 3, 4, 5]) == 0\nassert arrayBitwiseAnd([6, 9, 12, 15]) == 0\nassert arrayBitwiseAnd([3, 3, 3, 3, 3]) == 3\nassert arrayBitwiseAnd([0, 15, 255]) == 0\n\n[/Example 4]", "temperature": 0.732, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 845, "total_tokens": 986, "completion_tokens": 141, "completion": "Write a function to count the number of set bits (bits with value 1) in a given integer.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert countSetBits(10) == 2\nassert countSetBits(7) == 3\nassert countSetBits(15) == 4\nassert countSetBits(16) == 1\nassert countSetBits(255) == 8\nassert countSetBits(3) == 2\n\n[/Example 4]", "temperature": 0.774, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 929, "total_tokens": 1104, "completion_tokens": 175, "completion": "Given a non-negative integer num, write a function to count the number of 1 bits in its binary representation.\n\n###Code:\n\ndef hammingWeight(num: int) -> int:\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n\n###Testcases:\n\nassert hammingWeight(11) == 3\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(15) == 4\nassert hammingWeight(31) == 5\nassert hammingWeight(1023) == 10\nassert hammingWeight(65535) == 16\n\n[/Example 4]", "temperature": 0.831, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 878, "total_tokens": 1093, "completion_tokens": 215, "completion": "Given an array of integers, write a function to find the bitwise AND of all the elements in the array.\n\n###Code: \n\ndef arrayBitwiseAnd(arr: List[int]) -> int:\n    min_val = min(arr)\n    result = min_val\n    for num in arr:\n        result &= num\n    return result\n\n\n###Testcases: \n\nassert arrayBitwiseAnd([5, 7, 8, 4]) == 4\nassert arrayBitwiseAnd([10, 12, 8, 3, 14]) == 0\nassert arrayBitwiseAnd([3, 3, 3, 3]) == 3\nassert arrayBitwiseAnd([1, 2, 3, 4, 5]) == 0\nassert arrayBitwiseAnd([9, 12, 15, 6, 3]) == 0\nassert arrayBitwiseAnd([8, 8, 8, 8, 8]) == 8\n\n[/Example 4]", "temperature": 0.818, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 938, "total_tokens": 1107, "completion_tokens": 169, "completion": "Given a non-empty array of integers, every element appears twice except for one. Write a function to find that single one.\n\n###Code: \n\n```python\ndef singleNumber(nums: List[int]) -> int:\n    result = 0\n    for num in nums:\n        result ^= num\n    return result\n```\n\n###Testcases: \n\n```python\nassert singleNumber([4, 3, 2, 4, 1, 2, 3]) == 1\nassert singleNumber([2, 2, 3, 1, 3]) == 1\nassert singleNumber([7, 3, 5, 4, 5, 3, 4]) == 7\nassert singleNumber([2, 2, 1]) == 1\n```", "temperature": 0.74, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 887, "total_tokens": 1023, "completion_tokens": 136, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code:\n\n```python\ndef count_set_bits(num: int) -> int:\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n```\n\n###Testcases:\n\n```python\nassert count_set_bits(7) == 3\nassert count_set_bits(15) == 4\nassert count_set_bits(31) == 5\nassert count_set_bits(8) == 1\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\n```", "temperature": 0.79, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).", "code": "def rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b", "asserts": ["assert rangeBitwiseAnd(5, 7) == 4", "assert rangeBitwiseAnd(0, 1) == 0", "assert rangeBitwiseAnd(12, 15) == 12", "assert rangeBitwiseAnd(8, 11) == 8", "assert rangeBitwiseAnd(3, 3) == 3", "assert rangeBitwiseAnd(0, 15) == 0"], "author": "GPT", "UUID": "5fd63fdf-495b-4296-8372-71e9994369d1", "tc_status": [["assert rangeBitwiseAnd(5, 7) == 4", "Passed"], ["assert rangeBitwiseAnd(0, 1) == 0", "Passed"], ["assert rangeBitwiseAnd(12, 15) == 12", "Passed"], ["assert rangeBitwiseAnd(8, 11) == 8", "Passed"], ["assert rangeBitwiseAnd(3, 3) == 3", "Passed"], ["assert rangeBitwiseAnd(0, 15) == 0", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 971, "total_tokens": 1173, "completion_tokens": 202, "completion": "Write a function to count the total set bits in all numbers from 1 to n.\n\n###Code: \n\n```python\ndef countSetBits(n: int) -> int:\n    n += 1\n    powerOf2 = 2\n    count = n // 2\n    while powerOf2 <= n:\n        totalPairs = n // powerOf2\n        count += (totalPairs // 2) * powerOf2\n        count += (totalPairs % 2) * (n % powerOf2)\n        powerOf2 = powerOf2 << 1\n    return count\n```\n\n###Testcases: \n\n```python\nassert countSetBits(5) == 7\nassert countSetBits(10) == 17\nassert countSetBits(15) == 24\nassert countSetBits(20) == 31\nassert countSetBits(50) == 115\nassert countSetBits(100) == 217\n```", "temperature": 0.823, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}], "category": "Bitwise", "prompt_tokens": 781, "total_tokens": 969, "completion_tokens": 188, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef is_power_of_two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert is_power_of_two(16) == True\nassert is_power_of_two(3) == False\nassert is_power_of_two(64) == True\nassert is_power_of_two(1) == True\nassert is_power_of_two(0) == False\nassert is_power_of_two(15) == False\nassert is_power_of_two(128) == True\nassert is_power_of_two(1023) == False\nassert is_power_of_two(256) == True\nassert is_power_of_two(31) == False\n```\n\n[/Example 4]", "temperature": 0.825, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 784, "total_tokens": 992, "completion_tokens": 208, "completion": "Write a function to swap two integers without using a temporary variable.\n\n###Code: \n\ndef swap_integers(a: int, b: int) -> Tuple[int, int]:\n    a = a ^ b\n    b = a ^ b\n    a = a ^ b\n    return a, b\n\n###Testcases: \n\nassert swap_integers(3, 5) == (5, 3)\nassert swap_integers(10, 20) == (20, 10)\nassert swap_integers(0, 7) == (7, 0)\nassert swap_integers(15, 15) == (15, 15)\nassert swap_integers(31, 12) == (12, 31)\nassert swap_integers(255, 0) == (0, 255)\nassert swap_integers(123, 456) == (456, 123)\nassert swap_integers(8, 8) == (8, 8)\n\n[/Example 4]", "temperature": 0.719, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 778, "total_tokens": 974, "completion_tokens": 196, "completion": "Write a function to toggle the nth bit of a given integer.\n\n###Code: \n\n```python\ndef toggle_nth_bit(num: int, n: int) -> int:\n    return num ^ (1 << n)\n```\n\n###Testcases: \n\n```python\nassert toggle_nth_bit(5, 1) == 7\nassert toggle_nth_bit(8, 3) == 0\nassert toggle_nth_bit(15, 2) == 11\nassert toggle_nth_bit(0, 5) == 32\nassert toggle_nth_bit(127, 4) == 111\nassert toggle_nth_bit(16, 4) == 0\nassert toggle_nth_bit(3, 0) == 2\nassert toggle_nth_bit(255, 7) == 127\nassert toggle_nth_bit(1023, 5) == 991\nassert toggle_nth_bit(123, 6) == 251\n```", "temperature": 0.705, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 787, "total_tokens": 925, "completion_tokens": 138, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(100) == False\nassert isPowerOfTwo(1024) == True\n```", "temperature": 0.72, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 871, "total_tokens": 1019, "completion_tokens": 148, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(128) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(15) == False\n```", "temperature": 0.814, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 820, "total_tokens": 950, "completion_tokens": 130, "completion": "Write a function to toggle the nth bit of a given integer.\n\n###Code: \n\n```python\ndef toggle_nth_bit(num: int, n: int) -> int:\n    return (num ^ (1 << (n - 1)))\n```\n\n###Testcases: \n\n```python\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(5, 2) == 7\nassert toggle_nth_bit(10, 3) == 14\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(15, 4) == 7\n```", "temperature": 0.814, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 859, "total_tokens": 1059, "completion_tokens": 200, "completion": "Write a function to swap two numbers without using a temporary variable.\n\n###Code: \n\ndef swap_numbers(a: int, b: int) -> tuple:\n    a = a ^ b\n    b = a ^ b\n    a = a ^ b\n    return a, b\n\n###Testcases: \n\nassert swap_numbers(3, 5) == (5, 3)\nassert swap_numbers(10, 20) == (20, 10)\nassert swap_numbers(7, 7) == (7, 7)\nassert swap_numbers(123, 456) == (456, 123)\nassert swap_numbers(111, 222) == (222, 111)\nassert swap_numbers(0, 1) == (1, 0)\nassert swap_numbers(255, 16) == (16, 255)\nassert swap_numbers(1023, 1024) == (1024, 1023)\n\n[/Example 4]", "temperature": 0.716, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 853, "total_tokens": 1087, "completion_tokens": 234, "completion": "Write a function to swap two numbers without using a temporary variable.\n\n###Code: \n\ndef swapNumbers(a: int, b: int) -> Tuple[int, int]:\n    a = a ^ b\n    b = a ^ b\n    a = a ^ b\n    return (a, b)\n\n###Testcases: \n\nassert swapNumbers(5, 10) == (10, 5)\nassert swapNumbers(7, 3) == (3, 7)\nassert swapNumbers(15, 30) == (30, 15)\nassert swapNumbers(8, 8) == (8, 8)\nassert swapNumbers(0, 100) == (100, 0)\nassert swapNumbers(255, 15) == (15, 255)\nassert swapNumbers(1023, 0) == (0, 1023)\nassert swapNumbers(123, 321) == (321, 123)\nassert swapNumbers(1, 2) == (2, 1)\nassert swapNumbers(100, 200) == (200, 100)\n\n[/Example 4]", "temperature": 0.886, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 862, "total_tokens": 1038, "completion_tokens": 176, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(15) == False\nassert isPowerOfTwo(128) == True\nassert isPowerOfTwo(100) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(7) == False\n```", "temperature": 0.712, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 946, "total_tokens": 1128, "completion_tokens": 182, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(128) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(15) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(20) == False\nassert isPowerOfTwo(256) == True\n```", "temperature": 0.767, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 895, "total_tokens": 1071, "completion_tokens": 176, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert is_power_of_two(16) == True\nassert is_power_of_two(5) == False\nassert is_power_of_two(64) == True\nassert is_power_of_two(1) == True\nassert is_power_of_two(0) == False\nassert is_power_of_two(1024) == True\nassert is_power_of_two(15) == False\nassert is_power_of_two(128) == True\nassert is_power_of_two(3) == False\nassert is_power_of_two(256) == True\n```", "temperature": 0.709, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 856, "total_tokens": 1072, "completion_tokens": 216, "completion": "Write a function to toggle the k-th bit of a given integer. The k-th bit is 0-indexed, meaning the least significant bit is at index 0.\n\n###Code:\n\ndef toggle_kth_bit(n: int, k: int) -> int:\n    return n ^ (1 << k)\n\n###Testcases:\n\nassert toggle_kth_bit(5, 1) == 7\nassert toggle_kth_bit(10, 3) == 2\nassert toggle_kth_bit(0, 2) == 4\nassert toggle_kth_bit(15, 0) == 14\nassert toggle_kth_bit(255, 7) == 127\nassert toggle_kth_bit(123, 4) == 107\nassert toggle_kth_bit(8, 3) == 0\nassert toggle_kth_bit(17, 2) == 21\nassert toggle_kth_bit(6, 1) == 4\nassert toggle_kth_bit(3, 0) == 2", "temperature": 0.755, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 865, "total_tokens": 1034, "completion_tokens": 169, "completion": "Write a function to check if a given number is a power of two using bitwise operations.\n\n###Code: \n\ndef is_power_of_two(n: int) -> bool:\n    return n and not (n & (n - 1))\n\n###Testcases: \n\nassert is_power_of_two(16) == True\nassert is_power_of_two(3) == False\nassert is_power_of_two(64) == True\nassert is_power_of_two(1) == True\nassert is_power_of_two(0) == False\nassert is_power_of_two(1024) == True\nassert is_power_of_two(15) == False\nassert is_power_of_two(128) == True\nassert is_power_of_two(31) == False\nassert is_power_of_two(256) == True\n\n[/Example 4]", "temperature": 0.85, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 949, "total_tokens": 1138, "completion_tokens": 189, "completion": "Write a function to toggle the nth bit of a given integer.\n\n###Code: \n\ndef toggle_nth_bit(num: int, n: int) -> int:\n    return num ^ (1 << (n - 1))\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(16, 4) == 0\nassert toggle_nth_bit(10, 2) == 8\nassert toggle_nth_bit(7, 2) == 5\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(0, 4) == 8\nassert toggle_nth_bit(123, 6) == 95\nassert toggle_nth_bit(100, 5) == 124\nassert toggle_nth_bit(31, 5) == 15", "temperature": 0.765, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 898, "total_tokens": 1062, "completion_tokens": 164, "completion": "Write a function to check if a given number is a power of two.\n\n###Code:\n\ndef is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n\n###Testcases:\n\nassert is_power_of_two(4) == True\nassert is_power_of_two(16) == True\nassert is_power_of_two(20) == False\nassert is_power_of_two(1024) == True\nassert is_power_of_two(1) == True\nassert is_power_of_two(0) == False\nassert is_power_of_two(256) == True\nassert is_power_of_two(255) == False\nassert is_power_of_two(512) == True\nassert is_power_of_two(31) == False", "temperature": 0.753, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 859, "total_tokens": 1268, "completion_tokens": 409, "completion": "Write a function to find the maximum XOR value of two integers in an array.\n\n###Code:\n\n```python\ndef findMaximumXOR(nums) -> int:\n    ans = mask = 0\n    for x in range(32)[::-1]:\n        mask += 1 << x\n        prefixSet = set([n & mask for n in nums])\n        temp = ans | 1 << x\n        for prefix in prefixSet:\n            if temp ^ prefix in prefixSet:\n                ans = temp\n                break\n    return ans\n```\n\n###Testcases:\n\n```python\nassert findMaximumXOR([3, 10, 5, 25, 2, 8]) == 28\nassert findMaximumXOR([8, 10, 2]) == 10\nassert findMaximumXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127\nassert findMaximumXOR([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 15\nassert findMaximumXOR([32, 18, 46, 78, 59, 48, 21, 39, 91, 30]) == 127\nassert findMaximumXOR([15, 16, 19, 22, 28, 31, 37, 39, 47, 56]) == 63\nassert findMaximumXOR([1, 2]) == 3\nassert findMaximumXOR([8, 10, 5]) == 15\nassert findMaximumXOR([7, 5, 1, 2]) == 5\nassert findMaximumXOR([12, 15, 22, 18, 5, 6]) == 26\n```", "temperature": 0.877, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 943, "total_tokens": 1115, "completion_tokens": 172, "completion": "Write a function to swap two integers without using a temporary variable.\n\n###Code: \n\ndef swap_integers(a: int, b: int) -> tuple:\n    a = a ^ b\n    b = a ^ b\n    a = a ^ b\n    return (a, b)\n\n###Testcases: \n\nassert swap_integers(3, 5) == (5, 3)\nassert swap_integers(10, 20) == (20, 10)\nassert swap_integers(7, 7) == (7, 7)\nassert swap_integers(15, 25) == (25, 15)\nassert swap_integers(0, 100) == (100, 0)\nassert swap_integers(255, 100) == (100, 255)\n\n[/Example 4]", "temperature": 0.822, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 892, "total_tokens": 1098, "completion_tokens": 206, "completion": "Write a function to toggle the kth bit of a given integer\n\n###Code: \n\ndef toggle_kth_bit(num: int, k: int) -> int:\n    return (num ^ (1 << (k - 1)))\n\n###Testcases: \n\nassert toggle_kth_bit(10, 2) == 8\nassert toggle_kth_bit(15, 3) == 11\nassert toggle_kth_bit(7, 1) == 6\nassert toggle_kth_bit(0, 5) == 16\nassert toggle_kth_bit(255, 4) == 239\nassert toggle_kth_bit(1023, 6) == 959\nassert toggle_kth_bit(12345, 8) == 12441\nassert toggle_kth_bit(1, 1) == 0\nassert toggle_kth_bit(100, 5) == 68\nassert toggle_kth_bit(31, 3) == 27\n\n", "temperature": 0.768, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 952, "total_tokens": 1106, "completion_tokens": 154, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(128) == True\nassert isPowerOfTwo(15) == False\nassert isPowerOfTwo(1024) == True\n```", "temperature": 0.748, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 901, "total_tokens": 1077, "completion_tokens": 176, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert is_power_of_two(1) == True\nassert is_power_of_two(2) == True\nassert is_power_of_two(16) == True\nassert is_power_of_two(3) == False\nassert is_power_of_two(10) == False\nassert is_power_of_two(64) == True\nassert is_power_of_two(128) == True\nassert is_power_of_two(255) == False\nassert is_power_of_two(1024) == True\nassert is_power_of_two(0) == False\n```", "temperature": 0.813, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106", "question": "Write a function to count the number of set bits in a given integer", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "asserts": ["assert count_set_bits(10) == 2", "assert count_set_bits(15) == 4", "assert count_set_bits(7) == 3", "assert count_set_bits(0) == 0", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(12345) == 6", "assert count_set_bits(1) == 1", "assert count_set_bits(100) == 3", "assert count_set_bits(31) == 5"], "author": "GPT", "UUID": "fa06d76a-a13f-469e-9feb-ceef724c078d", "tc_status": [["assert count_set_bits(10) == 2", "Passed"], ["assert count_set_bits(15) == 4", "Passed"], ["assert count_set_bits(7) == 3", "Passed"], ["assert count_set_bits(0) == 0", "Passed"], ["assert count_set_bits(255) == 8", "Passed"], ["assert count_set_bits(1023) == 10", "Passed"], ["assert count_set_bits(12345) == 6", "Passed"], ["assert count_set_bits(1) == 1", "Passed"], ["assert count_set_bits(100) == 3", "Passed"], ["assert count_set_bits(31) == 5", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 985, "total_tokens": 1161, "completion_tokens": 176, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert is_power_of_two(16) == True\nassert is_power_of_two(3) == False\nassert is_power_of_two(1) == True\nassert is_power_of_two(64) == True\nassert is_power_of_two(0) == False\nassert is_power_of_two(1024) == True\nassert is_power_of_two(15) == False\nassert is_power_of_two(128) == True\nassert is_power_of_two(5) == False\nassert is_power_of_two(256) == True\n```", "temperature": 0.701, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 821, "total_tokens": 991, "completion_tokens": 170, "completion": "Write a function to swap two numbers without using a temporary variable.\n\n###Code: \n\ndef swapNumbers(a: int, b: int) -> (int, int):\n    a = a ^ b\n    b = a ^ b\n    a = a ^ b\n    return (a, b)\n\n###Testcases: \n\nassert swapNumbers(5, 10) == (10, 5)\nassert swapNumbers(7, 3) == (3, 7)\nassert swapNumbers(15, 20) == (20, 15)\nassert swapNumbers(0, 0) == (0, 0)\nassert swapNumbers(255, 1) == (1, 255)\nassert swapNumbers(1023, 0) == (0, 1023)\n\n[/Example 4]", "temperature": 0.733, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 815, "total_tokens": 1035, "completion_tokens": 220, "completion": "Given an array of integers, write a function to find the bitwise AND of all elements.\n\n###Code: \n\ndef bitwiseAnd(arr: List[int]) -> int:\n    result = arr[0]\n    for i in range(1, len(arr)):\n        result &= arr[i]\n    return result\n\n###Testcases: \n\nassert bitwiseAnd([5, 6, 7]) == 4\nassert bitwiseAnd([12, 16, 4, 8]) == 0\nassert bitwiseAnd([7, 3, 5, 2]) == 1\nassert bitwiseAnd([8, 16, 32, 64]) == 0\nassert bitwiseAnd([10, 15, 5, 20]) == 0\nassert bitwiseAnd([3, 3, 3, 3]) == 3\nassert bitwiseAnd([255, 127, 63, 31]) == 31\nassert bitwiseAnd([18, 22, 26, 30]) == 18\n\n[/Example 4]", "temperature": 0.708, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 824, "total_tokens": 953, "completion_tokens": 129, "completion": "Write a function to check if a given number is a power of two.\n\n###Code:\n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases:\n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(128) == True\nassert isPowerOfTwo(255) == False\n```", "temperature": 0.84, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 908, "total_tokens": 1093, "completion_tokens": 185, "completion": "Given a non-empty array of integers, every element appears twice except for one. Write a function to find that single one.\n\n###Code: \n\n```python\ndef singleNumber(nums: List[int]) -> int:\n    result = 0\n    for num in nums:\n        result ^= num\n    return result\n```\n\n###Testcases: \n\n```python\nassert singleNumber([4, 1, 2, 1, 2]) == 4\nassert singleNumber([2, 2, 3, 3, 7, 4, 4]) == 7\nassert singleNumber([6, 6, 8, 8, 10, 10, 12]) == 12\nassert singleNumber([9]) == 9\nassert singleNumber([5, 5, 3, 3, 1]) == 1\n```", "temperature": 0.835, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 857, "total_tokens": 1016, "completion_tokens": 159, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    if n <= 0:\n        return False\n    return n & (n - 1) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(128) == True\nassert isPowerOfTwo(15) == False\nassert isPowerOfTwo(1024) == True\n```", "temperature": 0.774, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 818, "total_tokens": 993, "completion_tokens": 175, "completion": "Write a function to swap two integers without using a temporary variable. \n\n###Code: \n\ndef swapWithoutTemp(a: int, b: int) -> Tuple[int, int]:\n    a = a ^ b\n    b = a ^ b\n    a = a ^ b\n    return a, b\n\n###Testcases: \n\nassert swapWithoutTemp(5, 7) == (7, 5)\nassert swapWithoutTemp(10, 20) == (20, 10)\nassert swapWithoutTemp(0, 0) == (0, 0)\nassert swapWithoutTemp(15, 25) == (25, 15)\nassert swapWithoutTemp(100, 200) == (200, 100)\nassert swapWithoutTemp(1, -1) == (-1, 1)\n\n[/Example 4]", "temperature": 0.722, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 827, "total_tokens": 996, "completion_tokens": 169, "completion": "Given a non-negative integer num, write a function to return the number of 0 bits in its binary representation.\n\n###Code: \n\ndef countZeroBits(num: int) -> int:\n    count = 0\n    while(num):\n        if num & 1 == 0:\n            count += 1\n        num = num >> 1\n    return count\n\n###Testcases: \n\nassert countZeroBits(11) == 29\nassert countZeroBits(128) == 25\nassert countZeroBits(255) == 0\nassert countZeroBits(0) == 32\nassert countZeroBits(7) == 29\nassert countZeroBits(15) == 28\nassert countZeroBits(31) == 27\nassert countZeroBits(1) == 31\n", "temperature": 0.753, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 911, "total_tokens": 1133, "completion_tokens": 222, "completion": "Write a function to count the total number of set bits in all numbers from 1 to n.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n    n += 1\n    powerOf2 = 2\n    count = n // 2\n    \n    while powerOf2 <= n:\n        totalPairs = n // powerOf2\n        count += (totalPairs // 2) * powerOf2\n        count += (totalPairs % 2) * (n % powerOf2)\n        powerOf2 = powerOf2 << 1\n        \n    return count\n\n###Testcases: \n\nassert countSetBits(5) == 7\nassert countSetBits(10) == 17\nassert countSetBits(15) == 24\nassert countSetBits(20) == 31\nassert countSetBits(25) == 37\nassert countSetBits(30) == 44\nassert countSetBits(50) == 87\nassert countSetBits(100) == 203\n\n[/Example 4]", "temperature": 0.738, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 860, "total_tokens": 1033, "completion_tokens": 173, "completion": "Given two integers a and b, write a function to return the result of a bitwise AND operation between a and b.\n\n###Code:\n\ndef bitwise_and(a: int, b: int) -> int:\n    while b:\n        a, b = b, a & b\n    return a\n\n###Test cases:\n\nassert bitwise_and(5, 3) == 1\nassert bitwise_and(8, 12) == 8\nassert bitwise_and(7, 10) == 2\nassert bitwise_and(0, 15) == 0\nassert bitwise_and(255, 255) == 255\nassert bitwise_and(16, 16) == 16\nassert bitwise_and(18, 9) == 0\nassert bitwise_and(3, 3) == 3\n\n[/Example 4]", "temperature": 0.836, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 821, "total_tokens": 1069, "completion_tokens": 248, "completion": "Given a positive integer n, write a function to return the next greater number that has the same number of set bits in its binary representation as n.\n\n###Code: \n\ndef nextGreaterSameBits(n: int) -> int:\n    c = n\n    c0, c1 = 0, 0\n    \n    while c & 1 == 0 and c != 0:\n        c0 += 1\n        c >>= 1\n        \n    while c & 1 == 1:\n        c1 += 1\n        c >>= 1\n        \n    p = c0 + c1\n    n |= (1 << p)\n    n &= ~((1 << p) - 1)\n    n |= (1 << (c1 - 1)) - 1\n    \n    return n\n\n###Testcases: \n\nassert nextGreaterSameBits(5) == 6\nassert nextGreaterSameBits(7) == 11\nassert nextGreaterSameBits(12) == 17\nassert nextGreaterSameBits(28) == 35\nassert nextGreaterSameBits(85) == 86\nassert nextGreaterSameBits(100) == 104\n\n[/Example 4]", "temperature": 0.879, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 905, "total_tokens": 1117, "completion_tokens": 212, "completion": "Given an integer, write a function to swap the two bits at the given positions.\n\n###Code: \n\ndef swapBits(num: int, p1: int, p2: int) -> int:\n        bit1 = (num >> p1) & 1\n        bit2 = (num >> p2) & 1\n        \n        xor = bit1 ^ bit2\n        xor = (xor << p1) | (xor << p2)\n        \n        result = num ^ xor\n        return result\n\n###Testcases: \n\nassert swapBits(28, 0, 3) == 20\nassert swapBits(47, 1, 5) == 61\nassert swapBits(10, 2, 4) == 10\nassert swapBits(60, 3, 6) == 44\nassert swapBits(128, 7, 0) == 1\nassert swapBits(255, 1, 6) == 191\n\n[/Example 4]", "temperature": 0.747, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 854, "total_tokens": 1034, "completion_tokens": 180, "completion": "Write a function to perform bitwise XOR operation on two integers and return the result.\n\n###Code: \n\ndef bitwise_xor(a: int, b: int) -> int:\n    return a ^ b\n\n###Testcases: \n\nassert bitwise_xor(5, 3) == 6\nassert bitwise_xor(0, 0) == 0\nassert bitwise_xor(10, 15) == 5\nassert bitwise_xor(16, 16) == 0\nassert bitwise_xor(255, 255) == 0\nassert bitwise_xor(123, 456) == 515\nassert bitwise_xor(9876, 5432) == 5804\nassert bitwise_xor(111111, 222222) == 179649\nassert bitwise_xor(123456789, 987654321) == 1097265788\n\n[/Example 4]", "temperature": 0.794, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 914, "total_tokens": 1083, "completion_tokens": 169, "completion": "Given a non-negative integer num, write a function to check if it's a power of 4.\n\n###Code: \n\n```python\ndef isPowerOfFour(num: int) -> bool:\n    if num <= 0:\n        return False\n    return (num & (num - 1)) == 0 and (num & 0x55555555) != 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfFour(16) == True\nassert isPowerOfFour(5) == False\nassert isPowerOfFour(64) == False\nassert isPowerOfFour(1) == True\nassert isPowerOfFour(1024) == True\nassert isPowerOfFour(0) == False\nassert isPowerOfFour(8) == False\n```", "temperature": 0.755, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 863, "total_tokens": 1001, "completion_tokens": 138, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(128) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(1024) == True\n```", "temperature": 0.718, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106", "question": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.", "code": "def hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count", "asserts": ["assert hammingWeight(11) == 3", "assert hammingWeight(128) == 1", "assert hammingWeight(255) == 8", "assert hammingWeight(0) == 0", "assert hammingWeight(7) == 3", "assert hammingWeight(15) == 4"], "author": "GPT", "UUID": "2f3c5926-1f32-412b-94b4-8c75c1d98ed9", "tc_status": [["assert hammingWeight(11) == 3", "Passed"], ["assert hammingWeight(128) == 1", "Passed"], ["assert hammingWeight(255) == 8", "Passed"], ["assert hammingWeight(0) == 0", "Passed"], ["assert hammingWeight(7) == 3", "Passed"], ["assert hammingWeight(15) == 4", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 947, "total_tokens": 1102, "completion_tokens": 155, "completion": "Write a function to swap two numbers without using a temporary variable.\n\n###Code: \n\n```python\ndef swapNumbers(a: int, b: int) -> Tuple[int, int]:\n    a = a ^ b\n    b = a ^ b\n    a = a ^ b\n    return a, b\n```\n\n###Testcases: \n\n```python\nassert swapNumbers(5, 10) == (10, 5)\nassert swapNumbers(17, 22) == (22, 17)\nassert swapNumbers(100, 200) == (200, 100)\nassert swapNumbers(0, 0) == (0, 0)\nassert swapNumbers(-3, 3) == (3, -3)\n```", "temperature": 0.708, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 893, "total_tokens": 1112, "completion_tokens": 219, "completion": "Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.\n\n###Code: \n\ndef removeKdigits(num: str, k: int) -> str:\n        stack = []\n        for digit in num:\n                while k and stack and stack[-1] > digit:\n                        stack.pop()\n                        k -= 1\n                stack.append(digit)\n        finalStack = stack[:-k] if k else stack\n        return ''.join(finalStack).lstrip('0') or '0'\n\n###Testcases: \n\nassert removeKdigits(\"1432219\", 3) == \"1219\"\nassert removeKdigits(\"10200\", 1) == \"200\"\nassert removeKdigits(\"10\", 2) == \"0\"\nassert removeKdigits(\"54321\", 2) == \"321\"\nassert removeKdigits(\"1234567890\", 9) == \"0\"\nassert removeKdigits(\"1111111\", 3) == \"1111\"\n\n[/Example 4]", "temperature": 0.817, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 902, "total_tokens": 1128, "completion_tokens": 226, "completion": "Given an array of integers, write a function to find the element that appears once while all other elements appear thrice.\n\n###Code: \n\ndef findUnique(arr: List[int]) -> int:\n        ones = 0\n        twos = 0\n        for num in arr:\n            twos = twos | (ones & num)\n            ones = ones ^ num\n            common_bit_mask = ~(ones & twos)\n            ones &= common_bit_mask\n            twos &= common_bit_mask\n        return ones\n\n###Testcases: \n\narr1 = [3, 3, 2, 3]\nassert findUnique(arr1) == 2\n\narr2 = [5, 5, 5, 8]\nassert findUnique(arr2) == 8\n\narr3 = [7, 7, 7, 10]\nassert findUnique(arr3) == 10\n\narr4 = [1, 1, 1, 2, 2, 2, 3]\nassert findUnique(arr4) == 3\n\n[/Example 4]", "temperature": 0.728, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 986, "total_tokens": 1262, "completion_tokens": 276, "completion": "Given a non-empty array of integers, every element appears twice except for one. Write a function to find that single one.\n\n###Code: \n\ndef findSingleNumber(nums: list) -> int:\n    result = 0\n    for num in nums:\n        result ^= num\n    return result\n\n###Testcases: \n\nassert findSingleNumber([4, 3, 4, 3, 6, 8, 6]) == 8\nassert findSingleNumber([1, 1, 2, 2, 3, 4, 3]) == 4\nassert findSingleNumber([5, 5, 7, 7, 8, 9, 9]) == 8\nassert findSingleNumber([11, 11, 12, 12, 13, 14, 13]) == 14\nassert findSingleNumber([6, 7, 6]) == 7\nassert findSingleNumber([20, 30, 40, 50, 40, 30, 20]) == 50\nassert findSingleNumber([100, 200, 100, 300, 300]) == 200\nassert findSingleNumber([512, 256, 1024, 512, 1024]) == 256\n", "temperature": 0.762, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 935, "total_tokens": 1116, "completion_tokens": 181, "completion": "Write a function to swap two numbers without using a temporary variable.\n\n###Code:\n\ndef swapNumbers(a: int, b: int) -> (int, int):\n    a = a ^ b\n    b = a ^ b\n    a = a ^ b\n    return a, b\n\n###Testcases:\n\nassert swapNumbers(5, 10) == (10, 5)\nassert swapNumbers(23, 7) == (7, 23)\nassert swapNumbers(0, 0) == (0, 0)\nassert swapNumbers(15, 17) == (17, 15)\nassert swapNumbers(255, 0) == (0, 255)\nassert swapNumbers(13, 27) == (27, 13)\nassert swapNumbers(8, 8) == (8, 8)\n\n[/Example 4]", "temperature": 0.878, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 896, "total_tokens": 1116, "completion_tokens": 220, "completion": "Write a function to count the total set bits in all numbers from 1 to n.\n\n###Code:\n\ndef countSetBits(n: int) -> int:\n    n += 1\n    power_of_2 = 2\n    count = n // 2\n    while power_of_2 <= n:\n        total_pairs = n // power_of_2\n        count += (total_pairs // 2) * power_of_2\n        count += (total_pairs % 2) * (n % power_of_2)\n        power_of_2 *= 2\n    return count\n\n###Testcases:\n\nassert countSetBits(5) == 7\nassert countSetBits(10) == 17\nassert countSetBits(15) == 24\nassert countSetBits(20) == 31\nassert countSetBits(25) == 38\nassert countSetBits(30) == 45\nassert countSetBits(50) == 82\nassert countSetBits(100) == 211\n\n[/Example 4]", "temperature": 0.745, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 980, "total_tokens": 1198, "completion_tokens": 218, "completion": "Write a function to swap two integers without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTemp(a: int, b: int) -> (int, int):\n    a = a ^ b\n    b = a ^ b\n    a = a ^ b\n    return a, b\n\n###Testcases:\n\nassert swapWithoutTemp(5, 8) == (8, 5)\nassert swapWithoutTemp(10, 20) == (20, 10)\nassert swapWithoutTemp(100, 200) == (200, 100)\nassert swapWithoutTemp(256, 512) == (512, 256)\nassert swapWithoutTemp(111, 222) == (222, 111)\nassert swapWithoutTemp(1234, 5678) == (5678, 1234)\nassert swapWithoutTemp(9999, 10000) == (10000, 9999)\nassert swapWithoutTemp(12345, 54321) == (54321, 12345)\n\n[/Example 4]", "temperature": 0.765, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 929, "total_tokens": 1166, "completion_tokens": 237, "completion": "Write a function to check if the kth bit of a given number is set or not (1-based indexing).\n\n###Code: \n\ndef isKthBitSet(n: int, k: int) -> bool:\n    if n & (1 << (k - 1)):\n        return True\n    else:\n        return False\n\n###Testcases: \n\nassert isKthBitSet(5, 1) == True\nassert isKthBitSet(5, 2) == False\nassert isKthBitSet(5, 3) == True\nassert isKthBitSet(7, 1) == True\nassert isKthBitSet(7, 2) == True\nassert isKthBitSet(7, 3) == True\nassert isKthBitSet(7, 4) == False\nassert isKthBitSet(16, 5) == True\nassert isKthBitSet(16, 4) == False\nassert isKthBitSet(0, 1) == False   # Additional test case for 0 input\n\n[/Example 4]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 989, "total_tokens": 1174, "completion_tokens": 185, "completion": "Given an integer, write a function to swap all odd and even bits in it.\n\n###Code: \n\n```python\ndef swapOddEvenBits(x: int) -> int:\n    even_bits = x & 0xAAAAAAAA  # Get all even bits\n    odd_bits = x & 0x55555555    # Get all odd bits\n    even_bits >>= 1               # Right shift even bits\n    odd_bits <<= 1                # Left shift odd bits\n    return even_bits | odd_bits   # Combine even and odd bits and return\n```\n\n###Testcases:\n\n```python\nassert swapOddEvenBits(23) == 43\nassert swapOddEvenBits(10) == 5\nassert swapOddEvenBits(58) == 89\nassert swapOddEvenBits(41) == 22\nassert swapOddEvenBits(7) == 11\n```", "temperature": 0.898, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 938, "total_tokens": 1213, "completion_tokens": 275, "completion": "Given a list of integers, write a function to find the maximum XOR value between two numbers in the list.\n\n###Code:\n\n```python\ndef findMaximumXOR(nums: List[int]) -> int:\n    max_xor = 0\n    mask = 0\n    for i in range(31, -1, -1):\n        mask |= 1 << i\n        prefixes = {num & mask for num in nums}\n        temp = max_xor | 1 << i\n        for prefix in prefixes:\n            if temp ^ prefix in prefixes:\n                max_xor = temp\n                break\n    return max_xor\n```\n\n###Testcases:\n\n```python\nassert findMaximumXOR([3, 10, 5, 25, 2, 8]) == 28\nassert findMaximumXOR([8, 10, 2]) == 10\nassert findMaximumXOR([14, 70, 53, 77, 12]) == 127\nassert findMaximumXOR([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 15\nassert findMaximumXOR([32, 18, 25, 19, 30]) == 31\n```\n\n[/Example 4]", "temperature": 0.754, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106", "question": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.", "code": "def countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count", "asserts": ["assert countBitsFlips(29, 15) == 2", "assert countBitsFlips(7, 10) == 3", "assert countBitsFlips(31, 0) == 5", "assert countBitsFlips(1, 1) == 0", "assert countBitsFlips(0, 15) == 4", "assert countBitsFlips(255, 0) == 8", "assert countBitsFlips(60, 15) == 4", "assert countBitsFlips(1023, 0) == 10"], "author": "GPT", "UUID": "9f05cd0e-0892-4e10-9e5e-da2b522232e6", "tc_status": [["assert countBitsFlips(29, 15) == 2", "Passed"], ["assert countBitsFlips(7, 10) == 3", "Passed"], ["assert countBitsFlips(31, 0) == 5", "Passed"], ["assert countBitsFlips(1, 1) == 0", "Passed"], ["assert countBitsFlips(0, 15) == 4", "Passed"], ["assert countBitsFlips(255, 0) == 8", "Passed"], ["assert countBitsFlips(60, 15) == 4", "Passed"], ["assert countBitsFlips(1023, 0) == 10", "Passed"]]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 1022, "total_tokens": 1182, "completion_tokens": 160, "completion": "Write a function to determine if a given number is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(128) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(11) == False\n```", "temperature": 0.773, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 899, "total_tokens": 1184, "completion_tokens": 285, "completion": "Write a function to count the total number of set bits in all numbers from 1 to n. For example, if n is 3, the function should return 4, as the set bits in the binary representation of the numbers from 1 to 3 are 1, 2, and 3, which gives a total of 4 set bits.\n\n###Code: \n\ndef countTotalSetBits(n: int) -> int:\n        i = 0\n        count = 0\n        while ((1 << i) <= n):\n                for j in range(0, n + 1):\n                        if ((j >> i) & 1):\n                                count += 1\n                i += 1\n        return count\n\n\n###Testcases: \n\nassert countTotalSetBits(5) == 7\nassert countTotalSetBits(10) == 17\nassert countTotalSetBits(15) == 24\nassert countTotalSetBits(20) == 31\nassert countTotalSetBits(25) == 37\nassert countTotalSetBits(50) == 87\nassert countTotalSetBits(100) == 197\nassert countTotalSetBits(200) == 397\nassert countTotalSetBits(500) == 1247\nassert countTotalSetBits(1000) == 3007\n\n[/Example 4]", "temperature": 0.792, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 983, "total_tokens": 1187, "completion_tokens": 204, "completion": "Write a function to swap two numbers without using a temporary variable.\n\n###Code: \n\ndef swapNumbers(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return (a, b)\n\n\n###Testcases: \n\nassert swapNumbers(5, 10) == (10, 5)\nassert swapNumbers(20, 30) == (30, 20)\nassert swapNumbers(8, 12) == (12, 8)\nassert swapNumbers(100, 200) == (200, 100)\nassert swapNumbers(7, 7) == (7, 7)\nassert swapNumbers(0, 1) == (1, 0)\nassert swapNumbers(255, 0) == (0, 255)\nassert swapNumbers(1023, 1024) == (1024, 1023)\n\n[/Example 4]", "temperature": 0.884, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 932, "total_tokens": 1114, "completion_tokens": 182, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n\n\n###Testcases: \n\nassert countSetBits(7) == 3\nassert countSetBits(15) == 4\nassert countSetBits(31) == 5\nassert countSetBits(63) == 6\nassert countSetBits(255) == 8\nassert countSetBits(1023) == 10\nassert countSetBits(4095) == 12\nassert countSetBits(65535) == 16\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\n\n[/Example 4]", "temperature": 0.795, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 992, "total_tokens": 1139, "completion_tokens": 147, "completion": "Given a non-empty array of integers, every element appears twice except for one. Find that single one.\n\n###Code: \n\ndef findSingleNumber(nums: list) -> int:\n        result = 0\n        for num in nums:\n            result ^= num\n        return result\n\n\n###Testcases: \n\nassert findSingleNumber([4, 3, 2, 4, 1, 2, 3]) == 1\nassert findSingleNumber([2, 2, 1]) == 1\nassert findSingleNumber([1]) == 1\nassert findSingleNumber([4, 1, 2, 1, 2]) == 4\n\n[/Example 4]", "temperature": 0.721, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 941, "total_tokens": 1111, "completion_tokens": 170, "completion": "Write a function to count the total number of set bits in all numbers from 1 to n. \n\n###Code:\n\ndef countSetBits(n: int) -> int:\n    i = 0\n    count = 0\n    while (1 << i) <= n:\n        k = 0\n        change = 1 << i\n        for j in range(0, n+1):\n            count += k\n            if change == 1:\n                k = not k\n                change = 1 << i\n            else:\n                change -= 1\n        i += 1\n    return count\n\n\n###Testcases:\n\nassert countSetBits(10) == 17\nassert countSetBits(5) == 8\nassert countSetBits(20) == 42\n\n[/Example 4]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 1025, "total_tokens": 1215, "completion_tokens": 190, "completion": "Write a function to count the total number of set bits in all numbers from 1 to n.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n    i = 0\n    count = 0\n    while((1 << i) <= n):\n        k = 0\n        change = 1 << i\n        for j in range(n + 1):\n            count += change & j\n    return count\n\n\n###Testcases: \n\nassert countSetBits(3) == 4\nassert countSetBits(6) == 9\nassert countSetBits(10) == 22\nassert countSetBits(15) == 35\nassert countSetBits(20) == 42\nassert countSetBits(25) == 53\nassert countSetBits(50) == 131\nassert countSetBits(100) == 299\n\n[/Example 4]", "temperature": 0.72, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 986, "total_tokens": 1148, "completion_tokens": 162, "completion": "Given a non-empty array of integers, every element appears twice except for one. Write a function to find that single one.\n\n###Code: \n\ndef findSingle(nums: list) -> int:\n        result = 0\n        for num in nums:\n            result ^= num\n        return result\n\n\n###Testcases: \n\nassert findSingle([4, 3, 2, 4, 1, 2, 3]) == 1\nassert findSingle([2, 2, 1]) == 1\nassert findSingle([1]) == 1\nassert findSingle([9, 3, 9, 3, 5]) == 5\nassert findSingle([7, 5, 7]) == 5\n\n[/Example 4]", "temperature": 0.728, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 935, "total_tokens": 1078, "completion_tokens": 143, "completion": "Write a function to count the number of set bits (bits with value 1) in a given integer.\n\n###Code:\n\n```python\ndef countSetBits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\n\n###Testcases:\n\n```python\nassert countSetBits(10) == 2\nassert countSetBits(15) == 4\nassert countSetBits(7) == 3\nassert countSetBits(255) == 8\nassert countSetBits(16) == 1\nassert countSetBits(0) == 0\n```", "temperature": 0.824, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 1019, "total_tokens": 1162, "completion_tokens": 143, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code:\n\n```python\ndef countSetBits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\n\n###Testcases:\n\n```python\nassert countSetBits(5) == 2\nassert countSetBits(15) == 4\nassert countSetBits(16) == 1\nassert countSetBits(255) == 8\nassert countSetBits(1023) == 10\nassert countSetBits(0) == 0\n```\n\n[/Example 4]", "temperature": 0.825, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"], "category": "Bitwise"}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"], "category": "Bitwise"}], "category": "Bitwise", "prompt_tokens": 1028, "total_tokens": 1220, "completion_tokens": 192, "completion": "Write a function to count the total number of set bits in all numbers from 1 to n.\n\n###Code: \n\n```python\ndef countSetBits(n: int) -> int:\n    i = 0\n    count = 0\n    while (1 << i) <= n:\n        k = 0\n        change = 1 << i\n        for j in range(n+1):\n            count += change ^ k\n            if (j+1) % (1 << (i+1)) == 0:\n                k = change ^ k\n        i += 1\n    return count\n```\n\n###Testcases:\n\n```python\nassert countSetBits(10) == 21\nassert countSetBits(15) == 35\nassert countSetBits(5) == 7\nassert countSetBits(3) == 4\nassert countSetBits(1) == 1\n```", "temperature": 0.858, "model_name": "gpt-3.5-turbo-1106"}]