[{"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1139, "total_tokens": 1369, "completion_tokens": 230, "completion": "You have been given an array of integers. Write a function to sort the array in ascending order using a heap.\n\n###Code: \n\nimport heapq\n\ndef heapSort(arr: list) -> list:\n    heapq.heapify(arr)\n    sorted_arr = []\n    while arr:\n        sorted_arr.append(heapq.heappop(arr))\n    return sorted_arr\n\n###Testcases: \n\nassert heapSort([9, 7, 5, 11, 12, 2, 14, 3, 10, 6]) == [2, 3, 5, 6, 7, 9, 10, 11, 12, 14]\nassert heapSort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert heapSort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert heapSort([1]) == [1]\nassert heapSort([]) == []\n\n[/Example 4]", "temperature": 0.702, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1492, "total_tokens": 1726, "completion_tokens": 234, "completion": "Write a function to return the top k frequent elements in an array.\n\n###Code: \n\nimport collections\nimport heapq\n\ndef topKFrequent(nums: list, k: int) -> list:\n    count = collections.Counter(nums)\n    heap = [(-freq, num) for num, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n\n###Testcases: \n\nassert topKFrequent([1, 1, 1, 2, 2, 3], 2) == [1, 2]\nassert topKFrequent([1], 1) == [1]\nassert topKFrequent([4, 1, -1, 2, -1, 2, 3], 2) == [-1, 2]\nassert topKFrequent([1, 2], 2) == [1, 2]\nassert topKFrequent([1, 1, 1, 2, 2, 3, 3, 3, 3], 2) == [3, 1]\n\n", "temperature": 0.832, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}], "category": "Heap", "prompt_tokens": 1146, "total_tokens": 1409, "completion_tokens": 263, "completion": "You are given a list of integers and an integer k. Write a function to find the kth smallest element in the list using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthSmallest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    \n    for _ in range(k):\n        result = heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthSmallest([3,2,1,5,6,4], 2) == 2\nassert findKthSmallest([5,7,1,3,9,4], 3) == 4\nassert findKthSmallest([10, 20, 30, 40, 50], 1) == 10\nassert findKthSmallest([8, 7, 6, 5, 4, 3, 2, 1], 5) == 5\nassert findKthSmallest([1, 1, 1, 1, 1, 1, 1, 1], 3) == 1\n```", "temperature": 0.763, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1243, "total_tokens": 1575, "completion_tokens": 332, "completion": "Write a function to merge K sorted lists into one sorted list.\n\n###Code: \n\nimport heapq\n\ndef mergeKSortedLists(lists: list) -> list:\n    heap = []\n    \n    for i, lst in enumerate(lists):\n        if lst:\n            heapq.heappush(heap, (lst[0], i, 0))\n    \n    result = []\n    while heap:\n        val, list_idx, idx = heapq.heappop(heap)\n        result.append(val)\n        if idx + 1 < len(lists[list_idx]):\n            heapq.heappush(heap, (lists[list_idx][idx + 1], list_idx, idx + 1))\n    \n    return result\n\n###Testcases: \n\nassert mergeKSortedLists([[1, 4, 5], [1, 3, 4], [2, 6]]) == [1, 1, 2, 3, 4, 4, 5, 6]\nassert mergeKSortedLists([[], [1], [2]]) == [1, 2]\nassert mergeKSortedLists([[], [], []]) == []\nassert mergeKSortedLists([[1, 2, 3, 4, 5]]) == [1, 2, 3, 4, 5]\nassert mergeKSortedLists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n[/Example 4]", "temperature": 0.784, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1135, "total_tokens": 1451, "completion_tokens": 316, "completion": "You are given a list of strings representing tasks. Each task can be executed in one unit of time. However, there is a cooling period of n units of time between two same tasks. Write a function to find the total time needed to execute all the tasks.\n\n###Code: \n\nfrom collections import Counter\nimport heapq\n\ndef leastInterval(tasks: list, n: int) -> int:\n    counter = Counter(tasks)\n    heap = [-count for count in counter.values()]\n    heapq.heapify(heap)\n    time = 0\n    while heap:\n        temp = []\n        i = 0\n        while i <= n:\n            if heap:\n                if heap[0] < -1:\n                    temp.append(heapq.heappop(heap) + 1)\n                else:\n                    heapq.heappop(heap)\n                time += 1\n                if not heap and not temp:\n                    break\n            else:\n                time += n - i + 1\n            i += 1\n        for item in temp:\n            if item < 0:\n                heap.append(item)\n        heapq.heapify(heap)\n    return time\n\n###Testcases: \n\nassert leastInterval([\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], 2) == 8\nassert leastInterval([\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], 0) == 6\nassert leastInterval([\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], 2) == 16\n\n", "temperature": 0.872, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}], "category": "Heap", "prompt_tokens": 1182, "total_tokens": 1587, "completion_tokens": 405, "completion": "You have been given a list of integers representing the frequency of elements. Your task is to rearrange the elements in the list such that the same elements are at least distance d from each other.\n\nWrite a function that takes the list of frequencies and the distance d as input and rearranges the elements accordingly. If it is not possible to rearrange the elements to satisfy the condition, return an empty list.\n\n###Code: \n\n```python\nimport heapq\n\ndef rearrangeFrequencies(nums: list, d: int) -> list:\n    heap = [(-freq, num) for num, freq in enumerate(nums)]\n    heapq.heapify(heap)\n    result = []\n    while heap:\n        temp = []\n        for _ in range(d):\n            if not heap:\n                if len(temp) < len(nums):\n                    return []\n                else:\n                    break\n            freq, num = heapq.heappop(heap)\n            result.append(num)\n            if freq < -1:\n                temp.append((freq + 1, num))\n        for item in temp:\n            heapq.heappush(heap, item)\n    return result\n```\n\n###Testcases: \n\n```python\nassert rearrangeFrequencies([1, 1, 2, 2, 2, 3], 3) == [2, 0, 2, 1, 2, 4]\nassert rearrangeFrequencies([1, 1, 1, 2, 2, 3], 2) == [1, 2, 0, 1, 3, 2]\nassert rearrangeFrequencies([1, 1, 1, 1, 2, 3, 3], 4) == [1, 2, 0, 3, 1, 5, 4]\nassert rearrangeFrequencies([1, 1, 1, 2, 2, 2], 2) == []\n```", "temperature": 0.775, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1354, "total_tokens": 1767, "completion_tokens": 413, "completion": "You are given a list of integers, you need to find the kth smallest element in the list.\n\n###Code: \n\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n    for _ in range(k - 1):\n        heapq.heappop(heap)\n    return heapq.heappop(heap)\n\n###Testcases: \n\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([7, 10, 4, 3, 20, 15], 4) == 10\nassert kthSmallest([7, 10, 4, 3, 20, 15], 6) == 20\nassert kthSmallest([1, 4, 3, 6, 7, 10, 9, 8], 4) == 6\nassert kthSmallest([1, 4, 3, 6, 7, 10, 9, 8], 7) == 9\nassert kthSmallest([1, 1, 1, 1, 1], 1) == 1\nassert kthSmallest([5], 1) == 5\nassert kthSmallest([5, 3, 8, 1, 2, 9], 3) == 3\nassert kthSmallest([9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == 5\nassert kthSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8) == 8\n\n[/Example 4]", "temperature": 0.874, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1544, "total_tokens": 1907, "completion_tokens": 363, "completion": "You are given a stream of integers. Design a class, KthLargest, with a constructor that takes an integer k and an array of integers. The class should have a method, add, which will add the integer to the stream and return the kth largest element in the stream.\n\n###Code: \n\nimport heapq\n\nclass KthLargest:\n\n    def __init__(self, k: int, nums: list):\n        self.k = k\n        self.nums = nums\n        heapq.heapify(self.nums)\n        while len(self.nums) > k:\n            heapq.heappop(self.nums)\n\n    def add(self, val: int) -> int:\n        if len(self.nums) < self.k:\n            heapq.heappush(self.nums, val)\n        else:\n            heapq.heappushpop(self.nums, val)\n        return self.nums[0]\n\n###Testcases: \n\nkth_largest = KthLargest(3, [4, 5, 8, 2])\nassert kth_largest.add(3) == 4\nassert kth_largest.add(5) == 5\nassert kth_largest.add(10) == 5\nassert kth_largest.add(9) == 8\nassert kth_largest.add(4) == 8\n\nkth_largest = KthLargest(2, [0])\nassert kth_largest.add(-1) == 0\nassert kth_largest.add(1) == 0\nassert kth_largest.add(-2) == -1\nassert kth_largest.add(-4) == -1\nassert kth_largest.add(3) == 1\n\n[/Example 4]", "temperature": 0.757, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1191, "total_tokens": 1467, "completion_tokens": 276, "completion": "You are given an integer array nums and an integer k. You need to construct a list result, which contains the k most frequent elements in the array. If there are several answers, return any of them.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef topKFrequent(nums: list, k: int) -> list:\n    count = collections.Counter(nums)\n    heap = [(-value, key) for key, value in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert set(topKFrequent([1, 1, 1, 2, 2, 3], 2)) == {1, 2}\nassert set(topKFrequent([1], 1)) == {1}\nassert set(topKFrequent([1, 2], 2)) == {1, 2}\nassert set(topKFrequent([4, 1, -1, 2, -1, 2, 3], 2)) == {-1, 2}\nassert set(topKFrequent([4, 1, -1, 2, -1, 2, 3, 3, 3], 2)) == {3, -1}\n```", "temperature": 0.889, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1120, "total_tokens": 1695, "completion_tokens": 575, "completion": "Write a function to implement a min heap data structure using a list. The function should have the following methods:\n1. `insert(val)`: Insert a new value into the heap.\n2. `deleteMin()`: Remove and return the minimum value from the heap.\n3. `getMin()`: Return the minimum value from the heap without removing it.\n\n###Code: \n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, val: int):\n        self.heap.append(val)\n        self._heapifyUp(len(self.heap) - 1)\n\n    def deleteMin(self) -> int:\n        if len(self.heap) == 0:\n            return None\n        if len(self.heap) == 1:\n            return self.heap.pop()\n        \n        min_val = self.heap[0]\n        self.heap[0] = self.heap.pop()\n        self._heapifyDown(0)\n        return min_val\n\n    def getMin(self) -> int:\n        if len(self.heap) > 0:\n            return self.heap[0]\n        return None\n\n    def _heapifyUp(self, index):\n        while (index - 1) // 2 >= 0:\n            parent = (index - 1) // 2\n            if self.heap[parent] > self.heap[index]:\n                self.heap[parent], self.heap[index] = self.heap[index], self.heap[parent]\n                index = parent\n            else:\n                break\n\n    def _heapifyDown(self, index):\n        while 2 * index + 1 < len(self.heap):\n            left = 2 * index + 1\n            right = 2 * index + 2 if 2 * index + 2 < len(self.heap) else left\n            min_child = left if self.heap[left] < self.heap[right] else right\n            if self.heap[index] > self.heap[min_child]:\n                self.heap[index], self.heap[min_child] = self.heap[min_child], self.heap[index]\n                index = min_child\n            else:\n                break\n\n\n###Testcases: \n\nminheap = MinHeap()\nminheap.insert(5)\nminheap.insert(3)\nminheap.insert(8)\nminheap.insert(1)\nassert minheap.getMin() == 1\nassert minheap.deleteMin() == 1\nassert minheap.getMin() == 3\nminheap.insert(2)\nassert minheap.getMin() == 2\nassert minheap.deleteMin() == 2\nassert minheap.getMin() == 3\nassert minheap.deleteMin() == 3\nassert minheap.getMin() == 5\nassert minheap.deleteMin() == 5\nassert minheap.deleteMin() == 8\nassert minheap.getMin() == None\n\n[/Example 4]", "temperature": 0.827, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1325, "total_tokens": 1635, "completion_tokens": 310, "completion": "You are given a list of integers and an integer k. Write a program to find the kth largest element in the list using a min-heap.\n\n###Code:\n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = nums[:k]\n    heapq.heapify(heap)\n    \n    for num in nums[k:]:\n        if num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    \n    return heap[0]\n```\n\n###Testcases:\n\n```python\nassert findKthLargest([3, 2, 1, 5, 6, 4], 2) == 5\nassert findKthLargest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4\nassert findKthLargest([5, 1, 6, 9, 2, 8, 4, 7, 3], 3) == 7\nassert findKthLargest([7, 10, 4, 3, 20, 15], 3) == 10\nassert findKthLargest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 1) == 10\n```\n\n[/Example 4]", "temperature": 0.727, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}], "category": "Heap", "prompt_tokens": 979, "total_tokens": 1425, "completion_tokens": 446, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    result = []\n    heap = [(arr[0], i, 0) for i, arr in enumerate(arrays) if arr]\n    heapq.heapify(heap)\n    while heap:\n        val, arr_idx, elem_idx = heapq.heappop(heap)\n        result.append(val)\n        if elem_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][elem_idx + 1], arr_idx, elem_idx + 1)\n            heapq.heappush(heap, next_tuple)\n    return result\n\n###Testcases: \n\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 9, 10, 11]]) == [0, 1, 2, 3, 4, 5, 6, 9, 10, 11]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 4, 7], [2, 5, 8], [3, 6, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[5, 10, 15, 20], [3, 6, 9, 12, 18], [7, 14, 21, 28]]) == [3, 5, 6, 7, 9, 10, 12, 14, 15, 18, 20, 21, 28]\nassert mergeSortedArrays([[1], [2], [3]]) == [1, 2, 3]\n\n[/Example 4]", "temperature": 0.746, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1076, "total_tokens": 1291, "completion_tokens": 215, "completion": "You are given a list of integers. Write a program to find the kth smallest element in the list.\n\n###Code: \n\nimport heapq\n\ndef kthSmallest(nums: list, k: int) -> int:\n    heap = nums[:k]\n    heapq.heapify(heap)\n    \n    for num in nums[k:]:\n        if num < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    \n    return heap[0]\n\n###Testcases: \n\nassert kthSmallest([5, 15, 10, 20, 3], 3) == 10\nassert kthSmallest([1, 2, 3, 4, 5], 1) == 1\nassert kthSmallest([10, 20, 30, 40, 50], 5) == 50\nassert kthSmallest([10, 20, 30, 40, 50], 2) == 20\n\n[/Example 4]", "temperature": 0.862, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}], "category": "Heap", "prompt_tokens": 968, "total_tokens": 1216, "completion_tokens": 248, "completion": "Given a list of integers, write a program to find the kth largest element in the list.\n\n###Code: \n\nimport heapq\n\ndef kthLargestElement(nums: list, k: int) -> int:\n    heap = nums[:k]\n    heapq.heapify(heap)\n    for num in nums[k:]:\n        if num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return heap[0]\n\n###Testcases:\n\nassert kthLargestElement([3, 2, 1, 5, 6, 4], 2) == 5\nassert kthLargestElement([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4\nassert kthLargestElement([9, 8, 7, 6, 5, 4, 3, 2, 1], 3) == 7\nassert kthLargestElement([1, 1, 1, 1, 1, 1, 1], 1) == 1\n\n[/Example 4]", "temperature": 0.809, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}], "category": "Heap", "prompt_tokens": 1015, "total_tokens": 1369, "completion_tokens": 354, "completion": "Write a function to merge K sorted arrays into one sorted array.\n\n###Code: \n\nimport heapq\n\ndef mergeKSortedArrays(arrays):\n    merged = []\n    heap = [(array[0], i, 0) for i, array in enumerate(arrays) if array]\n    heapq.heapify(heap)\n    while heap:\n        val, arr_idx, idx = heapq.heappop(heap)\n        merged.append(val)\n        if idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][idx + 1], arr_idx, idx + 1)\n            heapq.heappush(heap, next_tuple)\n    return merged\n\n###Testcases:\n\nassert mergeKSortedArrays([[1, 3, 5], [2, 4, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeKSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeKSortedArrays([[1, 4, 7], [2, 5, 8], [3, 6, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeKSortedArrays([[1, 2], [3, 4]]) == [1, 2, 3, 4]\n\n[/Example 4]", "temperature": 0.714, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1187, "total_tokens": 1647, "completion_tokens": 460, "completion": "Write a function that takes an array of integers and converts it into a max heap. The function should rearrange the elements in the array so that they form a max heap. After the conversion, the root of the heap should contain the maximum value.\n\n###Code: \n\ndef maxHeapify(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\ndef heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    if l < n and arr[l] > arr[largest]:\n        largest = l\n\n    if r < n and arr[r] > arr[largest]:\n        largest = r\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\n\n###Testcases: \n\narr1 = [4, 10, 3, 5, 1]\nmaxHeapify(arr1)\nassert arr1 == [10, 5, 3, 4, 1]\n\narr2 = [5, 15, 10, 7, 20, 11]\nmaxHeapify(arr2)\nassert arr2 == [20, 15, 11, 7, 5, 10]\n\narr3 = [1, 2, 3, 4, 5]\nmaxHeapify(arr3)\nassert arr3 == [5, 4, 3, 1, 2]\n\narr4 = [50, 40, 30, 20, 10]\nmaxHeapify(arr4)\nassert arr4 == [50, 40, 30, 20, 10]\n\narr5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nmaxHeapify(arr5)\nassert arr5 == [10, 9, 7, 8, 5, 6, 3, 4, 1, 2]\n\n[/Example 4]", "temperature": 0.791, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1377, "total_tokens": 1720, "completion_tokens": 343, "completion": "You are given a stream of integers and at any given moment, you have to return the median of all the elements seen so far. Implement this using a min heap and a max heap.\n\n###Code:\n\n```python\nimport heapq\n\nclass MedianFinder:\n    def __init__(self):\n        self.min_heap = []\n        self.max_heap = []\n\n    def addNum(self, num: int) -> None:\n        if not self.min_heap or num > self.min_heap[0]:\n            heapq.heappush(self.min_heap, num)\n        else:\n            heapq.heappush(self.max_heap, -num)\n\n        if len(self.min_heap) > len(self.max_heap) + 1:\n            heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap))\n        elif len(self.max_heap) > len(self.min_heap):\n            heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap))\n\n    def findMedian(self) -> float:\n        if len(self.min_heap) == len(self.max_heap):\n            return (self.min_heap[0] - self.max_heap[0]) / 2\n        else:\n            return float(self.min_heap[0])\n\n# Example usage:\nmf = MedianFinder()\nmf.addNum(1)\nmf.addNum(2)\nmf.addNum(3)\nassert mf.findMedian() == 2.0\nmf.addNum(4)\nassert mf.findMedian() == 2.5\n```\n\n###Testcases:\n\nThere are no specific test cases for this implementation as the correctness of the median finder can be verified using various inputs and by comparing the outputs with manual calculations.\n\n\n[/Example 4]", "temperature": 0.805, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1024, "total_tokens": 1226, "completion_tokens": 202, "completion": "You are given a list of integers. Write a function to return the kth smallest element in the list.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthSmallestElement(nums: List[int], k: int) -> int:\n    return heapq.nsmallest(k, nums)[-1]\n```\n\n###Testcases:\n\n```python\nassert kthSmallestElement([5, 7, 2, 3, 4, 1, 6], 3) == 3\nassert kthSmallestElement([9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == 5\nassert kthSmallestElement([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == 1\nassert kthSmallestElement([5], 1) == 5\n```\n\n", "temperature": 0.808, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 953, "total_tokens": 1163, "completion_tokens": 210, "completion": "Given a list of integers, write a program to find the kth smallest element in the list using min heap.\n\n###Code: \n\nimport heapq\n\ndef kthSmallestElement(nums: List[int], k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    for _ in range(k):\n        res = heapq.heappop(heap)\n    return res\n\n###Testcases: \n\nassert kthSmallestElement([4, 2, 1, 3, 5], 3) == 3\nassert kthSmallestElement([7, 10, 4, 3, 20, 15], 4) == 10\nassert kthSmallestElement([1, 1, 1, 1, 1], 1) == 1\nassert kthSmallestElement([5, 5, 5, 5, 5, 5], 3) == 5\n\n", "temperature": 0.89, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}], "category": "Heap", "prompt_tokens": 1332, "total_tokens": 1572, "completion_tokens": 240, "completion": "Write a program to implement a priority queue using a min heap.\n\n###Code:\n\n```python\nimport heapq\n\nclass PriorityQueue:\n    def __init__(self):\n        self.pq = []\n        self.index = 0\n\n    def push(self, priority, item):\n        heapq.heappush(self.pq, (priority, self.index, item))\n        self.index += 1\n\n    def pop(self):\n        return heapq.heappop(self.pq)[-1]\n\n# Usage example\npq = PriorityQueue()\npq.push(3, 'Task 1')\npq.push(1, 'Task 2')\npq.push(2, 'Task 3')\nprint(pq.pop())  # Output: Task 2\nprint(pq.pop())  # Output: Task 3\nprint(pq.pop())  # Output: Task 1\n```\n\n###Testcases:\n\n```python\npq = PriorityQueue()\npq.push(5, 'Task A')\npq.push(3, 'Task B')\npq.push(7, 'Task C')\nassert pq.pop() == 'Task B'\nassert pq.pop() == 'Task A'\nassert pq.pop() == 'Task C'\n```", "temperature": 0.812, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1429, "total_tokens": 1662, "completion_tokens": 233, "completion": "Write a program to implement a priority queue using a min heap.\n\n###Code: \n\nimport heapq\n\nclass PriorityQueue:\n    def __init__(self):\n        self.heap = []\n    \n    def push(self, priority: int, item: str) -> None:\n        heapq.heappush(self.heap, (priority, item))\n    \n    def pop(self) -> str:\n        return heapq.heappop(self.heap)[1]\n    \n    def peek(self) -> str:\n        return self.heap[0][1]\n    \n    def __len__(self) -> int:\n        return len(self.heap)\n\n###Testcases: \n\npq = PriorityQueue()\npq.push(3, \"Task 1\")\npq.push(1, \"Task 2\")\npq.push(2, \"Task 3\")\nassert pq.pop() == \"Task 2\"\npq.push(0, \"Task 4\")\nassert len(pq) == 3\nassert pq.peek() == \"Task 4\"\nassert pq.pop() == \"Task 4\"\nassert pq.pop() == \"Task 3\"\nassert pq.pop() == \"Task 1\"\n\n[/Example 4]", "temperature": 0.762, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1321, "total_tokens": 1588, "completion_tokens": 267, "completion": "Implement a priority queue using a min heap. The priority queue should support the following operations: \n1. Insert an element with a given priority.\n2. Remove the element with the highest priority.\n3. Check if the priority queue is empty.\n\n###Code: \n\nimport heapq\n\nclass PriorityQueue:\n    def __init__(self):\n        self.heap = []\n        self.index = 0\n\n    def insert(self, priority: int, item: str) -> None:\n        heapq.heappush(self.heap, (priority, self.index, item))\n        self.index += 1\n\n    def removeHighestPriority(self) -> str:\n        return heapq.heappop(self.heap)[2]\n\n    def isEmpty(self) -> bool:\n        return len(self.heap) == 0\n\n###Testcases: \n\npq = PriorityQueue()\npq.insert(3, \"Task 1\")\npq.insert(1, \"Task 2\")\npq.insert(2, \"Task 3\")\nassert pq.removeHighestPriority() == \"Task 2\"\npq.insert(5, \"Task 4\")\nassert pq.removeHighestPriority() == \"Task 3\"\nassert not pq.isEmpty()\nassert pq.removeHighestPriority() == \"Task 1\"\nassert pq.removeHighestPriority() == \"Task 4\"\nassert pq.isEmpty()\n\n[/Example 4]", "temperature": 0.791, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}], "category": "Heap", "prompt_tokens": 1368, "total_tokens": 1785, "completion_tokens": 417, "completion": "Write a program to find the smallest range that includes at least one element from each of the k sorted lists.\n\n###Code: \n\nimport heapq\n\ndef smallestRange(nums: list) -> list:\n    heap = [(row[0], i, 0) for i, row in enumerate(nums)]\n    heapq.heapify(heap)\n    range_start, range_end = float('-inf'), float('inf')\n    max_val = max(row[0] for row in nums)\n\n    while True:\n        min_val, row, col = heapq.heappop(heap)\n        if max_val - min_val < range_end - range_start:\n            range_start, range_end = min_val, max_val\n        if col + 1 == len(nums[row]):\n            return [range_start, range_end]\n        next_val = nums[row][col + 1]\n        max_val = max(max_val, next_val)\n        heapq.heappush(heap, (next_val, row, col + 1))\n\n###Testcases: \n\nassert smallestRange([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]]) == [20, 24]\nassert smallestRange([[1, 3, 6], [2, 4, 9], [6, 8, 10]]) == [6, 6]\nassert smallestRange([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 7]\nassert smallestRange([[10, 20, 30], [15, 25, 35], [17, 27, 37]]) == [15, 17]\nassert smallestRange([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [4, 9]\n\n[/Example 4]", "temperature": 0.789, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1540, "total_tokens": 1944, "completion_tokens": 404, "completion": "Write a program to find the Kth smallest element in an unsorted array using a min-heap.\n\n###Code: \n\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heap = arr[:k]\n    heapq.heapify(heap)\n\n    for num in arr[k:]:\n        if num < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n\n    return heap[0]\n\n###Testcases: \n\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([12, 3, 5, 7, 19], 2) == 5\nassert kthSmallest([30, 40, 10, 20, 50], 4) == 40\nassert kthSmallest([1, 2, 3, 4, 5], 1) == 1\nassert kthSmallest([5, 4, 3, 2, 1], 5) == 5\nassert kthSmallest([1, 2, 3, 4, 5], 5) == 5\nassert kthSmallest([5, 4, 3, 2, 1], 1) == 1\nassert kthSmallest([1], 1) == 1\nassert kthSmallest([3, 3, 3, 3, 3], 2) == 3\nassert kthSmallest([3, 1, 2, 4, 5], 4) == 5\nassert kthSmallest([9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == 5\n\n[/Example 4]", "temperature": 0.719, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1730, "total_tokens": 2016, "completion_tokens": 286, "completion": "You are given a stream of integers. Design a class that can return the kth largest element at any time.\n\n###Code: \n\nimport heapq\n\nclass KthLargest:\n    def __init__(self, k: int, nums: list):\n        self.k = k\n        self.nums = nums\n        heapq.heapify(self.nums)\n        while len(self.nums) > k:\n            heapq.heappop(self.nums)\n\n    def add(self, val: int) -> int:\n        if len(self.nums) < self.k:\n            heapq.heappush(self.nums, val)\n        else:\n            heapq.heappushpop(self.nums, val)\n        return self.nums[0]\n\n###Testcases: \n\nkthLargest = KthLargest(3, [4, 5, 8, 2])\nassert kthLargest.add(3) == 4\nassert kthLargest.add(5) == 4\nassert kthLargest.add(10) == 5\nassert kthLargest.add(9) == 8\nassert kthLargest.add(4) == 8\nassert kthLargest.add(1) == 8\nassert kthLargest.add(7) == 7\nassert kthLargest.add(6) == 6\n\n[/Example 4]", "temperature": 0.752, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1377, "total_tokens": 1593, "completion_tokens": 216, "completion": "Write a program to implement a priority queue using a min heap.\n\n###Code: \n\nimport heapq\n\nclass PriorityQueue:\n    def __init__(self):\n        self.heap = []\n        self.index = 0\n\n    def push(self, priority, item):\n        heapq.heappush(self.heap, (priority, self.index, item))\n        self.index += 1\n\n    def pop(self):\n        return heapq.heappop(self.heap)[-1]\n\n    def __len__(self):\n        return len(self.heap)\n\n\n###Testcases: \n\npq = PriorityQueue()\npq.push(3, \"Task 1\")\npq.push(5, \"Task 2\")\npq.push(1, \"Task 3\")\n\nassert pq.pop() == \"Task 3\"\nassert pq.pop() == \"Task 1\"\nassert pq.pop() == \"Task 2\"\n\npq.push(2, \"Task 4\")\npq.push(4, \"Task 5\")\n\nassert len(pq) == 2\nassert pq.pop() == \"Task 4\"\n\n[/Example 4]", "temperature": 0.744, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1306, "total_tokens": 1780, "completion_tokens": 474, "completion": "Write a program to implement a min heap data structure from scratch. The program should include functionalities to insert an element, remove the minimum element, and return the minimum element without removing it.\n\n###Code:\n\n```python\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, val):\n        self.heap.append(val)\n        self._heapify_up(len(self.heap) - 1)\n\n    def removeMin(self):\n        if len(self.heap) == 0:\n            return None\n        if len(self.heap) == 1:\n            return self.heap.pop()\n        min_val = self.heap[0]\n        self.heap[0] = self.heap.pop()\n        self._heapify_down(0)\n        return min_val\n\n    def getMin(self):\n        if len(self.heap) > 0:\n            return self.heap[0]\n        return None\n\n    def _heapify_up(self, index):\n        parent = (index - 1) // 2\n        if index > 0 and self.heap[index] < self.heap[parent]:\n            self.heap[index], self.heap[parent] = self.heap[parent], self.heap[index]\n            self._heapify_up(parent)\n\n    def _heapify_down(self, index):\n        left = 2 * index + 1\n        right = 2 * index + 2\n        smallest = index\n        if left < len(self.heap) and self.heap[left] < self.heap[smallest]:\n            smallest = left\n        if right < len(self.heap) and self.heap[right] < self.heap[smallest]:\n            smallest = right\n        if smallest != index:\n            self.heap[index], self.heap[smallest] = self.heap[smallest], self.heap[index]\n            self._heapify_down(smallest)\n```\n\n###Testcases:\n\n```python\nmin_heap = MinHeap()\nmin_heap.insert(5)\nmin_heap.insert(3)\nmin_heap.insert(8)\nassert min_heap.getMin() == 3\nassert min_heap.removeMin() == 3\nassert min_heap.getMin() == 5\nmin_heap.insert(2)\nassert min_heap.getMin() == 2\nassert min_heap.removeMin() == 2\nassert min_heap.getMin() == 5\n```\n\n[/Example 4]", "temperature": 0.899, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1083, "total_tokens": 1317, "completion_tokens": 234, "completion": "Given a list of integers, write a function to construct a min-heap using the integers and then return the elements of the heap in sorted order.\n\n###Code: \n\nimport heapq\n\ndef sortUsingMinHeap(nums: list) -> list:\n    min_heap = nums[:]\n    heapq.heapify(min_heap)\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n    return result\n\n###Testcases: \n\nassert sortUsingMinHeap([5, 3, 8, 2, 10, 7]) == [2, 3, 5, 7, 8, 10]\nassert sortUsingMinHeap([23, 14, 5, 67, 32, 16, 98, 20]) == [5, 14, 16, 20, 23, 32, 67, 98]\nassert sortUsingMinHeap([9, 12, 5, 18, 52, 32]) == [5, 9, 12, 18, 32, 52]\n\n[/Example 4]", "temperature": 0.819, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}], "category": "Heap", "prompt_tokens": 975, "total_tokens": 1267, "completion_tokens": 292, "completion": "Given a list of integers, write a function to create a min heap based on the absolute difference of each integer from a given value x. If two integers have the same absolute difference, consider the smaller integer to break the tie.\n\n###Code:\n\n```python\nimport heapq\n\ndef createMinHeap(arr: list, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result\n```\n\n###Testcases:\n\n```python\nassert createMinHeap([4, 7, 2, 9, 5], 6) == [7, 5, 4, 2, 9]\nassert createMinHeap([10, 20, 30, 40, 50], 35) == [30, 40, 20, 10, 50]\nassert createMinHeap([3, 6, 9, 12, 15], 8) == [9, 6, 3, 12, 15]\nassert createMinHeap([1, 3, 5, 7, 9], 4) == [5, 3, 7, 1, 9]\n```\n\n[/Example 4]", "temperature": 0.896, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}], "category": "Heap", "prompt_tokens": 1022, "total_tokens": 1303, "completion_tokens": 281, "completion": "Given a list of integers, create a min heap and then pop elements from the heap until it is empty, storing the popped elements in a new list.\n\n###Code: \n\nimport heapq\n\ndef createMinHeapAndPop(nums: list) -> list:\n    min_heap = []\n    for num in nums:\n        heapq.heappush(min_heap, num)\n    popped_elements = []\n    while min_heap:\n        popped_elements.append(heapq.heappop(min_heap))\n    return popped_elements\n\n###Testcases: \n\nassert createMinHeapAndPop([9, 4, 7, 1, 5, 3]) == [1, 3, 4, 5, 7, 9]\nassert createMinHeapAndPop([5, 8, 2, 12, 3, 7, 6, 10]) == [2, 3, 5, 6, 7, 8, 10, 12]\nassert createMinHeapAndPop([15, 10, 20, 8, 12]) == [8, 10, 12, 15, 20]\nassert createMinHeapAndPop([50, 40, 30, 20, 10]) == [10, 20, 30, 40, 50]\n\n[/Example 4]", "temperature": 0.876, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1194, "total_tokens": 1495, "completion_tokens": 301, "completion": "Given a list of tuples representing (word, frequency), write a program to return the k most frequent words in the list.\n\n###Code: \n\nimport heapq\nfrom collections import Counter\n\ndef topKFrequent(words: list, k: int) -> list:\n    word_count = Counter(words)\n    heap = [(-freq, word) for word, freq in word_count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n\n###Testcases: \n\nassert topKFrequent([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\"], 2) == ['apple', 'banana']\nassert topKFrequent([\"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"c\"], 2) == ['c', 'a']\nassert topKFrequent([\"this\", \"is\", \"a\", \"test\", \"this\", \"is\", \"a\", \"test\", \"this\"], 3) == ['this', 'is', 'a']\nassert topKFrequent([\"z\", \"z\", \"z\", \"z\", \"z\", \"z\", \"z\"], 1) == ['z']\nassert topKFrequent([\"cat\", \"bat\", \"rat\", \"cat\", \"bat\", \"bat\", \"rat\", \"cat\", \"mat\", \"mat\"], 3) == ['bat', 'cat', 'rat']\n\n[/Example 4]", "temperature": 0.706, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1384, "total_tokens": 1695, "completion_tokens": 311, "completion": "You are given a list of intervals represented as pairs of integers. Write a program to merge overlapping intervals and return a list of non-overlapping intervals.\n\n###Code: \n\n```python\ndef mergeIntervals(intervals: list) -> list:\n    if not intervals:\n        return []\n    \n    intervals.sort(key=lambda x: x[0])\n    merged = [intervals[0]]\n    \n    for i in range(1, len(intervals)):\n        if intervals[i][0] <= merged[-1][1]:\n            merged[-1] = (merged[-1][0], max(intervals[i][1], merged[-1][1]))\n        else:\n            merged.append(intervals[i])\n    \n    return merged\n```\n\n###Testcases: \n\n```python\nassert mergeIntervals([[1,3],[2,6],[8,10],[15,18]]) == [[1,6],[8,10],[15,18]]\nassert mergeIntervals([[1,4],[4,5]]) == [[1,5]]\nassert mergeIntervals([[1,4],[0,4]]) == [[0,4]]\nassert mergeIntervals([[1,4],[0,0]]) == [[0,0],[1,4]]\nassert mergeIntervals([]) == []\nassert mergeIntervals([[2,3],[4,5],[6,7],[8,9],[1,10]]) == [[1,10]]\nassert mergeIntervals([[1,4],[2,3]]) == [[1,4]]\n```", "temperature": 0.756, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1031, "total_tokens": 1464, "completion_tokens": 433, "completion": "You are given a list of tasks represented by characters, where each task could be done in one interval. Also, each interval is required to have a cooling period n. This means that there must be at least n intervals between any two same tasks. Write a function to return the least number of intervals the CPU will take to finish all the given tasks.\n\n###Code:\n\n```python\nimport heapq\n\ndef leastInterval(tasks: list, n: int) -> int:\n    task_count = {}\n    for task in tasks:\n        task_count[task] = task_count.get(task, 0) + 1\n    \n    max_heap = [-count for count in task_count.values()]\n    heapq.heapify(max_heap)\n    \n    intervals = 0\n    while max_heap:\n        temp = []\n        for i in range(n + 1):\n            if max_heap:\n                temp.append(heapq.heappop(max_heap))\n        \n        for t in temp:\n            if t < -1:\n                heapq.heappush(max_heap, t + 1)\n        \n        if max_heap:\n            intervals += n + 1\n        else:\n            intervals += len(temp)\n    \n    return intervals\n```\n\n###Testcases:\n\n```python\nassert leastInterval([\"A\", \"A\", \"A\", \"B\", \"B\", \"B\"], 2) == 8\nassert leastInterval([\"A\", \"A\", \"A\", \"B\", \"B\", \"B\"], 0) == 6\nassert leastInterval([\"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"B\", \"C\", \"C\", \"D\", \"D\", \"E\", \"E\"], 2) == 16\nassert leastInterval([\"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"C\", \"D\"], 3) == 13\n```\n\n###Explanation:\nIn the first example, the least number of intervals the CPU will take to finish all the given tasks is 8. \n\n[/Example 4]", "temperature": 0.844, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 960, "total_tokens": 1231, "completion_tokens": 271, "completion": "You have been given an array of integers and you are required to find the kth smallest element in the array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthSmallest(nums: list, k: int) -> int:\n    heap = nums[:k]\n    heapq.heapify(heap)\n    \n    for i in range(k, len(nums)):\n        if nums[i] < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, nums[i])\n    \n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert findKthSmallest([3,2,1,5,6,4], 2) == 2\nassert findKthSmallest([3,2,3,1,2,4,5,5,6], 4) == 3\nassert findKthSmallest([99, 78, 55, 22, 11, 7], 3) == 22\nassert findKthSmallest([4, 5, 8, 2, 1, 9], 1) == 1\nassert findKthSmallest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.716, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1072, "total_tokens": 1252, "completion_tokens": 180, "completion": "You are given an array of meeting time intervals where intervals[i] = [starti, endi]. Write a function to determine if a person could attend all meetings.\n\n###Code: \n\ndef canAttendMeetings(intervals: list) -> bool:\n    intervals.sort()\n    for i in range(1, len(intervals)):\n        if intervals[i][0] < intervals[i-1][1]:\n            return False\n    return True\n\n###Testcases: \n\nassert canAttendMeetings([[0,30],[5,10],[15,20]]) == False\nassert canAttendMeetings([[7,10],[2,4]]) == True\nassert canAttendMeetings([[9,10],[4,9],[4,17]]) == False\nassert canAttendMeetings([[1,5],[8,9],[8,10]]) == True\n\n[/Example 4]", "temperature": 0.847, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}], "category": "Heap", "prompt_tokens": 1119, "total_tokens": 1340, "completion_tokens": 221, "completion": "Given a list of integers, write a program to find the kth smallest element in the list.\n\n###Code: \n\nimport heapq\n\ndef kthSmallest(nums: list, k: int) -> int:\n    heap = nums[:k]\n    heapq._heapify_max(heap)\n    for num in nums[k:]:\n        if num < heap[0]:\n            heapq._heappop_max(heap)\n            heapq.heappush(heap, num)\n    return heap[0]\n\n###Testcases: \n\nassert kthSmallest([5, 3, 8, 9, 2, 6], 3) == 5\nassert kthSmallest([1, 2, 3, 4, 5], 1) == 1\nassert kthSmallest([10, 20, 30, 40, 50], 4) == 40\nassert kthSmallest([7, 10, 4, 3, 20, 15], 2) == 4\n\n[/Example 4]", "temperature": 0.726, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1577, "completion_tokens": 286, "completion": "You are given an array of integers, write a program to find the kth largest element in the array.\n\n###Code: \n\ndef findKthLargest(nums: list, k: int) -> int:\n    import heapq\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return heap[0]\n\n###Testcases: \n\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 77, 33, 55, 11, 88, 44, 22, 66], 3) == 66\nassert findKthLargest([49, 57, 33, 25, 41, 54, 67, 82, 91], 5) == 54\nassert findKthLargest([5, 5, 5, 5, 5], 1) == 5\nassert findKthLargest([-1, -2, -3, -4, -5], 3) == -3\n\n", "temperature": 0.864, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1481, "total_tokens": 1849, "completion_tokens": 368, "completion": "You are given a list of points in the form of (x, y) coordinates. Write a program to find the k closest points to the origin (0, 0). You may use the heapq module in Python.\n\n###Code:\n\n```python\nimport heapq\n\ndef kClosest(points: list, k: int) -> list:\n    heap = []\n    for (x, y) in points:\n        distance = x ** 2 + y ** 2\n        heapq.heappush(heap, (distance, (x, y)))\n    \n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n    \n    return result\n```\n\n###Testcases:\n\n```python\nassert kClosest([(1, 3), (-2, 2), (5, 8), (0, 1)], 2) == [(0, 1), (-2, 2)]\nassert kClosest([(3, 3), (5, -1), (-2, 4), (7, 8), (0, 0)], 3) == [(0, 0), (3, 3), (5, -1)]\nassert kClosest([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], 4) == [(1, 1), (2, 2), (3, 3), (4, 4)]\nassert kClosest([(10, 10), (20, 20), (30, 30), (40, 40), (50, 50)], 3) == [(10, 10), (20, 20), (30, 30)]\n```", "temperature": 0.837, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1128, "total_tokens": 1416, "completion_tokens": 288, "completion": "You are given a list of integers and a target integer. Write a program to find the k closest elements to the target in the list, sorted in ascending order. If there is a tie, the smaller elements are preferred.\n\n###Code: \n\n```python\nimport heapq\n\ndef findClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n    result = [heappop(heap)[1] for _ in range(k)]\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert findClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert findClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert findClosestElements([5, 6, 7, 8, 9], 3, 7) == [6, 7, 8]\nassert findClosestElements([1, 4, 5, 7, 8, 9], 3, 6) == [5, 7, 8]\n```", "temperature": 0.841, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1334, "completion_tokens": 277, "completion": "You are given a list of integers and a target value. Write a program to find the k closest elements to the target in the list and return them in sorted order.\n\n###Code:\n\n```python\nimport heapq\n\ndef kClosestElements(nums: list, k: int, target: int) -> list:\n    heap = []\n    for num in nums:\n        diff = abs(num - target)\n        heapq.heappush(heap, (diff, num))\n    \n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n    \n    return sorted(result)\n```\n\n###Testcases:\n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 3, 3) == [2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 2, 35) == [30, 40]\nassert kClosestElements([5, 10, 15, 20, 25], 4, 18) == [15, 20, 10, 25]\nassert kClosestElements([100, 200, 300, 400, 500], 1, 350) == [300]\n```\n\n[/Example 4]", "temperature": 0.808, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}], "category": "Heap", "prompt_tokens": 1011, "total_tokens": 1224, "completion_tokens": 213, "completion": "Design a data structure that supports the following operations in constant time:\n\n1. Insert an element into the data structure.\n2. Delete the maximum element from the data structure.\n3. Find the maximum element in the data structure.\n\n###Code: \n\nimport heapq\n\nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, value):\n        heapq.heappush(self.heap, -value)\n\n    def deleteMax(self):\n        return -heapq.heappop(self.heap)\n\n    def findMax(self):\n        return -self.heap[0]\n\n###Testcases: \n\nmax_heap = MaxHeap()\nmax_heap.insert(5)\nmax_heap.insert(3)\nmax_heap.insert(8)\nmax_heap.insert(2)\nassert max_heap.findMax() == 8\nassert max_heap.deleteMax() == 8\nassert max_heap.findMax() == 5\nmax_heap.insert(10)\nassert max_heap.findMax() == 10\nassert max_heap.deleteMax() == 10\n\n[/Example 4]", "temperature": 0.898, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1183, "total_tokens": 1531, "completion_tokens": 348, "completion": "Design a data structure that supports the following two operations:\n\n1. addNum(num: int) - Add a integer number from the data stream to the data structure.\n2. findMedian() - Returns the median of all elements so far. \n\n###Code: \n\nimport heapq\n\nclass MedianFinder:\n\n    def __init__(self):\n        self.min_heap = []\n        self.max_heap = []\n\n    def addNum(self, num: int) -> None:\n        if not self.max_heap or num <= -self.max_heap[0]:\n            heapq.heappush(self.max_heap, -num)\n        else:\n            heapq.heappush(self.min_heap, num)\n        \n        if len(self.min_heap) > len(self.max_heap):\n            heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap))\n        elif len(self.max_heap) > len(self.min_heap) + 1:\n            heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap))\n\n    def findMedian(self) -> float:\n        if len(self.max_heap) == len(self.min_heap):\n            return (-self.max_heap[0] + self.min_heap[0]) / 2.0\n        else:\n            return -self.max_heap[0]\n\n###Testcases: \n\nmf = MedianFinder()\nmf.addNum(1)\nmf.addNum(2)\nassert mf.findMedian() == 1.5\nmf.addNum(3)\nassert mf.findMedian() == 2.0\nmf.addNum(4)\nassert mf.findMedian() == 2.5\nmf.addNum(5)\nassert mf.findMedian() == 3.0\n\n[/Example 4]", "temperature": 0.752, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1373, "total_tokens": 1657, "completion_tokens": 284, "completion": "Given a list of integers, find the kth smallest element in the list using a min-heap.\n\n###Code: \n\nimport heapq\n\ndef kthSmallestElement(nums: list, k: int) -> int:\n    heap = nums[:k]\n    heapq.heapify(heap)\n    for num in nums[k:]:\n        if num < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return heap[0]\n\n###Testcases: \n\nassert kthSmallestElement([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallestElement([1, 3, 5, 7, 9, 2, 4, 6, 8, 10], 4) == 4\nassert kthSmallestElement([5, 8, 12, 7, 6, 2, 4, 9], 5) == 7\nassert kthSmallestElement([1, 2, 3, 4, 5], 3) == 3\nassert kthSmallestElement([9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == 5\n\n[/Example 4]", "temperature": 0.701, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1020, "total_tokens": 1248, "completion_tokens": 228, "completion": "Given a list of integers, find the kth smallest element in the list.\n\n###Code: \n\nimport heapq\n\ndef kthSmallestElement(nums: list, k: int) -> int:\n    heapq.heapify(nums)\n    for _ in range(k):\n        result = heapq.heappop(nums)\n    return result\n\n###Testcases: \n\nassert kthSmallestElement([3, 1, 4, 1, 5, 9, 2, 6], 3) == 3\nassert kthSmallestElement([9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == 5\nassert kthSmallestElement([5, 7, 2, 9, 1, 6, 3, 8, 4], 7) == 7\nassert kthSmallestElement([1], 1) == 1\nassert kthSmallestElement([2, 1], 2) == 2\n\n[/Example 4]", "temperature": 0.805, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 949, "total_tokens": 1164, "completion_tokens": 215, "completion": "Given a list of integers, write a program to find the kth smallest element in the array using a min heap.\n\n###Code: \n\nimport heapq\n\ndef kthSmallestElement(arr: list, k: int) -> int:\n    heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n\n    for _ in range(k):\n        result = heapq.heappop(heap)\n\n    return result\n\n###Testcases: \n\nassert kthSmallestElement([4, 2, 7, 3, 9, 1], 3) == 4\nassert kthSmallestElement([10, 5, 8, 12, 6, 15], 2) == 6\nassert kthSmallestElement([1, 1, 1, 1, 1], 3) == 1\nassert kthSmallestElement([5, 4, 3, 2, 1], 1) == 1\n\n[/Example 4]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1230, "total_tokens": 1534, "completion_tokens": 304, "completion": "Given a list of integers, create a min heap and then pop elements from the heap one by one and return them in ascending order.\n\n###Code: \n\nimport heapq\n\ndef createMinHeapAndPop(heap_elements: list) -> list:\n    heapq.heapify(heap_elements)\n    result = []\n    while heap_elements:\n        result.append(heapq.heappop(heap_elements))\n    return result\n\n###Testcases: \n\nassert createMinHeapAndPop([9, 4, 7, 2, 5, 8]) == [2, 4, 5, 7, 8, 9]\nassert createMinHeapAndPop([2, 1, 5, 3, 4]) == [1, 2, 3, 4, 5]\nassert createMinHeapAndPop([10, 20, 15, 40, 50, 100, 25, 45]) == [10, 15, 20, 25, 40, 45, 50, 100]\nassert createMinHeapAndPop([5, 10, 15, 20, 25]) == [5, 10, 15, 20, 25]\nassert createMinHeapAndPop([100, 75, 25, 50, 200, 150]) == [25, 50, 75, 100, 150, 200]\n\n[/Example 4]", "temperature": 0.806, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1420, "total_tokens": 1827, "completion_tokens": 407, "completion": "Given an array of integers, find the kth smallest element in the array.\n\n###Code: \n\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heap = arr[:k]\n    heapq._heapify_max(heap)\n    for i in range(k, len(arr)):\n        if arr[i] < heap[0]:\n            heapq._heapreplace_max(heap, arr[i])\n    return heap[0]\n\n###Testcases: \n\nassert kthSmallest([4,6,3,2,9], 3) == 4\nassert kthSmallest([8, 1, 7, 2, 6, 3, 5, 4], 5) == 5\nassert kthSmallest([0], 1) == 0\nassert kthSmallest([2, 1, 3, 5, 4, 7, 6], 4) == 4\nassert kthSmallest([-1, -5, -3, -4, -2], 3) == -3\nassert kthSmallest([10, -2, 4, 5, 3, 7], 2) == 4\nassert kthSmallest([1.5, 2.5, 0.5, 3.5, 1.0, 2.0], 3) == 1.5\nassert kthSmallest([99], 1) == 99\nassert kthSmallest([5, 5, 5, 5], 2) == 5\nassert kthSmallest([9, 7, 7, 9, 5, 5], 4) == 7\nassert kthSmallest([1, 1000, 100, 10, 10000], 2) == 10\n\n[/Example 4]", "temperature": 0.864, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1067, "total_tokens": 1312, "completion_tokens": 245, "completion": "You are given a list of integers. Implement a function to find the kth smallest element in the list.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(nums: List[int], k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    for _ in range(k-1):\n        heapq.heappop(heap)\n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 5) == 3\nassert kthSmallest([5, 7, 2, 3, 4, 1, 6], 3) == 3\nassert kthSmallest([9, 8, 7, 6, 5, 4, 3, 2, 1], 7) == 7\nassert kthSmallest([1, 2, 3, 4, 5], 1) == 1\n```", "temperature": 0.845, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 996, "total_tokens": 1308, "completion_tokens": 312, "completion": "Given a list of numbers, create a min heap and then perform heap sort to sort the given list in non-decreasing order using the min heap. Implement the function to achieve this.\n\n###Code\n\n```python\nimport heapq\n\ndef heapSort(arr: list) -> list:\n    heapq.heapify(arr)\n    sorted_arr = []\n    while arr:\n        sorted_arr.append(heapq.heappop(arr))\n    return sorted_arr\n```\n\n###Testcases\n\n```python\nassert heapSort([12, 11, 13, 5, 6, 7]) == [5, 6, 7, 11, 12, 13]\nassert heapSort([5, 2, 9, 1, 5, 6]) == [1, 2, 5, 5, 6, 9]\nassert heapSort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]\nassert heapSort([10, 20, 15, 40, 24, 23, 6, 5, 8, 14]) == [5, 6, 8, 10, 14, 15, 20, 23, 24, 40]\n```\n\n", "temperature": 0.859, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1592, "total_tokens": 2112, "completion_tokens": 520, "completion": "Write a function to implement a min heap in Python.\n\n###Code: \n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n\n    def parent(self, i):\n        return (i-1)//2\n\n    def leftChild(self, i):\n        return (2*i + 1)\n\n    def rightChild(self, i):\n        return (2*i + 2)\n\n    def insertKey(self, k):\n        self.heap.append(k)\n        i = len(self.heap) - 1\n        while i != 0 and self.heap[self.parent(i)] > self.heap[i]:\n            self.heap[i], self.heap[self.parent(i)] = self.heap[self.parent(i)], self.heap[i]\n            i = self.parent(i)\n\n    def decreaseKey(self, i, new_val):\n        self.heap[i] = new_val\n        while i != 0 and self.heap[self.parent(i)] > self.heap[i]:\n            self.heap[i], self.heap[self.parent(i)] = self.heap[self.parent(i)], self.heap[i]\n            i = self.parent(i)\n\n    def extractMin(self):\n        if len(self.heap) == 0:\n            return float('inf')\n        if len(self.heap) == 1:\n            return self.heap.pop()\n        \n        root = self.heap[0]\n        self.heap[0] = self.heap.pop()\n        self.minHeapify(0)\n\n        return root\n\n    def deleteKey(self, i):\n        self.decreaseKey(i, float('-inf'))\n        self.extractMin()\n\n    def minHeapify(self, i):\n        l = self.leftChild(i)\n        r = self.rightChild(i)\n        smallest = i\n        if l < len(self.heap) and self.heap[l] < self.heap[i]:\n            smallest = l\n        if r < len(self.heap) and self.heap[r] < self.heap[smallest]:\n            smallest = r\n        if smallest != i:\n            self.heap[i], self.heap[smallest] = self.heap[smallest], self.heap[i]\n            self.minHeapify(smallest)\n\n###Testcases: \n\nheap = MinHeap()\nheap.insertKey(3)\nheap.insertKey(2)\nheap.deleteKey(1)\nheap.insertKey(15)\nheap.insertKey(5)\nheap.insertKey(4)\nheap.insertKey(45)\nassert heap.extractMin() == 4\nassert heap.getMin() == 5\nheap.decreaseKey(2, 1)\nassert heap.getMin() == 1\n\n[/Example 4]", "temperature": 0.805, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1239, "total_tokens": 1482, "completion_tokens": 243, "completion": "You are given a list of integers, and you need to return the kth smallest element in the list.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heap = arr[:k]\n    heapq._heapify_max(heap)\n    for num in arr[k:]:\n        if num < heap[0]:\n            heapq._heapreplace_max(heap, num)\n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([5, 3, 8, 2, 0, 4], 3) == 4\nassert kthSmallest([7, 10, 4, 3, 20, 15], 4) == 10\nassert kthSmallest([1, 2, 3, 4, 5], 3) == 3\nassert kthSmallest([8, 7, 6, 5, 4, 3, 2, 1], 5) == 4\nassert kthSmallest([5], 1) == 5\n```", "temperature": 0.841, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1168, "total_tokens": 1658, "completion_tokens": 490, "completion": "Given a list of integers, create a min heap and then perform the following operations:\n1. Insert a new element into the heap.\n2. Pop the element with the smallest value from the heap.\n\nWrite a function to perform the above operations and return the elements popped from the heap.\n\n###Code: \n\nimport heapq\n\ndef minHeapOperations(nums: list, operations: list) -> list:\n    min_heap = []\n    result = []\n    for op in operations:\n        if op[0] == 1:\n            heapq.heappush(min_heap, op[1])\n        elif op[0] == 2:\n            result.append(heapq.heappop(min_heap))\n    return result\n\n###Testcases: \n\nassert minHeapOperations([3, 2, 4, 1, 5], [[1, 6], [1, 0], [2, 0], [1, 3]]) == [0, 1, 2]\nassert minHeapOperations([5, 4, 3, 2, 1], [[2, 0], [1, 6], [2, 0], [1, 3]]) == [1, 2]\nassert minHeapOperations([9, 8, 7, 6, 5], [[1, 4], [1, 3], [2, 0], [1, 2]]) == [3, 4, 5]\nassert minHeapOperations([1, 3, 5, 7, 9], [[2, 0], [1, 2], [2, 0], [1, 4]]) == [1, 3]\nassert minHeapOperations([10, 20, 30, 40, 50], [[1, 60], [1, 70], [2, 0], [1, 80]]) == [0, 10, 20]\nassert minHeapOperations([5, 15, 10, 20, 25], [[1, 30], [1, 35], [2, 0], [1, 40]]) == [5, 10, 15]\nassert minHeapOperations([], [[1, 5], [2, 0], [1, 3]]) == [5]\n\n[/Example 4]", "temperature": 0.751, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1429, "total_tokens": 1853, "completion_tokens": 424, "completion": "You are given a list of integers. Design a class `MedianFinder` to find the median of the list. Implement the following methods:\n\n- `addNum(num: int)`: adds the integer num from the data stream to the class.\n- `findMedian() -> float`: returns the median of all elements so far.\n\nEnsure that the time complexity of both methods is O(log n).\n\n###Code:\n\n```python\nimport heapq\n\nclass MedianFinder:\n\n    def __init__(self):\n        self.min_heap = []\n        self.max_heap = []\n\n    def addNum(self, num: int) -> None:\n        if not self.max_heap or num <= -self.max_heap[0]:\n            heapq.heappush(self.max_heap, -num)\n        else:\n            heapq.heappush(self.min_heap, num)\n        \n        if len(self.max_heap) > len(self.min_heap) + 1:\n            heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap))\n        elif len(self.min_heap) > len(self.max_heap):\n            heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap))\n\n    def findMedian(self) -> float:\n        if len(self.max_heap) == len(self.min_heap):\n            return (-self.max_heap[0] + self.min_heap[0]) / 2\n        else:\n            return -self.max_heap[0]\n```\n\n###Testcases:\n\n```python\nmf = MedianFinder()\nmf.addNum(1)\nmf.addNum(2)\nassert mf.findMedian() == 1.5\nmf.addNum(3)\nassert mf.findMedian() == 2.0\nmf.addNum(4)\nmf.addNum(5)\nassert mf.findMedian() == 3.0\nmf.addNum(6)\nmf.addNum(7)\nassert mf.findMedian() == 4.0\nmf.addNum(8)\nassert mf.findMedian() == 4.5\nmf.addNum(9)\nassert mf.findMedian() == 5.0\n```", "temperature": 0.896, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1358, "total_tokens": 1736, "completion_tokens": 378, "completion": "Write a function to implement a priority queue using the heapq module in Python. The priority queue should support the following operations:\n\n1. Insertion of a new element with a given priority.\n2. Retrieval of the element with the highest priority.\n3. Removal of the element with the highest priority.\n\n###Code:\n\n```python\nimport heapq\n\nclass PriorityQueue:\n    def __init__(self):\n        self.pq = []\n        self.entry_finder = {}\n        self.REMOVED = '<removed-task>'\n        self.counter = 0\n\n    def add_task(self, task, priority=0):\n        if task in self.entry_finder:\n            self.remove_task(task)\n        count = self.counter\n        self.counter += 1\n        entry = [priority, count, task]\n        self.entry_finder[task] = entry\n        heapq.heappush(self.pq, entry)\n\n    def remove_task(self, task):\n        entry = self.entry_finder.pop(task)\n        entry[-1] = self.REMOVED\n\n    def pop_task(self):\n        while self.pq:\n            priority, count, task = heapq.heappop(self.pq)\n            if task is not self.REMOVED:\n                del self.entry_finder[task]\n                return task\n        raise KeyError('pop from an empty priority queue')\n```\n\n###Testcases:\n\n```python\npq = PriorityQueue()\npq.add_task('task1', 5)\npq.add_task('task2', 1)\npq.add_task('task3', 3)\n\nassert pq.pop_task() == 'task2'\nassert pq.pop_task() == 'task3'\nassert pq.pop_task() == 'task1'\n\npq.add_task('task4', 2)\npq.add_task('task5', 4)\n\nassert pq.pop_task() == 'task4'\nassert pq.pop_task() == 'task5'\n```\n\n", "temperature": 0.767, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945, "question": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.", "code": "import heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result", "asserts": ["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']"], "author": "GPT", "UUID": "c210fc34-f22d-49f1-8273-d78eeb42d3e8", "tc_status": [["assert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']", "Passed"], ["assert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']", "Passed"], ["assert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']", "Passed"], ["assert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1005, "total_tokens": 1428, "completion_tokens": 423, "completion": "You are given a stream of integers and you need to find the median of the integers seen so far after each input. Write a program to find the median of the integers at any given point. \n\n###Code: \n\n```python\nimport heapq\n\nclass MedianFinder:\n\n    def __init__(self):\n        self.min_heap = []\n        self.max_heap = []\n\n    def addNum(self, num: int) -> None:\n        if not self.max_heap or num <= -self.max_heap[0]:\n            heapq.heappush(self.max_heap, -num)\n        else:\n            heapq.heappush(self.min_heap, num)\n        \n        if len(self.max_heap) > len(self.min_heap) + 1:\n            heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap))\n        elif len(self.max_heap) < len(self.min_heap):\n            heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap))\n\n    def findMedian(self) -> float:\n        if len(self.max_heap) == len(self.min_heap):\n            return (-self.max_heap[0] + self.min_heap[0]) / 2\n        else:\n            return float(-self.max_heap[0])\n```\n\n###Testcases: \n\n```python\nmf = MedianFinder()\nmf.addNum(1)\nmf.addNum(2)\nassert mf.findMedian() == 1.5\nmf.addNum(3)\nassert mf.findMedian() == 2.0\nmf.addNum(4)\nassert mf.findMedian() == 2.5\nmf.addNum(5)\nassert mf.findMedian() == 3.0\n```\n\nIn this code, `addNum` adds a number to the data structure, and `findMedian` returns the median of the current data structure.\n\nThis implementation uses two heaps, a max heap to store the smaller half of the numbers, and a min heap to store the larger half of the numbers. The median is then calculated based on the values stored in these heaps.\n\n[/Example 4]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1486, "total_tokens": 1750, "completion_tokens": 264, "completion": "You are given an array of integers. Write a function to find the kth smallest element in the array using a min heap.\n\n###Code: \n\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heap = arr[:k]\n    heapq.heapify(heap)\n    \n    for num in arr[k:]:\n        if num < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    \n    return heap[0]\n\n###Testcases: \n\nassert kthSmallest([3, 1, 4, 2, 5], 3) == 3\nassert kthSmallest([7, 10, 4, 3, 20, 15], 4) == 10\nassert kthSmallest([1, 2, 3, 4, 5], 1) == 1\nassert kthSmallest([5, 4, 3, 2, 1], 5) == 5\nassert kthSmallest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 7) == 7\n\n[/Example 4]", "temperature": 0.897, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}], "category": "Heap", "prompt_tokens": 1140, "total_tokens": 1386, "completion_tokens": 246, "completion": "You are given a list of integers and an integer k. Write a function to find the kth smallest element in the list using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(nums: list, k: int) -> int:\n    heap = nums[:k]\n    heapq.heapify(heap)\n    for num in nums[k:]:\n        if num < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([3,2,1,5,6,4], 2) == 2\nassert kthSmallest([1,2,3,4,5], 3) == 3\nassert kthSmallest([7,6,5,4,3,2,1], 5) == 5\nassert kthSmallest([9,8,7,6,5,4,3,2,1], 7) == 7\nassert kthSmallest([5,4,3,2,1], 1) == 1\n```", "temperature": 0.847, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1237, "total_tokens": 1500, "completion_tokens": 263, "completion": "You are given an array of integers representing the salaries of employees. Write a function to find the maximum difference between any two salaries after removing one salary from the list.\n\n###Code:\n\n```python\nimport heapq\n\ndef maxSalaryDifference(salaries: list) -> int:\n    min_heap = salaries[:]\n    max_heap = [-s for s in salaries]\n    heapq.heapify(min_heap)\n    heapq.heapify(max_heap)\n    \n    min_salary = heapq.heappop(min_heap)\n    max_salary = -heapq.heappop(max_heap)\n    \n    return max(max_salary - min_salary, max_salary - min_heap[0])\n```\n\n###Testcases:\n\n```python\nassert maxSalaryDifference([10, 20, 30, 40, 50]) == 40\nassert maxSalaryDifference([50, 30, 20, 10]) == 30\nassert maxSalaryDifference([1, 1, 1, 1, 1]) == 0\nassert maxSalaryDifference([100, 50, 200, 150, 250, 300]) == 250\nassert maxSalaryDifference([90, 80, 70, 60, 50, 40, 30, 20]) == 80\n```", "temperature": 0.853, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1129, "total_tokens": 1446, "completion_tokens": 317, "completion": "You are given a list of intervals, where intervals[i] = [start_i, end_i]. Write a function to merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\n\n###Code:\n\n```python\ndef mergeIntervals(intervals: List[List[int]]) -> List[List[int]]:\n    if not intervals:\n        return []\n\n    intervals.sort(key=lambda x: x[0])\n    merged = [intervals[0]]\n\n    for i in range(1, len(intervals)):\n        if intervals[i][0] <= merged[-1][1]:\n            merged[-1][1] = max(merged[-1][1], intervals[i][1])\n        else:\n            merged.append(intervals[i])\n\n    return merged\n```\n\n###Testcases:\n\n```python\nassert mergeIntervals([[1, 3], [2, 6], [8, 10], [15, 18]]) == [[1, 6], [8, 10], [15, 18]]\nassert mergeIntervals([[1, 4], [4, 5]]) == [[1, 5]]\nassert mergeIntervals([[1, 4], [2, 3]]) == [[1, 4]]\nassert mergeIntervals([[1, 3], [4, 6], [7, 9], [8, 10]]) == [[1, 3], [4, 6], [7, 10]]\nassert mergeIntervals([]) == []\n```", "temperature": 0.896, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}], "category": "Heap", "prompt_tokens": 1176, "total_tokens": 1416, "completion_tokens": 240, "completion": "You are given a list of integers and an integer k. Write a function to find the kth largest element in the list.\n\n###Code: \n\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = nums[:k]\n    heapq.heapify(heap)\n    for num in nums[k:]:\n        if num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return heap[0]\n\n###Testcases: \n\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([10, 20, 15, 30, 40, 25, 35], 3) == 25\nassert findKthLargest([5], 1) == 5\nassert findKthLargest([-1, 2, 0], 2) == 0\n\n[/Example 4]", "temperature": 0.764, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1348, "total_tokens": 1740, "completion_tokens": 392, "completion": "You are given a stream of integers. Design a data structure that supports the following operations:\n\n- void addNum(int num) - Add a new integer number from the stream to the data structure.\n- double findMedian() - Return the median of all elements so far.\n\n###Code: \n\nimport heapq\n\nclass MedianFinder:\n\n    def __init__(self):\n        self.small = []  # max heap\n        self.large = []  # min heap\n\n    def addNum(self, num: int) -> None:\n        if not self.small or num <= -self.small[0]:\n            heapq.heappush(self.small, -num)\n        else:\n            heapq.heappush(self.large, num)\n        if len(self.small) > len(self.large) + 1:\n            heapq.heappush(self.large, -heapq.heappop(self.small))\n        elif len(self.large) > len(self.small):\n            heapq.heappush(self.small, -heapq.heappop(self.large))\n\n    def findMedian(self) -> float:\n        if len(self.small) == len(self.large):\n            return (-self.small[0] + self.large[0]) / 2\n        else:\n            return -self.small[0]\n\n###Testcases: \n\nmf = MedianFinder()\nmf.addNum(1)\nmf.addNum(2)\nassert mf.findMedian() == 1.5\nmf.addNum(3)\nassert mf.findMedian() == 2.0\nmf.addNum(4)\nassert mf.findMedian() == 2.5\nmf.addNum(5)\nassert mf.findMedian() == 3.0\nmf.addNum(6)\nassert mf.findMedian() == 3.5\nmf.addNum(7)\nassert mf.findMedian() == 4.0\nmf.addNum(8)\nassert mf.findMedian() == 4.5\n\n[/Example 4]", "temperature": 0.76, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1538, "total_tokens": 1956, "completion_tokens": 418, "completion": "You are given a stream of integers. Design a class to find the median of the current elements at any given time. The class should have a method `addNum` to add a new integer from the stream, and a method `findMedian` to return the median of the current elements.\n\n###Code: \n\nimport heapq\n\nclass MedianFinder:\n\n    def __init__(self):\n        self.min_heap = []\n        self.max_heap = []\n\n    def addNum(self, num: int) -> None:\n        if not self.max_heap or num <= -self.max_heap[0]:\n            heapq.heappush(self.max_heap, -num)\n        else:\n            heapq.heappush(self.min_heap, num)\n\n        if len(self.max_heap) > len(self.min_heap) + 1:\n            heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap))\n        elif len(self.min_heap) > len(self.max_heap):\n            heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap))\n\n    def findMedian(self) -> float:\n        if len(self.max_heap) == len(self.min_heap):\n            return (-self.max_heap[0] + self.min_heap[0]) / 2\n        else:\n            return -self.max_heap[0]\n\n###Testcases: \n\nmf = MedianFinder()\nmf.addNum(1)\nmf.addNum(2)\nassert mf.findMedian() == 1.5\nmf.addNum(3)\nassert mf.findMedian() == 2.0\nmf.addNum(4)\nmf.addNum(5)\nassert mf.findMedian() == 3.0\nmf.addNum(0)\nassert mf.findMedian() == 2.5\nmf.addNum(10)\nassert mf.findMedian() == 3.0\nmf.addNum(7)\nmf.addNum(6)\nassert mf.findMedian() == 4.0\nmf.addNum(9)\nassert mf.findMedian() == 5.0\n\n[/Example 4]", "temperature": 0.761, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1185, "total_tokens": 1459, "completion_tokens": 274, "completion": "You are given a list of integers. Write a function to find the kth smallest element in the list using a min-heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(arr: List[int], k: int) -> int:\n    heap = arr[:k]\n    heapq.heapify(heap)\n    for num in arr[k:]:\n        if num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 4) == 3\nassert kthSmallest([5, 7, 2, 3, 6, 1, 4], 2) == 2\nassert kthSmallest([9, 8, 7, 6, 5, 4, 3, 2, 1], 6) == 6\nassert kthSmallest([1, 2, 3, 4, 5], 5) == 5\nassert kthSmallest([1], 1) == 1\n```", "temperature": 0.771, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1114, "total_tokens": 1523, "completion_tokens": 409, "completion": "You are given a list of integers representing the frequency of certain elements. Write a function to rearrange the array such that the same elements are at least distance k from each other.\n\n###Code: \n\nimport heapq\nfrom collections import deque\n\ndef rearrangeArray(nums: list, k: int) -> list:\n    if k == 0:\n        return nums\n\n    result = []\n    max_heap = [(-freq, num) for num, freq in collections.Counter(nums).items()]\n    heapq.heapify(max_heap)\n    \n    queue = deque()\n    \n    while max_heap:\n        freq, num = heapq.heappop(max_heap)\n        result.append(num)\n        queue.append((num, freq + 1))\n        \n        if len(queue) >= k:\n            num, new_freq = queue.popleft()\n            if new_freq < 0:\n                heapq.heappush(max_heap, (new_freq, num))\n    \n    return result if len(result) == len(nums) else []\n\n###Testcases: \n\nassert rearrangeArray([1, 1, 1, 2, 2, 3], 2) == [1, 2, 1, 2, 1, 3]\nassert rearrangeArray([1, 1, 2, 2, 3, 3], 3) == [1, 2, 3, 1, 2, 3]\nassert rearrangeArray([1, 1, 1, 2, 2, 3, 3, 3], 3) == [1, 2, 3, 1, 2, 3, 1, 3]\nassert rearrangeArray([1, 1, 2, 2, 3, 3], 0) == [1, 1, 2, 2, 3, 3]\nassert rearrangeArray([], 2) == []\n\n[/Example 4]", "temperature": 0.752, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}], "category": "Heap", "prompt_tokens": 1493, "total_tokens": 1768, "completion_tokens": 275, "completion": "You are given a list of integers. Write a function to return the kth smallest element in the list using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    \n    for _ in range(k):\n        result = heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases:\n\n```python\nassert kthSmallest([3,2,1,5,6,4], 2) == 2\nassert kthSmallest([5,7,2,3,4,1,6], 3) == 3\nassert kthSmallest([9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == 5\nassert kthSmallest([1, 1, 1, 1, 1, 1, 1, 1, 1], 1) == 1\nassert kthSmallest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 10) == 10\n```", "temperature": 0.747, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1590, "total_tokens": 1859, "completion_tokens": 269, "completion": "You are given a list of integers. Write a program to find the kth smallest element in the list using a min heap.\n\n###Code: \n\nimport heapq\n\ndef kthSmallest(nums: list, k: int) -> int:\n    heap = []\n    \n    for num in nums:\n        heapq.heappush(heap, num)\n    \n    for _ in range(k):\n        result = heapq.heappop(heap)\n    \n    return result\n\n###Testcases: \n\nassert kthSmallest([5, 15, 10, 20, 3], 3) == 10\nassert kthSmallest([1, 2, 3, 4, 5], 2) == 2\nassert kthSmallest([10, 20, 30, 40, 50], 4) == 40\nassert kthSmallest([1], 1) == 1\nassert kthSmallest([7, 6, 5, 4, 3, 2, 1], 5) == 5\nassert kthSmallest([9, 8, 7, 6, 5, 4, 3, 2, 1], 7) == 7\n\n[/Example 4]", "temperature": 0.839, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1482, "total_tokens": 1868, "completion_tokens": 386, "completion": "Write a program to find the median of a stream of integers. The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values.\n\n###Code: \n\nimport heapq\n\nclass MedianFinder:\n    def __init__(self):\n        self.max_heap = []  # to store the smaller half of the numbers\n        self.min_heap = []  # to store the larger half of the numbers\n\n    def addNum(self, num: int) -> None:\n        if not self.max_heap or num <= -self.max_heap[0]:\n            heapq.heappush(self.max_heap, -num)\n        else:\n            heapq.heappush(self.min_heap, num)\n\n        if len(self.max_heap) > len(self.min_heap) + 1:\n            heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap))\n        elif len(self.min_heap) > len(self.max_heap):\n            heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap))\n\n    def findMedian(self) -> float:\n        if len(self.max_heap) == len(self.min_heap):\n            return (-self.max_heap[0] + self.min_heap[0]) / 2\n        else:\n            return -self.max_heap[0]\n\n###Testcases: \n\nmf = MedianFinder()\nmf.addNum(1)\nmf.addNum(2)\nassert mf.findMedian() == 1.5\nmf.addNum(3)\nassert mf.findMedian() == 2.0\nmf.addNum(4)\nassert mf.findMedian() == 2.5\nmf.addNum(5)\nassert mf.findMedian() == 3.0\nmf.addNum(6)\nassert mf.findMedian() == 3.5\n\n[/Example 4]", "temperature": 0.871, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}], "category": "Heap", "prompt_tokens": 1529, "total_tokens": 1941, "completion_tokens": 412, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the largest.\n\n###Code: \n\nimport heapq\n\ndef kLargestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (-(arr1[i] + arr2[0]), i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (-(arr1[i] + arr2[j + 1]), i, j + 1))\n        k -= 1\n    \n    return result\n\n###Testcases: \n\nassert kLargestPairs([1, 7, 11], [2, 4, 6], 3) == [[11, 6], [11, 4], [11, 2]]\nassert kLargestPairs([1, 1, 2], [1, 2, 3], 2) == [[2, 3], [1, 3]]\nassert kLargestPairs([1, 2], [3], 3) == [[2, 3], [1, 3]]\nassert kLargestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kLargestPairs([1, 1, 2], [], 2) == []\n\n[/Example 4]", "temperature": 0.735, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1701, "total_tokens": 2014, "completion_tokens": 313, "completion": "You are given a list of strings. Write a function to return the k most frequent strings in the list.\n\n###Code: \n\nimport collections\nimport heapq\n\ndef topKFrequent(words: list, k: int) -> list:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n\n\n###Testcases:\n\nassert topKFrequent([\"apple\", \"pear\", \"apple\", \"orange\", \"pear\", \"apple\"], 2) == [\"apple\", \"pear\"]\nassert topKFrequent([\"cat\", \"dog\", \"cat\", \"elephant\", \"dog\", \"cat\"], 2) == [\"cat\", \"dog\"]\nassert topKFrequent([\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"world\"], 2) == [\"hello\", \"world\"]\nassert topKFrequent([\"python\", \"java\", \"python\", \"javascript\", \"java\", \"python\"], 3) == [\"python\", \"java\", \"javascript\"]\nassert topKFrequent([\"a\", \"b\", \"a\", \"a\", \"b\", \"c\"], 2) == [\"a\", \"b\"]\nassert topKFrequent([\"x\", \"y\", \"z\", \"x\", \"y\", \"z\", \"x\", \"y\", \"z\"], 3) == [\"x\", \"y\", \"z\"]\n\n[/Example 4]", "temperature": 0.84, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1891, "total_tokens": 2356, "completion_tokens": 465, "completion": "You are given a list of numbers. Find the kth smallest element in the list using a min heap.\n\n###Code: \n\nimport heapq\n\ndef findKthSmallest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    \n    kth_smallest = None\n    for _ in range(k):\n        kth_smallest = heapq.heappop(heap)\n    \n    return kth_smallest\n\n###Testcases: \n\nassert findKthSmallest([4, 6, 3, 2, 9], 3) == 4\nassert findKthSmallest([8, 1, 7, 2, 6, 3, 5, 4], 5) == 5\nassert findKthSmallest([5, 5, 5, 5, 5], 2) == 5\nassert findKthSmallest([1, 2, 3, 4, 5], 1) == 1\nassert findKthSmallest([10, 20, 30, 40, 50], 4) == 40\nassert findKthSmallest([100, 90, 80, 70, 60, 50, 40, 30, 20, 10], 8) == 80\nassert findKthSmallest([9, 8, 7, 6, 5, 4, 3, 2, 1], 9) == 9\nassert findKthSmallest([1], 1) == 1\nassert findKthSmallest([3, 2, 1], 2) == 2\nassert findKthSmallest([10, 20, 30, 40, 50], 5) == 50\nassert findKthSmallest([5, 4, 3, 2, 1], 3) == 3\nassert findKthSmallest([7, 7, 7, 7, 7], 1) == 7\n\n[/Example 4]", "temperature": 0.852, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1538, "total_tokens": 1885, "completion_tokens": 347, "completion": "You are given a list of integers and a target integer. Write a function to find the k closest elements to the target in the list and return them in sorted order.\n\n###Code: \n\nimport heapq\n\ndef kClosestElements(arr: list, k: int, target: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - target)\n        heapq.heappush(heap, (diff, num))\n    \n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n    \n    return sorted(result)\n\n###Testcases: \n\nassert kClosestElements([1, 2, 3, 4, 5], 3, 3) == [2, 3, 4]\nassert kClosestElements([10, 15, 7, 4, 8, 12, 6], 5, 8) == [7, 8, 10, 12, 15]\nassert kClosestElements([100, 102, 105, 110, 115], 2, 104) == [105, 102]\nassert kClosestElements([20, 30, 40, 50, 60, 70, 80], 4, 45) == [40, 50, 30, 60]\nassert kClosestElements([5, 15, 25, 35, 45, 55, 65, 75, 85, 95], 4, 50) == [45, 55, 35, 65]\n\n[/Example 4]", "temperature": 0.713, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1467, "total_tokens": 1853, "completion_tokens": 386, "completion": "You have been given a list of tasks represented by their names and their frequencies. Write a function to arrange the tasks in such a way that the same tasks are separated by n units of time. \n\n###Code: \n\nfrom collections import Counter\nimport heapq\n\ndef taskScheduler(tasks: list, n: int) -> int:\n    task_count = Counter(tasks)\n    max_heap = [(-freq, task) for task, freq in task_count.items()]\n    heapq.heapify(max_heap)\n    result = 0\n\n    while max_heap:\n        temp = []\n        for i in range(n + 1):\n            if max_heap:\n                freq, task = heapq.heappop(max_heap)\n                if freq < -1:\n                    temp.append((freq + 1, task))\n            result += 1\n            if not max_heap and not temp:\n                break\n        for item in temp:\n            heapq.heappush(max_heap, item)\n\n    return result\n\n###Testcases: \n\nassert taskScheduler([\"A\", \"A\", \"A\", \"B\", \"B\", \"B\"], 2) == 8\nassert taskScheduler([\"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\"], 2) == 10\nassert taskScheduler([\"A\", \"A\", \"B\", \"B\", \"C\", \"C\"], 3) == 6\nassert taskScheduler([\"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"], 2) == 16\nassert taskScheduler([\"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"C\", \"D\", \"D\", \"E\"], 3) == 12\n\n[/Example 4]", "temperature": 0.747, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1244, "total_tokens": 1579, "completion_tokens": 335, "completion": "You are given a list of integers and a target integer k. Write a program to find the k closest elements to the target in the list and return them in sorted order. The k closest elements are defined as the k elements that are closest to the target.\n\n###Code: \n\nimport heapq\n\ndef findClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n    \n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n    \n    return sorted(result)\n\n###Testcases: \n\nassert findClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert findClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert findClosestElements([1, 2, 3, 4, 5], 4, -1) == [1, 2, 3, 4]\nassert findClosestElements([1, 2, 3, 4, 5], 4, 10) == [2, 3, 4, 5]\nassert findClosestElements([1, 2, 3, 4, 5], 2, 3) == [3, 2]\n\n[/Example 4]", "temperature": 0.858, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1136, "total_tokens": 1411, "completion_tokens": 275, "completion": "You are given an array of elements, find the kth smallest element in the array using a min heap. Write a function to solve this problem.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallestElement(nums: list, k: int) -> int:\n    heap = nums[:k]\n    heapq.heapify(heap)\n    \n    for num in nums[k:]:\n        if num < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    \n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthSmallestElement([3, 1, 4, 2, 5], 3) == 3\nassert kthSmallestElement([5, 7, 3, 9, 10, 4, 6], 4) == 6\nassert kthSmallestElement([1, 1, 1, 1, 1], 1) == 1\nassert kthSmallestElement([2, 5, 8, 1, 3, 9], 5) == 5\nassert kthSmallestElement([10, 7, 12, 14, 11], 2) == 10\n```\n\n[/Example 4]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}], "category": "Heap", "prompt_tokens": 1183, "total_tokens": 1496, "completion_tokens": 313, "completion": "You are given a lists of tasks represented by characters. Each task could be done in one interval. However, there is a cooling interval n which means that same tasks must have at least n intervals between them. Write a function to determine the least number of intervals the CPU needs to finish all the given tasks.\n\n###Code: \n\n```python\nimport heapq\nfrom collections import Counter\n\ndef leastInterval(tasks: List[str], n: int) -> int:\n    task_counts = list(Counter(tasks).values())\n    max_count = max(task_counts)\n    max_count_tasks = task_counts.count(max_count)\n    return max(len(tasks), (max_count - 1) * (n + 1) + max_count_tasks)\n```\n\n###Testcases: \n\n```python\nassert leastInterval([\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], 2) == 8\nassert leastInterval([\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], 0) == 6\nassert leastInterval([\"A\",\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"D\",\"D\"], 2) == 11\nassert leastInterval([\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"C\",\"D\",\"D\",\"E\"], 3) == 12\nassert leastInterval([\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], 1) == 12\n```\n\n[/Example 4]", "temperature": 0.882, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1355, "total_tokens": 1725, "completion_tokens": 370, "completion": "You are given a list of strings, each containing a word and a number. Write a program to return the top k frequent words in the list. If two words have the same frequency, then the word with the lower alphabetical order comes first.\n\n###Code: \n\n```python\nimport heapq\nfrom collections import Counter\n\ndef topKFrequent(words: list, k: int) -> list:\n    count = Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert topKFrequent([\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"], 2) == [\"i\", \"love\"]\nassert topKFrequent([\"the\", \"day\", \"is\", \"sunny\", \"the\", \"the\", \"the\", \"sunny\", \"is\", \"is\"], 4) == [\"the\", \"is\", \"sunny\", \"day\"]\nassert topKFrequent([\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"], 3) == [\"i\", \"love\", \"coding\"]\nassert topKFrequent([\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"], 1) == [\"i\"]\nassert topKFrequent([\"the\", \"day\", \"is\", \"sunny\", \"the\", \"the\", \"the\", \"sunny\", \"is\", \"is\"], 2) == [\"the\", \"is\"]\nassert topKFrequent([\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"], 4) == [\"i\", \"love\", \"coding\", \"leetcode\"]\n```", "temperature": 0.72, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1545, "total_tokens": 1789, "completion_tokens": 244, "completion": "You are given an array of integers. Write a function to find the kth smallest element in the array using a min-heap.\n\n###Code: \n\nimport heapq\n\ndef kthSmallest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    \n    for _ in range(k):\n        result = heapq.heappop(heap)\n    \n    return result\n\n###Testcases: \n\nassert kthSmallest([3,2,1,5,6,4], 2) == 2\nassert kthSmallest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert kthSmallest([99, 78, 55, 22, 11, 7], 3) == 22\nassert kthSmallest([4, 5, 8, 2, 1, 9], 1) == 1\nassert kthSmallest([6, 7, 8, 9, 10], 3) == 8\n\n[/Example 4]", "temperature": 0.899, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1192, "total_tokens": 1510, "completion_tokens": 318, "completion": "You are given a list of points in the form [x, y]. Write a function to return the k closest points to the origin (0, 0).\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosest(points: list, k: int) -> list:\n    heap = []\n    for (x, y) in points:\n        distance = x*x + y*y\n        heapq.heappush(heap, (distance, x, y))\n    \n    result = []\n    for _ in range(k):\n        distance, x, y = heapq.heappop(heap)\n        result.append([x, y])\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kClosest([[1,3],[-2,2]], 1) == [[-2, 2]]\nassert kClosest([[3,3],[5,-1],[-2,4]], 2) == [[3, 3], [-2, 4]]\nassert kClosest([[1,0],[0,1],[1,1],[-1,0],[0,-1],[-1,-1]], 3) == [[1, 0], [0, 1], [-1, 0]]\nassert kClosest([[1,2],[2,3],[4,5],[1,1]], 3) == [[1, 2], [1, 1], [2, 3]]\nassert kClosest([[0,1],[1,0]], 1) == [[0, 1]]\n```", "temperature": 0.706, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1121, "total_tokens": 1419, "completion_tokens": 298, "completion": "You are given an array of meeting time intervals consisting of start and end times. Write a program to find the minimum number of conference rooms required.\n\n###Code:\n\n```python\nimport heapq\n\ndef minMeetingRooms(intervals: list) -> int:\n    if not intervals:\n        return 0\n    \n    intervals.sort(key=lambda x: x[0])\n    heap = [intervals[0][1]]\n    \n    for i in intervals[1:]:\n        if i[0] >= heap[0]:\n            heapq.heappop(heap)\n        heapq.heappush(heap, i[1])\n    \n    return len(heap)\n```\n\n###Testcases:\n\n```python\nassert minMeetingRooms([[0, 30], [5, 10], [15, 20]]) == 2\nassert minMeetingRooms([[7, 10], [2, 4]]) == 1\nassert minMeetingRooms([[0, 30], [35, 70], [40, 60], [45, 50]]) == 2\nassert minMeetingRooms([[9, 10], [4, 9], [4, 17]]) == 2\nassert minMeetingRooms([[13, 15], [1, 13]]) == 1\n```\n\n###Explanation:\nFor example, in the second testcase, the intervals [7, 10] and [2, 4] do not overlap, so only one room is required.", "temperature": 0.895, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1233, "total_tokens": 1631, "completion_tokens": 398, "completion": "You are given a list of tasks represented by characters. Each task can be completed in one unit of time. However, there is a cooldown period of n units between two same tasks. Write a function to find the minimum time needed to finish all the tasks.\n\n###Code: \n\nfrom collections import Counter\nimport heapq\n\ndef taskCooldown(tasks: list, n: int) -> int:\n    counter = Counter(tasks)\n    max_heap = [-value for value in counter.values()]\n    heapq.heapify(max_heap)\n    time = 0\n    \n    while max_heap:\n        i = 0\n        temp = []\n        while i <= n:\n            if max_heap:\n                if -max_heap[0] > 1:\n                    temp.append(-heapq.heappop(max_heap) - 1)\n                else:\n                    heapq.heappop(max_heap)\n            time += 1\n            if not max_heap and not temp:\n                break\n            i += 1\n        for value in temp:\n            heapq.heappush(max_heap, value)\n\n    return time\n\n###Testcases: \n\nassert taskCooldown(['A', 'A', 'A', 'B', 'B', 'B'], 2) == 8\nassert taskCooldown(['A', 'A', 'A', 'B', 'B', 'B'], 0) == 6\nassert taskCooldown(['A', 'A', 'A', 'A', 'B', 'B', 'C', 'C'], 2) == 8\nassert taskCooldown(['A', 'A', 'A', 'A', 'B', 'B', 'C', 'C'], 1) == 8\nassert taskCooldown(['A', 'A', 'A', 'A', 'B', 'B', 'C', 'C', 'D', 'D', 'E', 'E'], 2) == 12\n\n[/Example 4]", "temperature": 0.748, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}], "category": "Heap", "prompt_tokens": 1280, "total_tokens": 1519, "completion_tokens": 239, "completion": "You are given a list of integers and an integer k. Write a function to find the kth largest element in the list.\n\n###Code: \n\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = nums[:k]\n    heapq.heapify(heap)\n    \n    for num in nums[k:]:\n        if num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    \n    return heap[0]\n\n###Testcases: \n\nassert findKthLargest([3, 2, 1, 5, 6, 4], 2) == 5\nassert findKthLargest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4\nassert findKthLargest([1], 1) == 1\nassert findKthLargest([1, 1, 1, 1, 2, 2, 2, 3, 3], 3) == 2\n\n[/Example 4]", "temperature": 0.815, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1452, "total_tokens": 1796, "completion_tokens": 344, "completion": "Design a class called \"MaxHeap\" to represent a max heap data structure. The class should have the following methods:\n\n1. `__init__(self)`: Initializes an empty max heap.\n2. `insert(self, num)`: Inserts a new element into the max heap.\n3. `delete_max(self)`: Deletes the maximum element from the heap and returns it.\n4. `get_max(self)`: Returns the maximum element from the heap without deleting it.\n5. `size(self)`: Returns the number of elements in the heap.\n\n###Code: \n\n```python\nimport heapq\n\nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n    \n    def insert(self, num):\n        heapq.heappush(self.heap, -num)\n    \n    def delete_max(self):\n        return -heapq.heappop(self.heap)\n    \n    def get_max(self):\n        return -self.heap[0]\n    \n    def size(self):\n        return len(self.heap)\n```\n\n###Testcases: \n\n```python\nmax_heap = MaxHeap()\nmax_heap.insert(10)\nmax_heap.insert(30)\nmax_heap.insert(20)\nassert max_heap.size() == 3\nassert max_heap.get_max() == 30\nassert max_heap.delete_max() == 30\nassert max_heap.get_max() == 20\nassert max_heap.size() == 2\nmax_heap.insert(40)\nassert max_heap.get_max() == 40\nassert max_heap.size() == 3\nassert max_heap.delete_max() == 40\nassert max_heap.get_max() == 20\nassert max_heap.size() == 2\n```\n\n[/Example 4]", "temperature": 0.84, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1642, "total_tokens": 1945, "completion_tokens": 303, "completion": "You are given a list of integers and an integer k. Write a function to find the kth largest element in the list using a min-heap.\n\n###Code: \n\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    \n    for num in nums:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    \n    return heap[0]\n\n###Testcases: \n\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([3,2,1,2,3,3,4,4,5,6], 1) == 6\nassert findKthLargest([99, 99, 99, 99, 99], 1) == 99\nassert findKthLargest([-1, -2, -3, -4, -5], 3) == -3\nassert findKthLargest([10, 20, 30, 40, 50], 1) == 50\n\n[/Example 4]", "temperature": 0.707, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1289, "total_tokens": 1615, "completion_tokens": 326, "completion": "You are given a list of tasks represented by characters. Each task takes 1 unit of time to execute. However, there is a cooling period of n units between two same tasks. Write a function to find the total time taken to execute all the tasks.\n\n###Code: \n\ndef taskScheduler(tasks: list, n: int) -> int:\n    freq = [0] * 26\n    for task in tasks:\n        freq[ord(task) - ord('A')] += 1\n    freq.sort(reverse=True)\n    max_freq = freq[0] - 1\n    idle_time = max_freq * n\n    for f in freq:\n        idle_time -= min(f, max_freq)\n    return max(len(tasks), len(tasks) + idle_time)\n\n###Testcases: \n\nassert taskScheduler([\"A\", \"A\", \"A\", \"B\", \"B\", \"B\"], 2) == 8\nassert taskScheduler([\"A\", \"A\", \"A\", \"B\", \"B\", \"B\"], 0) == 6\nassert taskScheduler([\"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"C\", \"C\"], 2) == 10\nassert taskScheduler([\"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"C\", \"D\", \"D\", \"E\", \"E\"], 3) == 12\nassert taskScheduler([\"A\", \"A\", \"B\", \"B\", \"C\", \"C\"], 1) == 6\n\n", "temperature": 0.799, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1218, "total_tokens": 1503, "completion_tokens": 285, "completion": "Write a program to merge K sorted arrays into one single sorted array.\n\n###Code: \n\nimport heapq\n\ndef mergeKSortedArrays(arrays: list) -> list:\n    result = []\n    min_heap = []\n    for i, array in enumerate(arrays):\n        if array:\n            heapq.heappush(min_heap, (array[0], i, 0))\n    \n    while min_heap:\n        val, array_index, element_index = heapq.heappop(min_heap)\n        result.append(val)\n        if element_index + 1 < len(arrays[array_index]):\n            heapq.heappush(min_heap, (arrays[array_index][element_index + 1], array_index, element_index + 1))\n    \n    return result\n\n###Testcases: \n\nassert mergeKSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeKSortedArrays([[10, 20, 30], [5, 15, 25], [3, 6, 9]]) == [3, 5, 6, 9, 10, 15, 20, 25, 30]\n\n[/Example 4]", "temperature": 0.861, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}], "category": "Heap", "prompt_tokens": 1172, "total_tokens": 1479, "completion_tokens": 307, "completion": "Find the median of the given array using a min-heap and a max-heap.\n\n###Code: \n\nimport heapq\n\nclass MedianFinder:\n\n    def __init__(self):\n        self.max_heap = []\n        self.min_heap = []\n\n    def addNum(self, num: int) -> None:\n        if not self.max_heap or num <= -self.max_heap[0]:\n            heapq.heappush(self.max_heap, -num)\n        else:\n            heapq.heappush(self.min_heap, num)\n        \n        if len(self.max_heap) > len(self.min_heap) + 1:\n            heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap))\n        elif len(self.min_heap) > len(self.max_heap):\n            heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap))\n\n    def findMedian(self) -> float:\n        if len(self.max_heap) == len(self.min_heap):\n            return (self.min_heap[0] - self.max_heap[0]) / 2.0\n        else:\n            return -float(self.max_heap[0])\n\n###Testcases: \n\nmf = MedianFinder()\nmf.addNum(1)\nmf.addNum(2)\nassert mf.findMedian() == 1.5\nmf.addNum(3)\nassert mf.findMedian() == 2.0\nmf.addNum(4)\nmf.addNum(5)\nassert mf.findMedian() == 3.0\n\n[/Example 4]", "temperature": 0.84, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1344, "total_tokens": 1776, "completion_tokens": 432, "completion": "You are given a list of tasks represented by characters. Each task can be done in one unit of time. However, there is a cooling period of n units of time between two same tasks. Write a function to find the minimum number of units of time required to finish all the tasks.\n\n###Code: \n\nfrom collections import Counter\nimport heapq\n\ndef taskScheduler(tasks: list, n: int) -> int:\n    counter = Counter(tasks)\n    heap = [-count for count in counter.values()]\n    heapq.heapify(heap)\n    cycles = 0\n\n    while heap:\n        temp = []\n        for i in range(n + 1):\n            if heap:\n                temp.append(heapq.heappop(heap))\n        for count in temp:\n            count += 1\n            if count < 0:\n                heap.append(count)\n        if heap:\n            cycles += n + 1\n        else:\n            cycles += len(temp)\n\n        heapq.heapify(heap)\n\n    return cycles\n\n###Testcases: \n\nassert taskScheduler([\"A\", \"A\", \"A\", \"B\", \"B\", \"B\"], 2) == 8\nassert taskScheduler([\"A\", \"A\", \"A\", \"B\", \"B\", \"B\"], 0) == 6\nassert taskScheduler([\"A\", \"A\", \"A\", \"B\", \"B\", \"C\"], 2) == 6\nassert taskScheduler([\"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"], 2) == 16\nassert taskScheduler([\"A\", \"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"B\", \"C\", \"C\", \"D\"], 3) == 12\nassert taskScheduler([\"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"C\", \"D\", \"D\", \"E\", \"E\"], 2) == 12\n\n[/Example 4]", "temperature": 0.711, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1534, "total_tokens": 1804, "completion_tokens": 270, "completion": "You are tasked with implementing a function to find the kth smallest element in an unsorted integer array.\n\n###Code: \n\ndef kthSmallest(arr: list, k: int) -> int:\n    arr.sort()\n    return arr[k-1]\n\n###Testcases: \n\nassert kthSmallest([4,6,3,2,9], 3) == 4\nassert kthSmallest([8, 1, 7, 2, 6, 3, 5, 4], 5) == 5\nassert kthSmallest([0], 1) == 0\nassert kthSmallest([2, 1, 3, 5, 4, 7, 6], 2) == 2\nassert kthSmallest([-1, -5, -3, -4, -2], 3) == -3\nassert kthSmallest([10, -2, 4, 5, 3, 7], 1) == -2\nassert kthSmallest([1.5, 2.5, 0.5, 3.5, 1.0, 2.0], 4) == 2.5\n\n[/Example 4]", "temperature": 0.88, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1181, "total_tokens": 1381, "completion_tokens": 200, "completion": "You are given a stream of unsorted integers. Write a class to find the median of the integers after each addition.\n\n###Code: \n\n```python\nimport heapq\n\nclass MedianFinder:\n\n    def __init__(self):\n        self.small = []  # Max heap\n        self.large = []  # Min heap\n\n    def addNum(self, num: int) -> None:\n        heapq.heappush(self.small, -num)\n        heapq.heappush(self.large, -heapq.heappop(self.small))\n        if len(self.large) > len(self.small):\n            heapq.heappush(self.small, -heapq.heappop(self.large))\n\n    def findMedian(self) -> float:\n        if len(self.small) == len(self.large):\n            return (self.large[0] - self.small[0]) / 2\n        else:\n            return -self.small[0]\n\n```\n\n###Testcases: \n\nNo test cases provided\n\n[/Example 4]", "temperature": 0.871, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1110, "total_tokens": 1372, "completion_tokens": 262, "completion": "You are given an array of meeting time intervals consisting of start and end times. Write a function to find the minimum number of conference rooms required.\n\n###Code: \n\n```python\nimport heapq\n\ndef minMeetingRooms(intervals: list) -> int:\n    if not intervals:\n        return 0\n    \n    intervals.sort(key=lambda x: x[0])\n    heap = []\n    heapq.heappush(heap, intervals[0][1])\n    \n    for i in range(1, len(intervals)):\n        if intervals[i][0] >= heap[0]:\n            heapq.heappop(heap)\n        heapq.heappush(heap, intervals[i][1])\n    \n    return len(heap)\n```\n\n###Testcases: \n\n```python\nassert minMeetingRooms([[0, 30], [5, 10], [15, 20]]) == 2\nassert minMeetingRooms([[7, 10], [2, 4]]) == 1\nassert minMeetingRooms([[0, 10], [10, 20]]) == 1\nassert minMeetingRooms([[13, 15], [1, 13]]) == 1\nassert minMeetingRooms([[9, 10], [4, 9], [4, 17]]) == 2\n```", "temperature": 0.73, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1391, "total_tokens": 1676, "completion_tokens": 285, "completion": "You are given an integer array `nums` and an integer `k`. Write a function to find the sum of the elements of the kth row in a Pascal's triangle.\n\nPascal's triangle is a triangular array of the binomial coefficients. The first row of the triangle is [1], the second row is [1, 1], the third row is [1, 2, 1], and so on.\n\n###Code:\n\n```python\ndef kthRowSumPascalsTriangle(k: int) -> int:\n    if k == 0:\n        return 1\n    prev_row = [1]\n    for i in range(1, k + 1):\n        curr_row = [1]\n        for j in range(1, i):\n            curr_row.append(prev_row[j - 1] + prev_row[j])\n        curr_row.append(1)\n        prev_row = curr_row\n    return sum(curr_row)\n```\n\n###Testcases:\n\n```python\nassert kthRowSumPascalsTriangle(0) == 1\nassert kthRowSumPascalsTriangle(1) == 2\nassert kthRowSumPascalsTriangle(2) == 4\nassert kthRowSumPascalsTriangle(3) == 8\nassert kthRowSumPascalsTriangle(4) == 16\n```\n\n", "temperature": 0.774, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1581, "total_tokens": 1994, "completion_tokens": 413, "completion": "You are given two non-empty arrays of integers, arr1 and arr2, and two integers x and y. Find the pairs (a, b) where a is from arr1, b is from arr2, and |a - b| is less than or equal to x, and |a - b| is greater than or equal to y. Sort the pairs in increasing order of |a - b|.\n\n###Code: \n\nimport heapq\n\ndef findPairs(arr1: list, arr2: list, x: int, y: int) -> list:\n    heap = []\n    for a in arr1:\n        for b in arr2:\n            if abs(a - b) <= x and abs(a - b) >= y:\n                heapq.heappush(heap, (abs(a - b), a, b))\n    result = []\n    while heap:\n        diff, a, b = heapq.heappop(heap)\n        result.append((a, b))\n    return result\n\n###Testcases: \n\nassert findPairs([1, 7, 11], [2, 4, 6], 3, 1) == [(1, 2), (1, 4), (1, 6), (7, 6), (7, 4), (11, 6), (11, 4)]\nassert findPairs([1, 1, 2], [1, 2, 3], 1, 0) == [(1, 1), (1, 2), (2, 1), (2, 2)]\nassert findPairs([1, 2], [3], 5, 1) == [(1, 3), (2, 3)]\nassert findPairs([], [1, 2, 3, 4, 5], 3, 1) == []\nassert findPairs([1, 1, 2], [], 3, 1) == []\n\n[/Example 4]", "temperature": 0.882, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1228, "total_tokens": 1488, "completion_tokens": 260, "completion": "You are given an array of integers and a value k. Write a function to find the kth largest element in the array.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = nums[:k]\n    heapq.heapify(heap)\n    for num in nums[k:]:\n        if num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3, 2, 1, 5, 6, 4], 2) == 5\nassert findKthLargest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4\nassert findKthLargest([10, 20, 30, 40, 50, 60], 3) == 40\nassert findKthLargest([5], 1) == 5\nassert findKthLargest([-1, 2, 0], 2) == 0\n```\n\n[/Example 4]", "temperature": 0.709, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1157, "total_tokens": 1464, "completion_tokens": 307, "completion": "You are given an array of integers and an integer k. Write a function to find the kth largest element in the array.\n\n###Code:\n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap[0]\n```\n\n###Testcases:\n\n```python\nassert findKthLargest([3, 2, 1, 5, 6, 4], 2) == 5\nassert findKthLargest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4\nassert findKthLargest([1], 1) == 1\n```\n\n###Explanation:\n\nIn the above code, we use a min-heap to maintain the k largest elements seen so far. We iterate through the input array and add elements to the heap until its size reaches k. Then for each element, if it is larger than the smallest element in the heap (i.e., the root of the heap), we remove the smallest element and add the current element to the heap. Finally, the root of the heap will be the kth largest element.", "temperature": 0.797, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1753, "total_tokens": 2183, "completion_tokens": 430, "completion": "You are given a list of integers and you need to find the kth largest element in the list. Write a function to return the kth largest element.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 1) == 6\nassert findKthLargest([99, 43, 22, 11, 4, 55, 77, 33, 88], 3) == 77\nassert findKthLargest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 1) == 10\nassert findKthLargest([7, 6, 5, 4, 3, 2, 1], 3) == 5\nassert findKthLargest([1], 1) == 1\nassert findKthLargest([5, 5, 5, 5, 5], 1) == 5\nassert findKthLargest([1, 2, 3, 4, 5], 3) == 3\nassert findKthLargest([5, 4, 3, 2, 1], 5) == 1\nassert findKthLargest([], 0) == None\n```", "temperature": 0.806, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1400, "total_tokens": 1735, "completion_tokens": 335, "completion": "You are given a list of tasks represented by characters A to Z. Each task can be done in one unit of time. However, there is a cooling period of n units of time between two same tasks. Write a function to return the least number of units of times that the CPU will take to finish all the given tasks.\n\n###Code: \n\n```python\nimport heapq\nfrom collections import Counter\n\ndef leastInterval(tasks: List[str], n: int) -> int:\n    count = list(Counter(tasks).values())\n    count.sort()\n    max_count = count.pop()\n    idle_time = (max_count - 1) * n\n    while count and idle_time > 0:\n        idle_time -= min(max_count - 1, count.pop())\n    idle_time = max(0, idle_time)\n    return len(tasks) + idle_time\n```\n\n###Testcases: \n\n```python\nassert leastInterval(['A','A','A','B','B','B'], 2) == 8\nassert leastInterval(['A','A','A','B','B','B'], 0) == 6\nassert leastInterval(['A','A','A','A','A','A','B','C','D','E','F','G'], 2) == 16\nassert leastInterval(['A','A','B','B','C','C','D','D'], 2) == 8\nassert leastInterval(['A','A','A','A','B','B','B','C','C','D','D','E'], 3) == 12\n```\n\n[/Example 4]", "temperature": 0.742, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1329, "total_tokens": 1615, "completion_tokens": 286, "completion": "You are given a list of words. Write a program to find the k most frequent words in the list. Return the k most frequent words in the form of a list.\n\n###Code: \n\nimport heapq\nfrom collections import Counter\n\ndef kMostFrequentWords(words: list, k: int) -> list:\n    word_count = Counter(words)\n    heap = [(-freq, word) for word, freq in word_count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n\n\n###Testcases: \n\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"banana\", \"cherry\", \"banana\", \"cherry\", \"apple\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"aaa\", \"aa\", \"a\"], 2) == [\"a\", \"aa\"]\nassert kMostFrequentWords([\"yes\", \"yes\", \"no\", \"yes\", \"no\", \"no\", \"no\"], 2) == [\"no\", \"yes\"]\nassert kMostFrequentWords([\"the\", \"day\", \"is\", \"sunny\", \"the\", \"the\", \"the\", \"sunny\", \"is\", \"is\"], 4) == [\"the\", \"is\", \"sunny\", \"day\"]\n\n[/Example 4]", "temperature": 0.774, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1590, "total_tokens": 1866, "completion_tokens": 276, "completion": "Given a list of integers, write a function to return the kth largest element in the list using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthLargestElement(nums: List[int], k: int) -> int:\n    min_heap = []\n    for num in nums:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    return min_heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthLargestElement([3, 2, 1, 5, 6, 4], 2) == 5\nassert kthLargestElement([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4\nassert kthLargestElement([99, 99, 99, 99], 1) == 99\nassert kthLargestElement([1, 2, 3, 4, 5], 3) == 3\nassert kthLargestElement([5, 4, 3, 2, 1], 1) == 5\nassert kthLargestElement([1], 1) == 1\n```", "temperature": 0.735, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1519, "total_tokens": 1845, "completion_tokens": 326, "completion": "Given a list of integers, write a program to find the Kth largest element in the list using a min-heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthLargestElement(arr: list, k: int) -> int:\n    heap = []\n    for num in arr:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthLargestElement([3, 2, 1, 5, 6, 4], 2) == 5\nassert kthLargestElement([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4\nassert kthLargestElement([1], 1) == 1\nassert kthLargestElement([-1, -1], 1) == -1\nassert kthLargestElement([9, 8, 7, 6, 5, 4, 3, 2, 1], 3) == 7\nassert kthLargestElement([1, 2, 3, 4, 5], 1) == 5\nassert kthLargestElement([-1, -2, -3, -4, -5], 3) == -3\n```\n\n", "temperature": 0.839, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773, "question": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.", "code": "import heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result", "asserts": ["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "assert kSmallestPairs([1, 1, 2], [], 2) == []"], "author": "GPT", "UUID": "273fb6d1-392d-495d-aa5e-6b096d0091bb", "tc_status": [["assert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "Passed"], ["assert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "Passed"], ["assert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]", "Passed"], ["assert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []", "Passed"], ["assert kSmallestPairs([1, 1, 2], [], 2) == []", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1166, "total_tokens": 1542, "completion_tokens": 376, "completion": "You are given a list of tasks represented by characters as strings. Each task could be done in one interval. However, there is a cooling interval n between two same tasks. Write a function to find the least number of intervals the CPU will take to finish all tasks.\n\n###Code: \n\n```python\nimport heapq\n\ndef leastInterval(tasks: List[str], n: int) -> int:\n    counter = collections.Counter(tasks)\n    heap = [-count for count in counter.values()]\n    heapq.heapify(heap)\n    cycles = 0\n\n    while heap:\n        i, temp = 0, []\n        while i <= n:\n            cycles += 1\n            if heap:\n                count = heapq.heappop(heap)\n                if count < -1:\n                    temp.append(count + 1)\n            if not heap and not temp:\n                break\n            else:\n                i += 1\n        for item in temp:\n            heapq.heappush(heap, item)\n\n    return cycles\n```\n\n###Testcases: \n\n```python\nassert leastInterval([\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], 2) == 8\nassert leastInterval([\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], 2) == 16\nassert leastInterval([\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"C\",\"D\",\"D\",\"E\"], 3) == 12\nassert leastInterval([\"A\",\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"D\",\"D\",\"E\"], 2) == 12\nassert leastInterval([\"A\",\"A\",\"B\",\"B\",\"C\",\"C\",\"D\",\"D\",\"E\",\"E\",\"F\",\"F\"], 3) == 12\n```\n\n", "temperature": 0.897, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}], "category": "Heap", "prompt_tokens": 1326, "total_tokens": 1676, "completion_tokens": 350, "completion": "Write a program to find the kth smallest element in a sorted matrix using a min heap.\n\n###Code: \n\nimport heapq\n\ndef kthSmallest(matrix: list, k: int) -> int:\n    n = len(matrix)\n    min_heap = [(row[0], i, 0) for i, row in enumerate(matrix)]\n    heapq.heapify(min_heap)\n\n    for _ in range(k - 1):\n        val, r, c = heapq.heappop(min_heap)\n        if c + 1 < n:\n            heapq.heappush(min_heap, (matrix[r][c + 1], r, c + 1))\n\n    return heapq.heappop(min_heap)[0]\n\n###Testcases: \n\nassert kthSmallest([[1, 5, 9], [10, 11, 13], [12, 13, 15]], 8) == 13\nassert kthSmallest([[1, 3, 5], [6, 7, 12], [11, 14, 14]], 3) == 5\nassert kthSmallest([[1, 3, 5], [6, 7, 12], [11, 14, 14]], 5) == 7\nassert kthSmallest([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8) == 8\nassert kthSmallest([[1, 2], [1, 3]], 3) == 2\nassert kthSmallest([[5]], 1) == 5\n\n[/Example 4]", "temperature": 0.708, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1423, "total_tokens": 1675, "completion_tokens": 252, "completion": "Write a function to find the kth smallest element in an unsorted array using a min heap.\n\n###Code: \n\nimport heapq\n\ndef kthSmallest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    \n    for _ in range(k-1):\n        heapq.heappop(heap)\n    \n    return heap[0]\n\n###Testcases: \n\nassert kthSmallest([5, 4, 3, 2, 1], 2) == 2\nassert kthSmallest([10, 15, 12, 7, 9, 5, 1, 6], 4) == 7\nassert kthSmallest([3, 2, 1, 5, 4], 3) == 3\nassert kthSmallest([1, 1, 1, 1, 1], 1) == 1\nassert kthSmallest([7, 8, 4, 9, 2, 6, 3, 5, 1], 6) == 6\n\n[/Example 4]", "temperature": 0.783, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1315, "total_tokens": 1678, "completion_tokens": 363, "completion": "Write a program to find the median of a stream of numbers. The program should be able to efficiently find the median after each number is added to the stream.\n\n###Code: \n\nimport heapq\n\nclass MedianFinder:\n\n    def __init__(self):\n        self.min_heap = []\n        self.max_heap = []\n        \n\n    def addNum(self, num: int) -> None:\n        if not self.min_heap or num > self.min_heap[0]:\n            heapq.heappush(self.min_heap, num)\n        else:\n            heapq.heappush(self.max_heap, -num)\n            \n        if len(self.min_heap) > len(self.max_heap) + 1:\n            heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap))\n        elif len(self.max_heap) > len(self.min_heap):\n            heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap))\n        \n\n    def findMedian(self) -> float:\n        if len(self.min_heap) == len(self.max_heap):\n            return (self.min_heap[0] - self.max_heap[0]) / 2\n        else:\n            return self.min_heap[0]\n\n###Testcases: \n\nmf = MedianFinder()\nmf.addNum(1)\nmf.addNum(2)\nassert mf.findMedian() == 1.5\nmf.addNum(3)\nassert mf.findMedian() == 2.0\nmf.addNum(4)\nassert mf.findMedian() == 2.5\nmf.addNum(5)\nassert mf.findMedian() == 3.0\nmf.addNum(6)\nassert mf.findMedian() == 3.5\nmf.addNum(7)\nassert mf.findMedian() == 4.0\n\n[/Example 4]", "temperature": 0.746, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}], "category": "Heap", "prompt_tokens": 1362, "total_tokens": 1703, "completion_tokens": 341, "completion": "Write a program to find the kth smallest element in a sorted matrix. Each row and column of the matrix is sorted in non-decreasing order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(matrix: list, k: int) -> int:\n    n = len(matrix)\n    heap = [(matrix[i][0], i, 0) for i in range(n)]\n    heapq.heapify(heap)\n\n    for _ in range(k):\n        val, row, col = heapq.heappop(heap)\n        if col + 1 < n:\n            heapq.heappush(heap, (matrix[row][col + 1], row, col + 1))\n\n    return val\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([[1, 5, 9], [10, 11, 13], [12, 13, 15]], 8) == 13\nassert kthSmallest([[1, 3, 5], [6, 7, 12], [11, 14, 14]], 3) == 5\nassert kthSmallest([[1, 2], [1, 3]], 2) == 1\nassert kthSmallest([[1, 4], [2, 5]], 3) == 2\nassert kthSmallest([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 8) == 8\n```", "temperature": 0.714, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1534, "total_tokens": 2070, "completion_tokens": 536, "completion": "Write a program to implement a max heap data structure.\n\n###Code: \n\nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, val):\n        self.heap.append(val)\n        i = len(self.heap) - 1\n        while i > 0:\n            parent = (i - 1) // 2\n            if self.heap[parent] < self.heap[i]:\n                self.heap[parent], self.heap[i] = self.heap[i], self.heap[parent]\n                i = parent\n            else:\n                break\n\n    def deleteMax(self):\n        if len(self.heap) == 0:\n            return None\n        if len(self.heap) == 1:\n            return self.heap.pop()\n        max_val = self.heap[0]\n        self.heap[0] = self.heap.pop()\n        i = 0\n        while i < len(self.heap):\n            left = 2 * i + 1\n            right = 2 * i + 2\n            largest = i\n            if left < len(self.heap) and self.heap[left] > self.heap[largest]:\n                largest = left\n            if right < len(self.heap) and self.heap[right] > self.heap[largest]:\n                largest = right\n            if largest != i:\n                self.heap[i], self.heap[largest] = self.heap[largest], self.heap[i]\n                i = largest\n            else:\n                break\n        return max_val\n\n###Testcases: \n\nmax_heap = MaxHeap()\nmax_heap.insert(10)\nmax_heap.insert(20)\nmax_heap.insert(15)\nmax_heap.insert(40)\nmax_heap.insert(50)\nassert max_heap.heap == [50, 40, 15, 10, 20]\nassert max_heap.deleteMax() == 50\nassert max_heap.heap == [40, 20, 15, 10]\nmax_heap.insert(60)\nassert max_heap.heap == [60, 40, 15, 10, 20]\nassert max_heap.deleteMax() == 60\nassert max_heap.heap == [40, 20, 15, 10]\nassert max_heap.deleteMax() == 40\nassert max_heap.heap == [20, 10, 15]\nassert max_heap.deleteMax() == 20\nassert max_heap.heap == [15, 10]\nassert max_heap.deleteMax() == 15\nassert max_heap.heap == [10]\nassert max_heap.deleteMax() == 10\nassert max_heap.heap == []\nassert max_heap.deleteMax() == None\n\n[/Example 4]", "temperature": 0.712, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1724, "total_tokens": 2056, "completion_tokens": 332, "completion": "Write a program to find the kth largest element in an unsorted array using a min heap.\n\n###Code: \n\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    min_heap = nums[:k]\n    heapq.heapify(min_heap)\n    \n    for num in nums[k:]:\n        if num > min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, num)\n    \n    return min_heap[0]\n\n###Testcases: \n\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([5,7,2,3,4,1,6], 1) == 7\nassert findKthLargest([5,7,2,3,4,1,6], 5) == 2\nassert findKthLargest([1], 1) == 1\nassert findKthLargest([1,2], 2) == 1\nassert findKthLargest([1,2,3,4,5], 3) == 3\nassert findKthLargest([-1,-2,-3,-4,-5], 3) == -3\nassert findKthLargest([100,200,50,25,300], 4) == 50\n\n[/Example 4]", "temperature": 0.742, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1371, "total_tokens": 1619, "completion_tokens": 248, "completion": "Write a program to find the kth largest element in an unsorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = nums[:k]\n    heapq.heapify(heap)\n    \n    for num in nums[k:]:\n        if num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    \n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3, 2, 1, 5, 6, 4], 2) == 5\nassert findKthLargest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4\nassert findKthLargest([5, 4, 3, 2, 1], 1) == 5\nassert findKthLargest([1], 1) == 1\nassert findKthLargest([-1, 2, 0], 3) == -1\n```\n\n", "temperature": 0.812, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1300, "total_tokens": 1655, "completion_tokens": 355, "completion": "Write a program to find the median of a stream of numbers using two heaps.\n\n###Code: \n\nfrom heapq import heappush, heappop\n\nclass MedianFinder:\n    def __init__(self):\n        self.min_heap = []\n        self.max_heap = []\n\n    def addNum(self, num: int) -> None:\n        if not self.max_heap or num > -self.max_heap[0]:\n            heappush(self.min_heap, num)\n            if len(self.min_heap) > len(self.max_heap) + 1:\n                heappush(self.max_heap, -heappop(self.min_heap))\n        else:\n            heappush(self.max_heap, -num)\n            if len(self.max_heap) > len(self.min_heap):\n                heappush(self.min_heap, -heappop(self.max_heap))\n\n    def findMedian(self) -> float:\n        if len(self.min_heap) == len(self.max_heap):\n            return (self.min_heap[0] - self.max_heap[0]) / 2.0\n        else:\n            return float(self.min_heap[0])\n\n###Testcases: \n\nfinder = MedianFinder()\nfinder.addNum(1)\nfinder.addNum(2)\nassert finder.findMedian() == 1.5\nfinder.addNum(3)\nassert finder.findMedian() == 2.0\nfinder.addNum(4)\nfinder.addNum(5)\nassert finder.findMedian() == 3.0\nfinder.addNum(6)\nfinder.addNum(7)\nfinder.addNum(8)\nassert finder.findMedian() == 4.5\nfinder.addNum(9)\nfinder.addNum(10)\nassert finder.findMedian() == 5.5\n\n[/Example 4]", "temperature": 0.873, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1077, "total_tokens": 1332, "completion_tokens": 255, "completion": "You are given a list of integers and an integer k. Write a program to find the kth smallest element in the list using a min heap.\n\n###Code: \n\nimport heapq\n\ndef findKthSmallest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    \n    for _ in range(k-1):\n        heapq.heappop(heap)\n    \n    return heap[0]\n\n###Testcases: \n\nassert findKthSmallest([3,2,1,5,6,4], 2) == 2\nassert findKthSmallest([3,2,3,1,2,4,5,5,6], 4) == 3\nassert findKthSmallest([99, 78, 55, 22, 11, 7], 3) == 22\nassert findKthSmallest([4, 5, 8, 2, 1, 9], 1) == 1\nassert findKthSmallest([6, 7, 8, 9, 10], 3) == 8\n\n[/Example 4]", "temperature": 0.796, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}], "category": "Heap", "prompt_tokens": 969, "total_tokens": 1335, "completion_tokens": 366, "completion": "Write a program to merge K sorted arrays into one sorted array.\n\n###Code: \n\nimport heapq\n\ndef mergeKSortedArrays(arrays: list) -> list:\n    merged = []\n    heap = []\n    \n    for i, arr in enumerate(arrays):\n        if arr:\n            heapq.heappush(heap, (arr[0], i, 0))\n    \n    while heap:\n        val, arr_idx, idx = heapq.heappop(heap)\n        merged.append(val)\n        if idx + 1 < len(arrays[arr_idx]):\n            heapq.heappush(heap, (arrays[arr_idx][idx + 1], arr_idx, idx + 1))\n    \n    return merged\n\n###Testcases: \n\nassert mergeKSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeKSortedArrays([[10, 20, 30], [15, 25, 35], [27, 29, 37, 48]]) == [10, 15, 20, 25, 27, 29, 30, 35, 37, 48]\nassert mergeKSortedArrays([[5, 8, 9, 15], [3, 7, 13, 19], [1, 2, 4, 6, 11]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 15, 19]\n\n[/Example 4]", "temperature": 0.77, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}], "category": "Heap", "prompt_tokens": 1016, "total_tokens": 1394, "completion_tokens": 378, "completion": "Write a program to merge K sorted arrays using a min heap.\n\n###Code: \n\nimport heapq\n\ndef mergeKSortedArrays(arrays: list) -> list:\n    result = []\n    heap = []\n    \n    for i, array in enumerate(arrays):\n        if array:\n            heapq.heappush(heap, (array[0], i, 0))\n    \n    while heap:\n        val, arr_idx, idx = heapq.heappop(heap)\n        result.append(val)\n        if idx + 1 < len(arrays[arr_idx]):\n            heapq.heappush(heap, (arrays[arr_idx][idx + 1], arr_idx, idx + 1))\n    \n    return result\n\n###Testcases: \n\nassert mergeKSortedArrays([[1, 3, 5], [2, 4, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeKSortedArrays([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]]) == [10, 15, 20, 24, 25, 29, 30, 32, 33, 35, 37, 39, 40, 45, 48, 50]\nassert mergeKSortedArrays([[1, 2], [3, 4]]) == [1, 2, 3, 4]\nassert mergeKSortedArrays([[1, 2, 3, 4, 5]]) == [1, 2, 3, 4, 5]\n\n[/Example 4]", "temperature": 0.899, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1188, "total_tokens": 1598, "completion_tokens": 410, "completion": "You are given a list of jobs with their deadlines and profits. Each job takes one unit of time to complete and only one job can be scheduled at a time. The jobs must be completed before their deadline to get the profits. Write a function to find the maximum profit that can be obtained by scheduling the jobs.\n\n###Code: \n\n```python\ndef maxProfit(deadlines: List[int], profits: List[int]) -> int:\n        n = len(profits)\n        jobs = list(zip(profits, deadlines))\n        jobs.sort(key=lambda x: x[1], reverse=True)\n        maxDeadline = max(deadlines)\n        \n        slots = [False] * maxDeadline\n        maxProfit = 0\n        \n        for i in range(n):\n            for j in range(jobs[i][1] - 1, -1, -1):\n                if not slots[j]:\n                    slots[j] = True\n                    maxProfit += jobs[i][0]\n                    break\n        \n        return maxProfit\n```\n\n###Testcases: \n\n```python\nassert maxProfit([4, 1, 1, 1, 1], [20, 10, 40, 30, 10]) == 60\nassert maxProfit([2, 1, 2, 1, 3], [100, 19, 27, 25, 15]) == 127\nassert maxProfit([2, 1, 3, 2, 3], [50, 15, 60, 40, 30]) == 150\nassert maxProfit([2, 3, 1, 5, 4, 1, 1], [20, 15, 10, 5, 1, 25, 30]) == 65\nassert maxProfit([1, 1, 1, 1], [10, 20, 30, 40]) == 100\n```\n\n[/Example 4]", "temperature": 0.733, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1378, "total_tokens": 1743, "completion_tokens": 365, "completion": "Write a function to merge K sorted lists into one sorted list using a min heap.\n\n###Code: \n\nimport heapq\n\ndef mergeKSortedLists(lists):\n    heap = []\n    for i, l in enumerate(lists):\n        if l:\n            heapq.heappush(heap, (l.val, i, l))\n    \n    head = ListNode(0)\n    current = head\n    \n    while heap:\n        val, i, node = heapq.heappop(heap)\n        current.next = ListNode(val)\n        current = current.next\n        node = node.next\n        if node:\n            heapq.heappush(heap, (node.val, i, node))\n    \n    return head.next\n\n###Testcases: \n\nassert mergeKSortedLists([[1,4,5],[1,3,4],[2,6]]) == [1,1,2,3,4,4,5,6]\nassert mergeKSortedLists([[1,4,5],[1,3,4],[6,7]]) == [1,1,3,4,4,5,6,7]\nassert mergeKSortedLists([[1,4,5],[1,3,4],[2,6],[1,2,3]]) == [1,1,1,2,2,3,3,4,4,5,6]\nassert mergeKSortedLists([[],[1,3,4],[2,6],[1,2,3]]) == [1,2,2,3,3,4,6]\nassert mergeKSortedLists([[1,2,3],[4,5,6],[7,8,9]]) == [1,2,3,4,5,6,7,8,9]\n\n[/Example 4]", "temperature": 0.882, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1025, "total_tokens": 1318, "completion_tokens": 293, "completion": "You are given a list of integers, write a function to return the kth smallest element in the list using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(nums: list, k: int) -> int:\n    heap = nums[:k]\n    heapq.heapify(heap)\n    \n    for num in nums[k:]:\n        if num < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    \n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([3,2,1,5,6,4], 2) == 2\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5], 4) == 3\nassert kthSmallest([9, 8, 7, 6, 5, 4, 3, 2, 1], 3) == 3\nassert kthSmallest([1, 1, 1, 1, 1], 1) == 1\n```", "temperature": 0.855, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 954, "total_tokens": 1271, "completion_tokens": 317, "completion": "Given a list of integers, write a program to find the k smallest elements in the list using a min-heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestElements(nums: list, k: int) -> list:\n    heap = []\n    for num in nums:\n        if len(heap) < k:\n            heapq.heappush(heap, -num)\n        else:\n            if num < -heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, -num)\n    return sorted([-x for x in heap])\n```\n\n###Testcases: \n\n```python\nassert kSmallestElements([3, 7, 2, 8, 4, 9], 3) == [2, 3, 4]\nassert kSmallestElements([45, 23, 7, 56, 19, 48, 92, 30], 4) == [7, 19, 23, 30]\nassert kSmallestElements([5, 2, 9, 1, 7, 6, 3], 2) == [1, 2]\nassert kSmallestElements([10, 20, 30, 40, 50], 5) == [10, 20, 30, 40, 50]\nassert kSmallestElements([1, 1, 1, 1, 1], 3) == [1, 1, 1]\n```", "temperature": 0.895, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1066, "total_tokens": 1361, "completion_tokens": 295, "completion": "You are given two sorted arrays, nums1 and nums2, with m and n elements respectively. Write a program to find the median of the two sorted arrays. The overall run time complexity should be O(log(m+n)).\n\n###Code: \n\nimport heapq\n\ndef findMedianSortedArrays(nums1: list, nums2: list) -> float:\n    merged = []\n    for num in nums1:\n        heapq.heappush(merged, num)\n    for num in nums2:\n        heapq.heappush(merged, num)\n    \n    merged_length = len(nums1) + len(nums2)\n    for _ in range(merged_length // 2):\n        heapq.heappop(merged)\n    \n    if merged_length % 2 == 0:\n        median1 = heapq.heappop(merged)\n        median2 = heapq.heappop(merged)\n        return (median1 + median2) / 2\n    else:\n        return float(heapq.heappop(merged))\n\n###Testcases: \n\nassert findMedianSortedArrays([1, 3], [2]) == 2.0\nassert findMedianSortedArrays([1, 2], [3, 4]) == 2.5\nassert findMedianSortedArrays([0, 0], [0, 0]) == 0.0\nassert findMedianSortedArrays([], [1]) == 1.0\n\n[/Example 4]", "temperature": 0.81, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}], "category": "Heap", "prompt_tokens": 1113, "total_tokens": 1337, "completion_tokens": 224, "completion": "Given a list of integers, write a program to find the kth smallest element in the list using a heap.\n\n###Code: \n\nimport heapq\n\ndef kthSmallestElement(nums: list, k: int) -> int:\n    heap = nums[:k]\n    heapq.heapify(heap)\n    \n    for num in nums[k:]:\n        if num < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    \n    return heap[0]\n\n###Testcases: \n\nassert kthSmallestElement([10, 20, 30, 40, 50], 3) == 30\nassert kthSmallestElement([5, 15, 20, 25, 10], 2) == 10\nassert kthSmallestElement([1, 2, 3, 4, 5], 1) == 1\nassert kthSmallestElement([7, 3, 9, 1, 5, 6], 4) == 5\n\n[/Example 4]", "temperature": 0.836, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1285, "total_tokens": 1628, "completion_tokens": 343, "completion": "Write a Python program to merge multiple sorted lists into one sorted list using heap data structure.\n\n###Code: \n\nimport heapq\n\ndef mergeSortedLists(lists: List[List[int]]) -> List[int]:\n    merged_list = []\n    for lst in lists:\n        merged_list.extend(lst)\n    \n    heapq.heapify(merged_list)\n    \n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n    \n    return sorted_list\n\n###Testcases: \n\nassert mergeSortedLists([[1, 3, 5], [2, 4, 6], [0, 7, 8]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert mergeSortedLists([[], [1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedLists([[1], [2], [3], [4]]) == [1, 2, 3, 4]\nassert mergeSortedLists([[], [], []]) == []\nassert mergeSortedLists([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n[/Example 4]", "temperature": 0.842, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1475, "total_tokens": 1708, "completion_tokens": 233, "completion": "Given a list of integers, write a program to find the kth largest element in the list.\n\n###Code: \n\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = nums[:k]\n    heapq.heapify(heap)\n    \n    for num in nums[k:]:\n        if num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    \n    return heap[0]\n\n###Testcases: \n\nassert findKthLargest([3, 2, 1, 5, 6, 4], 2) == 5\nassert findKthLargest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4\nassert findKthLargest([1], 1) == 1\nassert findKthLargest([9, 8, 7, 6, 5, 4, 3, 2, 1], 3) == 7\n\n[/Example 4]", "temperature": 0.868, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1122, "total_tokens": 1400, "completion_tokens": 278, "completion": "You are given a list of integers and a target integer k. Write a program to find the kth smallest element in the list using a min-heap.\n\n###Code: \n\nimport heapq\n\ndef kthSmallest(nums: List[int], k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    \n    for _ in range(k):\n        result = heapq.heappop(heap)\n    \n    return result\n\n###Testcases: \n\nassert kthSmallest([5, 3, 8, 2, 10, 7], 3) == 5\nassert kthSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7) == 7\nassert kthSmallest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 1) == 1\nassert kthSmallest([1, 3, 2, 5, 4, 7, 6, 9, 8, 10], 6) == 6\nassert kthSmallest([1], 1) == 1\n\n[/Example 4]", "temperature": 0.709, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1051, "total_tokens": 1339, "completion_tokens": 288, "completion": "You are given two sorted arrays, nums1 and nums2. Write a program to find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\n\n###Code: \n\nimport heapq\n\ndef findMedianSortedArrays(nums1: list, nums2: list) -> float:\n    max_heap = []\n    min_heap = []\n    \n    for num in nums1 + nums2:\n        heapq.heappush(max_heap, -heapq.heappushpop(min_heap, num))\n        if len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n\n    if (len(nums1) + len(nums2)) % 2 == 0:\n        return (min_heap[0] - max_heap[0]) / 2\n    else:\n        return float(min_heap[0])\n\n###Testcases: \n\nassert findMedianSortedArrays([1, 3], [2]) == 2.0\nassert findMedianSortedArrays([1, 2], [3, 4]) == 2.5\nassert findMedianSortedArrays([0, 0], [0, 0]) == 0.0\nassert findMedianSortedArrays([], [1]) == 1.0\nassert findMedianSortedArrays([2], []) == 2.0\n\n[/Example 4]", "temperature": 0.89, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}], "category": "Heap", "prompt_tokens": 1005, "total_tokens": 1247, "completion_tokens": 242, "completion": "Given a list of integers, write a program to find the kth smallest element in the list.\n\n###Code: \n\nimport heapq\n\ndef kthSmallestElement(nums: list, k: int) -> int:\n    heap = nums[:k]\n    heapq._heapify_max(heap)\n    for num in nums[k:]:\n        if num < heap[0]:\n            heapq._heapreplace_max(heap, num)\n    return heap[0]\n\n###Testcases: \n\nassert kthSmallestElement([4, 2, 7, 1, 9, 5], 3) == 4\nassert kthSmallestElement([1, 3, 5, 7, 9, 2, 4, 6, 8], 5) == 5\nassert kthSmallestElement([10, 20, 5, 7, 9, 15, 30, 25], 4) == 10\nassert kthSmallestElement([6, 8, 12, 14, 16, 2, 4], 2) == 4\n\n[/Example 4]", "temperature": 0.856, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1177, "total_tokens": 1501, "completion_tokens": 324, "completion": "Write a function to merge K sorted lists into one sorted list.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeKSortedLists(lists: List[List[int]]) -> List[int]:\n    heap = []\n    for i, l in enumerate(lists):\n        if l:\n            heapq.heappush(heap, (l[0], i, 0))\n\n    result = []\n    while heap:\n        val, list_index, index = heapq.heappop(heap)\n        result.append(val)\n        if index + 1 < len(lists[list_index]):\n            heapq.heappush(heap, (lists[list_index][index + 1], list_index, index + 1))\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeKSortedLists([[1, 4, 5], [1, 3, 4], [2, 6]]) == [1, 1, 2, 3, 4, 4, 5, 6]\nassert mergeKSortedLists([[], [1], [2]]) == [1, 2]\nassert mergeKSortedLists([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n```", "temperature": 0.707, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1367, "total_tokens": 1887, "completion_tokens": 520, "completion": "Write a function to merge multiple sorted arrays into a single sorted array using a min-heap.\n\n###Code: \n\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    result = []\n    heap = []\n    for i, arr in enumerate(arrays):\n        if arr:\n            heapq.heappush(heap, (arr[0], i, 0))\n\n    while heap:\n        val, arr_idx, idx = heapq.heappop(heap)\n        result.append(val)\n        if idx + 1 < len(arrays[arr_idx]):\n            heapq.heappush(heap, (arrays[arr_idx][idx + 1], arr_idx, idx + 1))\n\n    return result\n\n###Testcases: \n\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[-1, 0, 1], [2, 3, 4], [5, 6, 7]]) == [-1, 0, 1, 2, 3, 4, 5, 6, 7]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 4, 7], [2, 5, 8], [3, 6, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 11, 12], [7, 8, 9], [4, 5, 6]]) == [4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[], [], []]) == []\nassert mergeSortedArrays([[-1, 0, 1], [], [4, 5, 6], [2, 3]]) == [-1, 0, 1, 2, 3, 4, 5, 6]\n\n[/Example 4]", "temperature": 0.787, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1014, "total_tokens": 1260, "completion_tokens": 246, "completion": "You are given an array of integers. Write a function to return the kth largest element in the array.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = nums[:k]\n    heapq.heapify(heap)\n    for num in nums[k:]:\n        if num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3, 2, 1, 5, 6, 4], 2) == 5\nassert findKthLargest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4\nassert findKthLargest([1], 1) == 1\nassert findKthLargest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == 8\n```\n\n[/Example 4]", "temperature": 0.848, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 943, "total_tokens": 1178, "completion_tokens": 235, "completion": "Given a list of integers, write a function to find the kth smallest element in the list.\n\n###Code: \n\nimport heapq\n\ndef kthSmallestElement(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n\n    for _ in range(k):\n        result = heapq.heappop(heap)\n\n    return result\n\n###Testcases: \n\nassert kthSmallestElement([4, 5, 3, 2, 7, 6], 3) == 4\nassert kthSmallestElement([1, 2, 3, 4, 5], 1) == 1\nassert kthSmallestElement([9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == 5\nassert kthSmallestElement([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 10) == 10\n\n[/Example 4]", "temperature": 0.879, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1224, "total_tokens": 1449, "completion_tokens": 225, "completion": "Given a list of integers, write a program to find the kth largest element in the list.\n\n###Code: \n\nimport heapq\n\ndef findKthLargest(nums: List[int], k: int) -> int:\n    return heapq.nlargest(k, nums)[-1]\n\n###Testcases: \n\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([1], 1) == 1\nassert findKthLargest([-1, -2, -3, -4, -5], 1) == -1\nassert findKthLargest([9, 7, 7, 9, 5], 3) == 7\nassert findKthLargest([0, 0, 0, 0, 0], 1) == 0\n\n[/Example 4]", "temperature": 0.763, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1414, "total_tokens": 1730, "completion_tokens": 316, "completion": "You are given a list of integers. Write a program to find the kth smallest element in the list. \n\n###Code:\n\n```python\nimport heapq\n\ndef kthSmallestElement(nums: List[int], k: int) -> int:\n    heap = []\n    for num in nums:\n        if len(heap) < k:\n            heapq.heappush(heap, -num)\n        else:\n            if -num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, -num)\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthSmallestElement([4, 2, 7, 1, 9, 3], 3) == 3\nassert kthSmallestElement([1, 5, 2, 8, 3, 9, 4, 7, 6], 5) == 5\nassert kthSmallestElement([10, 20, 30, 40, 50], 1) == 10\nassert kthSmallestElement([5, 5, 5, 5, 5], 3) == 5\nassert kthSmallestElement([8, 7, 6, 5, 4, 3, 2, 1], 4) == 5\nassert kthSmallestElement([-3, -1, -2, -5, -4], 3) == -3\n```", "temperature": 0.81, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1061, "total_tokens": 1332, "completion_tokens": 271, "completion": "You are given an array of integers and an integer k. Your task is to find the sum of the elements of the array after k'th smallest element. \n\nWrite a function `sumAfterKthSmallest` to solve the problem. \n\n###Code: \n\n```python\nimport heapq\n\ndef sumAfterKthSmallest(arr: list, k: int) -> int:\n    heapq.heapify(arr)\n    for _ in range(k):\n        heapq.heappop(arr)\n    return sum(arr)\n```\n\n###Testcases: \n\n```python\nassert sumAfterKthSmallest([1, 3, 5, 7, 9], 2) == 24\nassert sumAfterKthSmallest([10, 20, 30, 40, 50], 3) == 120\nassert sumAfterKthSmallest([5, 8, 2, 6, 1, 9], 4) == 24\nassert sumAfterKthSmallest([4, 1, 3, 7, 2, 5, 9], 5) == 24\nassert sumAfterKthSmallest([1, 2, 3, 4, 5, 6], 0) == 20\n```", "temperature": 0.747, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 990, "total_tokens": 1135, "completion_tokens": 145, "completion": "Write a program to merge K sorted arrays into one single sorted array.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeKSortedArrays(arrays: list) -> list:\n    result = []\n    heap = []\n    \n    for i, array in enumerate(arrays):\n        if array:\n            heapq.heappush(heap, (array[0], i, 0))\n    \n    while heap:\n        val, arr_idx, idx = heapq.heappop(heap)\n        result.append(val)\n        if idx + 1 < len(arrays[arr_idx]):\n            heapq.heappush(heap, (arrays[arr_idx][idx + 1], arr_idx, idx + 1))\n    \n    return result\n\n```", "temperature": 0.804, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1586, "total_tokens": 2114, "completion_tokens": 528, "completion": "Write a function to merge multiple sorted arrays into a single sorted array using a heap.\n\n###Code:\n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: List[List[int]]) -> List[int]:\n    heap = []\n    result = []\n    for i, array in enumerate(arrays):\n        if array:\n            heapq.heappush(heap, (array[0], i, 0))\n    while heap:\n        val, array_index, element_index = heapq.heappop(heap)\n        result.append(val)\n        if element_index + 1 < len(arrays[array_index]):\n            next_element = arrays[array_index][element_index + 1]\n            heapq.heappush(heap, (next_element, array_index, element_index + 1))\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[3, 6, 9], [1, 4, 7], [2, 5, 8]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[], [1, 2, 3], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]\nassert mergeSortedArrays([[1, 2, 3], [], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]\nassert mergeSortedArrays([[1], [2], [3]]) == [1, 2, 3]\nassert mergeSortedArrays([[], [], []]) == []\nassert mergeSortedArrays([[1, 4, 7], [2, 5, 8], [3, 6, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```", "temperature": 0.784, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1233, "total_tokens": 1462, "completion_tokens": 229, "completion": "Design a class that simulates a min heap data structure. Implement the following operations for the class:\n\n1. insert(val: int) - Insert the value val into the heap.\n2. getMin() - Return the minimum element from the heap.\n3. deleteMin() - Delete the minimum element from the heap.\n\n###Code: \n\n```python\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, val: int) -> None:\n        heapq.heappush(self.heap, val)\n\n    def getMin(self) -> int:\n        return self.heap[0]\n\n    def deleteMin(self) -> None:\n        heapq.heappop(self.heap)\n```\n\n###Testcases: \n\n```python\n# Create a MinHeap object\nminHeap = MinHeap()\n\n# Insert elements into the heap\nminHeap.insert(5)\nminHeap.insert(3)\nminHeap.insert(8)\nminHeap.insert(1)\n\nassert minHeap.getMin() == 1\n\nminHeap.deleteMin()\nassert minHeap.getMin() == 3\n```\n\n[/Example 4]", "temperature": 0.861, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1162, "total_tokens": 1535, "completion_tokens": 373, "completion": "You are given a list of integers, write a program to find the kth smallest element in the list using a min-heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(arr: List[int], k: int) -> int:\n    heap = arr[:k]\n    heapq.heapify(heap)\n    for num in arr[k:]:\n        if num < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([7, 10, 4, 3, 20, 15], 4) == 10\nassert kthSmallest([12, 3, 5, 7, 19], 2) == 5\nassert kthSmallest([7, 10, 4, 3, 20, 15], 1) == 3\nassert kthSmallest([12, 3, 5, 7, 19], 5) == 19\nassert kthSmallest([1, 2, 3, 4, 5], 3) == 3\nassert kthSmallest([5, 4, 3, 2, 1], 3) == 3\nassert kthSmallest([2, 2, 2, 2, 2], 3) == 2\nassert kthSmallest([1], 1) == 1\nassert kthSmallest([1, 2], 1) == 1\n```", "temperature": 0.839, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1423, "total_tokens": 1880, "completion_tokens": 457, "completion": "You are given two arrays of integers, arr1 and arr2, each containing distinct elements. Write a function to find the k pairs (arr1[i], arr2[j]) such that (arr1[i] + arr2[j]) is the smallest. Return the k pairs with the smallest sums.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: List[int], arr2: List[int], k: int) -> List[List[int]]:\n    result = []\n    if not arr1 or not arr2:\n        return result\n    \n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while heap and len(result) < k:\n        sum, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        \n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1,7,11], [2,4,6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1,1,2], [1,2,3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1,2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1,1,2], [1,2,3], 10) == [[1, 1], [1, 1], [1, 2], [1, 2], [2, 1], [1, 3], [2, 2], [1, 3], [2, 3]]\nassert kSmallestPairs([], [], 3) == []\nassert kSmallestPairs([1,1,2], [], 2) == []\n```", "temperature": 0.805, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1352, "total_tokens": 1621, "completion_tokens": 269, "completion": "Given a list of integers, write a function to find the kth smallest element in the list using a min-heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(nums: List[int], k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    for _ in range(k - 1):\n        heapq.heappop(heap)\n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([4,6,3,2,9], 3) == 4\nassert kthSmallest([8, 1, 7, 2, 6, 3, 5, 4], 5) == 5\nassert kthSmallest([0], 1) == 0\nassert kthSmallest([2, 1, 3, 5, 4, 7, 6], 2) == 2\nassert kthSmallest([-1, -5, -3, -4, -2], 3) == -3\nassert kthSmallest([10, -2, 4, 5, 3, 7], 1) == -2\n```", "temperature": 0.826, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858, "question": "Given a list of strings, write a program to find the k most frequent words from the list.", "code": "import collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "asserts": ["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "assert kMostFrequentWords([], 0) == []", "assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]"], "author": "GPT", "UUID": "366f2999-4d39-4660-98e6-3884791d32cb", "tc_status": [["assert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]", "Passed"], ["assert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]", "Passed"], ["assert kMostFrequentWords([], 0) == []", "Passed"], ["assert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 999, "total_tokens": 1336, "completion_tokens": 337, "completion": "Design a data structure that supports the following two operations:\n\n1. addNum(num): Add a unique integer number to the data structure.\n2. findMedian(): Return the median of all numbers in the data structure.\n\nThe findMedian operation should have O(1) time complexity.\n\n###Code:\n\n```python\nimport heapq\n\nclass MedianFinder:\n\n    def __init__(self):\n        self.small = []  # max heap\n        self.large = []  # min heap\n\n\n    def addNum(self, num: int) -> None:\n        if not self.small or num > -self.small[0]:\n            heapq.heappush(self.large, num)\n            if len(self.large) > len(self.small) + 1:\n                heapq.heappush(self.small, -heapq.heappop(self.large))\n        else:\n            heapq.heappush(self.small, -num)\n            if len(self.small) > len(self.large):\n                heapq.heappush(self.large, -heapq.heappop(self.small))\n\n\n    def findMedian(self) -> float:\n        if len(self.large) > len(self.small):\n            return float(self.large[0])\n        else:\n            return (self.large[0] - self.small[0]) / 2.0\n```\n\n###Testcases:\n\n```python\nmf = MedianFinder()\nmf.addNum(1)\nmf.addNum(2)\nassert mf.findMedian() == 1.5\nmf.addNum(3)\nassert mf.findMedian() == 2.0\nmf.addNum(4)\nmf.addNum(5)\nassert mf.findMedian() == 3.0\n```\n\n", "temperature": 0.746, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1430, "total_tokens": 1661, "completion_tokens": 231, "completion": "Write a program to find the k closest points to the origin (0,0) from a list of points in a 2D plane. The distance between two points on a plane is the Euclidean distance.\n\n###Code: \n\nimport heapq\n\ndef kClosest(points: list, k: int) -> list:\n    heap = []\n    \n    for x, y in points:\n        dist = x**2 + y**2\n        heapq.heappush(heap, (dist, x, y))\n    \n    result = [(x, y) for dist, x, y in heapq.nsmallest(k, heap)]\n    return result\n\n###Testcases: \n\nassert kClosest([[1,3],[-2,2]], 1) == [(-2, 2)]\nassert kClosest([[3,3],[5,-1],[-2,4]], 2) == [(3, 3), (-2, 4)]\nassert kClosest([[1,1],[-2,-2],[2,-2]], 2) == [(1, 1), (-2, -2)]\n\n[/Example 4]", "temperature": 0.882, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1322, "total_tokens": 1660, "completion_tokens": 338, "completion": "Write a program to find the median of a data stream as it is being read in. Use the concept of min heap and max heap to optimize the solution.\n\n###Code: \n\nimport heapq\n\nclass MedianFinder:\n\n    def __init__(self):\n        self.max_heap = []  # to store the smaller half of the numbers\n        self.min_heap = []  # to store the larger half of the numbers\n\n    def addNum(self, num: int) -> None:\n        if len(self.max_heap) == len(self.min_heap):\n            heapq.heappush(self.max_heap, -heapq.heappushpop(self.min_heap, num))\n        else:\n            heapq.heappush(self.min_heap, -heapq.heappushpop(self.max_heap, -num))\n\n    def findMedian(self) -> float:\n        if len(self.min_heap) == len(self.max_heap):\n            return (self.min_heap[0] - self.max_heap[0]) / 2.0\n        else:\n            return float(self.min_heap[0])\n\n###Testcases: \n\nmf = MedianFinder()\nmf.addNum(1)\nmf.addNum(2)\nassert mf.findMedian() == 1.5\nmf.addNum(3)\nassert mf.findMedian() == 2.0\nmf.addNum(4)\nmf.addNum(5)\nassert mf.findMedian() == 3.0\nmf.addNum(6)\nassert mf.findMedian() == 3.5\nmf.addNum(7)\nmf.addNum(8)\nmf.addNum(9)\nassert mf.findMedian() == 5.0\n\n[/Example 4]", "temperature": 0.848, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}], "category": "Heap", "prompt_tokens": 1369, "total_tokens": 1724, "completion_tokens": 355, "completion": "Write a program to find the kth smallest element in a matrix. The matrix is sorted in row-major order.\n\n###Code: \n\nimport heapq\n\ndef kthSmallest(matrix: list, k: int) -> int:\n    heap = []\n    n = len(matrix)\n    for i in range(min(k, n)):\n        heap.append((matrix[i][0], i, 0))\n    heapq.heapify(heap)\n    while k > 0:\n        val, row, col = heapq.heappop(heap)\n        if col + 1 < len(matrix[row]):\n            heapq.heappush(heap, (matrix[row][col + 1], row, col + 1))\n        k -= 1\n    return val\n\n###Testcases: \n\nassert kthSmallest([[1, 5, 9], [10, 11, 13], [12, 13, 15]], 8) == 13\nassert kthSmallest([[1, 3, 5], [6, 7, 12], [11, 14, 14]], 3) == 5\nassert kthSmallest([[1, 3, 9], [7, 8, 10], [9, 10, 12]], 4) == 7\nassert kthSmallest([[1, 4, 6], [2, 5, 7], [3, 8, 10]], 5) == 4\nassert kthSmallest([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8) == 8\n\n[/Example 4]", "temperature": 0.769, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1541, "total_tokens": 1936, "completion_tokens": 395, "completion": "Write a function that takes an unsorted array and returns the median of the array using a max heap and a min heap.\n\n###Code: \n\nimport heapq\n\ndef findMedian(nums: list) -> float:\n    max_heap = []\n    min_heap = []\n    median = 0.0\n\n    for num in nums:\n        if not max_heap or num < -max_heap[0]:\n            heapq.heappush(max_heap, -num)\n        else:\n            heapq.heappush(min_heap, num)\n\n        if len(max_heap) > len(min_heap) + 1:\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        elif len(min_heap) > len(max_heap):\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n\n        if len(max_heap) == len(min_heap):\n            median = (-max_heap[0] + min_heap[0]) / 2\n        else:\n            median = -max_heap[0]\n\n    return median\n\n###Testcases: \n\nassert findMedian([1, 2, 3, 4, 5]) == 3.0\nassert findMedian([6, 7, 8, 9, 10, 11]) == 8.5\nassert findMedian([5, 2, 10, 4, 1, 3, 8, 6, 9, 7]) == 5.5\nassert findMedian([15, 20, 30, 25, 35]) == 25\nassert findMedian([12, 15, 10, 5, 8, 20]) == 11.5\nassert findMedian([100, 200, 300, 400, 500, 600, 700, 800, 900]) == 500.0\n\n[/Example 4]", "temperature": 0.724, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1731, "total_tokens": 1968, "completion_tokens": 237, "completion": "Write a program to implement a priority queue using a min heap.\n\n###Code: \n\nimport heapq\n\nclass PriorityQueue:\n    def __init__(self):\n        self.pq = []\n        self.index = 0\n\n    def push(self, priority, item):\n        heapq.heappush(self.pq, (priority, self.index, item))\n        self.index += 1\n\n    def pop(self):\n        return heapq.heappop(self.pq)[-1]\n\n    def __len__(self):\n        return len(self.pq)\n\n###Testcases: \n\npq = PriorityQueue()\npq.push(3, 'Task 1')\npq.push(1, 'Task 2')\npq.push(2, 'Task 3')\n\nassert len(pq) == 3\nassert pq.pop() == 'Task 2'\nassert pq.pop() == 'Task 3'\nassert len(pq) == 1\npq.push(4, 'Task 4')\nassert pq.pop() == 'Task 1'\nassert len(pq) == 1\nassert pq.pop() == 'Task 4'\nassert len(pq) == 0\n\n[/Example 4]", "temperature": 0.868, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1378, "total_tokens": 1575, "completion_tokens": 197, "completion": "Write a program to implement a priority queue using a min heap.\n\n###Code: \n\nimport heapq\n\nclass PriorityQueue:\n    def __init__(self):\n        self.heap = []\n        self.index = 0\n\n    def push(self, priority, item):\n        heapq.heappush(self.heap, (priority, self.index, item))\n        self.index += 1\n\n    def pop(self):\n        return heapq.heappop(self.heap)[-1]\n\n    def __len__(self):\n        return len(self.heap)\n\n###Testcases: \n\npq = PriorityQueue()\npq.push(3, 'Task 1')\npq.push(5, 'Task 2')\npq.push(1, 'Task 3')\n\nassert pq.pop() == 'Task 3'\nassert pq.pop() == 'Task 1'\nassert pq.pop() == 'Task 2'\n\npq.push(2, 'Task 4')\n\nassert pq.pop() == 'Task 4'\n\n[/Example 4]", "temperature": 0.833, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1307, "total_tokens": 1535, "completion_tokens": 228, "completion": "Write a program to implement a priority queue using a min heap.\n\n###Code: \n\nimport heapq\n\nclass PriorityQueue:\n    def __init__(self):\n        self.heap = []\n        self.index = 0\n\n    def push(self, priority, item):\n        heapq.heappush(self.heap, (priority, self.index, item))\n        self.index += 1\n\n    def pop(self):\n        return heapq.heappop(self.heap)[-1]\n\n    def peek(self):\n        return self.heap[0][-1]\n\n    def __len__(self):\n        return len(self.heap)\n\n\n###Testcases: \n\npq = PriorityQueue()\npq.push(3, \"Task 1\")\npq.push(5, \"Task 2\")\npq.push(1, \"Task 3\")\nassert len(pq) == 3\nassert pq.peek() == \"Task 3\"\nassert pq.pop() == \"Task 3\"\nassert len(pq) == 2\nassert pq.pop() == \"Task 1\"\nassert pq.pop() == \"Task 2\"\nassert len(pq) == 0\n\n[/Example 4]", "temperature": 0.795, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1419, "total_tokens": 1698, "completion_tokens": 279, "completion": "You are given a list of jobs, each with a deadline and profit. Write a program to find the maximum profit you can achieve by scheduling the jobs such that each job is executed within its deadline. You may use a heap-based approach to solve this problem.\n\n###Code:\n\nimport heapq\n\ndef maxProfit(job_list):\n    job_list.sort(key=lambda x: x[1], reverse=True)  # sort jobs by profit in descending order\n    max_deadline = max(job_list, key=lambda x: x[0])[0]\n    schedule = [0] * max_deadline\n    total_profit = 0\n\n    for job in job_list:\n        deadline, profit = job\n        for i in range(deadline - 1, -1, -1):\n            if schedule[i] == 0:\n                schedule[i] = 1\n                total_profit += profit\n                break\n\n    return total_profit\n\n###Testcases:\n\njob_list = [(1, 10), (2, 20), (1, 15), (3, 25), (3, 5)]\nassert maxProfit(job_list) == 45\n\njob_list2 = [(1, 50), (2, 20), (3, 100), (2, 10)]\nassert maxProfit(job_list2) == 150\n\n[/Example 4]", "temperature": 0.835, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}], "category": "Heap", "prompt_tokens": 1466, "total_tokens": 1745, "completion_tokens": 279, "completion": "You are given a list of meeting intervals where intervals[i] = [start_i, end_i]. Write a program to determine if a person could attend all meetings.\n\n###Code:\n\n```python\ndef canAttendMeetings(intervals: List[List[int]]) -> bool:\n    intervals.sort(key=lambda x: x[0])\n    \n    for i in range(1, len(intervals)):\n        if intervals[i][0] < intervals[i-1][1]:\n            return False\n    return True\n```\n\n###Testcases:\n\n```python\nassert canAttendMeetings([[0, 30], [5, 10], [15, 20]]) == False\nassert canAttendMeetings([[7, 10], [2, 4]]) == True\nassert canAttendMeetings([[0, 5], [5, 10], [10, 15]]) == True\nassert canAttendMeetings([[1, 2], [2, 3], [3, 4], [4, 5]]) == True\nassert canAttendMeetings([[1, 3], [2, 6], [8, 10], [15, 18]]) == False\nassert canAttendMeetings([[1, 3], [4, 6], [7, 9], [10, 12]]) == True\n```", "temperature": 0.8, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1638, "total_tokens": 2176, "completion_tokens": 538, "completion": "Write a function to implement a max heap data structure. The function should support the following operations:\n1. Insert: Add a new element to the heap.\n2. ExtractMax: Remove and return the maximum element from the heap.\n3. GetMax: Return the maximum element without removing it from the heap.\n\n###Code: \n\nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, value):\n        self.heap.append(value)\n        self._percolate_up(len(self.heap) - 1)\n\n    def extractMax(self):\n        if len(self.heap) > 1:\n            max_val = self.heap[0]\n            self.heap[0] = self.heap.pop()\n            self._percolate_down(0)\n            return max_val\n        elif len(self.heap) == 1:\n            return self.heap.pop()\n        else:\n            return None\n\n    def getMax(self):\n        if self.heap:\n            return self.heap[0]\n        return None\n\n    def _percolate_up(self, index):\n        while index > 0:\n            parent = (index - 1) // 2\n            if self.heap[parent] < self.heap[index]:\n                self.heap[parent], self.heap[index] = self.heap[index], self.heap[parent]\n                index = parent\n            else:\n                break\n\n    def _percolate_down(self, index):\n        left = (2 * index) + 1\n        right = (2 * index) + 2\n        largest = index\n        if left < len(self.heap) and self.heap[left] > self.heap[largest]:\n            largest = left\n        if right < len(self.heap) and self.heap[right] > self.heap[largest]:\n            largest = right\n        if largest != index:\n            self.heap[largest], self.heap[index] = self.heap[index], self.heap[largest]\n            self._percolate_down(largest)\n\n###Testcases: \n\nmax_heap = MaxHeap()\nmax_heap.insert(5)\nmax_heap.insert(10)\nmax_heap.insert(3)\nmax_heap.insert(8)\nmax_heap.insert(7)\nassert max_heap.extractMax() == 10\nassert max_heap.extractMax() == 8\nassert max_heap.getMax() == 7\nmax_heap.insert(15)\nassert max_heap.extractMax() == 15\nassert max_heap.extractMax() == 7\nassert max_heap.extractMax() == 5\nassert max_heap.extractMax() == 3\nassert max_heap.extractMax() == None\nassert max_heap.getMax() == None\n\n[/Example 4]", "temperature": 0.766, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1828, "total_tokens": 2203, "completion_tokens": 375, "completion": "Write a function to find the kth largest element in an unsorted array using a min heap.\n\n###Code: \n\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    \n    for num in nums:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    \n    return heap[0]\n\n###Testcases: \n\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 22, 37, 41, 55, 73, 81, 29, 62, 55], 3) == 73\nassert findKthLargest([10, 5, 7, 1, 2, 8, 9], 3) == 8\nassert findKthLargest([5, 5, 5, 5], 1) == 5\nassert findKthLargest([1, 2, 3, 4, 5], 1) == 5\nassert findKthLargest([5, 4, 3, 2, 1], 1) == 5\nassert findKthLargest([100, 90, 80, 70, 60, 50, 40, 30, 20, 10], 9) == 20\n\n[/Example 4]", "temperature": 0.832, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1475, "total_tokens": 1856, "completion_tokens": 381, "completion": "You are given two arrays of integers, arr1 and arr2, each of size n. Write a program to find the kth largest element in the union of arr1 and arr2.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthLargestInArrays(arr1: list, arr2: list, k: int) -> int:\n    heap = []\n    for a in arr1:\n        heapq.heappush(heap, a)\n    for a in arr2:\n        heapq.heappush(heap, a)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return heapq.heappop(heap)\n```\n\n###Testcases:\n\n```python\nassert kthLargestInArrays([4, 8, 7], [2, 5, 1], 2) == 7\nassert kthLargestInArrays([3, 1, 9, 6], [5, 2, 8, 4], 3) == 6\nassert kthLargestInArrays([10, 12, 14, 16], [11, 13, 15, 17], 4) == 14\nassert kthLargestInArrays([1, 1, 1, 1], [2, 2, 2, 2], 3) == 2\nassert kthLargestInArrays([5, 4, 3, 2, 1], [10, 9, 8, 7, 6], 5) == 6\nassert kthLargestInArrays([9, 8, 7, 6, 5], [1, 2, 3, 4, 5], 7) == 3\n```\n\n[/Example 4]", "temperature": 0.899, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1404, "total_tokens": 1928, "completion_tokens": 524, "completion": "Write a program to implement a min heap data structure from scratch. The program should allow the insertion of elements, removal of the minimum element, and retrieval of the minimum element.\n\n###Code: \n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, val: int) -> None:\n        self.heap.append(val)\n        self._heapify_up(len(self.heap) - 1)\n\n    def remove_min(self) -> int:\n        if len(self.heap) == 0:\n            return None\n        if len(self.heap) == 1:\n            return self.heap.pop()\n        min_val = self.heap[0]\n        self.heap[0] = self.heap.pop()\n        self._heapify_down(0)\n        return min_val\n\n    def get_min(self) -> int:\n        if len(self.heap) > 0:\n            return self.heap[0]\n        else:\n            return None\n\n    def _heapify_up(self, index: int) -> None:\n        while index > 0:\n            parent = (index - 1) // 2\n            if self.heap[parent] > self.heap[index]:\n                self.heap[parent], self.heap[index] = self.heap[index], self.heap[parent]\n                index = parent\n            else:\n                break\n\n    def _heapify_down(self, index: int) -> None:\n        while (2 * index + 1) < len(self.heap):\n            left = 2 * index + 1\n            right = 2 * index + 2 if (2 * index + 2) < len(self.heap) else -1\n            smallest = left if right == -1 or self.heap[left] < self.heap[right] else right\n            if self.heap[index] > self.heap[smallest]:\n                self.heap[index], self.heap[smallest] = self.heap[smallest], self.heap[index]\n                index = smallest\n            else:\n                break\n\n###Testcases: \n\nmin_heap = MinHeap()\nmin_heap.insert(5)\nmin_heap.insert(3)\nmin_heap.insert(10)\nassert min_heap.get_min() == 3\nassert min_heap.remove_min() == 3\nassert min_heap.get_min() == 5\nmin_heap.insert(1)\nassert min_heap.get_min() == 1\nassert min_heap.remove_min() == 1\nassert min_heap.remove_min() == 5\nassert min_heap.remove_min() == 10\nassert min_heap.remove_min() == None\n\n[/Example 4]", "temperature": 0.817, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}], "category": "Heap", "prompt_tokens": 1358, "total_tokens": 1666, "completion_tokens": 308, "completion": "Find the median of a stream of numbers. Implement a class MedianFinder with the following methods:\n\n1. addNum(num: int) - Add a number to the data stream.\n2. findMedian() - Return the median of all elements so far.\n\n###Code: \n\nfrom heapq import *\n\nclass MedianFinder:\n\n    def __init__(self):\n        self.minHeap = []\n        self.maxHeap = []\n\n    def addNum(self, num: int) -> None:\n        heappush(self.maxHeap, -num)\n        heappush(self.minHeap, -heappop(self.maxHeap))\n        \n        if len(self.minHeap) > len(self.maxHeap):\n            heappush(self.maxHeap, -heappop(self.minHeap))\n\n    def findMedian(self) -> float:\n        if len(self.maxHeap) == len(self.minHeap):\n            return (self.minHeap[0] - self.maxHeap[0]) / 2.0\n        else:\n            return -self.maxHeap[0]\n\n###Testcases:\n\nmedianFinder = MedianFinder()\nmedianFinder.addNum(1)\nmedianFinder.addNum(2)\nassert medianFinder.findMedian() == 1.5\nmedianFinder.addNum(3)\nassert medianFinder.findMedian() == 2.0\nmedianFinder.addNum(4)\nmedianFinder.addNum(5)\nassert medianFinder.findMedian() == 3.0\nmedianFinder.addNum(6)\nassert medianFinder.findMedian() == 3.5\n\n", "temperature": 0.858, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1530, "total_tokens": 1860, "completion_tokens": 330, "completion": "Write a function to find the kth smallest element in an unsorted array without sorting the entire array.\n\n###Code: \n\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heap = arr[:k]\n    heapq._heapify_max(heap)\n    \n    for num in arr[k:]:\n        if num < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    \n    return heap[0]\n\n###Testcases: \n\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([1, 2, 3, 4, 5, 6], 2) == 2\nassert kthSmallest([9, 4, 7, 1, 6, 5], 4) == 5\nassert kthSmallest([5, 2, 9, 1, 5, 6], 1) == 1\nassert kthSmallest([3, 8, 12, 4, 5, 7, 10, 9], 5) == 7\nassert kthSmallest([100, 200, 50, 25, 300, 175, 80], 4) == 80\nassert kthSmallest([5, 5, 5, 5, 5, 5, 5], 3) == 5\n\n[/Example 4]", "temperature": 0.873, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1720, "total_tokens": 2072, "completion_tokens": 352, "completion": "Write a function to find the kth smallest element in an unsorted array using a min heap.\n\n###Code: \n\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heap = arr[:k]\n    heapq.heapify(heap)\n\n    for num in arr[k:]:\n        if num < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n\n    return heap[0]\n\n###Testcases: \n\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([12, 3, 5, 7, 19], 2) == 5\nassert kthSmallest([1, 2, 3, 4, 5], 1) == 1\nassert kthSmallest([5, 4, 3, 2, 1], 4) == 5\nassert kthSmallest([6, 7, 8, 9, 10, 11, 12], 5) == 10\nassert kthSmallest([55, 23, 12, 78, 45, 10, 87, 99, 33], 7) == 55\nassert kthSmallest([100, 200, 300, 400, 500], 3) == 300\nassert kthSmallest([9, 8, 7, 6, 5, 4, 3, 2, 1], 6) == 4\n\n[/Example 4]", "temperature": 0.844, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1367, "total_tokens": 1636, "completion_tokens": 269, "completion": "You are given an array of integers and an integer k. Write a function to find the kth largest element in the array.\n\n###Code:\n\n```python\nimport heapq\n\ndef findKthLargest(nums: List[int], k: int) -> int:\n    heap = nums[:k]\n    heapq.heapify(heap)\n    \n    for num in nums[k:]:\n        if num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    \n    return heap[0]\n```\n\n###Testcases:\n\n```python\nassert findKthLargest([3, 2, 1, 5, 6, 4], 2) == 5\nassert findKthLargest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4\nassert findKthLargest([10, 7, 8, 11, 9, 5, 4, 3, 2, 1], 3) == 9\nassert findKthLargest([5, 2, 4, 1, 3, 6, 0], 4) == 3\n```\n\n[/Example 4]", "temperature": 0.8, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1296, "total_tokens": 1499, "completion_tokens": 203, "completion": "Write a program to implement a max heap data structure. Specifically, the program should have the following functionalities:\n- Insert an element into the max heap.\n- Remove the maximum element from the max heap.\n- Get the maximum element from the max heap without removing it.\n\n###Code: \n\nimport heapq\n\nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, val: int):\n        heapq.heappush(self.heap, -val)\n\n    def removeMax(self):\n        return -heapq.heappop(self.heap)\n\n    def getMax(self):\n        return -self.heap[0]\n\n###Testcases: \n\nmaxHeap = MaxHeap()\nmaxHeap.insert(5)\nmaxHeap.insert(10)\nmaxHeap.insert(3)\n\nassert maxHeap.getMax() == 10\nassert maxHeap.removeMax() == 10\nassert maxHeap.getMax() == 5\nmaxHeap.insert(15)\nassert maxHeap.getMax() == 15\n\n[/Example 4]", "temperature": 0.799, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1577, "total_tokens": 1978, "completion_tokens": 401, "completion": "Write a function to find the kth smallest element in an unsorted integer array.\n\n###Code: \n\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heap = arr[:k]\n    heapq._heapify_max(heap)\n    \n    for num in arr[k:]:\n        if num < heap[0]:\n            heapq._heapreplace_max(heap, num)\n    \n    return heap[0]\n\n###Testcases: \n\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([12, 3, 5, 7, 19], 2) == 5\nassert kthSmallest([4, 2, 8, 6, 10, 12], 3) == 6\nassert kthSmallest([8, 7, 6, 5, 4, 3, 2, 1], 5) == 5\nassert kthSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7) == 7\nassert kthSmallest([5], 1) == 5\nassert kthSmallest([9, 8, 7, 6, 5, 4, 3, 2, 1], 1) == 1\nassert kthSmallest([6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 4) == 9\nassert kthSmallest([3, 12, 23, 34, 45, 56, 67, 78, 89, 90], 6) == 45\n\n[/Example 4]", "temperature": 0.789, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1767, "total_tokens": 2059, "completion_tokens": 292, "completion": "You are given a list of integers and an integer k. Write a function to find the kth largest element in the list using a min-heap.\n\n###Code: \n\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap[0]\n\n###Testcases: \n\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([1], 1) == 1\nassert findKthLargest([-1, -2, -3, -4, -5], 1) == -1\nassert findKthLargest([7, 6, 5, 4, 3, 2, 1], 3) == 5\nassert findKthLargest([9, 9, 6, 6, 3, 3], 3) == 6\n\n[/Example 4]", "temperature": 0.793, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1414, "total_tokens": 1709, "completion_tokens": 295, "completion": "You are given an array of integers. You need to find the kth largest element in the array using a min-heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthLargestElement(nums: list, k: int) -> int:\n    min_heap = []\n    for num in nums:\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, num)\n        else:\n            if num > min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, num)\n    return min_heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthLargestElement([3, 2, 1, 5, 6, 4], 2) == 5\nassert kthLargestElement([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4\nassert kthLargestElement([1, 2, 3, 4, 5], 1) == 5\nassert kthLargestElement([5, 4, 3, 2, 1], 3) == 3\nassert kthLargestElement([1], 1) == 1\nassert kthLargestElement([-1, 2, 0], 3) == -1\n```", "temperature": 0.71, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1343, "total_tokens": 1674, "completion_tokens": 331, "completion": "Find the median of a stream of integers using a min heap and a max heap.\n\n###Code: \n\nimport heapq\n\nclass MedianFinder:\n\n    def __init__(self):\n        self.min_heap = []\n        self.max_heap = []\n\n    def addNum(self, num: int) -> None:\n        if not self.max_heap or num <= -self.max_heap[0]:\n            heapq.heappush(self.max_heap, -num)\n        else:\n            heapq.heappush(self.min_heap, num)\n\n        if len(self.max_heap) > len(self.min_heap) + 1:\n            heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap))\n        elif len(self.max_heap) < len(self.min_heap):\n            heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap))\n\n    def findMedian(self) -> float:\n        if len(self.min_heap) == len(self.max_heap):\n            return (-self.max_heap[0] + self.min_heap[0]) / 2\n        else:\n            return -self.max_heap[0]\n        \n\n###Testcases: \n\nmf = MedianFinder()\nmf.addNum(1)\nmf.addNum(2)\nassert mf.findMedian() == 1.5\nmf.addNum(3)\nassert mf.findMedian() == 2.0\nmf.addNum(4)\nassert mf.findMedian() == 2.5\nmf.addNum(5)\nassert mf.findMedian() == 3.0\nmf.addNum(6)\nassert mf.findMedian() == 3.5\n\n[/Example 4]", "temperature": 0.866, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1939, "total_tokens": 2397, "completion_tokens": 458, "completion": "Write a program to find the kth smallest element in an unsorted array using a min heap.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n\n    for _ in range(k-1):\n        heapq.heappop(heap)\n\n    return heapq.heappop(heap)\n```\n\n###Testcases:\n\n```python\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([7, 10, 4, 3, 20, 15], 4) == 10\nassert kthSmallest([12, 3, 5, 7, 19], 2) == 5\nassert kthSmallest([25, 7, 10, 8, 12], 1) == 7\nassert kthSmallest([3, 3, 3, 3, 3], 3) == 3\nassert kthSmallest([5, 8, 12, 7, 6, 2, 4, 9, 10], 5) == 6\nassert kthSmallest([1, -2, 4, 3, 7, 3], 4) == 3\nassert kthSmallest([9, 7, 7, 9, 5], 3) == 7\nassert kthSmallest([9, 7, 7, 9, 5], 5) == 9\nassert kthSmallest([99], 1) == 99\nassert kthSmallest([0], 1) == 0\nassert kthSmallest([-1, -5, -3, -4, -2], 3) == -3\nassert kthSmallest([15, 22, 13, 27, 12, 10, 20], 7) == 27\n```\n\n[/Example 4]", "temperature": 0.842, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1586, "total_tokens": 2044, "completion_tokens": 458, "completion": "Write a function to find the kth smallest element in an unsorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    min_heap = arr[:k]\n    heapq.heapify(min_heap)\n\n    for i in range(k, len(arr)):\n        if arr[i] < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, arr[i])\n\n    return min_heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([12, 3, 5, 7, 19], 2) == 5\nassert kthSmallest([1, 5, 9, 2, 8, 15, 10], 4) == 5\nassert kthSmallest([9, 4, 7, 1, 2, 8, 6], 5) == 7\nassert kthSmallest([6, 5, 3, 1, 8, 7, 2, 4], 6) == 7\nassert kthSmallest([10, 20, 11, 70, 50, 40, 30], 4) == 30\nassert kthSmallest([3, 2, 1, 5, 4], 2) == 2\nassert kthSmallest([5, 7, 9, 3, 1, 2, 8, 6, 4], 1) == 1\nassert kthSmallest([1, 2, 3, 4, 5], 5) == 5\nassert kthSmallest([5, 4, 3, 2, 1], 3) == 3\nassert kthSmallest([1, 2, 1, 2, 1], 3) == 1\n```", "temperature": 0.773, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1515, "total_tokens": 1756, "completion_tokens": 241, "completion": "Write a function to implement a min heap data structure that supports the following operations:\n\n1. Insertion of an element into the heap.\n2. Removal of the minimum element from the heap.\n3. Finding the minimum element in the heap without removing it.\n\n###Code:\n\n```python\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, value):\n        heapq.heappush(self.heap, value)\n\n    def remove_min(self):\n        return heapq.heappop(self.heap)\n\n    def find_min(self):\n        return self.heap[0]\n```\n\n###Testcases:\n\n```python\n# Create a min heap\nmin_heap = MinHeap()\nmin_heap.insert(5)\nmin_heap.insert(3)\nmin_heap.insert(8)\n\n# Test removal of minimum element\nassert min_heap.remove_min() == 3\n\n# Test finding the minimum element\nassert min_heap.find_min() == 5\n\nmin_heap.insert(2)\nmin_heap.insert(7)\n\n# Test removal of minimum element\nassert min_heap.remove_min() == 2\n\n# Test finding the minimum element\nassert min_heap.find_min() == 5\n```", "temperature": 0.707, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1776, "total_tokens": 2180, "completion_tokens": 404, "completion": "Find the kth smallest element in a matrix with sorted rows and columns. \n\n###Code: \n\nimport heapq\n\ndef kthSmallest(matrix: list, k: int) -> int:\n    heap = []\n    for i in range(min(k, len(matrix))):\n        heap.append((matrix[i][0], i, 0))\n    heapq.heapify(heap)\n\n    while k:\n        val, r, c = heapq.heappop(heap)\n        if c + 1 < len(matrix[r]):\n            heapq.heappush(heap, (matrix[r][c + 1], r, c + 1))\n        k -= 1\n\n    return val\n\n###Testcases: \n\n# Test Case 1\nmatrix1 = [\n    [1,  5,  9],\n    [10, 11, 13],\n    [12, 13, 15]\n]\nk1 = 8\nassert kthSmallest(matrix1, k1) == 13\n\n# Test Case 2\nmatrix2 = [\n    [1,  3,  5],\n    [6,  7,  12],\n    [11, 14, 14]\n]\nk2 = 3\nassert kthSmallest(matrix2, k2) == 5\n\n# Test Case 3\nmatrix3 = [\n    [1,  4,  7],\n    [8,  10, 11],\n    [11, 12, 17]\n]\nk3 = 6\nassert kthSmallest(matrix3, k3) == 11\n\n# Test Case 4\nmatrix4 = [\n    [1,  5,  9],\n    [10, 11, 13],\n    [12, 13, 15]\n]\nk4 = 5\nassert kthSmallest(matrix4, k4) == 10\n\n[/Example 4]", "temperature": 0.856, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1705, "total_tokens": 2012, "completion_tokens": 307, "completion": "Write a program to find the Kth smallest element in a row-wise and column-wise sorted 2D array.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(matrix: List[List[int]], k: int) -> int:\n    min_heap = []\n    rows, cols = len(matrix), len(matrix[0])\n\n    for r in range(min(rows, k)):\n        min_heap.append((matrix[r][0], r, 0))\n\n    heapq.heapify(min_heap)\n\n    while k:\n        element, r, c = heapq.heappop(min_heap)\n        if c < cols - 1:\n            heapq.heappush(min_heap, (matrix[r][c + 1], r, c + 1))\n        k -= 1\n\n    return element\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([\n  [1,  5,  9],\n  [10, 11, 13],\n  [12, 13, 15]\n], 8) == 13\n\nassert kthSmallest([\n  [1, 3, 5],\n  [6, 7, 12],\n  [11, 14, 14]\n], 3) == 5\nassert kthSmallest([\n  [1, 3, 5],\n  [6, 7, 12],\n  [11, 14, 14]\n], 9) == 14\n```", "temperature": 0.876, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861, "question": "Write a program to merge K sorted arrays into one sorted array using a min heap.", "code": "import heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result", "asserts": ["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]"], "author": "GPT", "UUID": "5d09fa0b-dc99-4cdc-9066-827659990bad", "tc_status": [["assert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "Passed"], ["assert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]", "Passed"], ["assert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]", "Passed"], ["assert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "Passed"], ["assert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]", "Passed"], ["assert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1352, "total_tokens": 1628, "completion_tokens": 276, "completion": "Write a program to find the kth largest element in an unsorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n\n    for num in nums:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappushpop(heap, num)\n\n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3, 2, 1, 5, 6, 4], 2) == 5\nassert findKthLargest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4\nassert findKthLargest([1], 1) == 1\nassert findKthLargest([5, 6, 4, 7, 3, 8, 2, 1], 3) == 6\nassert findKthLargest([9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == 5\n```", "temperature": 0.751, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}], "category": "Heap", "prompt_tokens": 1073, "total_tokens": 1424, "completion_tokens": 351, "completion": "You are given a list of tasks represented by characters. Each task can be executed in one unit of time. However, there is a cooldown period of n units of time required between two same tasks. Write a program to find the minimum time needed to execute the tasks.\n\n###Code: \n\nimport heapq\nfrom collections import Counter\n\ndef taskScheduler(tasks: list, cooldown: int) -> int:\n    counter = Counter(tasks)\n    heap = [(-value, key) for key, value in counter.items()]\n    heapq.heapify(heap)\n    \n    time = 0\n    while heap:\n        i = 0\n        temp = []\n        while i <= cooldown:\n            if heap:\n                count, task = heapq.heappop(heap)\n                if count < -1:\n                    temp.append((count+1, task))\n            time += 1\n            if not heap and not temp:\n                break\n            i += 1\n        for item in temp:\n            heapq.heappush(heap, item)\n    \n    return time\n\n###Testcases: \n\nassert taskScheduler(['A', 'A', 'A', 'B', 'B', 'B'], 2) == 8\nassert taskScheduler(['A', 'A', 'A', 'B', 'B', 'B'], 0) == 6\nassert taskScheduler(['A', 'A', 'B', 'B', 'C', 'C'], 2) == 6\nassert taskScheduler(['A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'C', 'C', 'D', 'D'], 3) == 12\n\n[/Example 4]", "temperature": 0.853, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}], "category": "Heap", "prompt_tokens": 1120, "total_tokens": 1391, "completion_tokens": 271, "completion": "Given a list of integers, write a function to find the k closest elements to the target integer x. If there are ties, the smaller elements are preferred.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(nums: list, k: int, x: int) -> list:\n    heap = []\n    for num in nums:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n    \n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n    \n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 3, 3) == [2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 2, 35) == [30, 40]\nassert kClosestElements([4, 6, 8, 10], 3, 5) == [4, 6, 8]\nassert kClosestElements([7, 8, 9, 10, 11], 3, 8) == [7, 8, 9]\n```", "temperature": 0.869, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1292, "total_tokens": 1770, "completion_tokens": 478, "completion": "Write a function to merge K sorted arrays into one single sorted array. The input arrays are already sorted in ascending order.\n\n###Code: \n\nfrom heapq import heappop, heappush\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n    \n    for i, arr in enumerate(arrays):\n        if arr:\n            heappush(heap, (arr[0], i, 0))\n    \n    while heap:\n        val, array_index, index = heappop(heap)\n        result.append(val)\n        if index + 1 < len(arrays[array_index]):\n            heappush(heap, (arrays[array_index][index + 1], array_index, index + 1))\n    \n    return result\n\n###Testcases: \n\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35], [12, 27, 28]]) == [10, 12, 15, 20, 25, 27, 28, 30, 35]\nassert mergeSortedArrays([[1, 2, 4, 6], [3, 5, 7, 9], [8, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[5, 10, 15], [3, 6, 9], [8, 16, 24]]) == [3, 5, 6, 8, 9, 10, 15, 16, 24]\n\n[/Example 4]", "temperature": 0.801, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1482, "total_tokens": 1913, "completion_tokens": 431, "completion": "Write a function to merge K sorted lists into one sorted list using a min heap.\n\n###Code: \n\nimport heapq\n\ndef mergeKSortedLists(lists: list) -> list:\n    heap = []\n    for i, lst in enumerate(lists):\n        if lst:\n            heapq.heappush(heap, (lst[0], i, 0))\n    \n    result = []\n    while heap:\n        val, list_index, index = heapq.heappop(heap)\n        result.append(val)\n        if index + 1 < len(lists[list_index]):\n            heapq.heappush(heap, (lists[list_index][index + 1], list_index, index + 1))\n    \n    return result\n\n###Testcases: \n\nassert mergeKSortedLists([[1, 4, 5], [1, 3, 4], [2, 6]]) == [1, 1, 2, 3, 4, 4, 5, 6]\nassert mergeKSortedLists([[], [1], [2, 3]]) == [1, 2, 3]\nassert mergeKSortedLists([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert mergeKSortedLists([[], [], []]) == []\nassert mergeKSortedLists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeKSortedLists([[1, 4, 7], [2, 5, 8], [3, 6, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n[/Example 4]", "temperature": 0.878, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1129, "total_tokens": 1462, "completion_tokens": 333, "completion": "You are given a list of integers and a target integer k. Write a program to find the k closest elements to the target in the list. If there is a tie, the smaller elements are always preferred.\n\n###Code: \n\n```python\nimport heapq\n\ndef findClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    \n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n    \n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n    \n    result.sort()\n    return result\n```\n\n###Testcases: \n\n```python\nassert findClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert findClosestElements([10, 20, 30, 40, 50], 2, 35) == [30, 40]\nassert findClosestElements([5, 6, 7, 8, 9], 3, 7) == [6, 7, 8]\nassert findClosestElements([1, 2, 3, 4, 5], 4, -1) == [1, 2, 3, 4]\nassert findClosestElements([1, 2, 3, 4, 5], 4, 7) == [2, 3, 4, 5]\n```", "temperature": 0.792, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1058, "total_tokens": 1400, "completion_tokens": 342, "completion": "Write a program to merge K sorted arrays into one single sorted array using a min-heap.\n\n###Code: \n\nimport heapq\n\ndef mergeKSortedArrays(arrays: list) -> list:\n    result = []\n    heap = []\n    \n    for i, array in enumerate(arrays):\n        if array:\n            heapq.heappush(heap, (array[0], i, 0))\n    \n    while heap:\n        val, arr_idx, idx = heapq.heappop(heap)\n        result.append(val)\n        if idx + 1 < len(arrays[arr_idx]):\n            heapq.heappush(heap, (arrays[arr_idx][idx + 1], arr_idx, idx + 1))\n    \n    return result\n\n###Testcases: \n\nassert mergeKSortedArrays([[1, 3, 5], [2, 4, 6], [0, 9, 10, 11]]) == [0, 1, 2, 3, 4, 5, 6, 9, 10, 11]\nassert mergeKSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeKSortedArrays([[1, 4, 7], [2, 5, 8], [3, 6, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n[/Example 4]", "temperature": 0.782, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}], "category": "Heap", "prompt_tokens": 1012, "total_tokens": 1225, "completion_tokens": 213, "completion": "Find the kth smallest element in a row and column wise sorted matrix.\n\n###Code: \n\nimport heapq\n\ndef kthSmallest(matrix: list, k: int) -> int:\n    heap = []\n    for row in matrix:\n        for num in row:\n            heapq.heappush(heap, -num)\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return -heap[0]\n\n###Testcases: \n\nassert kthSmallest([[1, 5, 9], [10, 11, 13], [12, 13, 15]], 8) == 13\nassert kthSmallest([[1, 3, 5], [6, 7, 12], [11, 14, 14]], 6) == 7\nassert kthSmallest([[1, 3, 6], [2, 4, 9], [5, 8, 10]], 4) == 3\n\n[/Example 4]", "temperature": 0.709, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1184, "total_tokens": 1626, "completion_tokens": 442, "completion": "Write a program to merge K sorted arrays using a min heap.\n\n###Code: \n\nimport heapq\n\ndef mergeKSortedArrays(arrays: list) -> list:\n    result = []\n    heap = []\n\n    for i, array in enumerate(arrays):\n        if array:\n            heapq.heappush(heap, (array[0], i, 0))\n\n    while heap:\n        val, arr_idx, idx = heapq.heappop(heap)\n        result.append(val)\n        if idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][idx + 1], arr_idx, idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n\n###Testcases: \n\nassert mergeKSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeKSortedArrays([[10, 20, 30, 40], [15, 25, 35, 45], [27, 29, 37, 48, 93], [32, 33, 39, 50, 55, 60]]) == [10, 15, 20, 25, 27, 29, 30, 32, 33, 35, 37, 39, 40, 45, 48, 50, 55, 60, 93]\nassert mergeKSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n\n[/Example 4]", "temperature": 0.741, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1374, "total_tokens": 1751, "completion_tokens": 377, "completion": "Given a list of tasks represented by characters, each task could be done in one interval. The CPU could complete one task in one interval. However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle. You need to return the least number of intervals the CPU will take to finish all the given tasks.\n\nWrite a function to solve the above problem.\n\n###Code: \n\ndef leastInterval(tasks: list, n: int) -> int:\n    task_count = [0] * 26\n    for task in tasks:\n        task_count[ord(task) - ord('A')] += 1\n    \n    task_count.sort()\n    \n    max_val = task_count.pop()\n    idle_time = (max_val - 1) * n\n    \n    while task_count and idle_time > 0:\n        idle_time -= min(max_val - 1, task_count.pop())\n    \n    idle_time = max(0, idle_time)\n    \n    return len(tasks) + idle_time\n\n###Testcases: \n\nassert leastInterval(['A', 'A', 'A', 'B', 'B', 'B'], 2) == 8\nassert leastInterval(['A', 'A', 'A', 'B', 'B', 'B'], 0) == 6\nassert leastInterval(['A', 'A', 'A', 'A', 'A', 'A', 'B', 'C', 'D', 'E', 'F', 'G'], 2) == 16\nassert leastInterval(['A', 'A', 'A', 'B', 'B', 'B', 'C', 'C', 'C', 'D', 'D', 'E'], 3) == 12\n\n[/Example 4]", "temperature": 0.848, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1021, "total_tokens": 1358, "completion_tokens": 337, "completion": "Write a program to find the median of a stream of integers. The program should be able to efficiently find the median after each new integer is added to the stream.\n\n###Code: \n\nimport heapq\n\nclass MedianFinder:\n\n    def __init__(self):\n        self.max_heap = []  # to store the smaller half of the numbers\n        self.min_heap = []  # to store the larger half of the numbers\n\n    def addNum(self, num: int) -> None:\n        if not self.max_heap or num <= -self.max_heap[0]:\n            heapq.heappush(self.max_heap, -num)\n        else:\n            heapq.heappush(self.min_heap, num)\n\n        if len(self.max_heap) > len(self.min_heap) + 1:\n            heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap))\n        elif len(self.min_heap) > len(self.max_heap):\n            heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap))\n\n    def findMedian(self) -> float:\n        if len(self.max_heap) == len(self.min_heap):\n            return (-self.max_heap[0] + self.min_heap[0]) / 2\n        else:\n            return -self.max_heap[0]\n\n###Testcases: \n\nmedian_finder = MedianFinder()\nmedian_finder.addNum(1)\nmedian_finder.addNum(2)\nmedian_finder.addNum(3)\nassert median_finder.findMedian() == 2.0\n\nmedian_finder.addNum(4)\nmedian_finder.addNum(5)\nassert median_finder.findMedian() == 3.0\n\n[/Example 4]", "temperature": 0.775, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 950, "total_tokens": 1274, "completion_tokens": 324, "completion": "Find the kth smallest element in a matrix. Each row and column of the matrix is sorted in non-decreasing order.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthSmallest(matrix: List[List[int]], k: int) -> int:\n    n = len(matrix)\n    min_heap = []\n    for i in range(min(n, k)):\n        heapq.heappush(min_heap, (matrix[i][0], i, 0))\n    \n    while k:\n        element, row, col = heapq.heappop(min_heap)\n        if col < n - 1:\n            heapq.heappush(min_heap, (matrix[row][col + 1], row, col + 1))\n        k -= 1\n    \n    return element\n```\n\n###Testcases:\n\n```python\nassert kthSmallest([[1,  5,  9], [10, 11, 13], [12, 13, 15]], 8) == 13\nassert kthSmallest([[1, 3, 5], [6, 7, 12], [11, 14, 14]], 3) == 5\nassert kthSmallest([[1, 3, 9], [10, 11, 13], [12, 13, 15]], 4) == 9\nassert kthSmallest([[1,  5,  9], [10, 11, 13], [12, 13, 15]], 6) == 11\n```", "temperature": 0.786, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1231, "total_tokens": 1519, "completion_tokens": 288, "completion": "You are given a stream of integers. Design a class that supports the following two operations:\n\n1. void addNum(int num) - Add an integer num from the stream to the data structure.\n2. double findMedian() - Return the median of all elements so far. \n\n###Code: \n\n```python\nimport heapq\n\nclass MedianFinder:\n\n    def __init__(self):\n        self.min_heap = []\n        self.max_heap = []\n\n    def addNum(self, num: int) -> None:\n        if len(self.min_heap) == len(self.max_heap):\n            heapq.heappush(self.max_heap, -heapq.heappushpop(self.min_heap, num))\n        else:\n            heapq.heappush(self.min_heap, -heapq.heappushpop(self.max_heap, -num))\n\n    def findMedian(self) -> float:\n        if len(self.min_heap) == len(self.max_heap):\n            return (self.min_heap[0] - self.max_heap[0]) / 2.0\n        else:\n            return float(-self.max_heap[0])\n```\n\n###Testcases: \n\n```python\nmf = MedianFinder()\nmf.addNum(1)\nmf.addNum(2)\nmf.addNum(3)\nassert mf.findMedian() == 2.0\n\nmf.addNum(4)\nmf.addNum(5)\nassert mf.findMedian() == 3.0\n```", "temperature": 0.843, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1421, "total_tokens": 1710, "completion_tokens": 289, "completion": "Given a list of integers, write a program to find the Kth smallest element in the array using a min heap.\n\n###Code:\n\n```python\nimport heapq\n\ndef findKthSmallest(nums: list, k: int) -> int:\n    heap = nums[:k]\n    heapq.heapify(heap)\n    \n    for num in nums[k:]:\n        if num < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    \n    return heap[0]\n```\n\n###Testcases:\n\n```python\nassert findKthSmallest([3,2,1,5,6,4], 2) == 2\nassert findKthSmallest([3,2,3,1,2,4,5,5,6], 4) == 3\nassert findKthSmallest([99, 78, 55, 22, 11, 7], 3) == 22\nassert findKthSmallest([4, 5, 8, 2, 1, 9], 1) == 1\nassert findKthSmallest([6, 7, 8, 9, 10], 3) == 8\n```\n\nThis example includes a function to find the kth smallest element in an array using a min heap. The given test cases demonstrate its effectiveness.", "temperature": 0.856, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1068, "total_tokens": 1413, "completion_tokens": 345, "completion": "Find the k closest points to the origin (0, 0) from a given list of points in the form of (x, y) coordinates. Points are represented as a list of tuples.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosest(points: List[Tuple[int, int]], k: int) -> List[Tuple[int, int]]:\n    heap = []\n    for point in points:\n        distance = point[0] ** 2 + point[1] ** 2\n        heapq.heappush(heap, (distance, point))\n    \n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kClosest([(1, 3), (-2, 2), (5, 8), (0, 1)], 2) == [(-2, 2), (0, 1)]\nassert kClosest([(3, 3), (5, -1), (-2, 4)], 2) == [(3, 3), (-2, 4)]\nassert kClosest([(1, 1), (2, 2), (3, 3), (4, 4)], 3) == [(1, 1), (2, 2), (3, 3)]\nassert kClosest([(0, 1), (1, 1), (1, 0), (-1, 0), (0, -1)], 3) == [(0, 1), (1, 1), (1, 0)]\n```", "temperature": 0.835, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 997, "total_tokens": 1406, "completion_tokens": 409, "completion": "Write a program to merge K sorted arrays into one single sorted array using a min heap.\n\n###Code: \n\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n    \n    for i, array in enumerate(arrays):\n        if len(array) > 0:\n            heapq.heappush(heap, (array[0], i, 0))\n    \n    while heap:\n        val, arr_idx, elem_idx = heapq.heappop(heap)\n        result.append(val)\n        if elem_idx + 1 < len(arrays[arr_idx]):\n            heapq.heappush(heap, (arrays[arr_idx][elem_idx+1], arr_idx, elem_idx+1))\n    \n    return result\n\n###Testcases: \n\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35], [24, 29, 37], [32, 33, 39]]) == [10, 15, 20, 24, 25, 29, 30, 32, 33, 35, 37, 39]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]\nassert mergeSortedArrays([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n[/Example 4]", "temperature": 0.802, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1593, "total_tokens": 2002, "completion_tokens": 409, "completion": "You are given a stream of integers and you have to find the median of the integers seen so far after every integer. Implement a data structure that efficiently supports the following two operations:\n\n1. addNum(num: int) - Add an integer to the data structure.\n2. findMedian() -> float - Return the median of all elements in the data structure.\n\n###Code: \n\nfrom heapq import heappush, heappop\n\nclass MedianFinder:\n    def __init__(self):\n        self.minHeap = []\n        self.maxHeap = []\n\n    def addNum(self, num: int) -> None:\n        if not self.maxHeap or num > -self.maxHeap[0]:\n            heappush(self.minHeap, num)\n            if len(self.minHeap) > len(self.maxHeap) + 1:\n                heappush(self.maxHeap, -heappop(self.minHeap))\n        else:\n            heappush(self.maxHeap, -num)\n            if len(self.maxHeap) > len(self.minHeap):\n                heappush(self.minHeap, -heappop(self.maxHeap))\n\n    def findMedian(self) -> float:\n        if len(self.minHeap) == len(self.maxHeap):\n            return (self.minHeap[0] - self.maxHeap[0]) / 2\n        else:\n            return self.minHeap[0]\n\n###Testcases: \n\nmedianFinder = MedianFinder()\nmedianFinder.addNum(1)\nmedianFinder.addNum(2)\nassert medianFinder.findMedian() == 1.5\nmedianFinder.addNum(3)\nassert medianFinder.findMedian() == 2\nmedianFinder.addNum(4)\nassert medianFinder.findMedian() == 2.5\nmedianFinder.addNum(5)\nassert medianFinder.findMedian() == 3\nmedianFinder.addNum(6)\nassert medianFinder.findMedian() == 3.5\nmedianFinder.addNum(7)\nassert medianFinder.findMedian() == 4\n\n[/Example 4]", "temperature": 0.855, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1240, "total_tokens": 1758, "completion_tokens": 518, "completion": "Write a program to implement a min heap data structure. The program should support the following operations:\n1. Insertion of a new element\n2. Deletion of the minimum element\n3. Getting the minimum element without removing it from the heap\n\n###Code: \n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, value):\n        self.heap.append(value)\n        self._heapify_up(len(self.heap) - 1)\n\n    def delete_min(self):\n        if len(self.heap) == 0:\n            return None\n        if len(self.heap) == 1:\n            return self.heap.pop()\n        min_val = self.heap[0]\n        self.heap[0] = self.heap.pop()\n        self._heapify_down(0)\n        return min_val\n\n    def get_min(self):\n        return self.heap[0] if self.heap else None\n\n    def _heapify_up(self, index):\n        parent = (index - 1) // 2\n        if index > 0 and self.heap[index] < self.heap[parent]:\n            self.heap[index], self.heap[parent] = self.heap[parent], self.heap[index]\n            self._heapify_up(parent)\n\n    def _heapify_down(self, index):\n        left = 2 * index + 1\n        right = 2 * index + 2\n        smallest = index\n        if left < len(self.heap) and self.heap[left] < self.heap[index]:\n            smallest = left\n        if right < len(self.heap) and self.heap[right] < self.heap[smallest]:\n            smallest = right\n        if smallest != index:\n            self.heap[index], self.heap[smallest] = self.heap[smallest], self.heap[index]\n            self._heapify_down(smallest)\n\n\n###Testcases: \n\nmin_heap = MinHeap()\nmin_heap.insert(5)\nmin_heap.insert(3)\nmin_heap.insert(8)\nmin_heap.insert(2)\nassert min_heap.get_min() == 2\nassert min_heap.delete_min() == 2\nassert min_heap.get_min() == 3\nmin_heap.insert(1)\nassert min_heap.get_min() == 1\nassert min_heap.delete_min() == 1\nassert min_heap.get_min() == 3\nassert min_heap.delete_min() == 3\nassert min_heap.delete_min() == 5\nassert min_heap.delete_min() == 8\nassert min_heap.get_min() == None\n\n[/Example 4]", "temperature": 0.784, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1169, "total_tokens": 1416, "completion_tokens": 247, "completion": "Given a list of integers, write a program to find the Kth smallest element in the array using a min heap.\n\n###Code: \n\nimport heapq\n\ndef findKthSmallest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    \n    for _ in range(k):\n        result = heapq.heappop(heap)\n    \n    return result\n\n###Testcases: \n\nassert findKthSmallest([3,2,1,5,6,4], 2) == 2\nassert findKthSmallest([3,2,3,1,2,4,5,5,6], 4) == 3\nassert findKthSmallest([99, 78, 55, 22, 11, 7], 3) == 22\nassert findKthSmallest([4, 5, 8, 2, 1, 9], 1) == 1\nassert findKthSmallest([6, 7, 8, 9, 10], 3) == 8\n\n[/Example 4]", "temperature": 0.81, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1430, "total_tokens": 1682, "completion_tokens": 252, "completion": "You are asked to implement a Priority Queue using a min heap. The Priority Queue should support the following operations:\n\n1. Insert: Insert an element into the priority queue.\n2. getMin: Get the minimum element from the priority queue without removing it.\n3. extractMin: Get the minimum element from the priority queue and also remove it from the queue.\n\nImplement the Priority Queue and its operations.\n\n###Code:\n\n```python\nimport heapq\n\nclass PriorityQueue:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, num):\n        heapq.heappush(self.heap, num)\n\n    def getMin(self):\n        if self.heap:\n            return self.heap[0]\n        return None\n\n    def extractMin(self):\n        if self.heap:\n            return heapq.heappop(self.heap)\n        return None\n```\n\n###Testcases:\n\n```python\npq = PriorityQueue()\npq.insert(3)\npq.insert(1)\npq.insert(4)\n\nassert pq.getMin() == 1\nassert pq.extractMin() == 1\nassert pq.getMin() == 3\nassert pq.extractMin() == 3\nassert pq.extractMin() == 4\nassert pq.getMin() == None\n```\n\n[/Example 4]", "temperature": 0.864, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1359, "total_tokens": 1690, "completion_tokens": 331, "completion": "You have been hired by a hospital to develop a program to manage the emergency room queue. The program needs to implement the following functionalities: \n1. Add a patient to the emergency room queue with a priority number (1 being the highest priority).\n2. Remove the patient from the emergency room queue with the highest priority.\n\nWrite a class that implements the emergency room queue using a min-heap to maintain the order. Include methods to add a patient and remove the patient with the highest priority.\n\n###Code: \n\n```python\nimport heapq\n\nclass EmergencyRoomQueue:\n    def __init__(self):\n        self.queue = []\n        self.index = 0\n\n    def addPatient(self, priority: int, patient: str) -> None:\n        heapq.heappush(self.queue, (priority, self.index, patient))\n        self.index += 1\n\n    def removeHighestPriorityPatient(self) -> str:\n        return heapq.heappop(self.queue)[2]\n```\n\n###Testcases: \n\n```python\ner = EmergencyRoomQueue()\ner.addPatient(1, \"John\")\ner.addPatient(3, \"Alice\")\ner.addPatient(2, \"Bob\")\n\nassert er.removeHighestPriorityPatient() == \"John\"\nassert er.removeHighestPriorityPatient() == \"Bob\"\nassert er.removeHighestPriorityPatient() == \"Alice\"\n\ner.addPatient(1, \"Mike\")\ner.addPatient(1, \"Emily\")\ner.addPatient(2, \"Tom\")\n\nassert er.removeHighestPriorityPatient() == \"Mike\"\nassert er.removeHighestPriorityPatient() == \"Emily\"\nassert er.removeHighestPriorityPatient() == \"Tom\"\n```", "temperature": 0.805, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961, "question": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.", "code": "import heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result", "asserts": ["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "assert findKthLargest([6, 7, 8, 9, 10], 3) == 8"], "author": "GPT", "UUID": "6bf469b4-585e-4ced-9a03-164d3647f01a", "tc_status": [["assert findKthLargest([3,2,1,5,6,4], 2) == 5", "Passed"], ["assert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4", "Passed"], ["assert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55", "Passed"], ["assert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9", "Passed"], ["assert findKthLargest([6, 7, 8, 9, 10], 3) == 8", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1006, "total_tokens": 1305, "completion_tokens": 299, "completion": "Given a list of integers, write a function to find the smallest K elements using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findSmallestKElements(nums: list, k: int) -> list:\n    heap = nums[:k]\n    heapq.heapify(heap)\n    \n    for i in range(k, len(nums)):\n        if nums[i] < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, nums[i])\n    \n    return heap\n```\n\n###Testcases: \n\n```python\nassert findSmallestKElements([3, 5, 1, 8, 9, 2], 3) == [1, 2, 3]\nassert findSmallestKElements([4, 2, 6, 7, 1, 5, 3], 4) == [1, 2, 3, 4]\nassert findSmallestKElements([9, 7, 5, 3, 1], 2) == [1, 3]\nassert findSmallestKElements([5, 4, 3, 2, 1], 5) == [1, 2, 3, 4, 5]\nassert findSmallestKElements([1, 2, 3, 4, 5], 3) == [1, 2, 3]\n```", "temperature": 0.754, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}], "category": "Heap", "prompt_tokens": 1109, "total_tokens": 1433, "completion_tokens": 324, "completion": "Find the smallest range that includes at least one element from each of the k sorted lists.\n\n###Code: \n\nimport heapq\n\ndef smallestRange(nums: List[List[int]]) -> List[int]:\n    heap = [(row[0], i, 0) for i, row in enumerate(nums)]\n    heapq.heapify(heap)\n    \n    result = [float('-inf'), float('inf')]\n    right = max(row[0] for row in heap)\n    \n    while True:\n        left, i, j = heapq.heappop(heap)\n        if right - left < result[1] - result[0]:\n            result = [left, right]\n        if j == len(nums[i]) - 1:\n            return result\n        heapq.heappush(heap, (nums[i][j+1], i, j+1))\n        right = max(right, nums[i][j+1])\n\n###Testcases: \n\nassert smallestRange([[4,10,15,24,26], [0,9,12,20], [5,18,22,30]]) == [20, 24]\nassert smallestRange([[1,3,5,7], [2,4,6,8]]) == [2, 3]\nassert smallestRange([[1,2,3], [4,5,6], [7,8,9]]) == [1, 2]\nassert smallestRange([[10, 20], [1, 15], [12, 23], [14, 24]]) == [15, 20]\n\n[/Example 4]", "temperature": 0.824, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1281, "total_tokens": 1579, "completion_tokens": 298, "completion": "You are given a list of strings. Write a program to find the k most frequent strings in the list. If two strings have the same frequency, they should be listed in lexicographical order.\n\n###Code: \n\nimport collections\nimport heapq\n\ndef topKFrequentStrings(words: list, k: int) -> list:\n    freq_map = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in freq_map.items()]\n    heapq.heapify(heap)\n    result = [heapq.heappop(heap)[1] for _ in range(k)]\n    return result\n\n###Testcases: \n\nassert topKFrequentStrings([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert topKFrequentStrings([\"apple\", \"banana\", \"banana\", \"cherry\", \"banana\", \"apple\"], 3) == [\"banana\", \"apple\", \"cherry\"]\nassert topKFrequentStrings([\"aa\", \"aa\", \"aa\", \"bb\", \"bb\", \"cc\"], 1) == [\"aa\"]\nassert topKFrequentStrings([\"aa\", \"aa\", \"bb\", \"bb\", \"cc\", \"cc\"], 2) == [\"aa\", \"bb\"]\nassert topKFrequentStrings([\"aa\", \"bb\", \"cc\"], 1) == [\"aa\"]\nassert topKFrequentStrings([], 0) == []\n\n[/Example 4]", "temperature": 0.739, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1471, "total_tokens": 1777, "completion_tokens": 306, "completion": "You are given two arrays of integers, arr1 and arr2, each containing distinct elements sorted in ascending order. Your task is to merge the two arrays into one sorted array using a min-heap.\n\n###Code:\n\n```python\nimport heapq\n\ndef mergeSortedArrays(arr1: list, arr2: list) -> list:\n    heap = []\n    for num in arr1 + arr2:\n        heapq.heappush(heap, num)\n    \n    merged = []\n    while heap:\n        merged.append(heapq.heappop(heap))\n    \n    return merged\n```\n\n###Testcases:\n\n```python\nassert mergeSortedArrays([1, 3, 5, 7], [2, 4, 6, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert mergeSortedArrays([10, 20, 30], [5, 15, 25]) == [5, 10, 15, 20, 25, 30]\nassert mergeSortedArrays([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert mergeSortedArrays([100, 200, 300], [10, 20, 30]) == [10, 20, 30, 100, 200, 300]\n```\n\n[/Example 4]", "temperature": 0.843, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1118, "total_tokens": 1370, "completion_tokens": 252, "completion": "Write a program to merge two sorted arrays into a single sorted array using a min-heap.\n\n###Code: \n\nimport heapq\n\ndef mergeSortedArrays(arr1: list, arr2: list) -> list:\n    min_heap = []\n    merged_arr = []\n    \n    for num in arr1:\n        heapq.heappush(min_heap, num)\n    \n    for num in arr2:\n        heapq.heappush(min_heap, num)\n    \n    while min_heap:\n        merged_arr.append(heapq.heappop(min_heap))\n    \n    return merged_arr\n\n###Testcases: \n\nassert mergeSortedArrays([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]\nassert mergeSortedArrays([10, 20, 30], [5, 15, 25, 35]) == [5, 10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\n[/Example 4]", "temperature": 0.821, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1047, "total_tokens": 1231, "completion_tokens": 184, "completion": "You are given a list of integers. Write a program to find the kth smallest element in the list using a min-heap.\n\n###Code: \n\nimport heapq\n\ndef kthSmallestElement(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n\n    for _ in range(k - 1):\n        heapq.heappop(heap)\n\n    return heapq.heappop(heap)\n\n###Testcases: \n\nassert kthSmallestElement([3, 1, 4, 2, 5], 3) == 3\nassert kthSmallestElement([10, 12, 6, 7, 9], 4) == 9\nassert kthSmallestElement([5, 3, 9, 1, 7], 2) == 3\n\n", "temperature": 0.706, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1328, "total_tokens": 1592, "completion_tokens": 264, "completion": "You are given a list of strings. Write a program to find the k most frequent elements in the list.\n\n###Code: \n\nimport heapq\nfrom collections import Counter\n\ndef topKFrequent(words: list, k: int) -> list:\n    count = Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n\n###Testcases: \n\nassert topKFrequent([\"apple\", \"banana\", \"apple\", \"banana\", \"orange\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert topKFrequent([\"apple\", \"banana\", \"apple\", \"banana\", \"orange\", \"apple\"], 1) == [\"apple\"]\nassert topKFrequent([\"apple\", \"banana\", \"apple\", \"banana\", \"orange\", \"apple\"], 3) == [\"apple\", \"banana\", \"orange\"]\nassert topKFrequent([\"apple\", \"banana\", \"apple\", \"banana\", \"orange\", \"apple\"], 0) == []\nassert topKFrequent([\"apple\", \"banana\", \"apple\", \"banana\", \"orange\", \"apple\", \"orange\"], 2) == [\"apple\", \"orange\"]\n\n[/Example 4]", "temperature": 0.724, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1518, "total_tokens": 1856, "completion_tokens": 338, "completion": "You are given two integer arrays, nums1 and nums2, both of size n. Find the median of the combined array formed by merging nums1 and nums2.\n\n###Code: \n\nimport heapq\n\ndef findMedian(nums1: list, nums2: list) -> float:\n    merged = nums1 + nums2\n    heapq.heapify(merged)\n    n = len(merged)\n    if n % 2 == 0:\n        median = (heapq.nsmallest(n//2 + 1, merged)[-1] + heapq.nsmallest(n//2, merged)[-1]) / 2\n    else:\n        median = heapq.nsmallest(n//2 + 1, merged)[-1]\n    return median\n\n###Testcases: \n\nassert findMedian([1, 3], [2]) == 2.0\nassert findMedian([1, 2], [3, 4]) == 2.5\nassert findMedian([0, 0], [0, 0]) == 0.0\nassert findMedian([], [1]) == 1.0\nassert findMedian([2], []) == 2.0\nassert findMedian([1, 2, 3], [4, 5, 6]) == 3.5\nassert findMedian([4, 5, 8], [1, 2, 3]) == 3.5\nassert findMedian([1, 2, 3, 4], [5, 6, 7, 8, 9]) == 5.0\n\n[/Example 4]", "temperature": 0.843, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1165, "total_tokens": 1406, "completion_tokens": 241, "completion": "You are given an array of integers. Write a program to find the kth largest element in the array.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3, 2, 1, 5, 6, 4], 2) == 5\nassert findKthLargest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4\nassert findKthLargest([12, 5, 787, 1, 23], 2) == 23\nassert findKthLargest([-1, 2, 0], 1) == 2\n```", "temperature": 0.878, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1094, "total_tokens": 1303, "completion_tokens": 209, "completion": "You are given a list of integers. Write a program to find the kth smallest element in the list using a heap.\n\n###Code: \n\nimport heapq\n\ndef kthSmallest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    \n    for _ in range(k-1):\n        heapq.heappop(heap)\n    \n    return heapq.heappop(heap)\n\n###Testcases: \n\nassert kthSmallest([5, 15, 10, 20, 3], 3) == 5\nassert kthSmallest([1, 2, 3, 4, 5], 4) == 4\nassert kthSmallest([10, 20, 30, 40, 50], 2) == 20\nassert kthSmallest([3, 5, 6, 2, 7, 8], 5) == 7\n\n", "temperature": 0.846, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1690, "total_tokens": 2106, "completion_tokens": 416, "completion": "You have been given an array of integers and you need to find the kth smallest element in the array.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n    \n    for _ in range(k):\n        result = heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([1, 23, 12, 9, 30, 2, 50], 4) == 12\nassert kthSmallest([45, 67, 33, 21], 2) == 33\nassert kthSmallest([101, 755, 312], 1) == 101\nassert kthSmallest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == 4\nassert kthSmallest([-1, -2, -3, -4, -5], 3) == -3\nassert kthSmallest([100], 1) == 100\nassert kthSmallest([9, 7, 7, 9, 5], 3) == 7\nassert kthSmallest([9, 7, 7, 9, 5], 5) == 9\nassert kthSmallest([5, 5, 5, 5, 5], 2) == 5\nassert kthSmallest([], 0) == None\nassert kthSmallest([15, 22, 13, 27, 12, 10, 20], 7) == 10\n```\n\n", "temperature": 0.836, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1337, "total_tokens": 1620, "completion_tokens": 283, "completion": "You are given a list of strings. Write a program to find the k most frequent elements in the list.\n\n###Code: \n\nfrom collections import Counter\nimport heapq\n\ndef topKFrequentWords(words: list, k: int) -> list:\n    count = Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n\n\n###Testcases: \n\nassert topKFrequentWords([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert topKFrequentWords([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\"], 1) == [\"apple\"]\nassert topKFrequentWords([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\"], 3) == [\"apple\", \"banana\", \"orange\"]\nassert topKFrequentWords([\"aa\", \"bb\", \"cc\", \"aa\", \"bb\", \"dd\", \"cc\", \"aa\"], 2) == [\"aa\", \"bb\"]\nassert topKFrequentWords([\"aa\", \"bb\", \"cc\", \"aa\", \"bb\", \"dd\", \"cc\", \"aa\"], 3) == [\"aa\", \"bb\", \"cc\"]\n\n", "temperature": 0.787, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1266, "total_tokens": 1540, "completion_tokens": 274, "completion": "You are given a list of integers. Write a program to find the smallest K elements from the list using a min-heap.\n\n###Code: \n\nimport heapq\n\ndef findSmallestKElements(nums: list, k: int) -> list:\n    min_heap = []\n    for num in nums:\n        heapq.heappush(min_heap, num)\n    \n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(min_heap))\n    \n    return result\n\n###Testcases: \n\nassert findSmallestKElements([5, 15, 10, 20, 3], 3) == [3, 5, 10]\nassert findSmallestKElements([1, 2, 3, 4, 5], 2) == [1, 2]\nassert findSmallestKElements([10, 20, 30, 40, 50], 4) == [10, 20, 30, 40]\nassert findSmallestKElements([5, 4, 3, 2, 1], 3) == [1, 2, 3]\nassert findSmallestKElements([100, 200, 50, 25, 75, 150], 2) == [25, 50]\n\n", "temperature": 0.734, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1527, "total_tokens": 1884, "completion_tokens": 357, "completion": "You are given two sorted arrays, nums1 and nums2, where nums1 has a size m and nums2 has a size n. Merge nums2 into nums1 as one sorted array.\n\n###Code: \n\ndef merge(nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n    \"\"\"\n    Do not return anything, modify nums1 in-place instead.\n    \"\"\"\n    while m > 0 and n > 0:\n        if nums1[m-1] > nums2[n-1]:\n            nums1[m+n-1] = nums1[m-1]\n            m -= 1\n        else:\n            nums1[m+n-1] = nums2[n-1]\n            n -= 1\n    if n > 0:\n        nums1[:n] = nums2[:n]\n\n\n###Testcases: \n\nassert merge([1,2,3,0,0,0], 3, [2,5,6], 3) == [1, 2, 2, 3, 5, 6]\nassert merge([1], 1, [], 0) == [1]\nassert merge([0], 0, [1], 1) == [1]\nassert merge([4,5,6,0,0,0], 3, [1,2,3], 3) == [1, 2, 3, 4, 5, 6]\nassert merge([1,2,3,4,5,0], 5, [6], 1) == [1, 2, 3, 4, 5, 6]\n\n[/Example 4]", "temperature": 0.758, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1456, "total_tokens": 1759, "completion_tokens": 303, "completion": "You are given a list of strings. Write a program to find the k most frequent elements in the list.\n\n###Code: \n\nimport collections\nimport heapq\n\ndef topKFrequent(words: list, k: int) -> list:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n\n###Testcases: \n\nassert topKFrequent([\"the\", \"day\", \"is\", \"sunny\", \"the\", \"the\", \"the\", \"sunny\", \"is\", \"is\"], 2) == [\"the\", \"is\"]\nassert topKFrequent([\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"], 2) == [\"i\", \"love\"]\nassert topKFrequent([\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"], 3) == [\"i\", \"love\", \"coding\"]\nassert topKFrequent([\"the\", \"day\", \"is\", \"sunny\", \"the\", \"the\", \"the\", \"sunny\", \"is\", \"is\"], 3) == [\"the\", \"is\", \"sunny\"]\nassert topKFrequent([\"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"c\"], 2) == [\"c\", \"a\"]\n\n[/Example 4]", "temperature": 0.784, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856, "question": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.", "code": "import heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result", "asserts": ["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]"], "author": "GPT", "UUID": "68208fdb-9276-4fd9-b565-f040a06c7480", "tc_status": [["assert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]", "Passed"], ["assert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]", "Passed"], ["assert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1103, "total_tokens": 1411, "completion_tokens": 308, "completion": "You are given a list of integers representing employee ratings. Write a program to find the minimum number of additional employees you need to hire such that you can form at least one group of 3 employees with consecutive ratings.\n\n###Code: \n\n```python\nimport heapq\n\ndef minAdditionalEmployees(ratings: list) -> int:\n    ratings.sort()\n    additional_employees = 0\n    heap = []\n    \n    for rating in ratings:\n        if heap and heap[0] == rating:\n            heapq.heappop(heap)\n        else:\n            diff = rating - heap[0] if heap else 0\n            additional_employees += (3 - len(heap))\n            heapq.heappush(heap, rating + 1)\n    \n    return additional_employees\n```\n\n###Testcases: \n\n```python\nassert minAdditionalEmployees([3, 4, 5, 7, 8, 9]) == 0\nassert minAdditionalEmployees([3, 4, 5, 7, 9]) == 1\n```\n\n###Explanation:\n\nIn the first testcase, you can form one group of 3 employees with consecutive ratings [3, 4, 5]. No additional employees need to be hired.\n\nIn the second testcase, you can form one group of 3 employees with consecutive ratings [4, 5, 7]. One additional employee needs to be hired with a rating of 6 or 8 in order to form another group of 3 employees with consecutive ratings.", "temperature": 0.823, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1220, "total_tokens": 1582, "completion_tokens": 362, "completion": "Find the kth smallest element in a matrix where all rows and columns are sorted in ascending order.\n\n###Code: \n\nimport heapq\n\ndef kthSmallest(matrix: list, k: int) -> int:\n    heap = []\n    n = len(matrix)\n    m = len(matrix[0])\n    \n    for i in range(min(n, k)):\n        heapq.heappush(heap, (matrix[i][0], i, 0))\n    \n    count = 0\n    while heap:\n        val, i, j = heapq.heappop(heap)\n        count += 1\n        if count == k:\n            return val\n        if j + 1 < m:\n            heapq.heappush(heap, (matrix[i][j + 1], i, j + 1))\n    \n    return -1  # invalid input\n\n\n###Testcases: \n\nassert kthSmallest([[1, 5, 9], [10, 11, 13], [12, 13, 15]], 8) == 13\nassert kthSmallest([[1, 3, 5], [6, 7, 12], [11, 14, 14]], 2) == 3\nassert kthSmallest([[1, 2], [1, 3]], 2) == 1\nassert kthSmallest([[1, 3, 5], [6, 7, 12], [11, 14, 14]], 6) == 7\nassert kthSmallest([[1, 3, 5], [6, 7, 12], [11, 14, 14]], 9) == 14\n\n[/Example 4]", "temperature": 0.747, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1410, "total_tokens": 1706, "completion_tokens": 296, "completion": "Find the kth smallest element in a 2D matrix, where all rows and columns are sorted in non-decreasing order.\n\n###Code: \n\nimport heapq\n\ndef kthSmallest(matrix: list, k: int) -> int:\n    heap = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            heapq.heappush(heap, -matrix[i][j])\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return -heap[0]\n\n###Testcases: \n\nassert kthSmallest([[1, 5, 9], [10, 11, 13], [12, 13, 15]], 8) == 13\nassert kthSmallest([[1, 3, 5], [6, 7, 12], [11, 14, 14]], 3) == 5\nassert kthSmallest([[1, 3, 9], [10, 11, 13], [12, 13, 15]], 8) == 13\nassert kthSmallest([[1, 3, 6], [2, 7, 10], [4, 8, 11]], 5) == 7\nassert kthSmallest([[1, 2], [1, 3]], 2) == 1\n\n[/Example 4]", "temperature": 0.74, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1386, "completion_tokens": 329, "completion": "Find the median of the given array of integers. The median is the middle element in a sorted array. If the array contains an even number of elements, the median is the average of the two middle elements.\n\n###Code: \n\nimport heapq\n\ndef findMedian(arr: list) -> float:\n    max_heap = []\n    min_heap = []\n\n    for num in arr:\n        if not max_heap or num < -max_heap[0]:\n            heapq.heappush(max_heap, -num)\n        else:\n            heapq.heappush(min_heap, num)\n\n        if len(max_heap) > len(min_heap) + 1:\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        elif len(min_heap) > len(max_heap):\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n\n    if len(max_heap) == len(min_heap):\n        return (min_heap[0] - max_heap[0]) / 2.0\n    else:\n        return -max_heap[0]\n\n###Testcases: \n\nassert findMedian([1, 2, 3, 4, 5]) == 3\nassert findMedian([5, 6, 7, 8, 9, 10]) == 7.5\nassert findMedian([1, 4, 6, 8, 10, 12, 14]) == 8\nassert findMedian([7, 2, 10, 4, 9, 12]) == 7.5\n\n[/Example 4]", "temperature": 0.777, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 986, "total_tokens": 1202, "completion_tokens": 216, "completion": "Find the kth smallest element in a stream of integers.\n\n###Code: \n\nimport heapq\n\nclass KthSmallestElement:\n    def __init__(self, k: int):\n        self.k = k\n        self.min_heap = []\n\n    def add(self, num: int) -> int:\n        if len(self.min_heap) < self.k:\n            heapq.heappush(self.min_heap, -num)\n        else:\n            if -num > self.min_heap[0]:\n                heapq.heappop(self.min_heap)\n                heapq.heappush(self.min_heap, -num)\n        return -self.min_heap[0]\n\n###Testcases: \n\nkth_smallest = KthSmallestElement(3)\nassert kth_smallest.add(4) == 4\nassert kth_smallest.add(1) == 1\nassert kth_smallest.add(5) == 4\nassert kth_smallest.add(3) == 3\nassert kth_smallest.add(2) == 2\n\n[/Example 4]", "temperature": 0.819, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1582, "total_tokens": 1862, "completion_tokens": 280, "completion": "You are given an array of integers and an integer k. Your task is to find the kth smallest element in the array.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heap = arr[:k]\n    heapq._heapify_max(heap)\n    \n    for num in arr[k:]:\n        if num < heap[0]:\n            heapq._heapreplace_max(heap, num)\n    \n    return heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([12, 3, 5, 7, 19], 2) == 5\nassert kthSmallest([12, 3, 5, 7, 19], 1) == 3\nassert kthSmallest([5, 3, 1, 2, 4], 4) == 5\nassert kthSmallest([1, 2, 3, 4, 5], 5) == 5\nassert kthSmallest([5, 4, 3, 2, 1], 3) == 3\n```\n\n[/Example 4]", "temperature": 0.733, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1229, "total_tokens": 1465, "completion_tokens": 236, "completion": "Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.\n\n###Code:\n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return heap[0]\n```\n\n###Testcases:\n\n```python\nassert findKthLargest([3, 2, 1, 5, 6, 4], 2) == 5\nassert findKthLargest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4\nassert findKthLargest([3, 2, 3, 1, 2, 4, 5, 5, 6], 3) == 5\nassert findKthLargest([1], 1) == 1\n```", "temperature": 0.781, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1158, "total_tokens": 1589, "completion_tokens": 431, "completion": "Find the kth smallest element in a row-column sorted matrix. Given an n x n matrix, where every row and column is sorted in non-decreasing order. Find the kth smallest element in the given matrix.\n\n###Code: \n\nimport heapq\n\ndef kthSmallest(matrix: list, k: int) -> int:\n    n = len(matrix)\n    min_heap = []\n    for i in range(min(n, k)):\n        min_heap.append((matrix[i][0], i, 0))\n    heapq.heapify(min_heap)\n    \n    while k:\n        element, row, col = heapq.heappop(min_heap)\n        if col < n - 1:\n            heapq.heappush(min_heap, (matrix[row][col + 1], row, col + 1))\n        k -= 1\n        \n    return element\n\n###Testcases: \n\nassert kthSmallest([[10, 20, 30, 40],\n                    [15, 25, 35, 45],\n                    [25, 29, 37, 48],\n                    [32, 33, 39, 50]], 7) == 30\nassert kthSmallest([[10, 20, 30, 40],\n                    [15, 25, 35, 45],\n                    [25, 29, 37, 48],\n                    [32, 33, 39, 50]], 5) == 25\nassert kthSmallest([[1, 5, 9],\n                    [10, 11, 13],\n                    [12, 13, 15]], 8) == 13\nassert kthSmallest([[1, 3, 5],\n                    [6, 7, 12],\n                    [11, 14, 14]], 8) == 14\nassert kthSmallest([[1, 3, 9],\n                    [8, 9, 15],\n                    [12, 15, 20]], 5) == 8\n\n[/Example 4]", "temperature": 0.725, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1419, "total_tokens": 1685, "completion_tokens": 266, "completion": "Given a list of integers, find the kth largest element in the list using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthLargestElement(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthLargestElement([3, 2, 1, 5, 6, 4], 2) == 5\nassert kthLargestElement([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4\nassert kthLargestElement([10, 5, 7, 1, 9, 11, 3, 2], 3) == 7\nassert kthLargestElement([1], 1) == 1\nassert kthLargestElement([4, 3, 2, 1], 2) == 3\n```", "temperature": 0.765, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1348, "total_tokens": 1659, "completion_tokens": 311, "completion": "Find the median of a stream of integers. The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values.\n\n###Code: \n\nfrom heapq import *\n\nclass MedianFinder:\n\n    def __init__(self):\n        self.minHeap = []\n        self.maxHeap = []\n\n    def addNum(self, num: int) -> None:\n        if not self.maxHeap or -self.maxHeap[0] >= num:\n            heappush(self.maxHeap, -num)\n        else:\n            heappush(self.minHeap, num)\n\n        if len(self.maxHeap) > len(self.minHeap) + 1:\n            heappush(self.minHeap, -heappop(self.maxHeap))\n        elif len(self.minHeap) > len(self.maxHeap):\n            heappush(self.maxHeap, -heappop(self.minHeap))\n\n    def findMedian(self) -> float:\n        if len(self.maxHeap) == len(self.minHeap):\n            return float(-self.maxHeap[0] + self.minHeap[0]) / 2.0\n        return float(-self.maxHeap[0])\n\n###Testcases: \n\nmedianFinder = MedianFinder()\nmedianFinder.addNum(1)\nmedianFinder.addNum(2)\nassert medianFinder.findMedian() == 1.5\nmedianFinder.addNum(3) \nassert medianFinder.findMedian() == 2.0\n\n[/Example 4]", "temperature": 0.815, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668, "question": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.", "code": "import heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)", "asserts": ["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]"], "author": "GPT", "UUID": "2d837f77-ae2a-4c2a-81fb-c59bed877536", "tc_status": [["assert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]", "Passed"], ["assert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]", "Passed"], ["assert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 995, "total_tokens": 1357, "completion_tokens": 362, "completion": "You are given two arrays A and B each containing n distinct positive numbers. You can swap elements between the two arrays. The goal is to make the sum of the two arrays after the swap as close to each other as possible. Return the maximum sum of the two arrays after performing at most k swaps.\n\n###Code: \n\n```python\nimport heapq\n\ndef maxSumAfterKSwaps(A: list, B: list, k: int) -> int:\n    max_sum = sum(A) + sum(B)\n    diff_heap = []\n    for a in A:\n        for b in B:\n            diff = abs(sum(A) - a + b - (sum(B) - b + a))\n            heapq.heappush(diff_heap, (-diff, a, b))\n\n    for _ in range(k):\n        if diff_heap:\n            diff, a, b = heapq.heappop(diff_heap)\n            max_sum += -diff\n            A.remove(a)\n            B.remove(b)\n\n    return max_sum\n```\n\n###Testcases: \n\n```python\nassert maxSumAfterKSwaps([2, 3, 4, 6], [1, 3, 5, 7], 2) == 31\nassert maxSumAfterKSwaps([1, 2, 3, 4], [5, 6, 7, 8], 3) == 41\nassert maxSumAfterKSwaps([1, 2, 3, 4], [5, 6, 7, 8], 0) == 34\nassert maxSumAfterKSwaps([5, 8, 11], [2, 3, 4], 1) == 33\n```", "temperature": 0.857, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1629, "total_tokens": 2086, "completion_tokens": 457, "completion": "Given a list of integers, find the kth smallest element using a max-heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef kth_smallest(arr: list, k: int) -> int:\n    max_heap = [-num for num in arr[:k]]\n    heapq.heapify(max_heap)\n    \n    for num in arr[k:]:\n        if -num > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, -num)\n            \n    return -max_heap[0]\n```\n\n###Testcases: \n```python\nassert kth_smallest([4, 6, 3, 2, 9], 3) == 4\nassert kth_smallest([8, 1, 7, 2, 6, 3, 5, 4], 4) == 5\nassert kth_smallest([0], 1) == 0\nassert kth_smallest([2, 1, 3, 5, 4, 7, 6], 5) == 3\nassert kth_smallest([-1, -5, -3, -4, -2], 2) == -4\nassert kth_smallest([10, -2, 4, 5, 3, 7], 3) == 5\nassert kth_smallest([1.5, 2.5, 0.5, 3.5, 1.0, 2.0], 4) == 1.5\nassert kth_smallest([99], 1) == 99\nassert kth_smallest([5, 5, 5, 5], 2) == 5\nassert kth_smallest([9, 7, 7, 9, 5, 5], 3) == 7\nassert kth_smallest([], 0) == None  # Empty list should return None\nassert kth_smallest([1, 1000, 100, 10, 10000], 3) == 1000\n```\n\n[/Example 4]", "temperature": 0.732, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1276, "total_tokens": 1597, "completion_tokens": 321, "completion": "Find the kth smallest element in a row and column wise sorted matrix.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(matrix: list, k: int) -> int:\n    n = len(matrix)\n    min_heap = []\n    for i in range(min(n, k)):\n        heapq.heappush(min_heap, (matrix[i][0], i, 0))\n    while k:\n        ele, r, c = heapq.heappop(min_heap)\n        if c + 1 < n:\n            heapq.heappush(min_heap, (matrix[r][c + 1], r, c + 1))\n        k -= 1\n    return ele\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([[1, 5, 9], [10, 11, 13], [12, 13, 15]], 8) == 13\nassert kthSmallest([[1, 3, 5], [6, 7, 12], [11, 11, 14]], 7) == 11\nassert kthSmallest([[1, 4, 7, 11], [2, 5, 8, 12], [3, 6, 9, 16], [10, 13, 14, 17]], 8) == 13\nassert kthSmallest([[1, 2], [3, 4]], 2) == 2\n```\n\n[/Example 4]", "temperature": 0.707, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1205, "total_tokens": 1494, "completion_tokens": 289, "completion": "Find the kth smallest element in a row-column sorted matrix.\n\n###Code: \n\nimport heapq\n\ndef kthSmallest(matrix: list, k: int) -> int:\n    heap = []\n    for row in matrix:\n        for num in row:\n            heapq.heappush(heap, num)\n    for _ in range(k):\n        result = heapq.heappop(heap)\n    return result\n\n\n###Testcases: \n\nassert kthSmallest([[1, 5, 9], [10, 11, 13], [12, 13, 15]], 8) == 13\nassert kthSmallest([[1, 3, 5], [6, 7, 12], [11, 14, 14]], 3) == 5\nassert kthSmallest([[1, 4, 7], [2, 5, 8], [3, 6, 9]], 5) == 5\nassert kthSmallest([[1, 2], [1, 3]], 2) == 1\nassert kthSmallest([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]], 8) == 8\n\n[/Example 4]", "temperature": 0.79, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1466, "total_tokens": 1796, "completion_tokens": 330, "completion": "Find the kth smallest element in a matrix. Given an n x n matrix where each of the rows and columns are sorted in ascending order, write a function to find the kth smallest element in the matrix.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(matrix: list[list[int]], k: int) -> int:\n    n = len(matrix)\n    heap = []\n    for i in range(n):\n        for j in range(n):\n            heapq.heappush(heap, -matrix[i][j])\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return -heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([[1, 5, 9], [10, 11, 13], [12, 13, 15]], 8) == 13\nassert kthSmallest([[1, 3, 5], [6, 7, 12], [11, 14, 14]], 3) == 5\nassert kthSmallest([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 5) == 5\nassert kthSmallest([[1, 2], [1, 3]], 2) == 1\n```", "temperature": 0.752, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1395, "total_tokens": 1713, "completion_tokens": 318, "completion": "Find the kth smallest element in a matrix where each row and each column is sorted in ascending order.\n\n###Code: \n\nimport heapq\ndef kthSmallest(matrix: list, k: int) -> int:\n    n = len(matrix)\n    min_heap = []\n    for r in range(min(k, n)):\n        min_heap.append((matrix[r][0], r, 0))\n    heapq.heapify(min_heap)\n    while k:\n        element, r, c = heapq.heappop(min_heap)\n        if c < n - 1:\n            heapq.heappush(min_heap, (matrix[r][c+1], r, c+1))\n        k -= 1\n    return element\n\n###Testcases: \n\nassert kthSmallest([[1, 5, 9], [10, 11, 13], [12, 13, 15]], 8) == 13\nassert kthSmallest([[1, 3, 5], [6, 7, 12], [11, 12, 14]], 3) == 5\nassert kthSmallest([[1, 4, 7, 11], [2, 5, 8, 12], [3, 6, 9, 16], [10, 13, 14, 17]], 8) == 13\nassert kthSmallest([[1, 2], [1, 3]], 2) == 1\n\n[/Example 4]", "temperature": 0.733, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876, "question": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.", "code": "import heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]", "asserts": ["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "assert kthElement([[1, 2], [3, 4]], 2) == 2", "assert kthElement([[1, 2, 3, 4, 5]], 3) == 3"], "author": "GPT", "UUID": "1fa4b2a9-d31d-45d1-a6e7-19f9e98aa5ea", "tc_status": [["assert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4", "Passed"], ["assert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30", "Passed"], ["assert kthElement([[1, 2], [3, 4]], 2) == 2", "Passed"], ["assert kthElement([[1, 2, 3, 4, 5]], 3) == 3", "Passed"]]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1042, "total_tokens": 1387, "completion_tokens": 345, "completion": "You have been given a binary heap, represented as an array. Write a program to perform the heapify operation on the given array.\n\nPerforming heapify means converting an array into a heap, where the value of a parent node is greater than or equal to the value of its children for a max-heap, or less than or equal to the value of its children for a min-heap.\n\n###Code: \n\n```python\ndef heapify(arr: list, n: int, i: int):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n \n    if l < n and arr[i] < arr[l]:\n        largest = l\n \n    if r < n and arr[largest] < arr[r]:\n        largest = r\n \n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\n# Example usage\narr = [4, 10, 3, 5, 1]\nn = len(arr)\nfor i in range(n, -1, -1):\n    heapify(arr, n, i)\n```\n\n###Testcases: \n\n```python\narr = [4, 10, 3, 5, 1]\nheapify(arr, len(arr), 0)\nassert arr == [10, 5, 3, 4, 1]\n\narr = [14, 19, 15, 86, 50]\nheapify(arr, len(arr), 0)\nassert arr == [86, 50, 15, 19, 14]\n```", "temperature": 0.9, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1638, "total_tokens": 1925, "completion_tokens": 287, "completion": "You have been given a list of integers and the task is to find the kth smallest element in the list.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heapq.heapify(arr)\n    for _ in range(k):\n        result = heapq.heappop(arr)\n    return result\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([7, 10, 4, 3, 20, 15], 4) == 10\nassert kthSmallest([1, 2, 3, 4, 5], 1) == 1\nassert kthSmallest([5, 4, 3, 2, 1], 3) == 3\nassert kthSmallest([5], 1) == 5\nassert kthSmallest([9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == 5\nassert kthSmallest([15, 22, 13, 27, 12, 10, 20], 4) == 15\n```", "temperature": 0.745, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1567, "total_tokens": 2009, "completion_tokens": 442, "completion": "Given an array of integers, write a program to find the Kth smallest element in the array.\n\n###Code: \n\ndef kthSmallest(arr: list, k: int) -> int:\n    import heapq\n    heap = arr[:k]\n    heapq._heapify_max(heap)\n    for num in arr[k:]:\n        if num < heap[0]:\n            heapq._heapreplace_max(heap, num)\n    return heap[0]\n\n\n###Testcases: \n\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([7, 10, 4, 3, 20, 15], 4) == 10\nassert kthSmallest([12, 3, 5, 7, 19], 2) == 5\nassert kthSmallest([5, 6, 7, 8, 9, 1, 2, 3, 4], 3) == 3\nassert kthSmallest([1, 2, 3, 4, 5], 1) == 1\nassert kthSmallest([5, 4, 3, 2, 1], 5) == 5\nassert kthSmallest([1], 1) == 1\nassert kthSmallest([2, 2, 2, 2, 2], 3) == 2\nassert kthSmallest([9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == 5\nassert kthSmallest([1, 2, 3, 4, 5], 3) == 3\nassert kthSmallest([1, 2, 3, 4, 5], 5) == 5\nassert kthSmallest([1, 2, 3, 4, 5], 1) == 1\n\n[/Example 4]", "temperature": 0.766, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"], "category": "Heap"}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1214, "total_tokens": 1581, "completion_tokens": 367, "completion": "Implement a priority queue using a max-heap. The priority queue should support the following operations:\n\n1. `insert(val: int)`: Insert a value into the priority queue.\n2. `deleteMax() -> int`: Delete the maximum value from the priority queue and return it.\n3. `getMax() -> int`: Return the maximum value in the priority queue without deleting it.\n4. `size() -> int`: Return the number of elements in the priority queue.\n\n###Code: \n\n```python\nimport heapq\n\nclass MaxHeapPriorityQueue:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, val: int) -> None:\n        heapq.heappush(self.heap, -val)\n\n    def deleteMax(self) -> int:\n        return -heapq.heappop(self.heap)\n\n    def getMax(self) -> int:\n        return -self.heap[0]\n\n    def size(self) -> int:\n        return len(self.heap)\n```\n\n###Testcases: \n\n```python\n# Testcase 1\npq = MaxHeapPriorityQueue()\npq.insert(5)\npq.insert(7)\npq.insert(3)\nassert pq.getMax() == 7\nassert pq.size() == 3\nassert pq.deleteMax() == 7\nassert pq.size() == 2\nassert pq.getMax() == 5\n\n# Testcase 2\npq2 = MaxHeapPriorityQueue()\npq2.insert(10)\npq2.insert(20)\npq2.insert(15)\npq2.insert(25)\nassert pq2.getMax() == 25\nassert pq2.size() == 4\nassert pq2.deleteMax() == 25\nassert pq2.size() == 3\nassert pq2.getMax() == 20\n```\n\n[/Example 4]", "temperature": 0.861, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"], "category": "Heap"}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"], "category": "Heap"}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"], "category": "Heap"}], "category": "Heap", "prompt_tokens": 1404, "total_tokens": 1775, "completion_tokens": 371, "completion": "Given a list of integers, write a Python program to find and return the k smallest elements in the list using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef k_smallest_elements(arr: list, k: int) -> list:\n    if k <= 0:\n        return []\n    min_heap = arr[:k]\n    heapq.heapify(min_heap)\n    \n    for num in arr[k:]:\n        if num < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, num)\n    \n    return sorted(min_heap)\n```\n\n###Testcases: \n\n```python\nassert k_smallest_elements([9, 4, 7, 1, 8, 3, 5], 3) == [1, 3, 4]\nassert k_smallest_elements([6, 3, 2, 8, 4, 5, 7], 4) == [2, 3, 4, 5]\nassert k_smallest_elements([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == [1, 2, 3, 4, 5]\nassert k_smallest_elements([1, 2, 3, 4, 5], 2) == [1, 2]\nassert k_smallest_elements([5, 4, 3, 2, 1], 1) == [1]\nassert k_smallest_elements([5, 5, 5, 5, 5], 3) == [5, 5, 5]\nassert k_smallest_elements([0], 1) == [0]\n```\n\n", "temperature": 0.792, "model_name": "gpt-3.5-turbo-1106"}]