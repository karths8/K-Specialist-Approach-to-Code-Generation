[{"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 840, "completion_tokens": 181, "completion": "Write a function to count the number of set bits in a given positive integer.\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(7) == 3\nassert count_set_bits(15) == 4\nassert count_set_bits(8) == 1\nassert count_set_bits(127) == 7\nassert count_set_bits(255) == 8\nassert count_set_bits(0) == 0\nassert count_set_bits(1) == 1\nassert count_set_bits(2) == 1\nassert count_set_bits(1023) == 10\n\n[/Example 3]", "temperature": 0.787, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 873, "completion_tokens": 157, "completion": "Write a program to count the number of set bits in a given integer.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n        count = 0\n        while n:\n                count += n & 1\n                n >>= 1\n        return count\n\n\n###Testcases: \n\nassert countSetBits(5) == 2\nassert countSetBits(15) == 4\nassert countSetBits(8) == 1\nassert countSetBits(23) == 4\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\nassert countSetBits(255) == 8\nassert countSetBits(1023) == 10\n\n[/Example 3]", "temperature": 0.798, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 900, "completion_tokens": 190, "completion": "Given two integers, write a function to compute their bitwise AND.\n\n###Code: \n\ndef bitwiseAND(a: int, b: int) -> int:\n    while b:\n        a, b = b, a & b\n    return a\n\n\n###Testcases: \n\nassert bitwiseAND(5, 7) == 5\nassert bitwiseAND(0, 0) == 0\nassert bitwiseAND(6, 10) == 2\nassert bitwiseAND(13, 19) == 1\nassert bitwiseAND(8, 8) == 8\nassert bitwiseAND(15, 15) == 15\nassert bitwiseAND(3, 5) == 1\nassert bitwiseAND(255, 255) == 255\nassert bitwiseAND(127, 255) == 127\nassert bitwiseAND(100, 200) == 64\n\n[/Example 3]", "temperature": 0.992, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 632, "total_tokens": 798, "completion_tokens": 166, "completion": "Given a non-negative integer num, write a function to count the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n    count = 0\n    while (num):\n        count += num & 1\n        num >>= 1\n    return count\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(15) == 4\nassert hammingWeight(7) == 3\nassert hammingWeight(31) == 5\nassert hammingWeight(1023) == 10\n\n[/Example 3]", "temperature": 0.919, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 668, "total_tokens": 795, "completion_tokens": 127, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code: \n\n```python\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\n\n###Testcases: \n\n```python\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(255) == 8\nassert count_set_bits(0) == 0\n```", "temperature": 0.621, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 891, "completion_tokens": 181, "completion": "Given an array of non-negative integers, every element appears twice except for one. Find that single one.\n\n###Code: \n\ndef findSingleNumber(nums: list) -> int:\n        result = 0\n        for num in nums:\n            result ^= num\n        return result\n\n\n###Testcases: \n\nassert findSingleNumber([2,2,1]) == 1\nassert findSingleNumber([4,1,2,1,2]) == 4\nassert findSingleNumber([7,3,5,3,5]) == 7\nassert findSingleNumber([9,4,6,4,6]) == 9\nassert findSingleNumber([10,11,10,12,12]) == 11\nassert findSingleNumber([15,16,16,15,17,18,18]) == 17\n\n[/Example 3]", "temperature": 0.858, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 880, "completion_tokens": 254, "completion": "Write a function to find the two non-repeating elements in an array where every other element repeats twice.\n\n###Code: \n\ndef findNonRepeating(arr: List[int]) -> List[int]:\n    xor = 0\n    for num in arr:\n        xor ^= num\n    \n    # Get the rightmost set bit in xor\n    rightmost_set_bit = xor & -xor\n    \n    # Divide the array into two groups based on the rightmost set bit\n    x = 0\n    y = 0\n    for num in arr:\n        if num & rightmost_set_bit:\n            x ^= num\n        else:\n            y ^= num\n    \n    return [x, y]\n\n\n###Testcases: \n\nassert findNonRepeating([4, 3, 4, 5, 5, 3, 7, 8]) == [7, 8]\nassert findNonRepeating([1, 2, 3, 4, 1, 2, 3, 5]) == [4, 5]\nassert findNonRepeating([10, 20, 10, 20, 30, 40, 40, 50]) == [30, 50]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 841, "completion_tokens": 182, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(7) == 3\nassert count_set_bits(15) == 4\nassert count_set_bits(32) == 1\nassert count_set_bits(255) == 8\nassert count_set_bits(0) == 0\nassert count_set_bits(1) == 1\nassert count_set_bits(1023) == 10\nassert count_set_bits(4096) == 1\nassert count_set_bits(123456) == 7\n\n[/Example 3]", "temperature": 0.665, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 665, "total_tokens": 829, "completion_tokens": 164, "completion": "Write a function to count the number of set bits (bits with value 1) in a given integer.\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(255) == 8\nassert count_set_bits(0) == 0\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(1023) == 10\n\n[/Example 3]", "temperature": 0.833, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 668, "total_tokens": 813, "completion_tokens": 145, "completion": "Write a function to count the number of set bits (bits with value 1) in a given integer.\n\n###Code: \n\n```python\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\n\n###Testcases: \n\n```python\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(255) == 8\nassert count_set_bits(0) == 0\nassert count_set_bits(1) == 1\n```", "temperature": 0.803, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}], "category": "Bitwise", "prompt_tokens": 665, "total_tokens": 822, "completion_tokens": 157, "completion": "Write a function to check if a number is a power of two.\n\n###Code: \n\ndef is_power_of_two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n\n\n###Testcases: \n\nassert is_power_of_two(16) == True\nassert is_power_of_two(5) == False\nassert is_power_of_two(32) == True\nassert is_power_of_two(1) == True\nassert is_power_of_two(0) == False\nassert is_power_of_two(1024) == True\nassert is_power_of_two(1000) == False\nassert is_power_of_two(2048) == True\n\n[/Example 3]", "temperature": 0.626, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 808, "completion_tokens": 185, "completion": "Write a function that counts the number of set bits (bits with value 1) in a given integer n.\n\n###Code:\n\ndef countSetBits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases:\n\nassert countSetBits(10) == 2\nassert countSetBits(15) == 4\nassert countSetBits(5) == 2\nassert countSetBits(255) == 8\nassert countSetBits(16) == 1\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\nassert countSetBits(1023) == 10\nassert countSetBits(7) == 3\nassert countSetBits(3) == 2\n\n[/Example 3]", "temperature": 0.927, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 840, "completion_tokens": 181, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(128) == 1\nassert count_set_bits(255) == 8\nassert count_set_bits(0) == 0\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\n\n[/Example 3]", "temperature": 0.923, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}], "category": "Bitwise", "prompt_tokens": 665, "total_tokens": 821, "completion_tokens": 156, "completion": "Write a function to check if a given integer is a power of two.\n\n###Code: \n\ndef isPowerOfTwo(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n\n\n###Testcases: \n\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(128) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(255) == False\nassert isPowerOfTwo(1024) == True\n\n[/Example 3]", "temperature": 0.842, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 890, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert countSetBits(10) == 2\nassert countSetBits(15) == 4\nassert countSetBits(7) == 3\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\nassert countSetBits(255) == 8\nassert countSetBits(16) == 1\nassert countSetBits(1023) == 10\nassert countSetBits(3) == 2\nassert countSetBits(31) == 5\n\n[/Example 3]", "temperature": 0.812, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 755, "completion_tokens": 129, "completion": "Given an integer n, write a function to count the number of set bits in its binary representation.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n        count = 0\n        while (n):\n                n &= (n-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert countSetBits(10) == 2\nassert countSetBits(15) == 4\nassert countSetBits(7) == 3\nassert countSetBits(0) == 0\nassert countSetBits(255) == 8\n\n[/Example 3]", "temperature": 0.828, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}], "category": "Bitwise", "prompt_tokens": 668, "total_tokens": 804, "completion_tokens": 136, "completion": "Write a function to toggle the nth bit of a given number.\n\n###Code: \n\n```python\ndef toggle_nth_bit(num: int, n: int) -> int:\n    mask = 1 << n\n    return num ^ mask\n```\n\n###Testcases: \n\n```python\nassert toggle_nth_bit(5, 1) == 7\nassert toggle_nth_bit(10, 3) == 2\nassert toggle_nth_bit(0, 2) == 4\nassert toggle_nth_bit(255, 7) == 127\nassert toggle_nth_bit(16, 4) == 0\n```\n\n[/Example 3]", "temperature": 0.885, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 668, "total_tokens": 794, "completion_tokens": 126, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1) == True\n```", "temperature": 0.631, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 856, "completion_tokens": 197, "completion": "Given two integers, write a function to return the bitwise AND of all numbers between them, inclusive.\n\n###Code: \n\ndef rangeBitwiseAnd(m: int, n: int) -> int:\n    while m < n:\n        n -= (n & -n)\n    return n\n\n\n###Testcases: \n\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(1, 2147483647) == 0\nassert rangeBitwiseAnd(6000, 7000) == 0\nassert rangeBitwiseAnd(7000, 7000) == 7000\nassert rangeBitwiseAnd(7, 7) == 7\nassert rangeBitwiseAnd(10, 11) == 10\nassert rangeBitwiseAnd(0, 15) == 0\n\n[/Example 3]", "temperature": 0.8, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 632, "total_tokens": 774, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to count the number of 1 bits in its binary representation.\n\n###Code: \n\ndef countSetBits(num: int) -> int:\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n\n\n###Testcases: \n\nassert countSetBits(10) == 2\nassert countSetBits(7) == 3\nassert countSetBits(15) == 4\nassert countSetBits(6) == 2\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\n\n[/Example 3]", "temperature": 0.66, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 848, "completion_tokens": 189, "completion": "Write a function to count the number of set bits (1s) in the binary representation of a given positive integer.\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(16) == 1\nassert count_set_bits(255) == 8\nassert count_set_bits(3) == 2\nassert count_set_bits(1024) == 1\nassert count_set_bits(0) == 0\nassert count_set_bits(1) == 1\nassert count_set_bits(123456) == 5\n\n[/Example 3]", "temperature": 0.913, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 803, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n        count = 0\n        while (n):\n                count += n & 1\n                n >>= 1\n        return count\n\n\n###Testcases: \n\nassert countSetBits(7) == 3\nassert countSetBits(15) == 4\nassert countSetBits(31) == 5\nassert countSetBits(8) == 1\nassert countSetBits(0) == 0\nassert countSetBits(255) == 8\nassert countSetBits(16) == 1\nassert countSetBits(111) == 6\nassert countSetBits(3) == 2\nassert countSetBits(1023) == 10\n\n[/Example 3]", "temperature": 0.986, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 752, "total_tokens": 921, "completion_tokens": 169, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code: \n\ndef countSetBits(num: int) -> int:\n        count = 0\n        while num:\n                num &= (num - 1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert countSetBits(7) == 3\nassert countSetBits(15) == 4\nassert countSetBits(31) == 5\nassert countSetBits(255) == 8\nassert countSetBits(1023) == 10\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\nassert countSetBits(8) == 1\nassert countSetBits(16) == 1\n\n[/Example 3]", "temperature": 0.715, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 752, "total_tokens": 946, "completion_tokens": 194, "completion": "Given a non-empty array of integers, every element appears twice except for one. Find that single one.\n\n###Code: \n\ndef singleNumber(nums: list) -> int:\n        ans = 0\n        for num in nums:\n                ans ^= num\n        return ans\n\n\n###Testcases: \n\nassert singleNumber([2,2,1]) == 1\nassert singleNumber([4,1,2,1,2]) == 4\nassert singleNumber([1]) == 1\nassert singleNumber([1,3,2,3,2]) == 1\nassert singleNumber([4,5,6,4,5]) == 6\nassert singleNumber([7,7,8,8,9]) == 9\nassert singleNumber([11,12,11]) == 12\nassert singleNumber([13,13,14,14,15]) == 15\n\n[/Example 3]", "temperature": 0.623, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 632, "total_tokens": 893, "completion_tokens": 261, "completion": "Write a program to find the number which is occurring odd number of times in a given array of integers. All numbers occur even number of times except for one number which occurs odd number of times. The array is non-empty and the number of elements in the array will always be odd.\n\n###Code: \n\ndef findOddOccurrence(arr: List[int]) -> int:\n        result = 0\n        for num in arr:\n            result ^= num\n        return result\n\n\n###Testcases: \n\nassert findOddOccurrence([4, 3, 4, 4, 4, 5, 5, 7, 5, 7, 5]) == 3\nassert findOddOccurrence([2, 2, 3, 3, 3, 5, 5]) == 3\nassert findOddOccurrence([1, 1, 2, 2, 3, 3, 4]) == 4\nassert findOddOccurrence([7, 7, 10, 10, 10]) == 10\nassert findOddOccurrence([5, 7, 7, 5, 9, 4, 4]) == 9\n\n[/Example 3]", "temperature": 0.799, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 665, "total_tokens": 835, "completion_tokens": 170, "completion": "Write a function to check if a given number is a power of 2.\n\n###Code: \n\ndef is_power_of_two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n\n###Testcases: \n\nassert is_power_of_two(16) == True\nassert is_power_of_two(64) == True\nassert is_power_of_two(1024) == True\nassert is_power_of_two(1) == True\nassert is_power_of_two(0) == False\nassert is_power_of_two(15) == False\nassert is_power_of_two(100) == False\nassert is_power_of_two(1023) == False\nassert is_power_of_two(2047) == False\n\n[/Example 3]", "temperature": 0.664, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 880, "completion_tokens": 161, "completion": "Given two integers, a and b, write a function to return the sum of the two integers without using the '+' or '-' operators.\n\n###Code: \n\ndef getSum(a: int, b: int) -> int:\n        MASK = 0xFFFFFFFF\n        while b:\n                a, b = (a ^ b) & MASK, ((a & b) << 1) & MASK\n        return a if a <= 0x7FFFFFFF else ~(a ^ MASK)\n\n###Testcases: \n\nassert getSum(1, 2) == 3\nassert getSum(-2, 3) == 1\nassert getSum(-1, -1) == -2\nassert getSum(5, -9) == -4\n\n[/Example 3]", "temperature": 0.882, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 632, "total_tokens": 789, "completion_tokens": 157, "completion": "Write a function to count the number of set bits in a non-negative integer. A set bit is a bit that is turned on (i.e., it has a value of 1).\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n\n###Testcases: \n\nassert countSetBits(6) == 2\nassert countSetBits(15) == 4\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\nassert countSetBits(23) == 4\nassert countSetBits(255) == 8\n\n[/Example 3]", "temperature": 0.986, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 846, "completion_tokens": 187, "completion": "Write a function to count the number of set bits (1s) in a given integer.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n\n\n###Testcases: \n\nassert countSetBits(10) == 2\nassert countSetBits(15) == 4\nassert countSetBits(7) == 3\nassert countSetBits(8) == 1\nassert countSetBits(0) == 0\nassert countSetBits(255) == 8\nassert countSetBits(1023) == 10\nassert countSetBits(12345) == 6\nassert countSetBits(65535) == 16\nassert countSetBits(111111) == 9\n\n[/Example 3]", "temperature": 0.621, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 632, "total_tokens": 833, "completion_tokens": 201, "completion": "Given a non-negative integer num, for every numbers i in the range 0 \u2264 i \u2264 num calculate the number of 1's in their binary representation and return them as a list.\n\nWrite a function to solve the above problem.\n\n###Code: \n\ndef countBits(num: int) -> List[int]:\n    result = [0] * (num + 1)\n    offset = 1\n    for i in range(1, num + 1):\n        if offset * 2 == i:\n            offset *= 2\n        result[i] = result[i - offset] + 1\n    return result\n\n###Testcases: \n\nassert countBits(2) == [0,1,1]\nassert countBits(5) == [0,1,1,2,1,2]\nassert countBits(10) == [0,1,1,2,1,2,2,3,1,2,2]\n\n[/Example 3]", "temperature": 0.728, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 828, "completion_tokens": 169, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(255) == 8\nassert count_set_bits(0) == 0\nassert count_set_bits(1) == 1\nassert count_set_bits(16) == 1\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\n\n[/Example 3]", "temperature": 0.821, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 882, "completion_tokens": 166, "completion": "Given an integer, write a function to count the total number of set bits in the binary representation of the number.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n        count = 0\n        while (n):\n                count += n & 1\n                n >>= 1\n        return count\n\n\n###Testcases: \n\nassert countSetBits(5) == 2\nassert countSetBits(10) == 2\nassert countSetBits(15) == 4\nassert countSetBits(8) == 1\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\nassert countSetBits(255) == 8\nassert countSetBits(1023) == 10\n\n[/Example 3]", "temperature": 0.791, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 900, "completion_tokens": 241, "completion": "Write a function to find the bitwise AND of all integers between two given numbers, inclusive.\n\n###Code: \n\ndef rangeBitwiseAnd(m: int, n: int) -> int:\n    shift = 0\n    while m < n:\n        m = m >> 1\n        n = n >> 1\n        shift += 1\n    return m << shift\n\n\n###Testcases: \n\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(1, 2147483647) == 0\nassert rangeBitwiseAnd(5, 5) == 5\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(100, 200) == 0\nassert rangeBitwiseAnd(256, 511) == 256\nassert rangeBitwiseAnd(2, 3) == 2\nassert rangeBitwiseAnd(8, 10) == 8\nassert rangeBitwiseAnd(0, 0) == 0\n\n[/Example 3]", "temperature": 0.976, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 807, "completion_tokens": 181, "completion": "Write a function to count the number of set bits in a given integer n.\n\n###Code:\n\ndef countSetBits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n\n###Testcases:\n\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\nassert countSetBits(2) == 1\nassert countSetBits(10) == 2\nassert countSetBits(15) == 4\nassert countSetBits(255) == 8\nassert countSetBits(1024) == 1\nassert countSetBits(4096) == 1\nassert countSetBits(65535) == 16\nassert countSetBits(123456) == 5\n\n[/Example 3]", "temperature": 0.946, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 752, "total_tokens": 916, "completion_tokens": 164, "completion": "Given a non-negative integer num, write a function to count the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while num:\n                count += num & 1\n                num >>= 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(0) == 0\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\nassert hammingWeight(16) == 1\nassert hammingWeight(3) == 2\n\n[/Example 3]", "temperature": 0.886, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 821, "completion_tokens": 198, "completion": "Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.\n\nWrite a function to perform this operation.\n\n###Code: \n\ndef addDigits(num: int) -> int:\n    if num == 0:\n        return 0\n    if num % 9 == 0:\n        return 9\n    return num % 9\n\n\n###Testcases: \n\nassert addDigits(38) == 2\nassert addDigits(789) == 6\nassert addDigits(0) == 0\nassert addDigits(12345) == 6\nassert addDigits(999) == 9\nassert addDigits(123456789) == 9\nassert addDigits(987654321) == 9\nassert addDigits(55555) == 1\nassert addDigits(1234567890) == 9\nassert addDigits(9876543210) == 9\n\n[/Example 3]", "temperature": 0.814, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 665, "total_tokens": 817, "completion_tokens": 152, "completion": "Write a function that takes two integers as input and returns the bitwise AND of those two numbers.\n\n###Code:\n\n```python\ndef bitwise_and(x: int, y: int) -> int:\n    while y:\n        x, y = y, x & y\n    return x\n```\n\n###Testcases:\n\n```python\nassert bitwise_and(5, 3) == 1\nassert bitwise_and(8, 12) == 8\nassert bitwise_and(7, 7) == 7\nassert bitwise_and(0, 15) == 0\nassert bitwise_and(255, 127) == 127\nassert bitwise_and(18, 20) == 16\n```\n\n[/Example 3]", "temperature": 0.697, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 632, "total_tokens": 782, "completion_tokens": 150, "completion": "Write a function to count the total number of set bits in all numbers from 1 to n where n is a non-negative integer.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n        count = 0\n        for i in range(1, n+1):\n            count += bin(i).count('1')\n        return count\n\n\n###Testcases: \n\nassert countSetBits(5) == 7\nassert countSetBits(10) == 22\nassert countSetBits(15) == 35\nassert countSetBits(20) == 42\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\n\n[/Example 3]", "temperature": 0.736, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 946, "completion_tokens": 230, "completion": "Given a non-empty array of integers, every element appears twice except for one. Find that single one.\n\n###Code: \n\ndef singleNumber(nums: list) -> int:\n        result = 0\n        for num in nums:\n            result ^= num\n        return result\n\n\n###Testcases: \n\nassert singleNumber([2, 2, 1]) == 1\nassert singleNumber([4, 1, 2, 1, 2]) == 4\nassert singleNumber([1, 3, 1, -1, 3]) == -1\nassert singleNumber([5, 7, 5, 9, 7, 9, 8]) == 8\nassert singleNumber([11, 11, 22, 22, 33, 44, 44]) == 33\nassert singleNumber([0]) == 0\nassert singleNumber([-2, -2, 1]) == 1\nassert singleNumber([100, 100, 200, 300, 200]) == 300\n\n[/Example 3]", "temperature": 0.622, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 873, "completion_tokens": 157, "completion": "Given an integer, write a function to check if it is a power of two.\n\n###Code: \n\ndef isPowerOfTwo(n: int) -> bool:\n        if n <= 0:\n            return False\n        return n & (n - 1) == 0\n\n\n###Testcases: \n\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(100) == False\nassert isPowerOfTwo(128) == True\nassert isPowerOfTwo(255) == False\nassert isPowerOfTwo(1024) == True\n\n[/Example 3]", "temperature": 0.914, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 866, "completion_tokens": 147, "completion": "Given an integer, write a function to check if the given number is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(218) == False\nassert isPowerOfTwo(64) == True\n```", "temperature": 0.684, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 665, "total_tokens": 822, "completion_tokens": 157, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(1023) == 10\n\n[/Example 3]", "temperature": 0.768, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 877, "completion_tokens": 161, "completion": "Given an integer, write a program to count the total number of set bits in the number.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n\n###Testcases: \n\nassert countSetBits(10) == 2\nassert countSetBits(15) == 4\nassert countSetBits(7) == 3\nassert countSetBits(16) == 1\nassert countSetBits(255) == 8\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\nassert countSetBits(1023) == 10\n\n[/Example 3]", "temperature": 0.681, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 868, "completion_tokens": 152, "completion": "Given an integer, write a function to check if it is a power of two.\n\n###Code: \n\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n\n\n###Testcases: \n\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(2) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(218) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(3) == False\n\n[/Example 3]", "temperature": 0.74, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 790, "completion_tokens": 164, "completion": "Given a non-negative integer num, write a function to count the number of set bits in its binary representation.\n\n###Code: \n\ndef countSetBits(num: int) -> int:\n    count = 0\n    while (num):\n        count += num & 1\n        num >>= 1\n    return count\n\n\n###Testcases: \n\nassert countSetBits(10) == 2\nassert countSetBits(6) == 2\nassert countSetBits(15) == 4\nassert countSetBits(7) == 3\nassert countSetBits(3) == 2\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\nassert countSetBits(255) == 8\n\n[/Example 3]", "temperature": 0.749, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 815, "completion_tokens": 189, "completion": "Write a function to count the total number of set bits in all numbers from 1 to n.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n    count = 0\n    for i in range(1, n+1):\n        count += bin(i).count('1')\n    return count\n\n###Testcases: \n\nassert countSetBits(5) == 7\nassert countSetBits(10) == 16\nassert countSetBits(15) == 26\nassert countSetBits(20) == 31\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\nassert countSetBits(3) == 4\nassert countSetBits(100) == 237\nassert countSetBits(256) == 1792\nassert countSetBits(512) == 3840\n\n[/Example 3]", "temperature": 0.768, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 942, "completion_tokens": 232, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers in this range, inclusive.\n\n###Code: \n\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n        while b > a:\n                b = b & (b - 1)\n        return a & b\n\n###Testcases: \n\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(1, 2147483647) == 0\nassert rangeBitwiseAnd(4, 6) == 4\nassert rangeBitwiseAnd(0, 0) == 0\nassert rangeBitwiseAnd(1, 2) == 0\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(7, 15) == 8\nassert rangeBitwiseAnd(10, 11) == 10\nassert rangeBitwiseAnd(20000, 214748) == 0\n\n[/Example 3]", "temperature": 0.739, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}], "category": "Bitwise", "prompt_tokens": 752, "total_tokens": 929, "completion_tokens": 177, "completion": "Write a function that counts the number of set bits in a given integer.\n\n###Code:\n\n```python\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\n\n###Testcases:\n\n```python\nassert count_set_bits(10) == 2\nassert count_set_bits(7) == 3\nassert count_set_bits(15) == 4\nassert count_set_bits(23) == 4\nassert count_set_bits(0) == 0\nassert count_set_bits(1) == 1\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(65535) == 16\n```\n\n[/Example 3]", "temperature": 0.853, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 784, "completion_tokens": 161, "completion": "Write a function to count the number of set bits (1s) in a positive integer.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert countSetBits(10) == 2\nassert countSetBits(15) == 4\nassert countSetBits(7) == 3\nassert countSetBits(128) == 1\nassert countSetBits(255) == 8\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\nassert countSetBits(3) == 2\n\n[/Example 3]", "temperature": 0.803, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 920, "completion_tokens": 210, "completion": "Given a non-empty array of integers, every element appears twice except for one. Find that single one.\n\n###Code: \n\ndef singleNumber(nums: list) -> int:\n        result = 0\n        for num in nums:\n            result ^= num\n        return result\n\n\n###Testcases: \n\nassert singleNumber([2,2,1]) == 1\nassert singleNumber([4,1,2,1,2]) == 4\nassert singleNumber([1]) == 1\nassert singleNumber([1,3,4,5,6,5,4,3,1]) == 6\nassert singleNumber([7,7,9]) == 9\nassert singleNumber([5,5,0,0,9]) == 9\nassert singleNumber([3,3,1,1,4,5,5]) == 4\nassert singleNumber([8,8,11,11,13,13,15]) == 15\n\n[/Example 3]", "temperature": 0.646, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(7) == 3\nassert count_set_bits(15) == 4\nassert count_set_bits(127) == 7\nassert count_set_bits(255) == 8\nassert count_set_bits(31) == 5\nassert count_set_bits(1024) == 1\nassert count_set_bits(8192) == 1\nassert count_set_bits(16) == 1\nassert count_set_bits(0) == 0\n\n[/Example 3]", "temperature": 0.947, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 623, "total_tokens": 841, "completion_tokens": 218, "completion": "Given two integers, write a function to swap them without using a temporary variable.\n\n###Code:\n\ndef swapWithoutTempVar(a: int, b: int) -> (int, int):\n        a = a ^ b\n        b = a ^ b\n        a = a ^ b\n        return a, b\n\n###Testcases:\n\nassert swapWithoutTempVar(3, 5) == (5, 3)\nassert swapWithoutTempVar(10, 20) == (20, 10)\nassert swapWithoutTempVar(7, 13) == (13, 7)\nassert swapWithoutTempVar(111, 222) == (222, 111)\nassert swapWithoutTempVar(0, 0) == (0, 0)\nassert swapWithoutTempVar(1, 100) == (100, 1)\nassert swapWithoutTempVar(-5, 10) == (10, -5)\nassert swapWithoutTempVar(-10, -20) == (-20, -10)\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 873, "completion_tokens": 154, "completion": "Given an integer, write a function to reverse the bits of that integer.\n\n###Code: \n\n```python\ndef reverseBits(n: int) -> int:\n    result = 0\n    for _ in range(32):\n        result = (result << 1) | (n & 1)\n        n >>= 1\n    return result\n```\n\n###Testcases: \n\n```python\nassert reverseBits(43261596) == 964176192\nassert reverseBits(4294967295) == 4294967295\nassert reverseBits(1) == 2147483648\nassert reverseBits(0) == 0\nassert reverseBits(8) == 134217728\n```\n\n[/Example 3]", "temperature": 0.983, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 884, "completion_tokens": 165, "completion": "Given an integer, write a function to reverse the bits of the integer.\n\n###Code: \n\n```python\ndef reverseBits(n: int) -> int:\n    result = 0\n    for _ in range(32):\n        result = (result << 1) | (n & 1)\n        n >>= 1\n    return result\n```\n\n###Testcases: \n\n```python\nassert reverseBits(43261596) == 964176192\nassert reverseBits(1) == 2147483648\nassert reverseBits(0) == 0\nassert reverseBits(7) == 3758096384\nassert reverseBits(10) == 1342177280\nassert reverseBits(15) == 4026531840\n```\n\n[/Example 3]", "temperature": 0.879, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 887, "completion_tokens": 168, "completion": "Given a non-empty array of integers, every element appears twice except for one. Write a function to find that single one.\n\n###Code: \n\ndef findSingle(nums: list) -> int:\n    result = 0\n    for num in nums:\n        result ^= num\n    return result\n\n###Testcases: \n\nassert findSingle([4, 3, 2, 4, 1, 2, 3]) == 1\nassert findSingle([2, 2, 1]) == 1\nassert findSingle([1]) == 1\nassert findSingle([9, 5, 3, 5, 9, 8, 3]) == 8\nassert findSingle([6, 12, 6]) == 12\n\n[/Example 3]", "temperature": 0.864, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}], "category": "Bitwise", "prompt_tokens": 668, "total_tokens": 807, "completion_tokens": 139, "completion": "Write a program to count the number of set bits in a given integer.\n\n###Code: \n\n```python\ndef countSetBits(num: int) -> int:\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n```\n\n###Testcases: \n\n```python\nassert countSetBits(10) == 2\nassert countSetBits(15) == 4\nassert countSetBits(7) == 3\nassert countSetBits(0) == 0\nassert countSetBits(255) == 8\nassert countSetBits(1024) == 1\n```", "temperature": 0.826, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 888, "completion_tokens": 178, "completion": "Write a function to count the number of set bits in a positive integer n.\n\n###Code:\n\ndef countSetBits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases:\n\nassert countSetBits(7) == 3\nassert countSetBits(15) == 4\nassert countSetBits(10) == 2\nassert countSetBits(31) == 5\nassert countSetBits(255) == 8\nassert countSetBits(16) == 1\nassert countSetBits(3) == 2\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\nassert countSetBits(1023) == 10\n\n[/Example 3]", "temperature": 0.855, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}], "category": "Bitwise", "prompt_tokens": 668, "total_tokens": 818, "completion_tokens": 150, "completion": "Given an integer, write a function to check if it is a power of four.\n\n###Code:\n\n```python\ndef isPowerOfFour(num: int) -> bool:\n    return num > 0 and (num & (num - 1)) == 0 and (num & 0xaaaaaaaa) == 0\n```\n\n###Testcases:\n\n```python\nassert isPowerOfFour(16) == True\nassert isPowerOfFour(5) == False\nassert isPowerOfFour(64) == True\nassert isPowerOfFour(1024) == True\nassert isPowerOfFour(0) == False\nassert isPowerOfFour(1) == True\n```\n\n[/Example 3]", "temperature": 0.817, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 827, "completion_tokens": 168, "completion": "Create a function to toggle the nth bit of a given number.\n\n###Code: \n\ndef toggle_nth_bit(number: int, n: int) -> int:\n    return (number ^ (1 << (n - 1)))\n\n\n###Testcases: \n\nassert toggle_nth_bit(5, 1) == 4\nassert toggle_nth_bit(8, 3) == 12\nassert toggle_nth_bit(15, 4) == 7\nassert toggle_nth_bit(0, 5) == 16\nassert toggle_nth_bit(17, 2) == 19\nassert toggle_nth_bit(10, 1) == 11\nassert toggle_nth_bit(255, 8) == 127\nassert toggle_nth_bit(100, 5) == 116\n\n[/Example 3]", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 1135, "completion_tokens": 425, "completion": "You are given an array of integers. Write a function to find the unique numbers which occur exactly once in the array, and the rest of the numbers occur exactly twice.\n\n###Code:\n\n```python\ndef findUniqueNumbers(arr: list) -> list:\n    xor_result = 0\n    for num in arr:\n        xor_result ^= num\n\n    rightmost_set_bit = xor_result & -xor_result\n\n    unique_num1 = 0\n    unique_num2 = 0\n    \n    for num in arr:\n        if (num & rightmost_set_bit) > 0:\n            unique_num1 ^= num\n        else:\n            unique_num2 ^= num\n\n    return [unique_num1, unique_num2]\n```\n\n###Testcases:\n\n```python\nassert findUniqueNumbers([1, 2, 3, 2, 1, 4]) == [3, 4]\nassert findUniqueNumbers([4, 5, 7, 5, 9, 4, 9]) == [7, 9]\nassert findUniqueNumbers([10, 20, 10, 20, 30, 40, 40]) == [30, 0]\nassert findUniqueNumbers([5, 4, 3, 2, 1, 5, 4, 3]) == [2, 1]\nassert findUniqueNumbers([8, 8, 5, 5, 3, 3, 4, 7]) == [4, 7]\nassert findUniqueNumbers([1, 1, 2, 2, 3, 4]) == [3, 4]\nassert findUniqueNumbers([7, 7, 8, 8, 9, 9, 10, 11]) == [10, 11]\nassert findUniqueNumbers([100, 200, 100, 200, 300, 300, 400, 500]) == [400, 500]\n```\n\n[/Example 3]", "temperature": 0.992, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 931, "completion_tokens": 221, "completion": "You are given two non-negative integers, num1 and num2. Write a function to return the bitwise AND of all numbers in this range, inclusive.\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(num1: int, num2: int) -> int:\n    while num2 > num1:\n        num2 = num2 & (num2 - 1)\n    return num2\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(1, 2147483647) == 0\nassert rangeBitwiseAnd(4, 8) == 0\nassert rangeBitwiseAnd(0, 0) == 0\nassert rangeBitwiseAnd(2, 2) == 2\nassert rangeBitwiseAnd(3, 5) == 0\nassert rangeBitwiseAnd(6, 7) == 6\n```\n\n[/Example 3]", "temperature": 0.945, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 876, "completion_tokens": 157, "completion": "Given a non-empty array of integers, every element appears twice except for one. Write a function to find that single one.\n\n###Code: \n\n```python\ndef findSingle(nums: List[int]) -> int:\n    result = 0\n    for num in nums:\n        result ^= num\n    return result\n```\n\n###Testcases: \n\n```python\nassert findSingle([4, 3, 2, 4, 1, 2, 3]) == 1\nassert findSingle([2, 2, 1]) == 1\nassert findSingle([1]) == 1\nassert findSingle([4, 1, 2, 1, 2]) == 4\n```\n\n[/Example 3]", "temperature": 0.791, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 752, "total_tokens": 1002, "completion_tokens": 250, "completion": "Write a function to count the total number of set bits in all numbers from 1 to n.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n    if n == 0:\n        return 0\n    x = largestPowerof2(n)\n    bitstil2 = x * (1 << (x - 1))\n    msb2n = n - (1 << x) + 1\n    rest = n - (1 << x)\n    ans = bitstil2 + msb2n + countSetBits(rest)\n    return ans\n\ndef largestPowerof2(n: int) -> int:\n    x = 0\n    while (1 << x) <= n:\n        x += 1\n    return x - 1\n\n\n###Testcases: \n\nassert countSetBits(10) == 17\nassert countSetBits(5) == 9\nassert countSetBits(1) == 1\nassert countSetBits(20) == 42\nassert countSetBits(15) == 35\nassert countSetBits(8) == 13\nassert countSetBits(0) == 0\n\n[/Example 3]", "temperature": 0.951, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 998, "completion_tokens": 282, "completion": "Given an array of integers, implement a function to find the element which appears once while all other elements appear thrice.\n\n###Code: \n\ndef singleNumber(arr: list) -> int:\n    ones = 0\n    twos = 0\n    for num in arr:\n        twos = twos | (ones & num)\n        ones = ones ^ num\n        common_bit_mask = ~(ones & twos)\n        ones = ones & common_bit_mask\n        twos = twos & common_bit_mask\n    return ones\n\n\n###Testcases: \n\nassert singleNumber([2, 2, 3, 2]) == 3\nassert singleNumber([5, 5, 5, 8]) == 8\nassert singleNumber([1, 1, 1, 3]) == 3\nassert singleNumber([7, 3, 3, 3, 2, 2, 2]) == 7\nassert singleNumber([9, 9, 9, 4]) == 4\nassert singleNumber([0, 0, 0, 1]) == 1\nassert singleNumber([15, 15, 15, 5]) == 5\nassert singleNumber([12, 12, 12, 6]) == 6\n\n[/Example 3]", "temperature": 0.754, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 764, "completion_tokens": 138, "completion": "Given an integer, write a function to count the total number of set bits in its binary representation.\n\n###Code:\n\ndef countSetBits(n: int) -> int:\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases:\n\nassert countSetBits(10) == 2\nassert countSetBits(15) == 4\nassert countSetBits(7) == 3\nassert countSetBits(1) == 1\nassert countSetBits(0) == 0\nassert countSetBits(436) == 5\n\n[/Example 3]", "temperature": 0.951, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 1039, "completion_tokens": 323, "completion": "Find the only odd occurring element in an array where every other element occurs even number of times.\n\n###Code: \n\ndef findOddOccurring(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result = result ^ num\n    return result\n\n\n###Testcases: \n\nassert findOddOccurring([4, 3, 4, 4, 4, 5, 5, 3, 3]) == 5\nassert findOddOccurring([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 7\nassert findOddOccurring([0, 0, 0, 0, 0, 0, 0, 0, 1]) == 1\nassert findOddOccurring([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 1]) == 1\nassert findOddOccurring([10, 20, 30, 40, 30, 20, 10]) == 40\nassert findOddOccurring([3, 5, 3, 5, 4, 4, 7]) == 7\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 752, "total_tokens": 985, "completion_tokens": 233, "completion": "Write a function to count the total set bits in all numbers from 1 to n.\n\n###Code: \n\ndef countTotalSetBits(n: int) -> int:\n        i = 0\n        total = 0\n        while ((1 << i) <= n):\n                k = 0\n                change = 1 << i\n                for j in range(0, n+1):\n                        total += k\n                        if change == 1:\n                                k = not k\n                                change = 1 << i\n                        else:\n                                change -= 1\n                i += 1\n        return total\n\n\n###Testcases: \n\nassert countTotalSetBits(10) == 17\nassert countTotalSetBits(5) == 8\nassert countTotalSetBits(3) == 4\nassert countTotalSetBits(15) == 35\nassert countTotalSetBits(0) == 0\nassert countTotalSetBits(1) == 1\nassert countTotalSetBits(7) == 12\nassert countTotalSetBits(20) == 42\n\n[/Example 3]", "temperature": 0.774, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 716, "total_tokens": 877, "completion_tokens": 161, "completion": "Given an integer, write a program to count the total number of set bits in its binary representation.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n        count = 0\n        while n:\n                count += n & 1\n                n >>= 1\n        return count\n\n\n###Testcases: \n\nassert countSetBits(6) == 2\nassert countSetBits(13) == 3\nassert countSetBits(128) == 1\nassert countSetBits(255) == 8\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\nassert countSetBits(15) == 4\nassert countSetBits(31) == 5\n\n[/Example 3]", "temperature": 0.686, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}], "category": "Bitwise", "prompt_tokens": 668, "total_tokens": 794, "completion_tokens": 126, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n```\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1) == True\n```", "temperature": 0.961, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 632, "total_tokens": 786, "completion_tokens": 154, "completion": "Given a positive integer, write a function to check if it is a power of two.\n\n###Code: \n\ndef isPowerOfTwo(n: int) -> bool:\n        return n > 0 and (n & (n - 1)) == 0\n\n###Testcases: \n\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(32) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(218) == False\nassert isPowerOfTwo(2048) == True\n\n[/Example 3]", "temperature": 0.712, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}], "category": "Bitwise", "prompt_tokens": 752, "total_tokens": 906, "completion_tokens": 154, "completion": "Given an integer, write a function to check if it is a power of 2.\n\n###Code: \n\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n\n\n###Testcases: \n\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(128) == True\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(218) == False\nassert isPowerOfTwo(2048) == True\n\n[/Example 3]", "temperature": 0.845, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 785, "completion_tokens": 159, "completion": "Write a function to count the number of set bits in a non-negative integer n.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n\n###Testcases: \n\nassert countSetBits(10) == 2\nassert countSetBits(7) == 3\nassert countSetBits(15) == 4\nassert countSetBits(255) == 8\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\nassert countSetBits(100) == 3\nassert countSetBits(1024) == 1\n\n[/Example 3]", "temperature": 0.786, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}], "category": "Bitwise", "prompt_tokens": 752, "total_tokens": 917, "completion_tokens": 165, "completion": "Write a function to count the number of set bits (1s) in a given integer.\n\n###Code: \n\n```python\ndef countSetBits(num: int) -> int:\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n```\n\n###Testcases: \n\n```python\nassert countSetBits(5) == 2\nassert countSetBits(15) == 4\nassert countSetBits(16) == 1\nassert countSetBits(255) == 8\nassert countSetBits(1023) == 10\nassert countSetBits(0) == 0\nassert countSetBits(7) == 3\nassert countSetBits(21) == 3\n```", "temperature": 0.95, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 752, "total_tokens": 977, "completion_tokens": 225, "completion": "Write a function to count the total number of set bits in all numbers from 1 to n.\n\n###Code:\n\n```python\ndef countSetBits(n: int) -> int:\n    n += 1\n    powerOf2 = 2\n    count = n // 2\n    while powerOf2 <= n:\n        totalPairs = n // powerOf2\n        count += (totalPairs // 2) * powerOf2\n        if totalPairs % 2 != 0:\n            count += (n % powerOf2) - (powerOf2 // 2)\n        powerOf2 = powerOf2 << 1\n    return count\n```\n\n###Testcases:\n\n```python\nassert countSetBits(10) == 17\nassert countSetBits(6) == 9\nassert countSetBits(3) == 4\nassert countSetBits(15) == 35\nassert countSetBits(1) == 1\nassert countSetBits(0) == 0\nassert countSetBits(20) == 42\n```", "temperature": 0.798, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}], "category": "Bitwise", "prompt_tokens": 752, "total_tokens": 961, "completion_tokens": 209, "completion": "Given two integers, write a function to return the number of bits that need to be flipped to convert the first integer to the second.\n\n###Code:\n\n```python\ndef bitFlipsRequired(a: int, b: int) -> int:\n    xor_result = a ^ b\n    count = 0\n    while xor_result:\n        count += xor_result & 1\n        xor_result >>= 1\n    return count\n```\n\n###Testcases:\n\n```python\nassert bitFlipsRequired(29, 15) == 2\nassert bitFlipsRequired(4, 7) == 2\nassert bitFlipsRequired(31, 14) == 2\nassert bitFlipsRequired(1, 1) == 0\nassert bitFlipsRequired(0, 15) == 4\nassert bitFlipsRequired(255, 0) == 8\nassert bitFlipsRequired(8, 8) == 0\n```\n\n[/Example 3]", "temperature": 0.779, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 800, "completion_tokens": 174, "completion": "Given two integers a and b, write a function to return the bitwise AND of all numbers between a and b (inclusive).\n\n###Code:\n\n```python\ndef rangeBitwiseAnd(a: int, b: int) -> int:\n    while b > a:\n        b = b & (b - 1)\n    return b\n```\n\n###Testcases:\n\n```python\nassert rangeBitwiseAnd(5, 7) == 4\nassert rangeBitwiseAnd(0, 1) == 0\nassert rangeBitwiseAnd(12, 15) == 12\nassert rangeBitwiseAnd(8, 11) == 8\nassert rangeBitwiseAnd(3, 3) == 3\nassert rangeBitwiseAnd(0, 15) == 0\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 878, "completion_tokens": 159, "completion": "Given an integer, write a function to check if the integer is a power of two.\n\n###Code: \n\ndef isPowerOfTwo(n: int) -> bool:\n        if n <= 0:\n                return False\n        return (n & (n - 1)) == 0\n\n\n###Testcases: \n\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(256) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(218) == False\nassert isPowerOfTwo(512) == True\n\n[/Example 3]", "temperature": 0.653, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 752, "total_tokens": 906, "completion_tokens": 154, "completion": "Write a function to count the total set bits in all numbers from 1 to n.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n    count = 0\n    for i in range(1, n+1):\n        num = i\n        while num:\n            count += num & 1\n            num >>= 1\n    return count\n\n###Testcases: \n\nassert countSetBits(5) == 7\nassert countSetBits(10) == 17\nassert countSetBits(15) == 28\nassert countSetBits(20) == 42\nassert countSetBits(25) == 57\nassert countSetBits(50) == 132\n\n[/Example 3]", "temperature": 0.812, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 668, "total_tokens": 796, "completion_tokens": 128, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code: \n\n```python\ndef countSetBits(num: int) -> int:\n        count = 0\n        while (num):\n            count += num & 1\n            num >>= 1\n        return count\n```\n\n###Testcases: \n\n```python\nassert countSetBits(10) == 2\nassert countSetBits(15) == 4\nassert countSetBits(7) == 3\nassert countSetBits(255) == 8\nassert countSetBits(0) == 0\n```", "temperature": 0.909, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 668, "total_tokens": 810, "completion_tokens": 142, "completion": "Write a function to count the number of set bits (bits with a value of 1) in a given integer.\n\n###Code: \n\n```python\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```\n\n###Testcases: \n\n```python\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(23) == 4\nassert count_set_bits(128) == 1\nassert count_set_bits(255) == 8\n```\n\n[/Example 3]", "temperature": 0.914, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}], "category": "Bitwise", "prompt_tokens": 665, "total_tokens": 822, "completion_tokens": 157, "completion": "Given a non-negative integer num, write a function to count the number of 1 bits in its binary representation.\n\n###Code: \n\ndef countBits(num: int) -> int:\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n\n\n###Testcases: \n\nassert countBits(0) == 0\nassert countBits(7) == 3\nassert countBits(10) == 2\nassert countBits(15) == 4\nassert countBits(32) == 1\nassert countBits(255) == 8\nassert countBits(1023) == 10\nassert countBits(65535) == 16\n\n[/Example 3]", "temperature": 0.671, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 780, "completion_tokens": 154, "completion": "Given a non-negative integer num, write a function to count the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while (num):\n                count += num & 1\n                num >>= 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(7) == 3\nassert hammingWeight(0) == 0\nassert hammingWeight(15) == 4\nassert hammingWeight(31) == 5\n\n[/Example 3]", "temperature": 0.629, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 632, "total_tokens": 767, "completion_tokens": 135, "completion": "Write a function to calculate the number of set bits in a given integer.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n\n\n###Testcases: \n\nassert countSetBits(10) == 2\nassert countSetBits(15) == 4\nassert countSetBits(7) == 3\nassert countSetBits(0) == 0\nassert countSetBits(255) == 8\nassert countSetBits(65535) == 16\n\n[/Example 3]", "temperature": 0.771, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}], "category": "Bitwise", "prompt_tokens": 668, "total_tokens": 806, "completion_tokens": 138, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n```\n\n\n###Testcases: \n\n```python\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(5) == False\nassert isPowerOfTwo(32) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(1024) == True\n```", "temperature": 0.836, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(7) == 3\nassert count_set_bits(15) == 4\nassert count_set_bits(32) == 1\nassert count_set_bits(255) == 8\nassert count_set_bits(0) == 0\nassert count_set_bits(1) == 1\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(666) == 5\n\n[/Example 3]", "temperature": 0.849, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 944, "completion_tokens": 234, "completion": "Given an array of non-negative integers, every element appears twice except for one. Find that single one.\n\n###Code: \n\ndef findSingle(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result ^= num\n    return result\n\n\n###Testcases: \n\nassert findSingle([4, 3, 2, 4, 1, 2, 3]) == 1\nassert findSingle([0, 1, 0]) == 1\nassert findSingle([2, 2, 5, 5, 3, 4, 4]) == 3\nassert findSingle([7, 3, 5, 4, 5, 3, 4]) == 7\nassert findSingle([10, 10, 5, 6, 6, 7, 7]) == 5\nassert findSingle([1, 1, 2, 3, 2, 3, 4, 5, 5, 6, 6]) == 4\n\n[/Example 3]", "temperature": 0.835, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 896, "completion_tokens": 177, "completion": "Given a non-empty array of integers, every element appears three times except for one, which appears exactly once. Find that single one.\n\n###Code: \n\ndef singleNumber(nums: list) -> int:\n        ones = 0\n        twos = 0\n        for num in nums:\n            ones = (ones ^ num) & (~twos)\n            twos = (twos ^ num) & (~ones)\n        return ones\n\n\n###Testcases: \n\nassert singleNumber([2,2,3,2]) == 3\nassert singleNumber([0,1,0,1,0,1,99]) == 99\nassert singleNumber([5,5,5,3]) == 3\nassert singleNumber([10,15,10,15,10,15,99]) == 99\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}], "category": "Bitwise", "prompt_tokens": 665, "total_tokens": 806, "completion_tokens": 141, "completion": "Write a function to check if a given number is a power of 2.\n\n###Code: \n\ndef isPowerofTwo(n: int) -> bool:\n        return (n and (not(n & (n - 1))))\n\n###Testcases: \n\nassert isPowerofTwo(16) == True\nassert isPowerofTwo(3) == False\nassert isPowerofTwo(64) == True\nassert isPowerofTwo(1) == True\nassert isPowerofTwo(0) == False\nassert isPowerofTwo(1024) == True\nassert isPowerofTwo(218) == False\nassert isPowerofTwo(4096) == True", "temperature": 0.984, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}], "category": "Bitwise", "prompt_tokens": 668, "total_tokens": 802, "completion_tokens": 134, "completion": "Write a function to count the number of set bits (bits with value 1) in a given integer.\n\n###Code: \n\n```python\ndef countSetBits(num: int) -> int:\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n```\n\n###Testcases: \n\n```python\nassert countSetBits(10) == 2\nassert countSetBits(7) == 3\nassert countSetBits(16) == 1\nassert countSetBits(255) == 8\nassert countSetBits(0) == 0\n```", "temperature": 0.721, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 760, "completion_tokens": 134, "completion": "Write a function to count the number of set bits in a given integer.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n\n###Testcases: \n\nassert countSetBits(10) == 2\nassert countSetBits(7) == 3\nassert countSetBits(15) == 4\nassert countSetBits(0) == 0\nassert countSetBits(1) == 1\nassert countSetBits(255) == 8\n\n[/Example 3]", "temperature": 0.762, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 632, "total_tokens": 820, "completion_tokens": 188, "completion": "Given a positive integer, write a function to check if the number is a power of two using bitwise operations.\n\n###Code: \n\ndef isPowerOfTwo(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n\n###Testcases: \n\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(5) == False\nassert isPowerOfTwo(32) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(1023) == False\nassert isPowerOfTwo(2048) == True\nassert isPowerOfTwo(4096) == True\nassert isPowerOfTwo(333) == False\n\n[/Example 3]", "temperature": 0.875, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 632, "total_tokens": 818, "completion_tokens": 186, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n\n\n###Testcases: \n\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(128) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(7) == False\nassert isPowerOfTwo(256) == True\nassert isPowerOfTwo(4096) == True\nassert isPowerOfTwo(2048) == True\nassert isPowerOfTwo(1000) == False\nassert isPowerOfTwo(1) == True \n\n[/Example 3]", "temperature": 0.899, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 626, "total_tokens": 832, "completion_tokens": 206, "completion": "Given an array of integers, write a function to find the element that appears once, while all other elements appear twice.\n\n###Code: \n\ndef findSingle(arr: List[int]) -> int:\n        ones = 0\n        twos = 0\n\n        for num in arr:\n                twos = twos | (ones & num)\n                ones = ones ^ num\n\n                common_bit_mask = ~(ones & twos)\n                ones = ones & common_bit_mask\n                twos = twos & common_bit_mask\n\n        return ones\n\n\n###Testcases: \n\narr1 = [2, 2, 3, 2]\narr2 = [0, 1, 0, 1, 0, 1, 99]\narr3 = [4, 4, 4, 5]\nassert findSingle(arr1) == 3\nassert findSingle(arr2) == 99\nassert findSingle(arr3) == 5\n\n[/Example 3]", "temperature": 0.748, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 839, "completion_tokens": 180, "completion": "Write a function to count the number of set bits in a given integer\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(15) == 4\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(12345) == 6\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\nassert count_set_bits(31) == 5\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}], "category": "Bitwise", "prompt_tokens": 659, "total_tokens": 840, "completion_tokens": 181, "completion": "Write a function to count the number of set bits in a positive integer n.\n\n###Code: \n\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n\n\n###Testcases: \n\nassert count_set_bits(10) == 2\nassert count_set_bits(7) == 3\nassert count_set_bits(15) == 4\nassert count_set_bits(8) == 1\nassert count_set_bits(127) == 7\nassert count_set_bits(255) == 8\nassert count_set_bits(1023) == 10\nassert count_set_bits(0) == 0\nassert count_set_bits(1) == 1\nassert count_set_bits(100) == 3\n\n\n[/Example 3]", "temperature": 0.645, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}, {"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 861, "completion_tokens": 142, "completion": "Given a non-negative integer num, write a function to return the number of 1 bits in its binary representation.\n\n###Code: \n\ndef hammingWeight(num: int) -> int:\n        count = 0\n        while(num):\n                num &= (num-1)\n                count += 1\n        return count\n\n\n###Testcases: \n\nassert hammingWeight(11) == 3\nassert hammingWeight(128) == 1\nassert hammingWeight(255) == 8\nassert hammingWeight(0) == 0\nassert hammingWeight(7) == 3\nassert hammingWeight(15) == 4\n\n[/Example 3]", "temperature": 0.973, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 719, "total_tokens": 921, "completion_tokens": 202, "completion": "Given an integer n, write a function to count the total set bits in all numbers from 1 to n.\n\n###Code: \n\ndef countSetBits(n: int) -> int:\n        n += 1\n        powerOf2 = 2\n        count = n // 2\n\n        while powerOf2 <= n:\n                totalPairs = n // powerOf2\n                count += (totalPairs // 2) * powerOf2\n                count += (totalPairs % 2 == 1) * (n % powerOf2)\n                powerOf2 <<= 1\n\n        return count\n\n\n###Testcases: \n\nassert countSetBits(10) == 27\nassert countSetBits(5) == 8\nassert countSetBits(3) == 4\nassert countSetBits(15) == 35\nassert countSetBits(1) == 1\nassert countSetBits(8) == 13\n\n[/Example 3]", "temperature": 0.62, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "4fba2bf1-fda1-48e9-9c2a-bc3ed4718da0", "question": "Given a positive integer n, write a function to find if it is a power of 2 or not", "examples": "Input : n = 4\nOutput : Yes\nExplanation: 22 = 4\n\nInput : n = 32\nOutput : Yes\nExplanation: 25 = 32", "link": "https://www.geeksforgeeks.org/program-to-find-whether-a-given-number-is-power-of-2/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "import math\n\ndef Log2(x):\n        if x == 0:\n                return False\n\n        return (math.log10(x) /\n                        math.log10(2))\n\ndef isPowerOfTwo(n: int) -> bool:\n        return (math.ceil(Log2(n)) ==\n                        math.floor(Log2(n)))\n", "asserts": ["assert isPowerOfTwo(31) == False", "assert isPowerOfTwo(1) == True", "assert isPowerOfTwo(1024) == True", "assert isPowerOfTwo(3) == False", "assert isPowerOfTwo(64) == True", "assert isPowerOfTwo(65) == False", "assert isPowerOfTwo(8192) == True", "assert isPowerOfTwo(16384) == True", "assert isPowerOfTwo(999) == False", "assert isPowerOfTwo(65536) == True"]}, {"author": "Karthik", "UUID": "b07b0bf3-3482-489e-99b5-c21f11e3cd29", "question": "Given an array of integers. The task is to find the maximum subarray XOR value in the given array.", "examples": "Input: arr[] = {1, 2, 3, 4}\nOutput: 7\nExplanation: The subarray {3, 4} has maximum XOR value\n\nInput: arr[] = {8, 1, 2, 12, 7, 6}\nOutput: 15\nExplanation: The subarray {1, 2, 12} has maximum XOR value", "link": "https://www.geeksforgeeks.org/find-the-maximum-subarray-xor-in-a-given-array/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def maxSubarrayXOR(arr: list) -> int:\n        n = len(arr)\n        ans = -2147483648\n\n        for i in range(n):\n                curr_xor = 0\n                for j in range(i,n):\n                \n                        curr_xor = curr_xor ^ arr[j]\n                        ans = max(ans, curr_xor)\n        return ans\n", "asserts": ["assert maxSubarrayXOR([1, 2, 3, 4]) == 7", "assert maxSubarrayXOR([0]) == 0", "assert maxSubarrayXOR([4, 2, 1, 6, 5]) == 7", "assert maxSubarrayXOR([9, 8, 5]) == 13", "assert maxSubarrayXOR([0, 0, 0, 0]) == 0", "assert maxSubarrayXOR([1, 2, 3, 4, 5, 6, 7, 8]) == 15", "assert maxSubarrayXOR([4, 17]) == 21", "assert maxSubarrayXOR([14, 70, 53, 83, 49, 91, 36, 80, 92, 51, 66, 70]) == 127"]}], "category": "Bitwise", "prompt_tokens": 710, "total_tokens": 957, "completion_tokens": 247, "completion": "Given two integers, write a function to determine the number of bits needed to be flipped to convert the first integer to the second.\n\n###Code: \n\ndef countBitsFlips(a: int, b: int) -> int:\n        xor_result = a ^ b\n        count = 0\n        while xor_result:\n                count += 1\n                xor_result &= (xor_result - 1)\n        return count\n\n\n###Testcases: \n\nassert countBitsFlips(29, 15) == 2\nassert countBitsFlips(7, 10) == 3\nassert countBitsFlips(31, 0) == 5\nassert countBitsFlips(1, 1) == 0\nassert countBitsFlips(0, 15) == 4\nassert countBitsFlips(255, 0) == 8\nassert countBitsFlips(16, 8) == 1\nassert countBitsFlips(123, 98) == 4\nassert countBitsFlips(60, 15) == 4\nassert countBitsFlips(1023, 0) == 10\n\n[/Example 3]", "temperature": 0.816, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "09d82a2d-5a3f-449f-bc1a-4f24cf4328e6", "question": "Given a number x and two positions (from the right side) in the binary representation of x, write a function that swaps n bits at the given two positions and returns the result. It is also given that the two sets of bits do not overlap.", "examples": "Input:\nx = 47 (00101111)\np1 = 1 (Start from the second bit from the right side)\np2 = 5 (Start from the 6th bit from the right side)\nn = 3 (No of bits to be swapped)\nOutput:\n227 (11100011)\nThe 3 bits starting from the second bit (from the right side) are \nswapped with 3 bits starting from 6th position (from the right side)", "link": "https://www.geeksforgeeks.org/swap-bits-in-a-given-number/", "difficulty": "Medium", "categories": ["Bitwise"], "code": "def swapBits(x: int, p1: int, p2: int, n: int) -> int:\n        set1 = (x >> p1) & ((1<< n) - 1)\n        set2 = (x >> p2) & ((1 << n) - 1)\n\n        xor = (set1 ^ set2)\n        xor = (xor << p1) | (xor << p2)\n        result = x ^ xor\n\n        return result\n", "asserts": ["assert swapBits(47, 1, 5, 3) == 227", "assert swapBits(28, 0, 3, 2) == 7", "assert swapBits(0, 2, 6, 1) == 0"]}, {"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}], "category": "Bitwise", "prompt_tokens": 668, "total_tokens": 803, "completion_tokens": 135, "completion": "Write a function that checks if a given number is a power of two.\n\n###Code:\n\n```python\ndef isPowerOfTwo(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n```\n\n###Testcases:\n\n```python\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(64) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(128) == True\n```", "temperature": 0.804, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "8714ed57-3a2b-4115-b4d8-100182b1f6bb", "question": "Write a function to to convert a floating point number to binary", "examples": "Enter your floating point value : \n11.234\nEnter the number of decimal places of the result : \n4\n\n1011.0011\n\nEnter your floating point value : \n1.234\nEnter the number of decimal places of the result :\n4\n\n1.0011", "link": "https://www.geeksforgeeks.org/python-program-to-convert-floating-to-binary/", "difficulty": "Hard", "categories": ["Bitwise"], "code": "def float_bin(number: float, places : int =  3) -> str:\n    def decimal_converter(num): \n        while num > 1:\n                num /= 10\n        return num\n    whole, dec = str(number).split(\".\")\n    whole = int(whole)\n    dec = int (dec)\n    res = bin(whole).lstrip(\"0b\") + \".\"\n    for x in range(places):\n            whole, dec = str((decimal_converter(dec)) * 2).split(\".\")\n            dec = int(dec)\n            res += whole\n    return res\n", "asserts": ["assert float_bin(11.234, 4) == '1011.0011'", "assert float_bin(100.101, 6) == '1100100.000110'", "assert float_bin(3.14159, 5) == '11.00100'", "assert float_bin(255.255, 4) == '11111111.0100'", "assert float_bin(2.625, 3) == '10.101'     # Additional test case with exact binary representation"]}, {"author": "Karthik", "UUID": "06becabf-b745-4905-bc52-d291d0c15e0d", "question": "A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end. In left rotation, the bits that fall off at left end are put back at right end. Write a program to left rotate the bits of a number by d places", "examples": "Let n is stored using 8 bits. Left rotation of n = 11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000\u202611100101) becomes 00..0011100101000", "link": "https://www.geeksforgeeks.org/rotate-bits-of-an-integer/", "difficulty": "Easy", "categories": ["Bitwise"], "code": "INT_BITS = 32\ndef leftRotate(n: int, d: int) -> int:\n        return (n << d)|(n >> (INT_BITS - d))\n", "asserts": ["assert leftRotate(16, 2) == 64", "assert leftRotate(29, 3) == 232", "assert leftRotate(0, 1) == 0", "assert leftRotate(1, 5) == 32", "assert leftRotate(19, 4) == 304", "assert leftRotate(345, 8) == 88320", "assert leftRotate(256, 8) == 65536", "assert leftRotate(2, 1) == 4"]}], "category": "Bitwise", "prompt_tokens": 665, "total_tokens": 821, "completion_tokens": 156, "completion": "Write a function to check if a given number is a power of two.\n\n###Code: \n\ndef is_power_of_two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n\n\n###Testcases: \n\nassert is_power_of_two(16) == True\nassert is_power_of_two(20) == False\nassert is_power_of_two(1) == True\nassert is_power_of_two(64) == True\nassert is_power_of_two(1024) == True\nassert is_power_of_two(0) == False\nassert is_power_of_two(-16) == False\nassert is_power_of_two(15) == False\n\n[/Example 3]", "temperature": 0.921, "model_name": "gpt-3.5-turbo-1106"}]