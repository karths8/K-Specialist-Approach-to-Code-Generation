[{"few_shots": [{"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 692, "total_tokens": 948, "completion_tokens": 256, "completion": "Given a list of strings, write a function to group the strings by their anagrams. Anagrams are the strings which have the same characters but may be in a different order. Return a list of lists, where each inner list contains strings that are anagrams of each other.\n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs: list) -> list:\n    anagrams = defaultdict(list)\n    for s in strs:\n        sorted_s = ''.join(sorted(s))\n        anagrams[sorted_s].append(s)\n    return list(anagrams.values())\n```\n\n###Testcases: \n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\", \"tinsel\"]) == [['listen', 'silent', 'enlist', 'inlets', 'tinsel']]\nassert groupAnagrams([\"a\"]) == [['a']]\nassert groupAnagrams([]) == []\nassert groupAnagrams([\"abc\", \"def\", \"ghi\"]) == [['abc'], ['def'], ['ghi']]\n```", "temperature": 0.638, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 835, "total_tokens": 1133, "completion_tokens": 298, "completion": "Given a list of integers, find the number of unique pairs of elements in the list that sum up to a given target value.\n\n###Code: \n\n```python\ndef uniquePairsCount(arr: list, target: int) -> int:\n    unique_pairs = set()\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            pair = (min(num, complement), max(num, complement))\n            unique_pairs.add(pair)\n        seen.add(num)\n    \n    return len(unique_pairs)\n```\n\n###Testcases: \n\n```python\nassert uniquePairsCount([1, 3, 2, 2, 4, 0, 5, 4], 5) == 2\nassert uniquePairsCount([3, 3, 3, 3], 6) == 1\nassert uniquePairsCount([1, 2, 3, 4, 5], 6) == 2\nassert uniquePairsCount([1, 1, 1, 1], 2) == 1\nassert uniquePairsCount([5, 5, 5, 5, 5, 5], 10) == 1\nassert uniquePairsCount([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 0\n```", "temperature": 0.78, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 826, "total_tokens": 1080, "completion_tokens": 254, "completion": "You are given two strings s and t. Determine if they are isomorphic. Two strings are isomorphic if the characters in s can be replaced to get t.\n\n###Code: \n\n```python\ndef isIsomorphic(s: str, t: str) -> bool:\n    if len(s) != len(t):\n        return False\n\n    char_map = {}\n    used_chars = set()\n\n    for i in range(len(s)):\n        if s[i] in char_map:\n            if char_map[s[i]] != t[i]:\n                return False\n        else:\n            if t[i] in used_chars:\n                return False\n            char_map[s[i]] = t[i]\n            used_chars.add(t[i])\n\n    return True\n```\n\n###Testcases: \n\n```python\nassert isIsomorphic(\"egg\", \"add\") == True\nassert isIsomorphic(\"foo\", \"bar\") == False\nassert isIsomorphic(\"paper\", \"title\") == True\nassert isIsomorphic(\"badc\", \"baba\") == False\nassert isIsomorphic(\"\", \"\") == True\nassert isIsomorphic(\"ab\", \"aa\") == False\nassert isIsomorphic(\"ab\", \"ca\") == True\n```\n\n[/Example 3]", "temperature": 0.935, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 969, "total_tokens": 1246, "completion_tokens": 277, "completion": "Given two strings s and t, determine if they are isomorphic. Two strings are isomorphic if the characters in s can be replaced to get t. \n\n###Code: \n\ndef isIsomorphic(s: str, t: str) -> bool:\n        if len(s) != len(t):\n                return False\n        s_map = {}\n        t_map = {}\n        for i in range(len(s)):\n                if s[i] in s_map:\n                        if s_map[s[i]] != t[i]:\n                                return False\n                else:\n                        s_map[s[i]] = t[i]\n                \n                if t[i] in t_map:\n                        if t_map[t[i]] != s[i]:\n                                return False\n                else:\n                        t_map[t[i]] = s[i]\n        return True\n\n\n###Testcases: \n\nassert isIsomorphic(\"egg\", \"add\") == True\nassert isIsomorphic(\"foo\", \"bar\") == False\nassert isIsomorphic(\"paper\", \"title\") == True\nassert isIsomorphic(\"ab\", \"aa\") == False\nassert isIsomorphic(\"ab\", \"ca\") == True\nassert isIsomorphic(\"abcdef\", \"aabbcc\") == False\nassert isIsomorphic(\"xyz\", \"abc\") == True\nassert isIsomorphic(\"abc\", \"xyz\") == True\n\n[/Example 3]", "temperature": 0.838, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 927, "total_tokens": 1197, "completion_tokens": 270, "completion": "Given two strings s and t, determine if they are isomorphic. Two strings are isomorphic if the characters in s can be replaced to get t.\n\n###Code: \n\ndef isIsomorphic(s: str, t: str) -> bool:\n        if len(s) != len(t):\n                return False\n        map_s = {}\n        map_t = {}\n        for i in range(len(s)):\n                if s[i] in map_s:\n                        if map_s[s[i]] != t[i]:\n                                return False\n                else:\n                        map_s[s[i]] = t[i]\n                if t[i] in map_t:\n                        if map_t[t[i]] != s[i]:\n                                return False\n                else:\n                        map_t[t[i]] = s[i]\n        return True\n\n\n###Testcases: \n\nassert isIsomorphic(\"egg\", \"add\") == True\nassert isIsomorphic(\"foo\", \"bar\") == False\nassert isIsomorphic(\"paper\", \"title\") == True\nassert isIsomorphic(\"ab\", \"aa\") == False\nassert isIsomorphic(\"aa\", \"ab\") == False\nassert isIsomorphic(\"\", \"\") == True\nassert isIsomorphic(\"hello\", \"world\") == False\nassert isIsomorphic(\"good\", \"deed\") == True\n\n[/Example 3]", "temperature": 0.731, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 969, "total_tokens": 1264, "completion_tokens": 295, "completion": "Given two strings s and t, determine if they are isomorphic. Two strings are isomorphic if the characters in s can be replaced to get t. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.\n\n###Code: \n\ndef isIsomorphic(s: str, t: str) -> bool:\n        if len(s) != len(t):\n                return False\n        mapping_s = {}\n        mapping_t = {}\n        for i in range(len(s)):\n                if s[i] in mapping_s:\n                        if mapping_s[s[i]] != t[i]:\n                                return False\n                else:\n                        mapping_s[s[i]] = t[i]\n                if t[i] in mapping_t:\n                        if mapping_t[t[i]] != s[i]:\n                                return False\n                else:\n                        mapping_t[t[i]] = s[i]\n        return True\n\n\n###Testcases: \n\nassert isIsomorphic(\"egg\", \"add\") == True\nassert isIsomorphic(\"foo\", \"bar\") == False\nassert isIsomorphic(\"paper\", \"title\") == True\nassert isIsomorphic(\"ab\", \"aa\") == False\nassert isIsomorphic(\"13\", \"42\") == True\nassert isIsomorphic(\"ab\", \"ca\") == True\nassert isIsomorphic(\"ab\", \"aa\") == False\n\n[/Example 3]", "temperature": 0.63, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 793, "total_tokens": 1156, "completion_tokens": 363, "completion": "Given an array of integers, find the length of the longest subarray with the equal number of even and odd integers.\n\n###Code: \n\n```python\ndef longestSubarrayWithEqualEvenOdd(arr: list) -> int:\n    prefix_sum = 0\n    max_length = 0\n    prefix_sum_map = {0: -1}\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            prefix_sum += 1\n        else:\n            prefix_sum -= 1\n        \n        if prefix_sum in prefix_sum_map:\n            max_length = max(max_length, i - prefix_sum_map[prefix_sum])\n        else:\n            prefix_sum_map[prefix_sum] = i\n    \n    return max_length\n```\n\n###Testcases: \n\n```python\nassert longestSubarrayWithEqualEvenOdd([2, 2, 2, 1, 1, 1, 2, 2, 2]) == 8\nassert longestSubarrayWithEqualEvenOdd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\nassert longestSubarrayWithEqualEvenOdd([2, 4, 6, 8, 10, 12, 14, 16]) == 0\nassert longestSubarrayWithEqualEvenOdd([1, 3, 5, 7, 2, 4, 6, 8]) == 8\nassert longestSubarrayWithEqualEvenOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n```\n\n[/Example 3]", "temperature": 0.605, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 817, "total_tokens": 1200, "completion_tokens": 383, "completion": "You are given a string s and an integer k. You need to find the first longest subsequence with k distinct characters.\n\n###Code: \n\n```python\ndef longest_subsequence_with_k_distinct_chars(s: str, k: int) -> str:\n    n = len(s)\n    start, end = 0, 0\n    max_len = 0\n    max_start = 0\n    char_count = {}\n    distinct_chars = 0\n    \n    for end in range(n):\n        char_count[s[end]] = char_count.get(s[end], 0) + 1\n        if char_count[s[end]] == 1:\n            distinct_chars += 1\n            \n        while distinct_chars > k:\n            char_count[s[start]] -= 1\n            if char_count[s[start]] == 0:\n                distinct_chars -= 1\n            start += 1\n            \n        if end - start + 1 > max_len:\n            max_len = end - start + 1\n            max_start = start\n            \n    return s[max_start:max_start + max_len]\n```\n\n###Testcases: \n\n```python\nassert longest_subsequence_with_k_distinct_chars(\"abcba\", 2) == \"abcb\"\nassert longest_subsequence_with_k_distinct_chars(\"abacbd\", 3) == \"abacb\"\nassert longest_subsequence_with_k_distinct_chars(\"aaaaaa\", 1) == \"aaaaaa\"\nassert longest_subsequence_with_k_distinct_chars(\"aabbcc\", 2) == \"aabb\"\nassert longest_subsequence_with_k_distinct_chars(\"abcde\", 3) == \"abcde\"\nassert longest_subsequence_with_k_distinct_chars(\"aabbcc\", 3) == \"aabbcc\"\nassert longest_subsequence_with_k_distinct_chars(\"aabbcc\", 1) == \"aa\"\n```", "temperature": 0.737, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 761, "total_tokens": 1067, "completion_tokens": 306, "completion": "You are given two arrays of integers. Your task is to find the intersection of these two arrays. The intersection would be the set of elements that are present in both arrays.\n\n###Code: \n\ndef intersection(arr1: list, arr2: list) -> list:\n    set1 = set(arr1)\n    set2 = set(arr2)\n    return list(set1 & set2)\n\n\n###Testcases: \n\nassert intersection([1, 2, 2, 1], [2, 2]) == [2]\nassert intersection([4,9,5], [9,4,9,8,4]) == [9, 4]\nassert intersection([1, 3, 5, 7], [2, 4, 6, 8]) == []\nassert intersection([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4]\nassert intersection([1, 2, 3], [4, 5, 6]) == []\nassert intersection([1, 2, 2, 1], [2, 2, 2]) == [2]\nassert intersection([3, 3, 3, 3, 3], [3, 3, 3, 3, 3]) == [3]\nassert intersection([], [1, 2, 3]) == []\nassert intersection([], []) == []\n\n[/Example 3]", "temperature": 0.892, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 969, "total_tokens": 1262, "completion_tokens": 293, "completion": "Given two strings s and t, determine if they are isomorphic. Two strings are isomorphic if the characters in s can be replaced to get t. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.\n\n###Code: \n\ndef isIsomorphic(s: str, t: str) -> bool:\n        if len(s) != len(t):\n            return False\n        mapping_st = {}\n        mapping_ts = {}\n        for i in range(len(s)):\n            if s[i] in mapping_st:\n                if mapping_st[s[i]] != t[i]:\n                    return False\n            else:\n                mapping_st[s[i]] = t[i]\n                \n            if t[i] in mapping_ts:\n                if mapping_ts[t[i]] != s[i]:\n                    return False\n            else:\n                mapping_ts[t[i]] = s[i]\n        return True\n\n\n###Testcases: \n\nassert isIsomorphic(\"egg\", \"add\") == True\nassert isIsomorphic(\"foo\", \"bar\") == False\nassert isIsomorphic(\"paper\", \"title\") == True\nassert isIsomorphic(\"ab\", \"aa\") == False\nassert isIsomorphic(\"aa\", \"ab\") == False\nassert isIsomorphic(\"aba\", \"baa\") == False\nassert isIsomorphic(\"\", \"\") == True\n\n[/Example 3]", "temperature": 0.836, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 793, "total_tokens": 1066, "completion_tokens": 273, "completion": "Given a list of integers, write a function to return the indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n###Code: \n\ndef twoSum(nums: list, target: int) -> list:\n    num_map = {}\n    for i, num in enumerate(nums):\n        diff = target - num\n        if diff in num_map:\n            return [num_map[diff], i]\n        num_map[num] = i\n    return []\n\n\n###Testcases: \n\nassert twoSum([2, 7, 11, 15], 9) == [0, 1]\nassert twoSum([3, 2, 4], 6) == [1, 2]\nassert twoSum([3, 3], 6) == [0, 1]\nassert twoSum([0, 4, 3, 0], 0) == [0, 3]\nassert twoSum([-1, -2, -3, -4, -5], -8) == [2, 4]\nassert twoSum([5, 6, 7, 8, 9], 17) == [2, 4]\n\n\n[/Example 3]", "temperature": 0.833, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 895, "total_tokens": 1176, "completion_tokens": 281, "completion": "Given two arrays, write a function to compute their intersection.\n\n###Code: \n\ndef intersection(nums1: list, nums2: list) -> list:\n        nums1_set = set(nums1)\n        nums2_set = set(nums2)\n        return list(nums1_set & nums2_set)\n\n###Testcases: \n\nassert intersection([1, 2, 2, 1], [2, 2]) == [2]\nassert intersection([4, 9, 5], [9, 4, 9, 8, 4]) == [9, 4]\nassert intersection([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == []\nassert intersection([1, 1, 2, 2, 3, 3, 4, 4], [5, 5, 6, 6, 7, 7, 8, 8]) == []\nassert intersection([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert intersection([], [1, 2, 3]) == []\nassert intersection([], []) == []\n\n[/Example 3]", "temperature": 0.705, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 817, "total_tokens": 1039, "completion_tokens": 222, "completion": "Given two arrays, write a function to compute their intersection.\n\n###Code: \n\ndef intersection(nums1: list, nums2: list) -> list:\n    set1 = set(nums1)\n    set2 = set(nums2)\n    return list(set1.intersection(set2))\n\n###Testcases: \n\nassert intersection([1, 2, 2, 1], [2, 2]) == [2]\nassert intersection([4, 9, 5], [9, 4, 9, 8, 4]) == [9, 4]\nassert intersection([2, 3, 4, 7], [7, 2, 7, 3, 8]) == [2, 3, 7]\nassert intersection([1, 2, 3], [4, 5, 6]) == []\nassert intersection([], [1, 2, 3]) == []\nassert intersection([1, 1, 2, 2], [2, 2]) == [2]\n\n[/Example 3]", "temperature": 0.821, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 692, "total_tokens": 841, "completion_tokens": 149, "completion": "Given two strings s and t, return true if t is an anagram of s, and false otherwise.\n\n###Code: \n\n```python\ndef isAnagram(s: str, t: str) -> bool:\n    if len(s) != len(t):\n        return False\n    else:\n        return sorted(s) == sorted(t)\n```\n\n###Testcases: \n\n```python\nassert isAnagram(\"anagram\", \"nagaram\") == True\nassert isAnagram(\"rat\", \"car\") == False\nassert isAnagram(\"listen\", \"silent\") == True\nassert isAnagram(\"hello\", \"helo\") == False\nassert isAnagram(\"a\", \"ab\") == False\n```", "temperature": 0.691, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 835, "total_tokens": 1113, "completion_tokens": 278, "completion": "You are given an array of integers. Write a function to return the first non-repeating integer in the array. If there is no non-repeating integer, return -1.\n\n###Code:\n\n```python\ndef firstNonRepeating(arr: list) -> int:\n    count_map = {}\n    for num in arr:\n        if num in count_map:\n            count_map[num] += 1\n        else:\n            count_map[num] = 1\n    \n    for num in arr:\n        if count_map[num] == 1:\n            return num\n    return -1\n```\n\n###Testcases:\n\n```python\nassert firstNonRepeating([2, 3, 4, 2, 3, 5, 4]) == 5\nassert firstNonRepeating([1, 1, 1, 1, 1]) == -1\nassert firstNonRepeating([3, 5, 3, 4, 5, 6, 4]) == 6\nassert firstNonRepeating([7, 7, 7, 7, 7, 7, 7]) == -1\nassert firstNonRepeating([9, 8, 7, 8, 7, 6, 5]) == 9\n```\n\n[/Example 3]", "temperature": 0.818, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 969, "total_tokens": 1301, "completion_tokens": 332, "completion": "You are given two strings, s and t. You need to determine if they are isomorphic. Two strings are isomorphic if the characters in s can be replaced to get t. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.\n\nWrite a function isIsomorphic(s: str, t: str) -> bool to determine if two strings are isomorphic.\n\n###Code: \n\n```python\ndef isIsomorphic(s: str, t: str) -> bool:\n    if len(s) != len(t):\n        return False\n    mapping_s = {}\n    mapping_t = {}\n    for char_s, char_t in zip(s, t):\n        if char_s in mapping_s:\n            if mapping_s[char_s] != char_t:\n                return False\n        else:\n            mapping_s[char_s] = char_t\n        \n        if char_t in mapping_t:\n            if mapping_t[char_t] != char_s:\n                return False\n        else:\n            mapping_t[char_t] = char_s\n    return True\n```\n\n###Testcases: \n\n```python\nassert isIsomorphic(\"egg\", \"add\") == True\nassert isIsomorphic(\"foo\", \"bar\") == False\nassert isIsomorphic(\"paper\", \"title\") == True\nassert isIsomorphic(\"ab\", \"aa\") == False\nassert isIsomorphic(\"badc\", \"baba\") == False\nassert isIsomorphic(\"abcd\", \"efgh\") == True\nassert isIsomorphic(\"\", \"\") == True\n```", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 891, "total_tokens": 1212, "completion_tokens": 321, "completion": "You are given an array of integers, you need to find the count of subarrays whose sum is divisible by k.\n\n###Code: \n\n```python\ndef subarraysDivByK(arr: list, k: int) -> int:\n    count = 0\n    prefix_sum = 0\n    mod_count = {0: 1}\n    \n    for num in arr:\n        prefix_sum = (prefix_sum + num) % k\n        if prefix_sum < 0:\n            prefix_sum += k\n        count += mod_count.get(prefix_sum, 0)\n        mod_count[prefix_sum] = mod_count.get(prefix_sum, 0) + 1\n    \n    return count\n```\n\n###Testcases: \n\n```python\nassert subarraysDivByK([4, 5, 0, -2, -3, 1], 5) == 7\nassert subarraysDivByK([5, 10, 11, 9, 5], 5) == 7\nassert subarraysDivByK([2, 2, 2, 2, 2], 3) == 6\nassert subarraysDivByK([7, 14, 21, 28, 35], 7) == 15\nassert subarraysDivByK([3, 1, 2, 4], 3) == 3\nassert subarraysDivByK([1, 2, 3, 4, 5], 5) == 2\n```", "temperature": 0.871, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 859, "total_tokens": 1134, "completion_tokens": 275, "completion": "Given a list of strings, the task is to group the anagrams from the list.\n\n###Code: \n\ndef groupAnagrams(strs: list) -> list:\n        anagrams = {}\n        for s in strs:\n                sorted_s = ''.join(sorted(s))\n                if sorted_s in anagrams:\n                        anagrams[sorted_s].append(s)\n                else:\n                        anagrams[sorted_s] = [s]\n        return list(anagrams.values())\n\n\n###Testcases: \n\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\", \"tinsel\"]) == [['listen', 'silent', 'enlist', 'inlets', 'tinsel']]\nassert groupAnagrams([\"abc\", \"def\", \"ghi\", \"bcd\", \"efg\"]) == [['abc', 'bcd'], ['def', 'efg'], ['ghi']]\nassert groupAnagrams([\"a\"]) == [['a']]\nassert groupAnagrams([]) == []\nassert groupAnagrams([\"abc\", \"bca\", \"cab\", \"def\"]) == [['abc', 'bca', 'cab'], ['def']]\n\n[/Example 3]", "temperature": 0.7, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 761, "total_tokens": 1060, "completion_tokens": 299, "completion": "You are given an array of integers and a target sum. Find all pairs in the array that sum up to the target.\n\n###Code:\n\ndef find_pairs_with_sum(arr: list, target_sum: int) -> list:\n    pairs = []\n    seen = set()\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            pairs.append((num, complement))\n        seen.add(num)\n    return pairs\n    \n\n###Testcases:\n\nassert find_pairs_with_sum([3, 1, 4, 6, 5, 8, 2, 9], 10) == [(4, 6), (2, 8)]\nassert find_pairs_with_sum([5, 7, 2, 8, 4, 3], 10) == [(7, 3), (8, 2)]\nassert find_pairs_with_sum([1, 2, 3, 4, 5], 10) == [(5, 5)]\nassert find_pairs_with_sum([1, 2, 3, 4, 5], 12) == []\nassert find_pairs_with_sum([10, 20, 30, 40, 50], 50) == [(20, 30)]\nassert find_pairs_with_sum([5, 5, 5, 5, 5], 10) == [(5, 5)]\n\n[/Example 3]", "temperature": 0.871, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 891, "total_tokens": 1282, "completion_tokens": 391, "completion": "Given two arrays of integers, write a function to determine if the two arrays are equal. Two arrays are considered equal if both arrays contain the same set of elements, and the frequency of each element is the same in both arrays.\n\n###Code: \n\ndef areArraysEqual(arr1: list, arr2: list) -> bool:\n    if len(arr1) != len(arr2):\n        return False\n    dict1 = {}\n    dict2 = {}\n    for num in arr1:\n        dict1[num] = dict1.get(num, 0) + 1\n    for num in arr2:\n        dict2[num] = dict2.get(num, 0) + 1\n    return dict1 == dict2\n    \n\n###Testcases: \n\nassert areArraysEqual([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == True\nassert areArraysEqual([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]) == False\nassert areArraysEqual([1, 2, 2, 3, 4, 5], [5, 4, 3, 2, 2, 1]) == True\nassert areArraysEqual([1, 2, 3, 4, 5], [1, 2, 3, 4, 4]) == False\nassert areArraysEqual([1, 2, 3, 4, 5], [1, 2, 3, 5, 5]) == False\nassert areArraysEqual([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\n\n[/Example 3]", "temperature": 0.688, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 761, "total_tokens": 1006, "completion_tokens": 245, "completion": "Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n###Code: \n\n```python\ndef two_sum(nums: list, target: int) -> list:\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return [num_dict[complement], i]\n        num_dict[num] = i\n    return []\n```\n\n###Testcases: \n\n```python\nassert two_sum([2, 7, 11, 15], 9) == [0, 1]\nassert two_sum([3, 2, 4], 6) == [1, 2]\nassert two_sum([3, 3], 6) == [0, 1]\nassert two_sum([0, 4, 3, 0], 0) == [0, 3]\nassert two_sum([-1, -2, -3, -4, -5], -8) == [2, 4]\n```", "temperature": 0.907, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 692, "total_tokens": 952, "completion_tokens": 260, "completion": "Given a list of strings, find the group of anagrams. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. \n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs: List[str]) -> List[List[str]]:\n    groups = defaultdict(list)\n    for s in strs:\n        groups[tuple(sorted(s))].append(s)\n    return list(groups.values())\n```\n\n###Testcases: \n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\", \"hello\", \"world\"]) == [['listen', 'silent', 'enlist', 'inlets'], ['hello'], ['world']]\nassert groupAnagrams([\"debitcard\", \"badcredit\", \"elvis\", \"lives\", \"silent\", \"listen\", \"levis\"]) == [['debitcard', 'badcredit'], ['elvis', 'lives', 'silent', 'listen', 'levis']]\n```\n\n[/Example 3]", "temperature": 0.74, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 895, "total_tokens": 1255, "completion_tokens": 360, "completion": "Given a list of integers, return the majority element if it exists. The majority element is the element that appears more than \u230a n/2 \u230b times where n is the length of the list. If there is no majority element, return -1.\n\n###Code: \n\ndef majorityElement(nums: list) -> int:\n        count = 0\n        candidate = None\n        \n        for num in nums:\n                if count == 0:\n                    candidate = num\n                count += (1 if num == candidate else -1)\n        \n        count = 0\n        for num in nums:\n            if num == candidate:\n                count += 1\n        \n        return candidate if count > len(nums) // 2 else -1\n\n###Testcases: \n\nassert majorityElement([3, 3, 4, 2, 4, 4, 2, 4, 4]) == 4\nassert majorityElement([1, 2, 3, 4, 4, 4, 4]) == 4\nassert majorityElement([1, 1, 1, 1, 2, 3, 4]) == 1\nassert majorityElement([1, 2, 3, 4, 5, 6, 7]) == -1\nassert majorityElement([8, 8, 8, 8, 8, 8, 8, 8]) == 8\nassert majorityElement([1, 2, 1, 2, 1, 2, 1, 2]) == -1\nassert majorityElement([1]) == 1\nassert majorityElement([]) == -1\n\n[/Example 3]", "temperature": 0.788, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 859, "total_tokens": 1209, "completion_tokens": 350, "completion": "Given two arrays of integers, write a function to determine if one array is a permutation of the other.\n\n###Code: \n\ndef is_permutation(arr1: list, arr2: list) -> bool:\n        if len(arr1) != len(arr2):\n                return False\n        dict1 = {}\n        dict2 = {}\n        for num in arr1:\n                if num in dict1:\n                        dict1[num] += 1\n                else:\n                        dict1[num] = 1\n        for num in arr2:\n                if num in dict2:\n                        dict2[num] += 1\n                else:\n                        dict2[num] = 1\n        return dict1 == dict2\n\n\n###Testcases: \n\nassert is_permutation([1, 2, 3, 4], [2, 1, 4, 3]) == True\nassert is_permutation([1, 2, 3, 4], [2, 1, 4, 4]) == False\nassert is_permutation([1, 2, 3], [3, 1, 2, 4]) == False\nassert is_permutation([1, 2, 2, 3, 3, 3], [3, 3, 3, 2, 2, 1]) == True\nassert is_permutation([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == True\nassert is_permutation([1, 2, 3], [1, 2, 3]) == True\n\n[/Example 3]", "temperature": 0.868, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 716, "total_tokens": 1057, "completion_tokens": 341, "completion": "Given an array, find the length of the longest subarray which contains numbers that can be arranged in a continuous sequence. Return 0 if no such subarray exists.\n\n###Code: \n\n```python\ndef longest_continuous_subarray(arr: list) -> int:\n    max_length = 0\n    for i in range(len(arr)):\n        subarray_set = set()\n        for j in range(i, len(arr)):\n            if arr[j] in subarray_set:\n                break\n            subarray_set.add(arr[j])\n            if max(subarray_set) - min(subarray_set) == j - i:\n                max_length = max(max_length, j - i + 1)\n    return max_length\n```\n\n###Testcases: \n\n```python\nassert longest_continuous_subarray([10, 4, 20, 1, 3, 4, 2]) == 4\nassert longest_continuous_subarray([5, 5, 3, 2, 8]) == 3\nassert longest_continuous_subarray([1, 2, 3, 3, 4, 5, 6]) == 5\nassert longest_continuous_subarray([8, 8, 9, 9, 9]) == 2\nassert longest_continuous_subarray([1, 2, 3, 3, 4, 4, 5, 5, 6]) == 5\nassert longest_continuous_subarray([5, 4, 3, 2, 1]) == 0\nassert longest_continuous_subarray([1]) == 1\n```\n\n[/Example 3]", "temperature": 0.915, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 761, "total_tokens": 1051, "completion_tokens": 290, "completion": "You are given an array of integers. Your task is to find all unique pairs in the array that sum up to a specific target sum.\n\n###Code:\n\ndef find_pairs(arr: list, target_sum: int) -> list:\n    pair_set = set()\n    result = []\n    for num in arr:\n        complement = target_sum - num\n        if complement in pair_set:\n            result.append((complement, num))\n        else:\n            pair_set.add(num)\n    return result\n\n###Testcases:\n\nassert find_pairs([1, 3, 5, 7, 9, 2, 4, 6, 8], 10) == [(3, 7), (2, 8), (4, 6)]\nassert find_pairs([1, 2, 3, 4, 5, 6], 7) == [(3, 4), (2, 5), (1, 6)]\nassert find_pairs([1, 2, 3, 4, 5, 6], 12) == []\nassert find_pairs([2, 4, 3, 5, 6, -2, 4, 7, 8, 9], 7) == [(2, 5), (4, 3), (7, 0), (9, -2)]\n\n[/Example 3]", "temperature": 0.869, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 793, "total_tokens": 1032, "completion_tokens": 239, "completion": "You are given an array of integers, and you have to find the first non-repeating integer in the array. If there is no non-repeating integer, then return -1.\n\n###Code: \n\n```python\ndef firstNonRepeating(arr: list) -> int:\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n            \n    for num in arr:\n        if count[num] == 1:\n            return num\n            \n    return -1\n```\n\n###Testcases: \n\n```python\nassert firstNonRepeating([2, 3, 5, 3, 7, 5]) == 2\nassert firstNonRepeating([10, 20, 20, 30, 40, 30, 10, 50]) == 40\nassert firstNonRepeating([3, 3, 3, 3, 3]) == -1\nassert firstNonRepeating([1]) == 1\nassert firstNonRepeating([]) == -1\n```\n\n[/Example 3]", "temperature": 0.907, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 793, "total_tokens": 993, "completion_tokens": 200, "completion": "You are given a list of strings. Write a function to group the anagrams together.\n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs: List[str]) -> List[List[str]]:\n    ans = defaultdict(list)\n    for s in strs:\n        ans[tuple(sorted(s))].append(s)\n    return ans.values()\n```\n\n###Testcases: \n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\"]) == [['listen', 'silent', 'inlets'], ['enlist']]\nassert groupAnagrams([\"a\"]) == [['a']]\nassert groupAnagrams([]) == []\nassert groupAnagrams([\"abc\", \"def\", \"ghi\"]) == [['abc'], ['def'], ['ghi']]\n```", "temperature": 0.903, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 793, "total_tokens": 1052, "completion_tokens": 259, "completion": "You are given two strings, s and t. You need to check whether you can construct t by concatenating the substrings of s. \n\n###Code: \n\ndef canConstruct(s: str, t: str) -> bool:\n    if len(s) == 0 and len(t) == 0:\n        return True\n    if len(s) == 0 or len(t) == 0:\n        return False\n    s_count = {}\n    t_count = {}\n    for char in s:\n        s_count[char] = s_count.get(char, 0) + 1\n    for char in t:\n        t_count[char] = t_count.get(char, 0) + 1\n    for key in t_count:\n        if key not in s_count or s_count[key] < t_count[key]:\n            return False\n    return True\n\n\n###Testcases: \n\nassert canConstruct(\"abcdef\", \"aabbccddeeff\") == True\nassert canConstruct(\"xyz\", \"xxyyzz\") == True\nassert canConstruct(\"a\", \"b\") == False\nassert canConstruct(\"aa\", \"ab\") == False\nassert canConstruct(\"\", \"a\") == False\nassert canConstruct(\"aaa\", \"aaaa\") == True\n\n", "temperature": 0.684, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 748, "total_tokens": 1048, "completion_tokens": 300, "completion": "Given a list of strings, find the group of anagrams. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs: List[str]) -> List[List[str]]:\n    anagrams_map = defaultdict(list)\n    for s in strs:\n        count = [0] * 26\n        for ch in s:\n            count[ord(ch) - ord('a')] += 1\n        anagrams_map[tuple(count)].append(s)\n    return list(anagrams_map.values())\n```\n\n\n###Testcases: \n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\", \"tinsel\"]) == [['listen', 'silent', 'enlist', 'inlets', 'tinsel']]\nassert groupAnagrams([\"abc\", \"def\", \"cba\", \"fed\", \"bca\", \"edf\"]) == [['abc', 'cba', 'bca'], ['def', 'fed', 'edf']]\nassert groupAnagrams([\"a\"]) == [['a']]\nassert groupAnagrams([\"\"]) == [['']]\n```\n\n\n[/Example 3]", "temperature": 0.664, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 748, "total_tokens": 1014, "completion_tokens": 266, "completion": "Write a function to find the length of the longest consecutive sequence of elements present in an unsorted array of integers.\n\n###Code:\n\n```python\ndef longestConsecutive(nums: list) -> int:\n    num_set = set(nums)\n    max_length = 0\n    \n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            \n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            \n            max_length = max(max_length, current_length)\n    \n    return max_length\n```\n\n###Testcases:\n\n```python\nassert longestConsecutive([100, 4, 200, 1, 3, 2]) == 4\nassert longestConsecutive([0, 3, 7, 2, 5, 8, 4, 6, 0, 1]) == 9\nassert longestConsecutive([1, 9, 3, 10, 4, 20, 2]) == 4\nassert longestConsecutive([1, 2, 0, 1]) == 3\nassert longestConsecutive([]) == 0\n```\n\n[/Example 3]", "temperature": 0.991, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 969, "total_tokens": 1257, "completion_tokens": 288, "completion": "Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n###Code: \n\ndef twoSum(nums: list, target: int) -> list:\n        hash_table = {}\n        for i, num in enumerate(nums):\n                complement = target - num\n                if complement in hash_table:\n                        return [hash_table[complement], i]\n                hash_table[num] = i\n        return []\n\n\n###Testcases: \n\nassert twoSum([2, 7, 11, 15], 9) == [0, 1]\nassert twoSum([3, 2, 4], 6) == [1, 2]\nassert twoSum([3, 3], 6) == [0, 1]\nassert twoSum([-1, -2, -3, -4, -5], -8) == [2, 4]\nassert twoSum([0, 4, 3, 0], 0) == [0, 3]\nassert twoSum([-3, 4, 3, 90], 0) == [0, 2]\nassert twoSum([3, 2, 3], 6) == [0, 2]\n\n[/Example 3]", "temperature": 0.672, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 859, "total_tokens": 1109, "completion_tokens": 250, "completion": "Given two strings, write a function to determine if one is a permutation of the other.\n\n###Code:\n\n```python\ndef is_permutation(str1: str, str2: str) -> bool:\n    if len(str1) != len(str2):\n        return False\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str2:\n        if char in char_count:\n            char_count[char] -= 1\n            if char_count[char] < 0:\n                return False\n        else:\n            return False\n    return True\n```\n\n###Testcases:\n\n```python\nassert is_permutation('abc', 'bca') == True\nassert is_permutation('abc', 'aaa') == False\nassert is_permutation('abcd', 'dcba') == True\nassert is_permutation('hello', 'ollhe') == True\nassert is_permutation('abc', 'abcd') == False\nassert is_permutation('aaa', 'aa') == False\nassert is_permutation('', '') == True\n```\n\n[/Example 3]", "temperature": 0.946, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 790, "total_tokens": 1051, "completion_tokens": 261, "completion": "Given a list of strings, find the group of anagrams present in the list.\n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs: list) -> list:\n    anagrams = defaultdict(list)\n    for s in strs:\n        count = [0] * 26\n        for c in s:\n            count[ord(c) - ord('a')] += 1\n        anagrams[tuple(count)].append(s)\n    return list(anagrams.values())\n```\n\n###Testcases: \n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\", \"tinsel\"]) == [['listen', 'silent', 'enlist', 'inlets', 'tinsel']]\nassert groupAnagrams([\"abc\", \"def\", \"cba\", \"fed\", \"bca\", \"efg\"]) == [['abc', 'cba', 'bca'], ['def', 'fed'], ['efg']]\nassert groupAnagrams([\"a\"]) == [['a']]\nassert groupAnagrams([]) == []\n```", "temperature": 0.647, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 859, "total_tokens": 1080, "completion_tokens": 221, "completion": "Write a function to find the first non-repeating character in a string. Return the first non-repeating character, or \"_\" if there are no non-repeating characters.\n\n###Code: \n\ndef firstNonRepeatingChar(s: str) -> str:\n        char_count = {}\n        for char in s:\n                if char in char_count:\n                        char_count[char] += 1\n                else:\n                        char_count[char] = 1\n        for char in s:\n                if char_count[char] == 1:\n                        return char\n        return \"_\"\n\n\n###Testcases: \n\nassert firstNonRepeatingChar(\"leetcode\") == \"l\"\nassert firstNonRepeatingChar(\"loveleetcode\") == \"v\"\nassert firstNonRepeatingChar(\"aabbccdd\") == \"_\"\nassert firstNonRepeatingChar(\"abcabc\") == \"_\"\nassert firstNonRepeatingChar(\"hello\") == \"h\"\nassert firstNonRepeatingChar(\"h\") == \"h\"\nassert firstNonRepeatingChar(\"abracadabra\") == \"c\"\n\n[/Example 3]", "temperature": 0.979, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 761, "total_tokens": 1012, "completion_tokens": 251, "completion": "Given a list of strings, write a function to group the anagrams together.\n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef group_anagrams(strs: list) -> list:\n    grouped_anagrams = defaultdict(list)\n    for s in strs:\n        grouped_anagrams[str(sorted(s))].append(s)\n    return list(grouped_anagrams.values())\n```\n\n###Testcases: \n\n```python\nassert group_anagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert group_anagrams([\"listen\", \"silent\", \"triangle\", \"integral\", \"learn\", \"nat\", \"bat\"]) == [['listen', 'silent'], ['triangle', 'integral'], ['learn'], ['nat', 'bat']]\nassert group_anagrams([\"debitcard\", \"elvis\", \"silent\", \"badcredit\", \"lives\", \"freedom\", \"listen\", \"levis\", \"money\"]) == [['debitcard', 'badcredit'], ['elvis', 'lives', 'levis'], ['silent', 'listen'], ['freedom'], ['money']]\n```\n\n[/Example 3]", "temperature": 0.906, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 891, "total_tokens": 1121, "completion_tokens": 230, "completion": "Given an array of integers, find two numbers such that they add up to a specific target number.\n\n###Code:\n\n```python\ndef twoSum(nums: List[int], target: int) -> List[int]:\n    hash_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in hash_map:\n            return [hash_map[complement], i]\n        hash_map[num] = i\n    return []\n```\n\n###Test cases:\n\n```python\nassert twoSum([2, 7, 11, 15], 9) == [0, 1]\nassert twoSum([3, 2, 4], 6) == [1, 2]\nassert twoSum([3, 3], 6) == [0, 1]\nassert twoSum([1, 5, 2, -3, 7, 9], 6) == [1, 4]\nassert twoSum([0, 4, 3, 0], 0) == [0, 3]\n``` \n\n[/Example 3]", "temperature": 0.961, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 793, "total_tokens": 1188, "completion_tokens": 395, "completion": "You are given two arrays of integers, arr1 and arr2. Your task is to find the intersection of the two arrays. The intersection of two arrays is a list of distinct numbers that appear in both arrays. \n\n###Code: \n\ndef intersection(arr1: list, arr2: list) -> list:\n    set1 = set(arr1)\n    set2 = set(arr2)\n    return list(set1.intersection(set2))\n\n###Testcases: \n\nassert intersection([1, 2, 2, 1], [2, 2]) == [2]\nassert intersection([4, 9, 5], [9, 4, 9, 8, 4]) == [9, 4]\nassert intersection([2, 3, 4, 1, 5], [2, 4, 6]) == [2, 4]\nassert intersection([1, 1, 1, 1, 1], [1, 1, 1]) == [1]\nassert intersection([7, 8, 9], [4, 5, 6]) == []\n\n###Extra Testcases:\n\nassert intersection([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == []\nassert intersection([3, 4, 5, 6, 7], [1, 2, 3, 4, 5]) == [3, 4, 5]\nassert intersection([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert intersection([], [1, 2, 3, 4, 5]) == []\nassert intersection([], []) == []\n\n[/Example 3]", "temperature": 0.776, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 871, "total_tokens": 1061, "completion_tokens": 190, "completion": "Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n###Code: \n\ndef twoSum(nums: List[int], target: int) -> List[int]:\n    hash_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in hash_map:\n            return [hash_map[complement], i]\n        hash_map[num] = i\n    return []\n\n###Testcases: \n\nassert twoSum([2, 7, 11, 15], 9) == [0, 1]\nassert twoSum([3, 2, 4], 6) == [1, 2]\nassert twoSum([3, 3], 6) == [0, 1]\n\n[/Example 3]", "temperature": 0.783, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 817, "total_tokens": 1086, "completion_tokens": 269, "completion": "Given two arrays, write a function to compute their intersection.\n\n###Code: \n\ndef intersection(nums1: List[int], nums2: List[int]) -> List[int]:\n        intersect = []\n        num_count = {}\n        for num in nums1:\n            if num in num_count:\n                num_count[num] += 1\n            else:\n                num_count[num] = 1\n        for num in nums2:\n            if num in num_count and num_count[num] > 0:\n                intersect.append(num)\n                num_count[num] -= 1\n        return intersect\n\n\n###Testcases: \n\nassert intersection([1, 2, 2, 1], [2, 2]) == [2, 2]\nassert intersection([4, 9, 5], [9, 4, 9, 8, 4]) == [4, 9]\nassert intersection([1, 2, 2, 1], [2]) == [2]\nassert intersection([1, 2, 3, 4], [5, 6, 7, 8]) == []\nassert intersection([], [1, 2, 3, 4]) == []\nassert intersection([1, 1], [1]) == [1]\n\n[/Example 3]", "temperature": 0.698, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 790, "total_tokens": 1020, "completion_tokens": 230, "completion": "Given two strings, write a function to determine if one string is a permutation of the other. \n\n###Code: \n\n```python\ndef checkPermutation(s1: str, s2: str) -> bool:\n    if len(s1) != len(s2):\n        return False\n    char_count = {}\n    for char in s1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s2:\n        if char in char_count:\n            char_count[char] -= 1\n            if char_count[char] < 0:\n                return False\n        else:\n            return False\n    return True\n```\n\n###Testcases: \n\n```python\nassert checkPermutation('abc', 'bca') == True\nassert checkPermutation('abc', 'abcd') == False\nassert checkPermutation('aaabbb', 'ababab') == True\nassert checkPermutation('hello', 'world') == False\nassert checkPermutation('12345', '54321') == True\n```", "temperature": 0.988, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 826, "total_tokens": 1117, "completion_tokens": 291, "completion": "Given two strings s and t, determine if they are isomorphic. Two strings are isomorphic if the characters in s can be replaced to get t. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.\n\n###Code: \n\n```python\ndef isIsomorphic(s: str, t: str) -> bool:\n    if len(s) != len(t):\n        return False\n    s_map = {}\n    t_map = {}\n    for i in range(len(s)):\n        s_char = s[i]\n        t_char = t[i]\n        if s_char in s_map:\n            if s_map[s_char] != t_char:\n                return False\n        else:\n            s_map[s_char] = t_char\n        if t_char in t_map:\n            if t_map[t_char] != s_char:\n                return False\n        else:\n            t_map[t_char] = s_char\n    return True\n```\n\n###Testcases: \n\n```python\nassert isIsomorphic(\"egg\", \"add\") == True\nassert isIsomorphic(\"foo\", \"bar\") == False\nassert isIsomorphic(\"paper\", \"title\") == True\nassert isIsomorphic(\"ab\", \"aa\") == False\nassert isIsomorphic(\"ab\", \"ca\") == True\n```\n\n[/Example 3]", "temperature": 0.758, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 969, "total_tokens": 1227, "completion_tokens": 258, "completion": "Given two arrays, write a function to compute their intersection.\n\n###Code: \n\ndef intersect(nums1: list, nums2: list) -> list:\n    result = []\n    num_count = {}\n    for num in nums1:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    for num in nums2:\n        if num in num_count and num_count[num] > 0:\n            result.append(num)\n            num_count[num] -= 1\n    return result\n\n###Testcases: \n\nassert intersect([1, 2, 2, 1], [2, 2]) == [2, 2]\nassert intersect([4, 9, 5], [9, 4, 9, 8, 4]) == [4, 9]\nassert intersect([1, 2, 3, 4], [5, 6, 7, 8]) == []\nassert intersect([1, 1, 2, 2, 3, 3], [2, 2, 3, 3]) == [2, 2, 3, 3]\n\n[/Example 3]", "temperature": 0.891, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 835, "total_tokens": 1105, "completion_tokens": 270, "completion": "You are given an array of integers. Your task is to find the first repeating element in the array of integers.\n\n###Code:\n\n```python\ndef firstRepeatingElement(arr: list) -> int:\n    hash_set = set()\n    min_index = -1\n\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] in hash_set:\n            min_index = i\n        else:\n            hash_set.add(arr[i])\n\n    if min_index != -1:\n        return arr[min_index]\n    else:\n        return -1\n```\n\n###Testcases:\n\n```python\nassert firstRepeatingElement([10, 5, 3, 4, 3, 5, 6]) == 5\nassert firstRepeatingElement([1, 2, 3, 4, 5, 6]) == -1\nassert firstRepeatingElement([7, 8, 8, 7]) == 8\nassert firstRepeatingElement([10, 5, 3, 4, 3, 5, 6, 6]) == 3\nassert firstRepeatingElement([1, 1, 1, 1, 1]) == 1\n```\n\n[/Example 3]", "temperature": 0.868, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 895, "total_tokens": 1161, "completion_tokens": 266, "completion": "Given a list of integers, return the majority element if it exists. The majority element is the element that appears more than n/2 times where n is the length of the list.\n\n###Code: \n\ndef majorityElement(nums: list) -> int:\n        count = {}\n        for num in nums:\n                if num in count:\n                        count[num] += 1\n                else:\n                        count[num] = 1\n                if count[num] > len(nums) // 2:\n                        return num\n        return -1\n\n###Testcases: \n\nassert majorityElement([3, 2, 3]) == 3\nassert majorityElement([2, 2, 1, 1, 1, 2, 2]) == 2\nassert majorityElement([3, 3, 4]) == 3\nassert majorityElement([3, 3, 4, 4, 4]) == 4\nassert majorityElement([1]) == 1\nassert majorityElement([8, 8, 7, 8, 7, 8, 8]) == 8\nassert majorityElement([10, 10, 20, 10, 30, 10, 10]) == 10\n\n[/Example 3]", "temperature": 0.826, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 927, "total_tokens": 1254, "completion_tokens": 327, "completion": "You are given an array of integers, and you need to find the total number of continuous subarrays whose sum is divisible by k.\n\n###Code:\n\n```python\ndef subarraysDivByK(arr: List[int], k: int) -> int:\n        count = 0\n        prefix_sum = 0\n        mod_freq = {0: 1}\n        for a in arr:\n            prefix_sum = (prefix_sum + a) % k\n            if prefix_sum < 0:\n                prefix_sum += k  # Handle negative remainder\n            count += mod_freq.get(prefix_sum, 0)\n            mod_freq[prefix_sum] = mod_freq.get(prefix_sum, 0) + 1\n        return count\n```\n\n###Testcases:\n\n```python\nassert subarraysDivByK([4, 5, 0, -2, -3, 1], 5) == 7\nassert subarraysDivByK([7, 4, 8], 7) == 0\nassert subarraysDivByK([5, 10, 11, 9, 5], 5) == 3\nassert subarraysDivByK([0, 0, 0, 0, 0], 5) == 15\nassert subarraysDivByK([2, -2, 2, -4], 6) == 5\nassert subarraysDivByK([3, 1, 2, 1, 7], 8) == 2\n```\n\n[/Example 3]", "temperature": 0.815, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 871, "total_tokens": 1104, "completion_tokens": 233, "completion": "Given a list of words, group all the anagrams together.\n\n###Code: \n\ndef groupAnagrams(words: List[str]) -> List[List[str]]:\n    anagrams = {}\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        if sorted_word in anagrams:\n            anagrams[sorted_word].append(word)\n        else:\n            anagrams[sorted_word] = [word]\n    return list(anagrams.values())\n\n\n###Testcases: \n\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\", \"tinsel\"]) ==[['listen', 'silent', 'enlist', 'inlets', 'tinsel']]\nassert groupAnagrams([]) == []\nassert groupAnagrams([\"a\"]) == [[\"a\"]]\nassert groupAnagrams([\"abc\", \"def\", \"cba\", \"fed\"]) == [[\"abc\", \"cba\"], [\"def\", \"fed\"]]\n\n[/Example 3]", "temperature": 0.992, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 859, "total_tokens": 1168, "completion_tokens": 309, "completion": "Given a list of integers, find the length of the longest subarray with a sum that equals k.\n\n###Code: \n\n```python\ndef maxSubArrayLen(nums: List[int], k: int) -> int:\n        max_len = 0\n        prefix_sum = 0\n        prefix_sum_index = {0: -1}\n        \n        for i in range(len(nums)):\n            prefix_sum += nums[i]\n            if prefix_sum - k in prefix_sum_index:\n                max_len = max(max_len, i - prefix_sum_index[prefix_sum - k])\n            if prefix_sum not in prefix_sum_index:\n                prefix_sum_index[prefix_sum] = i\n                \n        return max_len\n```\n\n\n###Testcases: \n\n```python\nassert maxSubArrayLen([1, -1, 5, -2, 3], 3) == 4\nassert maxSubArrayLen([-2, -1, 2, 1], 1) == 2\nassert maxSubArrayLen([1, 2, 3], 3) == 2\nassert maxSubArrayLen([1, 0, -1], -1) == 2\nassert maxSubArrayLen([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0) == 10\nassert maxSubArrayLen([5], 5) == 1\n```\n\n[/Example 3]", "temperature": 0.809, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 927, "total_tokens": 1355, "completion_tokens": 428, "completion": "Given an array of integers and a target value, find all unique combinations in the array where the sum of the elements is equal to the target value. Each number in the array may only be used once in the combination.\n\n###Code: \n\n```python\ndef combinationSum(arr: list, target: int) -> list:\n    def backtrack(start, target, path, result):\n        if target < 0:\n            return\n        if target == 0:\n            result.append(path)\n            return\n        for i in range(start, len(arr)):\n            if i > start and arr[i] == arr[i-1]:\n                continue\n            backtrack(i+1, target-arr[i], path+[arr[i]], result)\n    \n    arr.sort()\n    result = []\n    backtrack(0, target, [], result)\n    return result\n```\n\n###Testcases: \n\n```python\nassert combinationSum([10, 1, 2, 7, 6, 1, 5], 8) == [[1, 1, 6], [1, 2, 5], [1, 7], [2, 6]]\nassert combinationSum([2, 5, 2, 1, 2], 5) == [[1, 2, 2], [5]]\nassert combinationSum([2, 3, 6, 7], 7) == [[7]]\nassert combinationSum([2, 3, 5], 8) == [[3, 5]]\nassert combinationSum([1, 1, 1, 1, 1, 1, 1], 3) == [[1, 1, 1]]\nassert combinationSum([4, 5, 6], 8) == [[4, 5]]\nassert combinationSum([1, 2, 3, 4, 5], 10) == [[1, 2, 3, 4], [1, 2, 3, 4]]\n```\n\n[/Example 3]", "temperature": 0.697, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 895, "total_tokens": 1306, "completion_tokens": 411, "completion": "Given a list of words, group all words with the same pattern in a list.\n\n###Code: \n\ndef group_words_by_pattern(words: List[str]) -> Dict[str, List[str]]:\n    def get_pattern(word: str) -> str:\n        pattern = {}\n        pattern_str = ''\n        count = 0\n        for char in word:\n            if char not in pattern:\n                pattern[char] = count\n                count += 1\n            pattern_str += str(pattern[char])\n        return pattern_str\n\n    word_map = {}\n    for word in words:\n        pattern = get_pattern(word)\n        if pattern in word_map:\n            word_map[pattern].append(word)\n        else:\n            word_map[pattern] = [word]\n    return word_map\n\n\n###Testcases: \n\nassert group_words_by_pattern([\"abc\", \"dce\", \"xyx\", \"yzy\", \"efg\", \"aba\"]) == {'012': ['abc', 'efg'], '345': ['dce'], '678': ['xyx', 'yzy', 'aba']}\nassert group_words_by_pattern([\"hello\", \"world\", \"goodbye\", \"moon\", \"welcome\"]) == {'01234': ['hello', 'world', 'moon'], '567889': ['goodbye', 'welcome']}\nassert group_words_by_pattern([\"a\", \"b\", \"c\", \"d\", \"e\"]) == {'0': ['a', 'b', 'c', 'd', 'e']}\nassert group_words_by_pattern([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]) == {'01234': ['apple', 'banana', 'cherry', 'date', 'grape'], '45': ['fig']}\nassert group_words_by_pattern([]) == {}\nassert group_words_by_pattern([\"aa\", \"bb\", \"cc\", \"dd\", \"ee\"]) == {'0': ['aa', 'bb', 'cc', 'dd', 'ee']}\n\n[/Example 3]", "temperature": 0.838, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 826, "total_tokens": 1116, "completion_tokens": 290, "completion": "Given a list of integers and a target sum, find all pairs of distinct elements that sum up to the target. \n\n###Code: \n\n```python\ndef findPairs(arr: list, target: int) -> list:\n    pairs = []\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            pairs.append((num, complement))\n        seen.add(num)\n    return pairs\n```\n\n###Testcases: \n\n```python\nassert findPairs([1, 2, 4, 5, 6, 3, 2], 6) == [(2, 4), (3, 3)]\nassert findPairs([3, 1, 4, 5, 6, 2, 7, 8], 10) == [(3, 7), (4, 6)]\nassert findPairs([1, 2, 3, 4, 5, 6], 10) == [(4, 6)]\nassert findPairs([1, 2, 3, 4, 5, 6], 12) == []\nassert findPairs([1, 2, 3, 4, 5, 6], 7) == [(1, 6), (2, 5), (3, 4)]\n```\n\n[/Example 3]", "temperature": 0.894, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 761, "total_tokens": 1004, "completion_tokens": 243, "completion": "Given an array of integers, return indices of the two numbers such that they add up to a specific target.\n\n###Code: \n\ndef two_sum(nums: List[int], target: int) -> List[int]:\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []\n\n\n###Testcases: \n\nassert two_sum([2, 7, 11, 15], 9) == [0, 1]\nassert two_sum([3, 2, 4], 6) == [1, 2]\nassert two_sum([3, 3], 6) == [0, 1]\nassert two_sum([0, 4, 3, 0], 0) == [0, 3]\nassert two_sum([-1, -2, -3, -4, -5], -8) == [2, 4]\nassert two_sum([3, 1, 3], 6) == [0, 2]\n\n[/Example 3]", "temperature": 0.683, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 891, "total_tokens": 1218, "completion_tokens": 327, "completion": "Given a list of integers, find the length of the longest subarray with equal number of 0s and 1s.\n\n###Code:\n\n```python\ndef longestSubarrayWithEqualZerosOnes(nums: List[int]) -> int:\n    count = 0\n    max_len = 0\n    hash_map = {0: -1}\n    \n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count -= 1\n        else:\n            count += 1\n        \n        if count in hash_map:\n            max_len = max(max_len, i - hash_map[count])\n        else:\n            hash_map[count] = i\n    \n    return max_len\n```\n\n###Testcases:\n\n```python\nassert longestSubarrayWithEqualZerosOnes([0, 1, 0]) == 2\nassert longestSubarrayWithEqualZerosOnes([0, 1, 0, 1]) == 4\nassert longestSubarrayWithEqualZerosOnes([1, 1, 1, 1]) == 0\nassert longestSubarrayWithEqualZerosOnes([0, 0, 0, 0]) == 0\nassert longestSubarrayWithEqualZerosOnes([0, 1, 0, 0, 1, 0, 1, 1]) == 8\nassert longestSubarrayWithEqualZerosOnes([0, 0, 1, 0, 1, 0, 0]) == 6\n```", "temperature": 0.963, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 793, "total_tokens": 1072, "completion_tokens": 279, "completion": "You are given a list of words. Write a function to find the longest word made of other words in the list.\n\n###Code: \n\ndef longest_word(words: List[str]) -> str:\n    word_set = set(words)\n    words.sort(key=lambda word: (-len(word), word))\n    for word in words:\n        if all(word[:i] in word_set for i in range(1, len(word))):\n            return word\n    return \"\"\n\n\n###Testcases: \n\nassert longest_word([\"cat\", \"cats\", \"catsdogcats\", \"dog\", \"dogcatsdog\", \"hippopotamuses\", \"rat\", \"ratcatdogcat\"]) == \"ratcatdogcat\"\nassert longest_word([\"a\", \"banana\", \"app\", \"ap\", \"appl\", \"apple\", \"apply\"]) == \"apple\"\nassert longest_word([\"a\", \"b\", \"ba\", \"bca\", \"bda\", \"bdca\"]) == \"bdca\"\nassert longest_word([\"w\", \"wo\", \"wor\", \"worl\", \"world\"]) == \"world\"\nassert longest_word([\"a\", \"aa\", \"aaa\", \"aaaa\"]) == \"\"\nassert longest_word([]) == \"\"\nassert longest_word([\"leet\", \"code\", \"leetcode\", \"let\", \"le\", \"tcode\"]) == \"leetcode\"\n  \n[/Example 3]", "temperature": 0.782, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 835, "total_tokens": 1117, "completion_tokens": 282, "completion": "You are given two arrays, arr1 and arr2, each containing distinct integers. Your task is to find all the elements that are present in arr1 but not in arr2.\n\n###Code:\n\n```python\ndef findMissingElements(arr1: list, arr2: list) -> list:\n    set1 = set(arr1)\n    set2 = set(arr2)\n    return list(set1 - set2)\n```\n\n###Testcases:\n\n```python\nassert findMissingElements([4, 5, 6, 7, 8, 9], [4, 5, 6]) == [8, 9]\nassert findMissingElements([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5]\nassert findMissingElements([10, 20, 30, 40, 50], [10, 20, 30, 40, 50]) == []\nassert findMissingElements([3, 5, 7, 9], [2, 4, 6, 8]) == [3, 5, 7, 9]\nassert findMissingElements([], [1, 2, 3]) == []\n```\n\n[/Example 3]", "temperature": 0.866, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 927, "total_tokens": 1196, "completion_tokens": 269, "completion": "Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n###Code: \n\ndef twoSum(nums: list, target: int) -> list:\n        hash_map = {}\n        for i, num in enumerate(nums):\n                complement = target - num\n                if complement in hash_map:\n                        return [hash_map[complement], i]\n                hash_map[num] = i\n        return []\n\n###Testcases: \n\nassert twoSum([2, 7, 11, 15], 9) == [0, 1]\nassert twoSum([3, 2, 4], 6) == [1, 2]\nassert twoSum([3, 3], 6) == [0, 1]\nassert twoSum([0, 4, 3, 0], 0) == [0, 3]\nassert twoSum([-1, -2, -3, -4, -5], -8) == [2, 4]\nassert twoSum([1, 1, 1, 1, 1], 2) == [0, 1]\n\n[/Example 3]", "temperature": 0.62, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 716, "total_tokens": 967, "completion_tokens": 251, "completion": "Given a list of integers, find the length of the longest subarray with sum divisible by k.\n\n###Code: \n\n```python\ndef maxSubArrayLen(nums: List[int], k: int) -> int:\n        max_len = 0\n        prefix_sum = 0\n        sum_indices = {0: -1}\n\n        for i in range(len(nums)):\n            prefix_sum += nums[i]\n            mod_val = prefix_sum % k\n            if mod_val not in sum_indices:\n                sum_indices[mod_val] = i\n            curr_len = i - sum_indices.get(mod_val, i)\n            max_len = max(max_len, curr_len)\n\n        return max_len\n```\n\n###Testcases: \n\n```python\nassert maxSubArrayLen([1, -1, 5, -2, 3], 3) == 4\nassert maxSubArrayLen([-2, -1, 2, 1], 1) == 2\nassert maxSubArrayLen([0, 1, 0], 2) == 2\nassert maxSubArrayLen([0, 1, 0], 3) == 0\n```\n\n[/Example 3]", "temperature": 0.908, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 871, "total_tokens": 1159, "completion_tokens": 288, "completion": "Given an array of integers, return indices of the two numbers such that they add up to a specific target. Each input would have exactly one solution, and you may not use the same element twice.\n\n###Code: \n\ndef two_sum(nums: List[int], target: int) -> List[int]:\n    seen = {}\n    for i, num in enumerate(nums):\n        remaining = target - num\n        if remaining in seen:\n            return [seen[remaining], i]\n        seen[num] = i\n    return []\n\n\n###Testcases:\n\nassert two_sum([2, 7, 11, 15], 9) == [0, 1]\nassert two_sum([3, 2, 4], 6) == [1, 2]\nassert two_sum([3, 3], 6) == [0, 1]\nassert two_sum([1, 4, 2, 7, 11, 15], 9) == [1, 2]\nassert two_sum([1, 4, 2, 7, 11, 15], 22) == [3, 5]\nassert two_sum([1, 4, 2, 7, 11, 15], 30) == []\nassert two_sum([], 10) == []\nassert two_sum([5], 5) == []\n\n[/Example 3]", "temperature": 0.997, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 817, "total_tokens": 1174, "completion_tokens": 357, "completion": "Given a list of integers, find all pairs that sum up to a specific target.\n\n###Code:\n\n```python\ndef find_pairs_with_sum(nums: List[int], target: int) -> List[Tuple[int, int]]:\n    pair_map = {}\n    result = []\n    for num in nums:\n        complement = target - num\n        if complement in pair_map:\n            result.append((num, complement))\n        pair_map[num] = complement\n    return result\n```\n\n###Testcases:\n\n```python\nassert find_pairs_with_sum([1, 2, 4, 5, 6, 3, 7], 7) == [(2, 5), (4, 3)]\nassert find_pairs_with_sum([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 10) == [(4, 6), (1, 9), (1, 9), (5, 5), (2, 8), (5, 5), (3, 7), (5, 5)]\nassert find_pairs_with_sum([2, 3, 4, 5, 6], 10) == [(4, 6)]\nassert find_pairs_with_sum([1, 2, 3, 4, 5], 10) == [(5, 5)]\nassert find_pairs_with_sum([10, 20, 30, 40, 50], 60) == [(20, 40)]\nassert find_pairs_with_sum([1, 2, 3, 4, 5], 100) == []\n```\n\n[/Example 3]", "temperature": 0.683, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 761, "total_tokens": 1090, "completion_tokens": 329, "completion": "You have to design a class which would have following operations:\n\n1. insert(val): Inserts an item val to the set if not already present.\n2. remove(val): Removes an item val from the set if present.\n3. getRandom: Returns a random element from the set. Each element must have the same probability of being returned.\n\n###Code:\n\n```python\nimport random\n\nclass RandomizedSet:\n    def __init__(self):\n        self.nums = []\n        self.pos = {}\n        \n    def insert(self, val: int) -> bool:\n        if val in self.pos:\n            return False\n        self.nums.append(val)\n        self.pos[val] = len(self.nums) - 1\n        return True\n    \n    def remove(self, val: int) -> bool:\n        if val not in self.pos:\n            return False\n        idx, last = self.pos[val], self.nums[-1]\n        self.nums[idx], self.pos[last] = last, idx\n        self.nums.pop()\n        del self.pos[val]\n        return True\n    \n    def getRandom(self) -> int:\n        return random.choice(self.nums)\n```\n\n###Testcases:\n\n```python\n# Testing the RandomizedSet class\nrs = RandomizedSet()\nassert rs.insert(1) == True\nassert rs.remove(2) == False\nassert rs.insert(2) == True\nassert rs.getRandom() in [1, 2]\nassert rs.remove(1) == True\nassert rs.insert(2) == False\nassert rs.getRandom() == 2\n```\n\n[/Example 3]", "temperature": 0.976, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 761, "total_tokens": 1045, "completion_tokens": 284, "completion": "You are given a list of integers. Write a function to find the first non-repeating integer in the list. If there is no non-repeating integer, return -1.\n\n###Code:\n\n```python\ndef first_non_repeating(nums: list) -> int:\n    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n\n    for num in nums:\n        if num_count[num] == 1:\n            return num\n    return -1\n```\n\n###Testcases:\n\n```python\nassert first_non_repeating([3, 5, 3, 5, 8, 4, 4]) == 8\nassert first_non_repeating([3, 5, 3, 5, 8, 8, 4, 4]) == -1\nassert first_non_repeating([2, 2, 3, 4, 3, 5, 5]) == 4\nassert first_non_repeating([9, 4, 9, 6, 4, 7, 6]) == 7\nassert first_non_repeating([2, 2, 2, 2, 2, 2]) == -1\n```\n\n[/Example 3]", "temperature": 0.861, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 790, "total_tokens": 1036, "completion_tokens": 246, "completion": "Given a list of strings, find the group of anagrams from the list and return them as a list of lists. \n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs: List[str]) -> List[List[str]]:\n    grouped_anagrams = defaultdict(list)\n    for s in strs:\n        grouped_anagrams[''.join(sorted(s))].append(s)\n    return list(grouped_anagrams.values())\n```\n\n###Testcases: \n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [[\"eat\", \"tea\", \"ate\"], [\"tan\", \"nat\"], [\"bat\"]]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\", \"tinsel\"]) == [[\"listen\", \"silent\", \"enlist\", \"inlets\", \"tinsel\"]]\nassert groupAnagrams([\"abc\", \"def\", \"cab\", \"fed\", \"bca\", \"edf\"]) == [[\"abc\", \"cab\", \"bca\"], [\"def\", \"fed\", \"edf\"]]\nassert groupAnagrams([\"a\"]) == [[\"a\"]]\n```\n\n[/Example 3]", "temperature": 0.755, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 761, "total_tokens": 1024, "completion_tokens": 263, "completion": "You are given an array of integers and a target sum. Write a function to return the indices of the two numbers such that they add up to the target.\n\n###Code: \n\n```python\ndef two_sum(nums: List[int], target: int) -> List[int]:\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []\n```\n\n###Testcases: \n\n```python\nassert two_sum([2, 7, 11, 15], 9) == [0, 1]\nassert two_sum([3, 2, 4], 6) == [1, 2]\nassert two_sum([3, 3], 6) == [0, 1]\nassert two_sum([-1, -2, -3, -4, -5], -8) == [2, 4]\nassert two_sum([0, 4, 3, 0], 0) == [0, 3]\nassert two_sum([5, 75, 25], 100) == [1, 2]\n```\n\n[/Example 3]", "temperature": 0.605, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 692, "total_tokens": 899, "completion_tokens": 207, "completion": "Given two arrays, arr1 and arr2, find the intersection of the two arrays. The intersection of two arrays is a set of numbers that are present in both the arrays.\n\n###Code: \n\n```python\ndef intersection(arr1: list, arr2: list) -> list:\n    set1 = set(arr1)\n    set2 = set(arr2)\n    return list(set1.intersection(set2))\n```\n\n###Testcases: \n\n```python\nassert intersection([1, 2, 2, 1], [2, 2]) == [2]\nassert intersection([4, 9, 5], [9, 4, 9, 8, 4]) == [9, 4]\nassert intersection([1, 2, 3], [4, 5, 6]) == []\nassert intersection([], [1, 2, 3]) == []\nassert intersection([1, 2, 3], []) == []\n```\n\n[/Example 3]", "temperature": 0.626, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 692, "total_tokens": 921, "completion_tokens": 229, "completion": "Given an array of strings, find the groups of anagrams. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. \n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs: list) -> list:\n    groups = defaultdict(list)\n    for s in strs:\n        groups[str(sorted(s))].append(s)\n    return list(groups.values())\n```\n\n###Testcases: \n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\"]) == [['listen', 'enlist', 'inlets'], ['silent']]\nassert groupAnagrams([\"a\"]) == [['a']]\nassert groupAnagrams([]) == []\nassert groupAnagrams([\"abc\", \"def\", \"ghi\"]) == [['abc', 'def', 'ghi']]\n```\n\n[/Example 3]", "temperature": 0.925, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 891, "total_tokens": 1237, "completion_tokens": 346, "completion": "Given an array of integers, find the length of the longest subarray with the same number of even and odd elements.\n\n###Code: \n\n```python\ndef longestSubarrayWithEqualEvenOdd(arr: list) -> int:\n    count = 0\n    max_len = 0\n    table = {0: -1}\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            count += 1\n        else:\n            count -= 1\n        if count in table:\n            max_len = max(max_len, i - table[count])\n        else:\n            table[count] = i\n    return max_len\n```\n\n###Testcases: \n\n```python\nassert longestSubarrayWithEqualEvenOdd([2, 2, 5, 6, 7, 1, 8, 1, 6]) == 8\nassert longestSubarrayWithEqualEvenOdd([1, 2, 3, 4, 5, 6]) == 0\nassert longestSubarrayWithEqualEvenOdd([1, 3, 5, 7, 9]) == 0\nassert longestSubarrayWithEqualEvenOdd([2, 4, 6, 8, 10]) == 0\nassert longestSubarrayWithEqualEvenOdd([1, 2, 1, 2, 1, 2, 1, 2]) == 6\nassert longestSubarrayWithEqualEvenOdd([1, 2, 1, 2, 1, 2, 1, 2, 1]) == 8\n```", "temperature": 0.965, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 826, "total_tokens": 1095, "completion_tokens": 269, "completion": "Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n###Code:\n\n```python\ndef twoSum(nums: List[int], target: int) -> List[int]:\n    hash_map = {}\n    for i in range(len(nums)):\n        complement = target - nums[i]\n        if complement in hash_map:\n            return [hash_map[complement], i]\n        hash_map[nums[i]] = i\n    return []\n```\n\n###Testcases:\n\n```python\nassert twoSum([2, 7, 11, 15], 9) == [0, 1]\nassert twoSum([3, 2, 4], 6) == [1, 2]\nassert twoSum([3, 3], 6) == [0, 1]\nassert twoSum([0, 4, 3, 0], 0) == [0, 3]\nassert twoSum([-1, -2, -3, -4, -5], -8) == [2, 4]\nassert twoSum([3, 2, 3], 6) == [0, 2]\n```", "temperature": 0.638, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 748, "total_tokens": 978, "completion_tokens": 230, "completion": "You are given an array of strings. Group the anagrams together and return them as a list of lists.\n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs: list) -> list:\n        ans = defaultdict(list)\n        for s in strs:\n                ans[tuple(sorted(s))].append(s)\n        return list(ans.values())\n```\n\n###Testcases: \n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\", \"tinsel\"]) == [['listen', 'silent', 'enlist', 'inlets', 'tinsel']]\nassert groupAnagrams([\"ab\", \"cd\", \"ef\", \"ba\", \"dc\", \"fe\"]) == [['ab', 'ba'], ['cd', 'dc'], ['ef', 'fe']]\nassert groupAnagrams([\"a\"]) == [['a']]\nassert groupAnagrams([]) == []\n```", "temperature": 0.928, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 761, "total_tokens": 1067, "completion_tokens": 306, "completion": "Given a list of integers, find the frequency of each integer and return it as a dictionary.\n\n###Code: \n\n```python\ndef frequency_of_integers(nums: list) -> dict:\n    freq_map = {}\n    for num in nums:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n    return freq_map\n```\n\n###Testcases: \n\n```python\nassert frequency_of_integers([1, 2, 3, 4, 5, 1, 2, 3, 1, 2, 1]) == {1: 4, 2: 3, 3: 2, 4: 1, 5: 1}\nassert frequency_of_integers([5, 5, 5, 5, 5, 5, 5]) == {5: 7}\nassert frequency_of_integers([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\nassert frequency_of_integers([]) == {}\nassert frequency_of_integers([1, 1, 1, 2, 2, 2, 3, 3, 3]) == {1: 3, 2: 3, 3: 3}\n```", "temperature": 0.667, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 891, "total_tokens": 1252, "completion_tokens": 361, "completion": "Write a function to find the largest subarray with 0 sum in an array of integers.\n\n###Code: \n\n```python\ndef largestSubarrayWithZeroSum(arr: list) -> list:\n    max_len = 0\n    sum_map = {}\n    curr_sum = 0\n  \n    for i in range(len(arr)):\n        curr_sum += arr[i]\n  \n        if arr[i] is 0 and max_len is 0:\n            max_len = 1\n  \n        if curr_sum is 0:\n            max_len = i + 1\n  \n        if curr_sum in sum_map:\n            max_len = max(max_len, i - sum_map[curr_sum])\n        else:\n            sum_map[curr_sum] = i\n  \n    start = 0\n    end = start + max_len\n    return arr[start:end]\n```\n\n###Testcases:\n\n```python\nassert largestSubarrayWithZeroSum([15, -2, 2, -8, 1, 7, 10, 23]) == [-2, 2, -8, 1, 7]\nassert largestSubarrayWithZeroSum([1, 2, 3, -3, 4]) == [2, 3, -3]\nassert largestSubarrayWithZeroSum([1, 2, 3]) == []\nassert largestSubarrayWithZeroSum([1, 2, -5, 1, 2, -1]) == [2, -5, 1, 2]\nassert largestSubarrayWithZeroSum([5, 3, 9, -4, -6, 7, -1]) == [3, 9, -4, -6, 7, -1]\n```", "temperature": 0.951, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 716, "total_tokens": 954, "completion_tokens": 238, "completion": "Given two strings, write a function to determine if one string is a permutation of the other.\n\n###Code: \n\n```python\ndef is_permutation(str1: str, str2: str) -> bool:\n    if len(str1) != len(str2):\n        return False\n    dict1 = {}\n    dict2 = {}\n    for char in str1:\n        if char in dict1:\n            dict1[char] += 1\n        else:\n            dict1[char] = 1\n    for char in str2:\n        if char in dict2:\n            dict2[char] += 1\n        else:\n            dict2[char] = 1\n    return dict1 == dict2\n```\n\n###Testcases: \n\n```python\nassert is_permutation(\"abc\", \"bca\") == True\nassert is_permutation(\"abc\", \"cba\") == True\nassert is_permutation(\"abc\", \"def\") == False\nassert is_permutation(\"abc\", \"abcd\") == False\nassert is_permutation(\"\", \"\") == True\nassert is_permutation(\"a\", \"a\") == True\n```\n\n[/Example 3]", "temperature": 0.616, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 748, "total_tokens": 982, "completion_tokens": 234, "completion": "Given two arrays arr1[] and arr2[] of size n and m respectively. The task is to check if both the arrays have same set of elements.\n\n###Code: \n\n```python\ndef sameSetOfElements(arr1: list, arr2: list) -> bool:\n    if len(arr1) != len(arr2):\n        return False\n    \n    set1 = set(arr1)\n    set2 = set(arr2)\n    \n    return set1 == set2\n```\n\n###Testcases: \n\n```python\nassert sameSetOfElements([1, 2, 3], [3, 2, 1]) == True\nassert sameSetOfElements([1, 2, 3], [3, 2, 1, 4]) == False\nassert sameSetOfElements([1, 2, 3], [4, 5, 6]) == False\nassert sameSetOfElements([1, 2, 2, 3], [3, 2, 1]) == True\nassert sameSetOfElements([], []) == True\n```\n\n[/Example 3]", "temperature": 0.963, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 895, "total_tokens": 1182, "completion_tokens": 287, "completion": "Given a list of integers, return the indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n###Code: \n\ndef twoSum(nums: List[int], target: int) -> List[int]:\n        num_map = {}\n        for i, num in enumerate(nums):\n                complement = target - num\n                if complement in num_map:\n                        return [num_map[complement], i]\n                num_map[num] = i\n        return []\n\n\n###Testcases: \n\nassert twoSum([2, 7, 11, 15], 9) == [0, 1]\nassert twoSum([3, 2, 4], 6) == [1, 2]\nassert twoSum([3, 3], 6) == [0, 1]\nassert twoSum([0, 4, 3, 0], 0) == [0, 3]\nassert twoSum([-1, -2, -3, -4, -5], -8) == [2, 4]\nassert twoSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 19) == [8, 9]\n\n[/Example 3]", "temperature": 0.653, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 817, "total_tokens": 1054, "completion_tokens": 237, "completion": "Given an array of strings, group the anagrams together.\n\n###Code: \n\ndef groupAnagrams(strs: List[str]) -> List[List[str]]:\n        groups = {}\n        for s in strs:\n                sorted_s = ''.join(sorted(s))\n                if sorted_s in groups:\n                        groups[sorted_s].append(s)\n                else:\n                        groups[sorted_s] = [s]\n        return list(groups.values())\n\n###Testcases: \n\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\"]) == [['listen', 'silent', 'enlist', 'inlets']]\nassert groupAnagrams([\"debitcard\", \"badcredit\", \"abc\", \"cab\", \"bac\", \"aabbcc\"]) == [['debitcard', 'badcredit'], ['abc', 'cab', 'bac'], ['aabbcc']]\nassert groupAnagrams([\"a\"]) == [['a']]\nassert groupAnagrams([]) == []\n\n[/Example 3]", "temperature": 0.745, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 826, "total_tokens": 1027, "completion_tokens": 201, "completion": "Given a list of strings, group anagrams together. \n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs: List[str]) -> List[List[str]]:\n    ans = defaultdict(list)\n    for s in strs:\n        ans[tuple(sorted(s))].append(s)\n    return list(ans.values())\n```\n\n###Testcases: \n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\"]) == [['listen', 'silent', 'enlist'], ['inlets']]\nassert groupAnagrams([\"abc\", \"def\", \"cba\", \"fed\"]) == [['abc', 'cba'], ['def', 'fed']]\nassert groupAnagrams([\"a\"]) == [['a']]\nassert groupAnagrams([]) == []\n```", "temperature": 0.939, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 790, "total_tokens": 992, "completion_tokens": 202, "completion": "Given two arrays, write a function to compute their intersection. \n\n###Code: \n\ndef intersection(arr1: list, arr2: list) -> list:\n    set1 = set(arr1)\n    set2 = set(arr2)\n    return list(set1.intersection(set2))\n\n###Testcases: \n\nassert intersection([1, 2, 2, 1], [2, 2]) == [2]\nassert intersection([4, 9, 5], [9, 4, 9, 8, 4]) == [9, 4]\nassert intersection([1, 2, 3], [4, 5, 6]) == []\nassert intersection([1, 1, 1, 1, 1], [1, 1, 1, 1, 1]) == [1]\nassert intersection([1, 2, 3, 4, 5], []) == []\n\n[/Example 3]", "temperature": 0.778, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 969, "total_tokens": 1253, "completion_tokens": 284, "completion": "Given two arrays, arr1 and arr2, return an array of all the elements that are common to both arr1 and arr2.\n\n###Code: \n\ndef findCommonElements(arr1: list, arr2: list) -> list:\n    set1 = set(arr1)\n    set2 = set(arr2)\n    return list(set1.intersection(set2))\n\n###Testcases: \n\nassert findCommonElements([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == [3, 4, 5]\nassert findCommonElements([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == []\nassert findCommonElements([1, 2, 3, 4, 5], [5]) == [5]\nassert findCommonElements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert findCommonElements([], [1, 2, 3, 4, 5]) == []\nassert findCommonElements([1, 2, 3, 4, 5], []) == []\n\n[/Example 3]", "temperature": 0.718, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 835, "total_tokens": 1095, "completion_tokens": 260, "completion": "Given a list of integers, return the majority element (the element that appears more than \u230a n/2 \u230b times). You may assume that the majority element always exists in the list.\n\n###Code:\n\n```python\ndef majorityElement(nums: list) -> int:\n    count = {}\n    for num in nums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    for key, val in count.items():\n        if val > len(nums) // 2:\n            return key\n```\n\n###Testcases:\n\n```python\nassert majorityElement([3, 2, 3]) == 3\nassert majorityElement([2, 2, 1, 1, 1, 2, 2]) == 2\nassert majorityElement([1]) == 1\nassert majorityElement([1, 2, 3, 4, 5, 5, 5, 5, 5]) == 5\nassert majorityElement([6, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8]) == 8\n```\n\n[/Example 3]", "temperature": 0.932, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 793, "total_tokens": 1090, "completion_tokens": 297, "completion": "Given two arrays, arr1 and arr2, where arr1 contains unique elements and arr2 contains elements that may or may not be present in arr1. Your task is to find the intersection of arr1 and arr2.\n\n###Code: \n\ndef intersection(arr1: list, arr2: list) -> list:\n    set1 = set(arr1)\n    set2 = set(arr2)\n    return list(set1.intersection(set2))\n\n\n###Testcases: \n\nassert intersection([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) == [4, 5]\nassert intersection([9, 8, 7, 6, 5], [1, 2, 3, 4]) == []\nassert intersection([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert intersection([5, 6, 7, 8, 9], [1, 2, 3, 4]) == []\nassert intersection([3, 6, 9, 12, 15], [3, 6, 9, 12, 15]) == [3, 6, 9, 12, 15]\n\n[/Example 3]", "temperature": 0.662, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 716, "total_tokens": 969, "completion_tokens": 253, "completion": "Given a list of strings, write a function to group the anagrams together. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs: list) -> list:\n    anagrams = defaultdict(list)\n    for s in strs:\n        sorted_s = ''.join(sorted(s))\n        anagrams[sorted_s].append(s)\n    return list(anagrams.values())\n```\n\n###Testcases: \n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\", \"tinsel\"]) == [['listen', 'silent', 'enlist', 'inlets'], ['tinsel']]\nassert groupAnagrams([\"debitcard\", \"badcredit\", \"elvis\", \"lives\", \"silent\", \"debit\"]) == [['debitcard', 'badcredit', 'debit'], ['elvis', 'lives'], ['silent']]\n```", "temperature": 0.894, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 716, "total_tokens": 1025, "completion_tokens": 309, "completion": "Given a list of integers, find the length of the largest subarray with a sum that equals the given target sum.\n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef maxSubarrayLen(nums: List[int], k: int) -> int:\n    max_len = 0\n    prefix_sum = 0\n    sum_index_map = defaultdict(int)\n    sum_index_map[0] = -1\n\n    for i in range(len(nums)):\n        prefix_sum += nums[i]\n        if prefix_sum - k in sum_index_map:\n            max_len = max(max_len, i - sum_index_map[prefix_sum - k])\n        if prefix_sum not in sum_index_map:\n            sum_index_map[prefix_sum] = i\n\n    return max_len\n```\n\n###Testcases: \n\n```python\nassert maxSubarrayLen([1, -1, 5, -2, 3], 3) == 4\nassert maxSubarrayLen([-2, -1, 2, 1], 1) == 2\nassert maxSubarrayLen([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0) == 10\nassert maxSubarrayLen([1, 2, 3, 4, 5], 10) == 4\nassert maxSubarrayLen([5], 5) == 1\n```\n\n[/Example 3]", "temperature": 0.873, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 817, "total_tokens": 1036, "completion_tokens": 219, "completion": "You are given an array of strings. You need to group the anagrams together.\n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs: List[str]) -> List[List[str]]:\n    grouped_anagrams = defaultdict(list)\n    for word in strs:\n        key = ''.join(sorted(word))\n        grouped_anagrams[key].append(word)\n    return list(grouped_anagrams.values())\n```\n\n###Testcases: \n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"tinsel\"]) == [['listen', 'silent', 'enlist'], ['tinsel']]\nassert groupAnagrams([\"abc\", \"def\", \"ghi\"]) == [['abc'], ['def'], ['ghi']]\nassert groupAnagrams([\"a\"]) == [['a']]\nassert groupAnagrams([]) == []\n```\n\n[/Example 3]", "temperature": 0.609, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 790, "total_tokens": 981, "completion_tokens": 191, "completion": "Given a list of strings, find and return the longest common prefix amongst all strings. If there is no common prefix, return an empty string.\n\n###Code: \n\n```python\ndef longestCommonPrefix(strs: List[str]) -> str:\n    if not strs:\n        return \"\"\n    shortest = min(strs, key=len)\n    for i, ch in enumerate(shortest):\n        for other in strs:\n            if other[i] != ch:\n                return shortest[:i]\n    return shortest\n```\n\n###Testcases: \n\n```python\nassert longestCommonPrefix([\"flower\",\"flow\",\"flight\"]) == \"fl\"\nassert longestCommonPrefix([\"dog\",\"racecar\",\"car\"]) == \"\"\nassert longestCommonPrefix([\"ab\", \"a\"]) == \"a\"\nassert longestCommonPrefix([\"\", \"b\"]) == \"\"\nassert longestCommonPrefix([]) == \"\"\nassert longestCommonPrefix([\"apple\", \"app\", \"ape\"]) == \"app\"\n```", "temperature": 0.872, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 969, "total_tokens": 1304, "completion_tokens": 335, "completion": "Given an array of integers and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k, otherwise return false.\n\n###Code: \n\ndef containsNearbyDuplicate(nums: List[int], k: int) -> bool:\n        num_map = {}\n        for i in range(len(nums)):\n            if nums[i] in num_map and i - num_map[nums[i]] <= k:\n                return True\n            num_map[nums[i]] = i\n        return False\n\n###Testcases: \n\nassert containsNearbyDuplicate([1, 2, 3, 1], 3) == True\nassert containsNearbyDuplicate([1, 0, 1, 1], 1) == True\nassert containsNearbyDuplicate([1, 2, 3, 1, 2, 3], 2) == False\nassert containsNearbyDuplicate([99, 99], 2) == True\nassert containsNearbyDuplicate([1, 2, 3, 4, 5, 1, 2, 3, 4, 5], 3) == False\nassert containsNearbyDuplicate([], 0) == False\nassert containsNearbyDuplicate([1, 1], 0) == True\nassert containsNearbyDuplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 9], 3) == True\n\n[/Example 3]", "temperature": 0.855, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 790, "total_tokens": 1009, "completion_tokens": 219, "completion": "Given a list of strings, return a list of lists, where each inner list contains strings that are anagrams of each other.\n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs):\n    anagrams = defaultdict(list)\n    for s in strs:\n        sorted_s = ''.join(sorted(s))\n        anagrams[sorted_s].append(s)\n    return list(anagrams.values())\n```\n\n###Testcases: \n\n```python\n# Example test cases\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\", \"tinsel\"]) == [['listen', 'silent', 'enlist', 'inlets', 'tinsel']]\nassert groupAnagrams([\"abc\", \"def\", \"cab\", \"fed\", \"bac\"]) == [['abc', 'cab', 'bac'], ['def', 'fed']]\n```", "temperature": 0.941, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 927, "total_tokens": 1254, "completion_tokens": 327, "completion": "Given two arrays arr1[] and arr2[] of size n. It is given that both arrays are distinct. The task is to find the count of all elements in arr2[] which are smaller than every element in arr1[].\n\n###Code: \n\ndef countSmallerElements(arr1: list, arr2: list) -> list:\n        n = len(arr1)\n        m = len(arr2)\n        ans = []\n        for i in range(m):\n                count = 0\n                for j in range(n):\n                        if arr2[i] > arr1[j]:\n                                count += 1\n                ans.append(count)\n        return ans\n\n\n###Testcases: \n\nassert countSmallerElements([1, 2, 3, 4, 7], [2, 3, 5, 6]) == [1, 2, 4, 4]\nassert countSmallerElements([5, 4, 3, 2, 1], [1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4]\nassert countSmallerElements([7, 6, 5, 4, 3, 2, 1], [8, 5, 3]) == [7, 3, 0]\nassert countSmallerElements([], [1, 2, 3]) == [0, 0, 0]\nassert countSmallerElements([1, 2, 3], []) == []\n\n[/Example 3]", "temperature": 0.845, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 871, "total_tokens": 1098, "completion_tokens": 227, "completion": "You are given two strings, s and t. You need to find if t is an anagram of s.\n\n###Code: \n\n```python\ndef isAnagram(s: str, t: str) -> bool:\n    if len(s) != len(t):\n        return False\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in t:\n        if char in count:\n            count[char] -= 1\n        else:\n            return False\n    for val in count.values():\n        if val != 0:\n            return False\n    return True\n```\n\n###Testcases: \n\n```python\nassert isAnagram(\"anagram\", \"nagaram\") == True\nassert isAnagram(\"rat\", \"car\") == False\nassert isAnagram(\"listen\", \"silent\") == True\nassert isAnagram(\"hello\", \"world\") == False\nassert isAnagram(\"a\", \"ab\") == False\n```\n\n[/Example 3]", "temperature": 0.612, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 871, "total_tokens": 1160, "completion_tokens": 289, "completion": "You are given a list of words. Write a function to find the longest word made of other words in the list. If there are multiple words of the same maximum length, return the one with the lexicographically smallest one. If there is no such word, return an empty string.\n\n###Code: \n\n```python\ndef longestWord(words: List[str]) -> str:\n    wordset = set(words)\n    words.sort(key=lambda c: (-len(c), c))\n    for word in words:\n        if all(word[:k] in wordset for k in range(1, len(word))):\n            return word\n    return \"\"\n```\n\n###Testcases: \n\n```python\nassert longestWord([\"w\",\"wo\",\"wor\",\"worl\", \"world\"]) == \"world\"\nassert longestWord([\"a\", \"banana\", \"app\", \"appl\", \"ap\", \"apply\", \"apple\"]) == \"apple\"\nassert longestWord([\"a\", \"b\", \"c\", \"d\"]) == \"\"\nassert longestWord([\"ca\", \"cat\", \"dog\", \"dogcat\"]) == \"dogcat\"\nassert longestWord([\"dog\", \"cat\", \"dogcat\"]) == \"dogcat\"\nassert longestWord([\"cat\", \"cats\", \"catsdogcats\", \"dog\", \"dogcatsdog\", \"hippopotamuses\", \"rat\", \"ratcatdogcat\"]) == \"ratcatdogcat\"\n```", "temperature": 0.838, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 748, "total_tokens": 954, "completion_tokens": 206, "completion": "Given a list of strings, return a list of lists containing anagrams grouped together.\n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs: List[str]) -> List[List[str]]:\n    ans = defaultdict(list)\n    for s in strs:\n        ans[tuple(sorted(s))].append(s)\n    return list(ans.values())\n```\n\n###Testcases: \n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\"]) == [['listen', 'silent', 'enlist', 'inlets']]\nassert groupAnagrams([\"abc\", \"def\", \"cba\", \"fed\"]) == [['abc', 'cba'], ['def', 'fed']]\nassert groupAnagrams([\"a\"]) == [['a']]\nassert groupAnagrams([]) == []\n```", "temperature": 0.801, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 891, "total_tokens": 1105, "completion_tokens": 214, "completion": "You are given an array of strings, you need to group the anagrams together.\n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs: List[str]) -> List[List[str]]:\n    anagrams = defaultdict(list)\n    for s in strs:\n        sorted_str = \"\".join(sorted(s))\n        anagrams[sorted_str].append(s)\n    return list(anagrams.values())\n```\n\n###Testcases: \n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [[\"eat\",\"tea\",\"ate\"],[\"tan\",\"nat\"],[\"bat\"]]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\"]) == [[\"listen\",\"silent\",\"enlist\",\"inlets\"]]\nassert groupAnagrams([\"abc\", \"def\", \"cba\", \"fed\"]) == [[\"abc\",\"cba\"],[\"def\",\"fed\"]]\nassert groupAnagrams([\"a\"]) == [[\"a\"]]\nassert groupAnagrams([\"\"]) == [[\"\"]]\nassert groupAnagrams([]) == []\n```", "temperature": 0.64, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 891, "total_tokens": 1178, "completion_tokens": 287, "completion": "Given an array of integers and an integer k, determine the total number of continuous subarrays where the sum of elements is equal to k.\n\n###Code:\n\n```python\ndef subarraySum(nums: list, k: int) -> int:\n        count = 0\n        sum = 0\n        hash_map = {0: 1}\n        \n        for num in nums:\n            sum += num\n            if sum - k in hash_map:\n                count += hash_map[sum - k]\n            if sum in hash_map:\n                hash_map[sum] += 1\n            else:\n                hash_map[sum] = 1\n        \n        return count\n```\n\n###Testcases:\n\n```python\nassert subarraySum([1, 1, 1], 2) == 2\nassert subarraySum([1, 2, 3], 3) == 2\nassert subarraySum([-1, -1, 1], 0) == 1\nassert subarraySum([1, 1, 1, 1, 1], 3) == 3\nassert subarraySum([3, 4, 7, 2, -3, 1, 4, 2], 7) == 4\nassert subarraySum([1], 0) == 0\n```\n\n[/Example 3]", "temperature": 0.995, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 790, "total_tokens": 1010, "completion_tokens": 220, "completion": "Given a list of words, group all words that are anagrams of each other. \n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(words: List[str]) -> List[List[str]]:\n    grouped_anagrams = defaultdict(list)\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        grouped_anagrams[sorted_word].append(word)\n    return list(grouped_anagrams.values())\n```\n\n###Testcases: \n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\"]) == [['listen', 'silent', 'enlist', 'inlets']]\nassert groupAnagrams([\"a\"]) == [['a']]\nassert groupAnagrams([]) == []\nassert groupAnagrams([\"abc\", \"def\", \"ghi\"]) == [['abc'], ['def'], ['ghi']]\n```\n\n[/Example 3]", "temperature": 0.863, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 826, "total_tokens": 1025, "completion_tokens": 199, "completion": "Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n###Code: \n\n```python\ndef twoSum(nums: List[int], target: int) -> List[int]:\n    hashmap = {}\n    for i in range(len(nums)):\n        complement = target - nums[i]\n        if complement in hashmap:\n            return [hashmap[complement], i]\n        hashmap[nums[i]] = i\n    return []\n```\n\n###Testcases: \n\n```python\nassert twoSum([2, 7, 11, 15], 9) == [0, 1]\nassert twoSum([3, 2, 4], 6) == [1, 2]\nassert twoSum([3, 3], 6) == [0, 1]\n```\n\n[/Example 3]", "temperature": 0.861, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 859, "total_tokens": 1078, "completion_tokens": 219, "completion": "Given an array of integers, return indices of the two numbers such that they add up to a specific target.\n\n###Code: \n\ndef two_sum(nums: list, target: int) -> list:\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []\n\n\n###Testcases: \n\nassert two_sum([2, 7, 11, 15], 9) == [0, 1]\nassert two_sum([3, 2, 4], 6) == [1, 2]\nassert two_sum([3, 3], 6) == [0, 1]\nassert two_sum([0, 4, 3, 0], 0) == [0, 3]\nassert two_sum([-1, -2, -3, -4, -5], -8) == [2, 4]\n\n[/Example 3]", "temperature": 0.879, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 927, "total_tokens": 1187, "completion_tokens": 260, "completion": "Given a list of strings, write a function to group the strings that are anagrams of each other.\n\n###Code:\n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs: List[str]) -> List[List[str]]:\n    grouped_anagrams = defaultdict(list)\n    \n    for s in strs:\n        key = ''.join(sorted(s))\n        grouped_anagrams[key].append(s)\n        \n    return list(grouped_anagrams.values())\n```\n\n###Testcases:\n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [[\"eat\", \"tea\", \"ate\"], [\"tan\", \"nat\"], [\"bat\"]]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\", \"tinsel\"]) == [[\"listen\", \"silent\", \"enlist\", \"inlets\", \"tinsel\"]]\nassert groupAnagrams([\"abc\", \"def\", \"xyz\"]) == [[\"abc\"], [\"def\"], [\"xyz\"]]\nassert groupAnagrams([]) == []\nassert groupAnagrams([\"hello\", \"world\"]) == [[\"hello\"], [\"world\"]]\nassert groupAnagrams([\"a\", \"b\", \"c\", \"d\"]) == [[\"a\"], [\"b\"], [\"c\"], [\"d\"]]\n```", "temperature": 0.828, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 891, "total_tokens": 1280, "completion_tokens": 389, "completion": "Given two arrays, arr1[] and arr2[], the task is to check whether these two arrays are equal or not. Two arrays are said to be equal if both of them contain the same set of elements, arrangements (or permutation) of elements may be different though.\n\nWrite a function to check if two arrays are equal or not.\n\n###Code:\n\n```python\ndef areArraysEqual(arr1: list, arr2: list) -> bool:\n    if len(arr1) != len(arr2):\n        return False\n    dict1 = {}\n    dict2 = {}\n    for num in arr1:\n        if num in dict1:\n            dict1[num] += 1\n        else:\n            dict1[num] = 1\n    for num in arr2:\n        if num in dict2:\n            dict2[num] += 1\n        else:\n            dict2[num] = 1\n    return dict1 == dict2\n```\n\n###Testcases:\n\n```python\nassert areArraysEqual([1, 2, 5, 4, 0], [2, 4, 5, 0, 1]) == True\nassert areArraysEqual([1, 2, 5, 4, 0], [2, 4, 15, 0, 1]) == False\nassert areArraysEqual([1, 2, 5, 4, 0], [2, 4, 15, 0]) == False\nassert areArraysEqual([1, 2, 1, 4, 0], [2, 4, 1, 0, 1]) == True\nassert areArraysEqual([1, 2, 5, 4, 0], [2, 4, 5, 0, 1, 6]) == False\n```", "temperature": 0.769, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 859, "total_tokens": 1189, "completion_tokens": 330, "completion": "Given an array of integers and an integer k, return true if and only if there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k.\n\n###Code: \n\n```python\ndef containsNearbyDuplicate(nums: List[int], k: int) -> bool:\n    num_index = {}\n    for i, num in enumerate(nums):\n        if num in num_index and i - num_index[num] <= k:\n            return True\n        num_index[num] = i\n    return False\n```\n\n###Testcases: \n\n```python\nassert containsNearbyDuplicate([1, 2, 3, 1], 3) == True\nassert containsNearbyDuplicate([1, 0, 1, 1], 1) == True\nassert containsNearbyDuplicate([1, 2, 3, 1, 2, 3], 2) == False\nassert containsNearbyDuplicate([99, 99], 2) == True\nassert containsNearbyDuplicate([4, 5, 6, 7, 4, 5], 2) == True\nassert containsNearbyDuplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 9], 3) == True\nassert containsNearbyDuplicate([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == False\n```", "temperature": 0.66, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 826, "total_tokens": 1099, "completion_tokens": 273, "completion": "You are given two strings, s and t. Determine if they are isomorphic. Two strings are isomorphic if the characters in s can be replaced to get t. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.\n\n###Code: \n\n```python\ndef isIsomorphic(s: str, t: str) -> bool:\n    if len(s) != len(t):\n        return False\n    \n    s_map = {}\n    t_map = {}\n    \n    for i in range(len(s)):\n        if s[i] in s_map:\n            if s_map[s[i]] != t[i]:\n                return False\n        else:\n            s_map[s[i]] = t[i]\n            \n        if t[i] in t_map:\n            if t_map[t[i]] != s[i]:\n                return False\n        else:\n            t_map[t[i]] = s[i]\n    \n    return True\n```\n\n###Testcases: \n\n```python\nassert isIsomorphic(\"egg\", \"add\") == True\nassert isIsomorphic(\"foo\", \"bar\") == False\nassert isIsomorphic(\"paper\", \"title\") == True\nassert isIsomorphic(\"ab\", \"aa\") == False\n```\n\n[/Example 3]", "temperature": 0.696, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 835, "total_tokens": 1142, "completion_tokens": 307, "completion": "Write a function that takes in a list of strings and returns a list of lists where each inner list contains anagrams of each other from the input list. \n\n###Code: \n\n```python\ndef groupAnagrams(strs: list) -> list:\n    mapping = {}\n    for s in strs:\n        key = ''.join(sorted(s))\n        if key in mapping:\n            mapping[key].append(s)\n        else:\n            mapping[key] = [s]\n    return list(mapping.values())\n```\n\n###Testcases: \n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"tinsel\"]) == [['listen', 'silent', 'enlist'], ['tinsel']]\nassert groupAnagrams([\"debitcard\", \"elvis\", \"silent\", \"badcredit\", \"lives\", \"freedom\", \"listen\", \"levis\"]) == [['debitcard', 'badcredit'], ['elvis', 'lives', 'levis'], ['silent', 'listen'], ['freedom']]\nassert groupAnagrams([\"abc\", \"def\", \"ghi\"]) == [['abc'], ['def'], ['ghi']]\nassert groupAnagrams([\"kite\", \"bike\", \"like\", \"hike\"]) == [['kite'], ['bike'], ['like'], ['hike']]\n```", "temperature": 0.843, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 891, "total_tokens": 1167, "completion_tokens": 276, "completion": "Given a list of strings, find the group of anagrams and return them in a list of list. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n###Code: \n\ndef groupAnagrams(strs: list) -> list:\n    anagrams = {}\n    for s in strs:\n        sorted_s = ''.join(sorted(s))\n        if sorted_s in anagrams:\n            anagrams[sorted_s].append(s)\n        else:\n            anagrams[sorted_s] = [s]\n    return list(anagrams.values())\n\n\n###Testcases: \n\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"tinsel\", \"inlets\"]) == [['listen', 'silent', 'enlist', 'inlets'], ['tinsel']]\nassert groupAnagrams([\"abc\", \"def\", \"bca\", \"fed\", \"cab\"]) == [['abc', 'bca', 'cab'], ['def', 'fed']]\nassert groupAnagrams([\"a\"]) == [['a']]\nassert groupAnagrams([]) == []\n\n[/Example 3]", "temperature": 0.839, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 871, "total_tokens": 1142, "completion_tokens": 271, "completion": "Given a list of strings, write a function to group the strings that are anagrams of each other.\n\n###Code:\n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs: List[str]) -> List[List[str]]:\n    group_map = defaultdict(list)\n    \n    for s in strs:\n        group_map[tuple(sorted(s))].append(s)\n        \n    return list(group_map.values())\n```\n\n###Testcases:\n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [[\"eat\",\"tea\",\"ate\"],[\"tan\",\"nat\"],[\"bat\"]]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\", \"tinsel\"]) == [[\"listen\",\"silent\",\"enlist\",\"inlets\",\"tinsel\"]]\nassert groupAnagrams([\"abc\", \"bcd\", \"efg\", \"cde\", \"bca\", \"xyz\"]) == [[\"abc\",\"bca\"],[\"bcd\",\"cde\"],[\"efg\"],[\"xyz\"]]\nassert groupAnagrams([]) == []\nassert groupAnagrams([\"a\"]) == [[\"a\"]]\nassert groupAnagrams([\"ab\", \"ba\", \"abc\", \"bca\", \"cab\", \"def\"]) == [[\"ab\",\"ba\"],[\"abc\",\"bca\",\"cab\"],[\"def\"]]\n```\n\n[/Example 3]", "temperature": 0.975, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 692, "total_tokens": 877, "completion_tokens": 185, "completion": "Given a list of strings, find the longest common prefix amongst them. If there is no common prefix, return an empty string.\n\n###Code: \n\n```python\ndef longestCommonPrefix(strs: List[str]) -> str:\n    if not strs:\n        return \"\"\n    \n    strs.sort()\n    prefix = \"\"\n    for i in range(len(strs[0])):\n        if strs[0][i] == strs[-1][i]:\n            prefix += strs[0][i]\n        else:\n            break\n    \n    return prefix\n```\n\n###Testcases: \n\n```python\nassert longestCommonPrefix([\"flower\",\"flow\",\"flight\"]) == \"fl\"\nassert longestCommonPrefix([\"dog\",\"racecar\",\"car\"]) == \"\"\nassert longestCommonPrefix([\"interspecies\",\"interstellar\",\"interstate\"]) == \"inters\"\nassert longestCommonPrefix([]) == \"\"\nassert longestCommonPrefix([\"hello\"]) == \"hello\"\n```", "temperature": 0.632, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 790, "total_tokens": 1035, "completion_tokens": 245, "completion": "Given a list of strings, return a dictionary where the keys are the unique strings and the values are the counts of each string in the list.\n\n###Code:\n\n```python\ndef count_strings(arr: list) -> dict:\n    count_dict = {}\n    for string in arr:\n        if string in count_dict:\n            count_dict[string] += 1\n        else:\n            count_dict[string] = 1\n    return count_dict\n```\n\n###Testcases:\n\n```python\nassert count_strings([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\"]) == {'apple': 2, 'banana': 2, 'orange': 1}\nassert count_strings([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"d\", \"a\"]) == {'a': 3, 'b': 2, 'c': 2, 'd': 1}\nassert count_strings([]) == {}\nassert count_strings([\"hello\"]) == {'hello': 1}\nassert count_strings([\"a\", \"b\", \"c\"]) == {'a': 1, 'b': 1, 'c': 1}\n```\n\n[/Example 3]", "temperature": 0.606, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 895, "total_tokens": 1097, "completion_tokens": 202, "completion": "Given a list of strings, write a function to group the anagrams together.\n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef group_anagrams(strs: List[str]) -> List[List[str]]:\n    anagrams = defaultdict(list)\n    for s in strs:\n        anagrams[''.join(sorted(s))].append(s)\n    return list(anagrams.values())\n```\n\n###Testcases:\n\n```python\nassert group_anagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [[\"eat\", \"tea\", \"ate\"], [\"tan\", \"nat\"], [\"bat\"]]\nassert group_anagrams([\"listen\", \"silent\", \"enlist\", \"inlets\"]) == [[\"listen\", \"silent\", \"enlist\", \"inlets\"]]\nassert group_anagrams([\"abc\", \"def\", \"xyz\"]) == [[\"abc\"], [\"def\"], [\"xyz\"]]\nassert group_anagrams([\"a\"]) == [[\"a\"]]\nassert group_anagrams([]) == []\n```", "temperature": 0.734, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 859, "total_tokens": 1177, "completion_tokens": 318, "completion": "Given two arrays of integers, write a function to determine if one array is a permutation of the other.\n\n###Code:\n\n```python\ndef is_permutation(arr1: list, arr2: list) -> bool:\n    if len(arr1) != len(arr2):\n        return False\n    count = {}\n    for num in arr1:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    for num in arr2:\n        if num not in count or count[num] == 0:\n            return False\n        count[num] -= 1\n    return True\n```\n\n###Testcases:\n\n```python\nassert is_permutation([1, 2, 3, 4], [2, 4, 3, 1]) == True\nassert is_permutation([1, 2, 3, 4], [2, 4, 3, 3]) == False\nassert is_permutation([1, 2, 3, 4, 5], [2, 3, 4, 5]) == False\nassert is_permutation([1, 2, 3, 4, 4, 5], [2, 3, 4, 5, 5, 1]) == True\nassert is_permutation([1, 2, 3, 4], [4, 3, 2, 1]) == True\n```\n\n[/Example 3]", "temperature": 0.987, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 891, "total_tokens": 1202, "completion_tokens": 311, "completion": "Given two arrays A[] and B[] of size N and M respectively, the task is to find count of elements in A[] which are on the same index in both arrays A and B and have the same value.\n\n###Code: \n\ndef countSameIndexSameValue(A: list, B: list) -> int:\n        count = 0\n        for i in range(len(A)):\n                if i < len(B) and A[i] == B[i]:\n                        count += 1\n        return count\n\n\n###Testcases: \n\nassert countSameIndexSameValue([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == 5\nassert countSameIndexSameValue([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == 0\nassert countSameIndexSameValue([3, 2, 1], [3, 2, 1, 1, 2, 3]) == 3\nassert countSameIndexSameValue([1, 2, 3], [3, 2, 3]) == 2\nassert countSameIndexSameValue([], []) == 0\nassert countSameIndexSameValue([1, 1, 1, 1], [1, 1, 1, 1, 1, 1]) == 4\n\n[/Example 3]", "temperature": 0.821, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 927, "total_tokens": 1170, "completion_tokens": 243, "completion": "Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n###Code: \n\ndef twoSum(nums: List[int], target: int) -> List[int]:\n        hash_map = {}\n        for i, num in enumerate(nums):\n                complement = target - num\n                if complement in hash_map:\n                        return [hash_map[complement], i]\n                hash_map[num] = i\n        return []\n\n###Testcases: \n\nassert twoSum([2, 7, 11, 15], 9) == [0, 1]\nassert twoSum([3, 2, 4], 6) == [1, 2]\nassert twoSum([3, 3], 6) == [0, 1]\nassert twoSum([0, 4, 3, 0], 0) == [0, 3]\nassert twoSum([-1, -2, -3, -4, -5], -8) == [2, 4]\n\n[/Example 3]", "temperature": 0.845, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 817, "total_tokens": 1128, "completion_tokens": 311, "completion": "You are given an array of strings. Your task is to group the strings that are anagrams into separate lists.\n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs: list) -> list:\n        grouped_anagrams = defaultdict(list)\n        for s in strs:\n                grouped_anagrams[''.join(sorted(s))].append(s)\n        return list(grouped_anagrams.values())\n```\n\n###Testcases: \n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\", \"tinsel\"]) == [['listen', 'silent', 'enlist', 'inlets', 'tinsel']]\nassert groupAnagrams([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"xyz\"]) == [['abc'], ['def'], ['ghi'], ['jkl'], ['mno'], ['pqr'], ['xyz']]\nassert groupAnagrams([\"debitcard\", \"elvis\", \"silent\", \"badcredit\", \"lives\", \"freedom\", \"listen\", \"levis\"]) == [['debitcard', 'badcredit'], ['elvis', 'lives', 'levis'], ['silent', 'listen'], ['freedom']]\nassert groupAnagrams([]) == []\n```\n\n[/Example 3]", "temperature": 0.793, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 895, "total_tokens": 1119, "completion_tokens": 224, "completion": "Given a list of words, group all words with the same set of characters.\n\n###Code: \n\nfrom collections import defaultdict\n\ndef groupAnagrams(strs):\n    ans = defaultdict(list)\n    for s in strs:\n        ans[tuple(sorted(s))].append(s)\n    return ans.values()\n\n\n###Testcases: \n\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\"]) == [['listen', 'silent', 'enlist', 'inlets']]\nassert groupAnagrams([\"abc\", \"def\", \"bca\", \"fed\", \"cab\"]) == [['abc', 'bca', 'cab'], ['def', 'fed']]\nassert groupAnagrams([\"a\"]) == [['a']]\nassert groupAnagrams([]) == []\nassert groupAnagrams([\"abc\", \"cba\", \"bac\"]) == [['abc', 'cba', 'bac']]\n\n[/Example 3]", "temperature": 0.64, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 817, "total_tokens": 1151, "completion_tokens": 334, "completion": "Given a list of strings, the task is to group the anagrams together.\n\n###Code: \n\ndef groupAnagrams(strs: List[str]) -> List[List[str]]:\n    anagrams = {}\n    for s in strs:\n        sorted_s = ''.join(sorted(s))\n        if sorted_s in anagrams:\n            anagrams[sorted_s].append(s)\n        else:\n            anagrams[sorted_s] = [s]\n    return list(anagrams.values())\n\n\n###Testcases: \n\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\", \"tinsel\"]) == [['listen', 'silent', 'enlist', 'inlets', 'tinsel']]\nassert groupAnagrams([\"debitcard\", \"elvis\", \"silent\", \"badcredit\", \"lives\", \"freedom\", \"listen\", \"levis\"]) == [['debitcard', 'badcredit'], ['elvis', 'lives', 'levis'], ['silent', 'listen'], ['freedom']]\nassert groupAnagrams([\"abc\", \"def\", \"bca\", \"fed\", \"cba\", \"edf\"]) == [['abc', 'bca', 'cba'], ['def', 'fed', 'edf']]\nassert groupAnagrams([\"car\", \"arc\", \"rat\", \"tar\", \"art\"]) == [['car', 'arc'], ['rat', 'tar', 'art']]\n\n[/Example 3]", "temperature": 0.698, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 716, "total_tokens": 963, "completion_tokens": 247, "completion": "Given two strings s and t, determine if they are isomorphic. Two strings are isomorphic if the characters in s can be replaced to get t.\n\n###Code: \n\n```python\ndef isIsomorphic(s: str, t: str) -> bool:\n    if len(s) != len(t):\n        return False\n    \n    s_map = {}\n    t_map = {}\n    \n    for i in range(len(s)):\n        if s[i] in s_map:\n            if s_map[s[i]] != t[i]:\n                return False\n        else:\n            s_map[s[i]] = t[i]\n        \n        if t[i] in t_map:\n            if t_map[t[i]] != s[i]:\n                return False\n        else:\n            t_map[t[i]] = s[i]\n    \n    return True\n```\n\n###Testcases: \n\n```python\nassert isIsomorphic(\"egg\", \"add\") == True\nassert isIsomorphic(\"foo\", \"bar\") == False\nassert isIsomorphic(\"paper\", \"title\") == True\nassert isIsomorphic(\"ab\", \"aa\") == False\nassert isIsomorphic(\"13\", \"42\") == True\n```\n\n[/Example 3]", "temperature": 0.712, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 761, "total_tokens": 1005, "completion_tokens": 244, "completion": "Write a function that takes in a list of strings and returns a dictionary where the keys are the unique strings and the values are the frequencies of those strings in the input list.\n\n###Code: \n\n```python\ndef string_frequency(strings: list) -> dict:\n    freq_map = {}\n    for string in strings:\n        if string in freq_map:\n            freq_map[string] += 1\n        else:\n            freq_map[string] = 1\n    return freq_map\n```\n\n###Testcases: \n\n```python\nassert string_frequency([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\"]) == {'apple': 3, 'banana': 2, 'orange': 1}\nassert string_frequency([\"a\", \"b\", \"c\"]) == {'a': 1, 'b': 1, 'c': 1}\nassert string_frequency([]) == {}\nassert string_frequency([\"apple\", \"apple\", \"apple\"]) == {'apple': 3}\nassert string_frequency([\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"]) == {'a': 2, 'b': 2, 'c': 2}\n```", "temperature": 0.807, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 969, "total_tokens": 1238, "completion_tokens": 269, "completion": "Given a list of words, group all the words that are anagrams.\n\n###Code: \n\ndef groupAnagrams(words: list) -> list:\n    anagrams = {}\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        if sorted_word in anagrams:\n            anagrams[sorted_word].append(word)\n        else:\n            anagrams[sorted_word] = [word]\n    return list(anagrams.values())\n\n\n###Testcases: \n\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\", \"tinsel\"]) == [['listen', 'silent', 'enlist', 'inlets', 'tinsel']]\nassert groupAnagrams([\"abc\", \"def\", \"cab\", \"fed\", \"bca\"]) == [['abc', 'cab', 'bca'], ['def', 'fed']]\nassert groupAnagrams([]) == []\nassert groupAnagrams([\"a\"]) == [['a']]\nassert groupAnagrams([\"a\", \"b\", \"c\", \"d\"]) == [['a'], ['b'], ['c'], ['d']]\n\n[/Example 3]", "temperature": 0.654, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 891, "total_tokens": 1189, "completion_tokens": 298, "completion": "Given a list of integers, return the majority element if it exists. A majority element appears more than n/2 times where n is the length of the list. If there is no majority element, return -1.\n\n###Code: \n\ndef majorityElement(arr: list) -> int:\n        count = {}\n        for num in arr:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n            if count[num] > len(arr) // 2:\n                return num\n        return -1\n\n\n###Testcases: \n\nassert majorityElement([3, 3, 4, 2, 4, 4, 2, 4, 4]) == 4\nassert majorityElement([1, 2, 3, 1, 1, 1, 4, 5, 6]) == 1\nassert majorityElement([1, 2, 3, 4]) == -1\nassert majorityElement([8, 8, 6, 6, 6, 6, 8]) == 6\nassert majorityElement([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8]) == 1\n\n[/Example 3]", "temperature": 0.951, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 835, "total_tokens": 1102, "completion_tokens": 267, "completion": "Given a list of strings, write a function to group the strings that are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once.\n\n###Code: \n\ndef groupAnagrams(strs: list) -> list:\n        ans = {}\n        for s in strs:\n            key = ''.join(sorted(s))\n            if key in ans:\n                ans[key].append(s)\n            else:\n                ans[key] = [s]\n        return list(ans.values())\n\n###Testcases: \n\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\", \"tinsel\"]) == [['listen', 'silent', 'enlist', 'inlets', 'tinsel']]\nassert groupAnagrams([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"]) == [['abc'], ['def'], ['ghi'], ['jkl'], ['mno']]\nassert groupAnagrams([]) == []\nassert groupAnagrams([\"a\"]) == [['a']]\n\n[/Example 3]", "temperature": 0.828, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 716, "total_tokens": 935, "completion_tokens": 219, "completion": "Given a list of strings, write a function to group the anagrams together.\n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs: List[str]) -> List[List[str]]:\n    grouped_anagrams = defaultdict(list)\n    for s in strs:\n        grouped_anagrams[''.join(sorted(s))].append(s)\n    return list(grouped_anagrams.values())\n```\n\n###Testcases: \n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\"]) == [['listen', 'silent', 'inlets'], ['enlist']]\nassert groupAnagrams([\"abc\", \"def\", \"cab\", \"fed\"]) == [['abc', 'cab'], ['def', 'fed']]\nassert groupAnagrams([\"a\"]) == [['a']]\nassert groupAnagrams([]) == []\n```\n\n[/Example 3]", "temperature": 0.605, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 793, "total_tokens": 1029, "completion_tokens": 236, "completion": "You are given two lists of integers, list1 and list2. Find the intersection of list1 and list2.\n\n###Code:\n\ndef intersection(list1: list, list2: list) -> list:\n    set1 = set(list1)\n    set2 = set(list2)\n    return list(set1.intersection(set2))\n\n\n###Testcases:\n\nassert intersection([1, 2, 2, 1], [2, 2]) == [2]\nassert intersection([4, 9, 5], [9, 4, 9, 8, 4]) == [9, 4]\nassert intersection([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == []\nassert intersection([1, 1, 1, 1], [1, 1, 1]) == [1]\nassert intersection([], []) == []\nassert intersection([3, 3, 3, 3, 3], [3, 3, 3, 3, 3]) == [3]\n\n[/Example 3]", "temperature": 0.754, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 692, "total_tokens": 952, "completion_tokens": 260, "completion": "Given a list of strings, find the group of anagrams. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. \n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs: List[str]) -> List[List[str]]:\n    anagrams = defaultdict(list)\n    for s in strs:\n        count = [0] * 26\n        for c in s:\n            count[ord(c) - ord('a')] += 1\n        anagrams[tuple(count)].append(s)\n    return list(anagrams.values())\n```\n\n###Testcases: \n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\"]) == [['listen', 'silent', 'enlist', 'inlets']]\nassert groupAnagrams([\"a\"]) == [['a']]\nassert groupAnagrams([\"\"]) == [['']]\nassert groupAnagrams([\"abc\", \"def\", \"ghi\"]) == [['abc'], ['def'], ['ghi']]\n```", "temperature": 0.621, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 895, "total_tokens": 1173, "completion_tokens": 278, "completion": "Given two arrays, write a function to compute their intersection.\n\n###Code: \n\ndef intersection(nums1: list, nums2: list) -> list:\n    dict1 = {}\n    result = []\n    for num in nums1:\n        dict1[num] = dict1.get(num, 0) + 1\n    for num in nums2:\n        if num in dict1 and dict1[num] > 0:\n            result.append(num)\n            dict1[num] -= 1\n    return result\n\n###Testcases: \n\nassert intersection([1, 2, 2, 1], [2, 2]) == [2, 2]\nassert intersection([4, 9, 5], [9, 4, 9, 8, 4]) == [4, 9]\nassert intersection([4, 9, 5], [9, 4, 8, 7]) == [4, 9]\nassert intersection([1, 2, 3, 4], [5, 6, 7, 8]) == []\nassert intersection([1, 2, 2, 1], []) == []\nassert intersection([], []) == []\nassert intersection([1, 2, 3], [4, 5, 6]) == []\n\n[/Example 3]", "temperature": 0.927, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 793, "total_tokens": 1029, "completion_tokens": 236, "completion": "You are given an array of strings. Write a function to group the strings that are anagrams into separate lists.\n\n###Code:\n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs: List[str]) -> List[List[str]]:\n    groups = defaultdict(list)\n    for s in strs:\n        key = ''.join(sorted(s))\n        groups[key].append(s)\n    return list(groups.values())\n```\n\n###Testcases:\n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\", \"tinsel\"]) == [['listen', 'silent', 'enlist', 'inlets', 'tinsel']]\nassert groupAnagrams([\"abc\", \"def\", \"xy\", \"yz\", \"bac\", \"fed\"]) == [['abc', 'bac'], ['def', 'fed'], ['xy'], ['yz']]\nassert groupAnagrams([]) == []\nassert groupAnagrams([\"a\"]) == [[\"a\"]]\n```", "temperature": 0.718, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 790, "total_tokens": 1034, "completion_tokens": 244, "completion": "Given a list of strings, find the group of anagrams and return them in a list of lists. Anagrams are words or phrases that contain the same characters, but in a different order. \n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs: List[str]) -> List[List[str]]:\n    anagrams = defaultdict(list)\n    for s in strs:\n        key = ''.join(sorted(s))\n        anagrams[key].append(s)\n    return list(anagrams.values())\n```\n\n###Testcases: \n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\"]) == [['listen', 'silent', 'enlist', 'inlets']]\nassert groupAnagrams([\"abc\", \"def\", \"cba\", \"fed\", \"bca\"]) == [['abc', 'cba', 'bca'], ['def', 'fed']]\nassert groupAnagrams([\"a\"]) == [['a']]\nassert groupAnagrams([]) == []\n```", "temperature": 0.619, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 761, "total_tokens": 999, "completion_tokens": 238, "completion": "Given two strings s and t, write a function to determine if t is an anagram of s.\n\n###Code: \n\ndef isAnagram(s: str, t: str) -> bool:\n    if len(s) != len(t):\n        return False\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in t:\n        if char in count:\n            count[char] -= 1\n        else:\n            return False\n    for key in count:\n        if count[key] != 0:\n            return False\n    return True\n\n###Testcases: \n\nassert isAnagram(\"anagram\", \"nagaram\") == True\nassert isAnagram(\"rat\", \"car\") == False\nassert isAnagram(\"listen\", \"silent\") == True\nassert isAnagram(\"hello\", \"world\") == False\nassert isAnagram(\"abc\", \"abcd\") == False\nassert isAnagram(\"a\", \"ab\") == False\nassert isAnagram(\"\", \"\") == True\n\n[/Example 3]", "temperature": 0.723, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 826, "total_tokens": 1040, "completion_tokens": 214, "completion": "Given a list of words, group the anagrams together.\n\n###Code:\n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(words: List[str]) -> List[List[str]]:\n    grouped_anagrams = defaultdict(list)\n    for word in words:\n        count = [0] * 26\n        for letter in word:\n            count[ord(letter) - ord('a')] += 1\n        grouped_anagrams[tuple(count)].append(word)\n    return list(grouped_anagrams.values())\n```\n\n###Testcases:\n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"tinsel\"]) == [['listen', 'silent', 'enlist'], ['tinsel']]\nassert groupAnagrams([\"a\"]) == [['a']]\nassert groupAnagrams([\"\"]) == [['']]\n```\n\n[/Example 3]", "temperature": 0.982, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 790, "total_tokens": 1039, "completion_tokens": 249, "completion": "Given a list of integers, return the indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n###Code: \n\n```python\ndef twoSum(nums: list, target: int) -> list:\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n```\n\n###Testcases: \n\n```python\nassert twoSum([2, 7, 11, 15], 9) == [0, 1]\nassert twoSum([3, 2, 4], 6) == [1, 2]\nassert twoSum([3, 3], 6) == [0, 1]\nassert twoSum([0, 4, 3, 0], 0) == [0, 3]\nassert twoSum([-1, -2, -3, -4, -5], -8) == [2, 4]\n```\n\n[/Example 3]", "temperature": 0.741, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 716, "total_tokens": 930, "completion_tokens": 214, "completion": "Given a list of strings, write a function to group the anagrams together.\n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs: List[str]) -> List[List[str]]:\n        anagrams = defaultdict(list)\n        for s in strs:\n            count = [0] * 26\n            for c in s:\n                count[ord(c) - ord('a')] += 1\n            anagrams[tuple(count)].append(s)\n        return list(anagrams.values())\n```\n\n###Testcases: \n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\", \"banana\"]) == [['listen', 'silent', 'enlist', 'inlets'], ['banana']]\nassert groupAnagrams([\"a\"]) == [['a']]\nassert groupAnagrams([]) == []\n```", "temperature": 0.727, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 790, "total_tokens": 1026, "completion_tokens": 236, "completion": "Given a list of strings, return a dictionary where the keys are the unique strings and the values are the count of each string in the list.\n\n###Code:\n\n```python\ndef count_strings(strings: list) -> dict:\n    string_count = {}\n    for s in strings:\n        if s in string_count:\n            string_count[s] += 1\n        else:\n            string_count[s] = 1\n    return string_count\n```\n\n###Testcases:\n\n```python\nassert count_strings([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\"]) == {'apple': 3, 'banana': 2, 'orange': 1}\nassert count_strings([\"a\", \"b\", \"a\", \"c\", \"b\", \"a\"]) == {'a': 3, 'b': 2, 'c': 1}\nassert count_strings([\"hello\", \"world\", \"hello\", \"hello\", \"world\"]) == {'hello': 3, 'world': 2}\nassert count_strings([]) == {}\nassert count_strings([\"a\"]) == {'a': 1}\n```\n\n[/Example 3]", "temperature": 0.899, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 826, "total_tokens": 1025, "completion_tokens": 199, "completion": "Given two lists of integers, find the intersection of the two lists. The intersection should be represented as a list of distinct elements.\n\n###Code: \n\ndef intersection(nums1: list, nums2: list) -> list:\n    set1 = set(nums1)\n    set2 = set(nums2)\n    return list(set1.intersection(set2))\n\n\n###Testcases: \n\nassert intersection([1, 2, 2, 1], [2, 2]) == [2]\nassert intersection([4, 9, 5], [9, 4, 9, 8, 4]) == [9, 4]\nassert intersection([1, 2, 3, 4], [5, 6, 7, 8]) == []\nassert intersection([1, 2, 3, 4], []) == []\nassert intersection([], [1, 2, 3, 4]) == []\n\n[/Example 3]", "temperature": 0.642, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 871, "total_tokens": 1119, "completion_tokens": 248, "completion": "Given two strings, write a function to determine if one string is a permutation of the other.\n\n###Code:\n\n```python\ndef isPermutation(str1: str, str2: str) -> bool:\n    if len(str1) != len(str2):\n        return False\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str2:\n        if char in char_count:\n            char_count[char] -= 1\n            if char_count[char] < 0:\n                return False\n        else:\n            return False\n    return True\n```\n\n###Testcases:\n\n```python\nassert isPermutation('abc', 'cab') == True\nassert isPermutation('hello', 'world') == False\nassert isPermutation('123', '321') == True\nassert isPermutation('abc', 'abcd') == False\nassert isPermutation('', '') == True\nassert isPermutation('aaa', 'aaa') == True\nassert isPermutation('abc', 'abb') == False\n```\n\n[/Example 3]", "temperature": 0.692, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 817, "total_tokens": 1055, "completion_tokens": 238, "completion": "Given an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n###Code: \n\ndef twoSum(nums: List[int], target: int) -> List[int]:\n        h = {}\n        for i, num in enumerate(nums):\n                n = target - num\n                if n not in h:\n                        h[num] = i\n                else:\n                        return [h[n], i]\n\n\n###Testcases: \n\nassert twoSum([2, 7, 11, 15], 9) == [0, 1]\nassert twoSum([3, 2, 4], 6) == [1, 2]\nassert twoSum([3, 3], 6) == [0, 1]\nassert twoSum([0, 4, 3, 0], 0) == [0, 3]\nassert twoSum([-1, -2, -3, -4, -5], -8) == [2, 4]\n\n[/Example 3]", "temperature": 0.751, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 895, "total_tokens": 1299, "completion_tokens": 404, "completion": "Given two arrays, write a function to compute their intersection. Each element in the result should appear as many times as it shows in both arrays. The result can be in any order.\n\n###Code: \n\ndef intersect(arr1: list, arr2: list) -> list:\n        num1, num2 = {}, {}\n        for num in arr1:\n                if num in num1:\n                        num1[num] += 1\n                else:\n                        num1[num] = 1\n        for num in arr2:\n                if num in num2:\n                        num2[num] += 1\n                else:\n                        num2[num] = 1\n        intersection = []\n        for key in num1:\n                if key in num2:\n                        intersection.extend([key] * min(num1[key], num2[key]))\n        return intersection\n\n\n###Testcases: \n\nassert intersect([1, 2, 2, 1], [2, 2]) == [2, 2]\nassert intersect([4, 9, 5], [9, 4, 9, 8, 4]) == [4, 9]\nassert intersect([5, 1, 2, 1, 5, 2], [1, 5, 2, 2]) == [1, 5, 2, 2]\nassert intersect([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == []\nassert intersect([1, 1, 2, 2], [2, 2, 1]) == [2, 2, 1]\nassert intersect([1, 2, 3, 4], [5, 6, 7, 8]) == []\nassert intersect([1], [1, 1]) == [1]\nassert intersect([], []) == []\n\n\n[/Example 3]", "temperature": 0.985, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 891, "total_tokens": 1153, "completion_tokens": 262, "completion": "Given a list of strings, write a function to group the anagrams together.\n\n###Code: \n\n```python\nfrom collections import defaultdict\n\ndef groupAnagrams(strs: List[str]) -> List[List[str]]:\n        grouped_anagrams = defaultdict(list)\n        for s in strs:\n            grouped_anagrams[tuple(sorted(s))].append(s)\n        return list(grouped_anagrams.values())\n```\n\n###Testcases: \n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\", \"tinsel\"]) == [['listen', 'silent', 'enlist', 'inlets', 'tinsel']]\nassert groupAnagrams([\"abc\", \"def\", \"cba\", \"fed\", \"bca\"]) == [['abc', 'cba', 'bca'], ['def', 'fed']]\nassert groupAnagrams([\"abcd\", \"dcba\", \"llama\", \"llama\", \"llama\"]) == [['abcd', 'dcba'], ['llama', 'llama', 'llama']]\nassert groupAnagrams([]) == []\n```", "temperature": 0.641, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 761, "total_tokens": 1016, "completion_tokens": 255, "completion": "Given a list of integers, write a function to return the indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n###Code: \n\n```python\ndef two_sum(nums: List[int], target: int) -> List[int]:\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []\n```\n\n###Testcases: \n\n```python\nassert two_sum([2, 7, 11, 15], 9) == [0, 1]\nassert two_sum([3, 2, 4], 6) == [1, 2]\nassert two_sum([3, 3], 6) == [0, 1]\nassert two_sum([1, 5, 3, 6], 9) == [1, 3]\nassert two_sum([9, 2, 4, 7, 11, 15], 13) == [1, 2]\n```", "temperature": 0.926, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 859, "total_tokens": 1168, "completion_tokens": 309, "completion": "Given a list of integers, write a function to find the number of subarrays with sum divisible by K.\n\n###Code: \n\n```python\ndef subarraysDivByK(A: List[int], K: int) -> int:\n    count = 0\n    prefix_sum = 0\n    seen_remainders = {0: 1}\n    \n    for num in A:\n        prefix_sum += num\n        remainder = prefix_sum % K\n        complement = (K - remainder) % K\n        count += seen_remainders.get(complement, 0)\n        seen_remainders[remainder] = seen_remainders.get(remainder, 0) + 1\n    \n    return count\n```\n\n\n###Testcases: \n\n```python\nassert subarraysDivByK([4,5,0,-2,-3,1], 5) == 7\nassert subarraysDivByK([5], 9) == 0\nassert subarraysDivByK([4,5,0,-2,-3,1], 6) == 5\nassert subarraysDivByK([5,10,11,9,5,5,5,5,5], 5) == 16\nassert subarraysDivByK([3,1,2,3,4], 5) == 1\nassert subarraysDivByK([17,18,19,21,22,23], 6) == 2\n```\n\n\n[/Example 3]", "temperature": 0.848, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 871, "total_tokens": 1119, "completion_tokens": 248, "completion": "Given a list of integers, return the indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n###Code: \n\n```python\ndef twoSum(nums: List[int], target: int) -> List[int]:\n    hashmap = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in hashmap:\n            return [hashmap[complement], i]\n        hashmap[num] = i\n    return []\n```\n\n###Testcases: \n\n```python\nassert twoSum([2, 7, 11, 15], 9) == [0, 1]\nassert twoSum([3, 2, 4], 6) == [1, 2]\nassert twoSum([3, 3], 6) == [0, 1]\nassert twoSum([1, 3, 7, 9, 2], 11) == [2, 3]\nassert twoSum([5, 4, 10, 6, 7], 14) == [1, 3]\n```", "temperature": 0.946, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 835, "total_tokens": 1296, "completion_tokens": 461, "completion": "You are given two strings, s and t. You need to find the minimum window in s which will contain all the characters in t. If there is no such window in s that covers all characters in t, return an empty string. If there are multiple such windows, you can return any one.\n\n###Code: \n\ndef minWindow(s: str, t: str) -> str:\n    if not s or not t:\n        return \"\"\n    \n    dict_t = {}\n    for char in t:\n        if char in dict_t:\n            dict_t[char] += 1\n        else:\n            dict_t[char] = 1\n            \n    required = len(dict_t)\n    l, r = 0, 0\n    \n    formed = 0\n    window_counts = {}\n    \n    ans = float(\"inf\"), None, None\n    \n    while r < len(s):\n        character = s[r]\n        window_counts[character] = window_counts.get(character, 0) + 1\n        \n        if character in dict_t and window_counts[character] == dict_t[character]:\n            formed += 1\n            \n        while l <= r and formed == required:\n            character = s[l]\n            if r - l + 1 < ans[0]:\n                ans = (r - l + 1, l, r)\n                \n            window_counts[character] -= 1\n            if character in dict_t and window_counts[character] < dict_t[character]:\n                formed -= 1\n                \n            l += 1\n        r += 1\n        \n    return \"\" if ans[0] == float(\"inf\") else s[ans[1]: ans[2] + 1]\n\n\n###Testcases:\n\nassert minWindow(\"ADOBECODEBANC\", \"ABC\") == \"BANC\"\nassert minWindow(\"this is a test string\", \"tist\") == \"t stri\"\nassert minWindow(\"zoomlazaportotmolzzzz\", \"z\") == \"z\"\nassert minWindow(\"a\", \"a\") == \"a\"\nassert minWindow(\"a\", \"aa\") == \"\"\nassert minWindow(\"cabwefgewcwaefgcf\", \"cae\") == \"cwae\" \n\n[/Example 3]", "temperature": 0.958, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 835, "total_tokens": 1099, "completion_tokens": 264, "completion": "You are given two arrays, arr1 and arr2. You need to find the intersection of the two arrays. The intersection is a new array containing distinct elements that are common to both arr1 and arr2.\n\n###Code:\n\ndef intersection(arr1: list, arr2: list) -> list:\n    set1 = set(arr1)\n    set2 = set(arr2)\n    return list(set1.intersection(set2))\n\n\n###Testcases:\n\nassert intersection([1, 2, 2, 1], [2, 2]) == [2]\nassert intersection([4, 9, 5], [9, 4, 9, 8, 4]) == [9, 4]\nassert intersection([1, 2, 3], [4, 5, 6]) == []\nassert intersection([1, 2, 2, 1], [2, 2, 2, 2]) == [2]\nassert intersection([1, 2, 3], [3, 2, 1]) == [1, 2, 3]\nassert intersection([1, 2, 2, 1], [1, 2, 3]) == [1, 2]\n\n[/Example 3]", "temperature": 0.956, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 748, "total_tokens": 992, "completion_tokens": 244, "completion": "You are given a list of strings. Group the anagrams together and return them as a list of lists.\n\n###Code:\n\n```python\ndef groupAnagrams(strs: List[str]) -> List[List[str]]:\n    anagrams = {}\n    for s in strs:\n        sorted_str = ''.join(sorted(s))\n        if sorted_str in anagrams:\n            anagrams[sorted_str].append(s)\n        else:\n            anagrams[sorted_str] = [s]\n    return list(anagrams.values())\n```\n\n###Testcases:\n\n```python\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"hello\", \"world\", \"abcd\", \"dcba\"]) == [['listen', 'silent'], ['hello'], ['world'], ['abcd', 'dcba']]\nassert groupAnagrams([\"abc\", \"def\", \"ghi\"]) == [['abc'], ['def'], ['ghi']]\nassert groupAnagrams([]) == []\nassert groupAnagrams([\"a\"]) == [['a']]\n```\n\n[/Example 3]", "temperature": 0.808, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 871, "total_tokens": 1142, "completion_tokens": 271, "completion": "Given two strings s and t, determine if they are isomorphic. Two strings are isomorphic if the characters in s can be replaced to get t. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.\n\n###Code: \n\n```python\ndef isIsomorphic(s: str, t: str) -> bool:\n    if len(s) != len(t):\n        return False\n    \n    s_map, t_map = {}, {}\n    \n    for i in range(len(s)):\n        if s[i] not in s_map and t[i] not in t_map:\n            s_map[s[i]] = t[i]\n            t_map[t[i]] = s[i]\n        else:\n            if s_map.get(s[i]) != t[i] or t_map.get(t[i]) != s[i]:\n                return False\n    return True\n```\n\n###Testcases: \n\n```python\nassert isIsomorphic(\"egg\", \"add\") == True\nassert isIsomorphic(\"foo\", \"bar\") == False\nassert isIsomorphic(\"paper\", \"title\") == True\nassert isIsomorphic(\"badc\", \"baba\") == False\nassert isIsomorphic(\"abcd\", \"efgh\") == True\n```", "temperature": 0.754, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 817, "total_tokens": 1073, "completion_tokens": 256, "completion": "Given a list of integers, the task is to check if the array contains two numbers that add up to a specific target.\n\n###Code: \n\ndef twoSum(nums: list, target: int) -> bool:\n        if len(nums) <= 1:\n                return False\n        seen = set()\n        for num in nums:\n                complement = target - num\n                if complement in seen:\n                        return True\n                seen.add(num)\n        return False\n\n\n###Testcases: \n\nassert twoSum([2, 7, 11, 15], 9) == True\nassert twoSum([3, 2, 4], 6) == True\nassert twoSum([3, 3], 6) == True\nassert twoSum([1, 2, 3, 4, 5], 10) == True\nassert twoSum([-1, 0, 1, 2, -1, -4], 3) == True\nassert twoSum([5, 8, 6, 3, 2], 10) == True\nassert twoSum([1, 2, 3, 4, 5], 100) == False\n\n[/Example 3]", "temperature": 0.865, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 895, "total_tokens": 1183, "completion_tokens": 288, "completion": "Given two lists, list1 and list2, write a function to check if list2 is a subset of list1. A subset is a set that contains all the elements of another set.\n\n###Code: \n\ndef isSubset(list1: list, list2: list) -> bool:\n    set1 = set(list1)\n    set2 = set(list2)\n    return set2.issubset(set1)\n\n\n###Testcases: \n\nassert isSubset([1, 2, 3, 4, 5], [2, 3, 4]) == True\nassert isSubset([1, 2, 3, 4, 5], [6, 7, 8]) == False\nassert isSubset([1, 2, 3, 4, 5], [1, 3, 5]) == True\nassert isSubset([1, 2, 2, 3, 4, 4, 5], [2, 3, 4]) == True\nassert isSubset([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert isSubset([], []) == True\nassert isSubset([1, 2, 3, 4, 5], []) == True\n\n[/Example 3]", "temperature": 0.983, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "b9f3e5e1-657a-413f-a266-970047b2222c", "question": "Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K. ", "examples": "Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4\nOutput: 3 4 4 3\nExplanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3\n                      Second window is {2, 1, 3, 4} count of distinct numbers is 4\n                      Third window is {1, 3, 4, 2} count of distinct numbers is 4\n                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3\n\nInput: arr[] = {1, 2, 4, 4}, K = 2\nOutput: 2 2 1\nExplanation: First window is {1, 2}, count of distinct numbers is 2\n                      First window is {2, 4}, count of distinct numbers is 2\n                      First window is {4, 4}, count of distinct numbers is 1", "link": "https://www.geeksforgeeks.org/count-distinct-elements-in-every-window-of-size-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def countDistinct(arr: list, K: int) -> list:\n        def countWindowDistinct(win, K):\n                dist_count = 0\n                for i in range(K):\n                        j = 0\n                        while j < i:\n                                if (win[i] == win[j]):\n                                        break\n                                else:\n                                        j += 1\n                        if (j == i):\n                                dist_count += 1\n\n                return dist_count\n        N = len(arr)\n        result = []\n        for i in range(N - K + 1):\n                result.append(countWindowDistinct(arr[i:K + i], K))\n        return result\n", "asserts": ["assert countDistinct([1, 2, 1, 3, 4, 2, 3], 4) == [3,4,4,3]", "assert countDistinct([10, 10, 10, 10], 1) == [1, 1, 1, 1]", "assert countDistinct([1], 1) == [1]", "assert countDistinct([4, 4, 4, 4, 4, 4, 4], 4) == [1, 1, 1, 1]", "assert countDistinct([9, 8, 7, 8, 7, 6, 5], 3) == [3, 2, 2, 3, 3]", "assert countDistinct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [10]"]}], "category": "Hash", "prompt_tokens": 969, "total_tokens": 1175, "completion_tokens": 206, "completion": "Given a list of strings, group the anagrams together.\n\n###Code: \n\ndef groupAnagrams(strs: List[str]) -> List[List[str]]:\n        groups = {}\n        for s in strs:\n            key = ''.join(sorted(s))\n            if key not in groups:\n                groups[key] = [s]\n            else:\n                groups[key].append(s)\n        return list(groups.values())\n\n###Testcases: \n\nassert groupAnagrams([\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]\nassert groupAnagrams([\"listen\", \"silent\", \"enlist\", \"inlets\"]) == [['listen', 'silent', 'enlist', 'inlets']]\nassert groupAnagrams([\"abc\", \"def\", \"xyz\"]) == [['abc'], ['def'], ['xyz']]\nassert groupAnagrams([\"a\"]) == [['a']]\nassert groupAnagrams([]) == []\n\n[/Example 3]", "temperature": 0.645, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 895, "total_tokens": 1336, "completion_tokens": 441, "completion": "Given a list of integers, find all pairs that add up to a specific target sum.\n\n###Code: \n\ndef findPairs(arr: list, target: int) -> list:\n    pairs = []\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            pairs.append((complement, num))\n        seen.add(num)\n    return pairs\n\n\n###Testcases: \n\nassert findPairs([1, 2, 4, 5, 6, 7, 8], 9) == [(2, 7), (4, 5)]\nassert findPairs([3, 4, 5, 6, 7, 8], 10) == [(3, 7), (4, 6)]\nassert findPairs([1, 2, 3, 4, 5, 6, 7, 8], 10) == [(2, 8), (3, 7), (4, 6)]\nassert findPairs([1, 2, 3, 4, 5, 6, 7, 8], 20) == []\nassert findPairs([1, 2, 3, 4, 5, 6, 7, 8], 8) == [(1, 7), (2, 6), (3, 5)]\nassert findPairs([1, 2, 3, 4, 5, 6, 7, 8], 7) == [(1, 6), (2, 5)]\nassert findPairs([1, 2, 3, 4, 5, 6, 7, 8], 17) == [(9, 8)]\nassert findPairs([1, 1, 1, 1, 1, 1], 2) == [(1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]\n\n\n[/Example 3]", "temperature": 0.683, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 748, "total_tokens": 979, "completion_tokens": 231, "completion": "Given two arrays of integers, find the intersection of the two arrays. Each element in the result must be unique and you may return the result in any order.\n\n###Code: \n\n```python\ndef intersection(nums1: List[int], nums2: List[int]) -> List[int]:\n        set1 = set(nums1)\n        set2 = set(nums2)\n        return list(set1.intersection(set2))\n```\n\n###Testcases: \n\n```python\nassert intersection([1, 2, 2, 1], [2, 2]) == [2]\nassert intersection([4, 9, 5], [9, 4, 9, 8, 4]) == [9, 4]\nassert intersection([1, 2, 3, 4], [5, 6, 7, 8]) == []\nassert intersection([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4]\nassert intersection([], [1, 2, 3]) == []\n```\n\n[/Example 3]", "temperature": 0.888, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 895, "total_tokens": 1190, "completion_tokens": 295, "completion": "Given two lists, write a function to check if the elements in the first list are present in the second list.\n\n###Code: \n\n```python\ndef check_elements(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return set1.issubset(set2)\n```\n\n###Test cases:\n\n```python\nassert check_elements([1, 2, 3], [3, 2, 1, 4, 5]) == True\nassert check_elements([1, 2, 3], [4, 5, 6]) == False\nassert check_elements([], [1, 2, 3]) == True\nassert check_elements([1, 2, 3], []) == False\nassert check_elements([1, 2, 3], [1, 2, 3]) == True\nassert check_elements([1, 2, 3, 4], [1, 2, 3]) == True\nassert check_elements([1, 2, 3], [1, 2, 3, 4]) == False\n```\n\n###Explanation:\nIn this example, the function `check_elements` takes two lists as input and converts them into sets. Then, it uses the `issubset` method to check if the first set is a subset of the second set.\n\n[/Example 3]", "temperature": 0.746, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}, {"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}], "category": "Hash", "prompt_tokens": 895, "total_tokens": 1327, "completion_tokens": 432, "completion": "Given a list of integers, find the length of the largest subarray with a sum that equals 0.\n\n###Code:\n\n```python\ndef maxLengthSubarray(arr: list) -> int:\n    max_len = 0\n    prefix_sum = 0\n    prefix_sum_map = {}\n    \n    for i in range(len(arr)):\n        prefix_sum += arr[i]\n        \n        if arr[i] == 0 and max_len == 0:\n            max_len = 1\n        \n        if prefix_sum == 0:\n            max_len = i + 1\n        \n        if prefix_sum in prefix_sum_map:\n            max_len = max(max_len, i - prefix_sum_map[prefix_sum])\n        else:\n            prefix_sum_map[prefix_sum] = i\n    \n    return max_len\n```\n\n###Testcases:\n\n```python\nassert maxLengthSubarray([15, -2, 2, -8, 1, 7, 10, 23]) == 5\nassert maxLengthSubarray([0, 0, 0, 0, 0, 0, 0]) == 7\nassert maxLengthSubarray([1, 2, 3, 4, 5]) == 0\nassert maxLengthSubarray([1, 2, -5, 1, 2, 3]) == 2\nassert maxLengthSubarray([0, 1, -1, 2, -3, 3, 4, 0, -1, 2]) == 3\nassert maxLengthSubarray([1, -1, 1, 1, -1, -1]) == 6\nassert maxLengthSubarray([2, 8, -3, -5, 2, -4, 6, 1, 2, 1, -5, 5]) == 6\nassert maxLengthSubarray([4, 2, 5, 1, 2, 3, -5, 1, 3, -5]) == 5\n```\n\n[/Example 3]", "temperature": 0.883, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}, {"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}], "category": "Hash", "prompt_tokens": 748, "total_tokens": 1073, "completion_tokens": 325, "completion": "Given two arrays arr1[] and arr2[] of size n. It is given that both arrays contain distinct elements. The task is to count the total pairs from both arrays whose sum is equal to a given value x.\n\n###Code: \n\n```python\ndef countPairsWithGivenSum(arr1: list, arr2: list, x: int) -> int:\n    count = 0\n    set1 = set(arr1)\n    set2 = set(arr2)\n    for num in set1:\n        if x - num in set2:\n            count += 1\n    return count\n```\n\n###Testcases: \n\n```python\nassert countPairsWithGivenSum([1, 2, 4, 5, 7], [5, 6, 3, 4, 8], 9) == 3\nassert countPairsWithGivenSum([1, 2, 4, 5, 7], [5, 6, 3, 4, 8], 10) == 2\nassert countPairsWithGivenSum([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 9) == 2\nassert countPairsWithGivenSum([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 15) == 0\nassert countPairsWithGivenSum([1], [2], 3) == 1\n```", "temperature": 0.671, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 895, "total_tokens": 1215, "completion_tokens": 320, "completion": "Write a function to find all the pairs in an array that sum up to a specific target. Each input can be used once and the output should not contain duplicate pairs.\n\n###Code: \n\n```python\ndef findPairs(arr: list, target: int) -> list:\n    pairs = []\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            pair = (min(num, complement), max(num, complement))\n            if pair not in pairs:\n                pairs.append(pair)\n        seen.add(num)\n    return pairs\n```\n\n###Testcases:\n\n```python\nassert findPairs([1, 3, 2, 2], 4) == [(1, 3), (2, 2)]\nassert findPairs([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 10) == [(4, 6), (1, 9), (2, 8), (3, 7), (5, 5)]\nassert findPairs([1, 2, 3, 4, 5], 10) == [(5, 5)]\nassert findPairs([3, 3, 3, 3], 6) == [(3, 3)]\nassert findPairs([1, 2, 3, 4, 5], 2) == []\nassert findPairs([], 10) == []\n```\n\n[/Example 3]", "temperature": 0.841, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "b1f7f5f3-33da-411e-a123-00128141b44a", "question": "You are given an array of n-element. You have to make subsets from the array such that no subset contain duplicate elements. Find out minimum number of subset possible.", "examples": "Input : arr[] = {1, 2, 3, 4}\nOutput :1\nExplanation : A single subset can contains all \nvalues and all values are distinct\nInput : arr[] = {1, 2, 3, 3}\nOutput : 2\nExplanation : We need to create two subsets\n{1, 2, 3} and {3} [or {1, 3} and {2, 3}] such\nthat both subsets have distinct elements.", "link": "https://www.geeksforgeeks.org/minimum-number-subsets-distinct-elements/", "difficulty": "Easy", "categories": ["Hash"], "code": "def subset(ar: list) -> int:\n    n = len(ar)\n    res = 0\n \n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n \n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n             \n        res = max(res, count)\n     \n    return res\n", "asserts": ["assert subset([5, 6, 9, 3, 4, 3, 4]) == 2", "assert subset([1, 1, 1, 1, 1]) == 5", "assert subset([2, 2, 3, 3, 4, 4, 5, 5]) == 2", "assert subset([10]) == 1", "assert subset([]) == 0", "assert subset([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 5, 5]) == 5"]}], "category": "Hash", "prompt_tokens": 793, "total_tokens": 1061, "completion_tokens": 268, "completion": "Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice.\n\n###Code: \n\ndef twoSum(nums: List[int], target: int) -> List[int]:\n    hash_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in hash_map:\n            return [hash_map[complement], i]\n        hash_map[num] = i\n    return []\n\n\n###Testcases: \n\nassert twoSum([2, 7, 11, 15], 9) == [0, 1]\nassert twoSum([3, 2, 4], 6) == [1, 2]\nassert twoSum([3, 3], 6) == [0, 1]\nassert twoSum([0, 4, 3, 0], 0) == [0, 3]\nassert twoSum([-1, -2, -3, -4, -5], -8) == [2, 4]\nassert twoSum([1, 3, 4, 2], 6) == [1, 3]\n\n[/Example 3]", "temperature": 0.769, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "000bd3a5-0260-4ed5-a341-72498af9ffb8", "question": "Given an arr[] containing n integers and a positive integer k. The problem is to find the longest subarray\u2019s length with the sum of the elements divisible by the given value k.", "examples": "Input: arr[] = {2, 7, 6, 1, 4, 5}, k = 3\nOutput: 4\nExplanation: The subarray is {7, 6, 1, 4} with sum 18, which is divisible by 3.\n\nInput: arr[] = {-2, 2, -5, 12, -11, -1, 7}, k = 3\nOutput: 5", "link": "https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/", "difficulty": "Medium", "categories": ["Hash"], "code": "def longestSubarrWthSumDivByK(arr: list, k: int) -> int:\n        N = len(arr)\n        maxl = 0\n        for i in range(N):\n                sum1 = 0\n                for j in range(i, N):\n                        sum1 += arr[j]\n                        if sum1 % k == 0:\n                                maxl = max(maxl, j - i + 1)\n        return maxl\n", "asserts": ["assert longestSubarrWthSumDivByK([2, 7, 6, 1, 4, 5], 3) == 4", "assert longestSubarrWthSumDivByK([5, 10, 15, 20, 25], 5) == 5", "assert longestSubarrWthSumDivByK([1, -1, 1, -1, 1, -1, 1], 2) == 6", "assert longestSubarrWthSumDivByK([0, 0, 0, 0, 0], 1) == 5", "assert longestSubarrWthSumDivByK([], 5) == 0", "assert longestSubarrWthSumDivByK([7, 14, 21, 28, 35], 7) == 5"]}, {"author": "Karthik", "UUID": "d43ea585-bcee-4a3b-b341-aad2988f7cac", "question": "Given an array containing only 0s and 1s, find the length of the largest subarray which contains equal no of 0s and 1s. The expected time complexity is O(n). If no such array, return -1", "examples": "Input: arr[] = {1, 0, 1, 1, 1, 0, 0}\nOutput: 6\n(Starting and Ending indexes of output subarray)\n\nInput: arr[] = {1, 1, 1, 1}\nOutput: -1\n\nInput: arr[] = {0, 0, 1, 1, 0}\nOutput: 4", "link": "https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/", "difficulty": "Hard", "categories": ["Hash"], "code": "def findSubArray(arr: list) -> int:\n        n = len(arr)\n        sum = 0\n        maxsize = -1\n        for i in range(0, n-1):\n        \n                sum = -1 if(arr[i] == 0) else 1\n                for j in range(i + 1, n):\n                        sum = sum + (-1) if (arr[j] == 0) else sum + 1\n\n                        if (sum == 0 and maxsize < j-i + 1):\n                                \n                                maxsize = j - i + 1\n                                startindex = i\n        return maxsize\n", "asserts": ["assert findSubArray([1, 0, 0, 1, 0, 1, 1]) == 6", "assert findSubArray([0, 1, 0, 1, 0, 1, 0, 1]) == 8", "assert findSubArray([1, 1, 1, 0, 0, 1, 0, 0, 1]) == 8", "assert findSubArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == -1", "assert findSubArray([1, 0, 1, 1, 0, 1, 0, 1, 0]) == 8", "assert findSubArray([]) == -1", "assert findSubArray([1, 0]) == 2", "assert findSubArray([1, 0, 1]) == 2"]}], "category": "Hash", "prompt_tokens": 927, "total_tokens": 1202, "completion_tokens": 275, "completion": "You have been given an array of integers, your task is to find the number of subarrays with the sum equal to 0.\n\n###Code:\n\n```python\nfrom collections import defaultdict\n\ndef countSubarraysWithSumZero(arr: list) -> int:\n    prefix_sum = 0\n    count = 0\n    sum_count = defaultdict(int)\n    sum_count[0] = 1\n    \n    for num in arr:\n        prefix_sum += num\n        if prefix_sum in sum_count:\n            count += sum_count[prefix_sum]\n        sum_count[prefix_sum] += 1\n    \n    return count\n```\n\n###Testcases:\n\n```python\nassert countSubarraysWithSumZero([4, 2, -3, 1, 6]) == 2\nassert countSubarraysWithSumZero([4, 2, 0, 1, 6]) == 1\nassert countSubarraysWithSumZero([1, 1, 1, 1, 1]) == 0\nassert countSubarraysWithSumZero([0, 0, 0, 0, 0]) == 15\nassert countSubarraysWithSumZero([2, -2, 3, 0, 4, -7]) == 3\n```\n\n[/Example 3]", "temperature": 0.726, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "9cc313a6-5fd9-45e4-8192-f5a9da8702c2", "question": "Given an array with repeated elements, the task is to find the maximum distance between two occurrences of an element.", "examples": "Input : arr[] = {3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2}\nOutput: 10\n// maximum distance for 2 is 11-1 = 10 \n// maximum distance for 1 is 4-2 = 2 \n// maximum distance for 4 is 10-5 = 5 ", "link": "https://www.geeksforgeeks.org/maximum-distance-two-occurrences-element-array/", "difficulty": "Easy", "categories": ["Hash"], "code": "def max_distance(arr: list) -> int:\n        n = len(arr) \n        max_d = -1\n        for i in range(n - 1): \n                for j in range(i + 1, n): \n                        if arr[i] == arr[j]: \n                                temp = abs(j - i) \n                                max_d = max(max_d, temp) \n        return max_d \n", "asserts": ["assert max_distance([1, 2, 4, 1, 3, 4, 2, 5, 6, 5]) == 5", "assert max_distance([1, 1, 1, 1, 1]) == 4", "assert max_distance([8, 8, 7, 8, 7]) == 3", "assert max_distance([5, 6, 3, 4, 3, 6, 5]) == 6", "assert max_distance([10, 20, 10, 10, 30, 20, 10]) == 6", "assert max_distance([99]) == -1", "assert max_distance([15, 22, 15, 18, 22, 19, 18, 22, 15]) == 8"]}, {"author": "Karthik", "UUID": "3418f7cc-2703-4dbb-8705-e51df4295087", "question": "Given an array of n integers. Count the total number of sub-arrays having total distinct elements, the same as that of the total distinct elements of the original array. ", "examples": "Input  : arr[] = {2, 1, 3, 2, 3}\nOutput : 5\nTotal distinct elements in array is 3\nTotal sub-arrays that satisfy the condition \nare:  Subarray from index 0 to 2\n      Subarray from index 0 to 3\n      Subarray from index 0 to 4\n      Subarray from index 1 to 3\n      Subarray from index 1 to 4\n\nInput  : arr[] = {2, 4, 5, 2, 1}\nOutput : 2\n\nInput  : arr[] = {2, 4, 4, 2, 4}\nOutput : 9", "link": "https://www.geeksforgeeks.org/count-subarrays-total-distinct-elements-original-array/", "difficulty": "Hard", "categories": ["Hash"], "code": "\ndef countDistinctSubarray(arr: list) -> int:\n        n = len(arr)\n        unst1 = set(arr)\n        totalDist = len(unst1)\n        count = 0\n\n        for i in range(n):\n                unst = set()\n                for j in range(i, n):\n                        unst.add(arr[j])\n                        if len(unst) == totalDist:\n                                count += 1\n\n        return count\n", "asserts": ["assert countDistinctSubarray([2, 1, 3, 2, 3]) == 5", "assert countDistinctSubarray([1, 2, 3, 4, 5]) == 1", "assert countDistinctSubarray([1, 2, 1, 2, 3]) == 3", "assert countDistinctSubarray([1]) == 1", "assert countDistinctSubarray([]) == 0"]}], "category": "Hash", "prompt_tokens": 716, "total_tokens": 902, "completion_tokens": 186, "completion": "Given two arrays, write a function to compute their intersection.\n\n###Code: \n\n\ndef intersection(nums1: list, nums2: list) -> list:\n        set1 = set(nums1)\n        set2 = set(nums2)\n        return list(set1.intersection(set2))\n\n\n###Testcases: \n\nassert intersection([1, 2, 2, 1], [2, 2]) == [2]\nassert intersection([4, 9, 5], [9, 4, 9, 8, 4]) == [9, 4]\nassert intersection([1, 2, 3], [4, 5, 6]) == []\nassert intersection([1, 1, 1, 1], [1, 1, 1]) == [1]\nassert intersection([], [1, 2, 3]) == []\n\n[/Example 3]", "temperature": 0.965, "model_name": "gpt-3.5-turbo-1106"}]