[{"few_shots": [{"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1800, "completion_tokens": 509, "completion": "Given a list of integers, find the kth largest element in the list.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: List[int], k: int) -> int:\n        heap = []\n        for num in nums:\n            if len(heap) < k:\n                heapq.heappush(heap, num)\n            else:\n                if num > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, num)\n        return heap[0]\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 23, 45, 67, 12, 34, 56], 3) == 56\nassert findKthLargest([5, 5, 5, 5, 5], 1) == 5\nassert findKthLargest([1, 2, 3, 4, 5], 5) == 1\nassert findKthLargest([-1, -2, -3, -4, -5], 3) == -3\nassert findKthLargest([100], 1) == 100\nassert findKthLargest([9, 7, 7, 9, 5], 3) == 7\nassert findKthLargest([9, 7, 7, 9, 5], 5) == 5\nassert findKthLargest([15, 22, 13, 27, 12, 10, 20], 7) == 10\nassert findKthLargest([1, 2, 3, 4, 5], 3) == 3\nassert findKthLargest([5, 4, 3, 2, 1], 1) == 5\nassert findKthLargest([1, 1, 1, 1, 1], 1) == 1\nassert findKthLargest([1, 2, 3, 4, 5], 1) == 5\n```", "temperature": 0.631}, {"few_shots": [{"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1980, "completion_tokens": 689, "completion": "Design a class called MaxHeap that represents a max heap data structure. The class should have the following methods:\n\n1. `__init__(self)`: Initializes an empty MaxHeap.\n2. `insert(self, value: int)`: Inserts a new value into the MaxHeap while maintaining the heap property.\n3. `delete_max(self) -> int`: Deletes the maximum value from the MaxHeap and returns it.\n4. `get_max(self) -> int`: Returns the maximum value from the MaxHeap without deleting it.\n5. `is_empty(self) -> bool`: Returns True if the MaxHeap is empty, False otherwise.\n\n###Code: \n\n```python\nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, value: int):\n        self.heap.append(value)\n        self._percolate_up(len(self.heap) - 1)\n\n    def _percolate_up(self, i):\n        while i > 0:\n            parent = (i - 1) // 2\n            if self.heap[i] <= self.heap[parent]:\n                break\n            self.heap[i], self.heap[parent] = self.heap[parent], self.heap[i]\n            i = parent\n\n    def delete_max(self) -> int:\n        if len(self.heap) == 0:\n            return None\n        if len(self.heap) == 1:\n            return self.heap.pop()\n        max_val = self.heap[0]\n        self.heap[0] = self.heap.pop()\n        self._percolate_down(0)\n        return max_val\n\n    def _percolate_down(self, i):\n        while 2 * i + 1 < len(self.heap):\n            left_child = 2 * i + 1\n            right_child = 2 * i + 2 if 2 * i + 2 < len(self.heap) else -1\n            max_child = left_child if self.heap[left_child] > self.heap[right_child] else right_child\n            if self.heap[i] >= self.heap[max_child]:\n                break\n            self.heap[i], self.heap[max_child] = self.heap[max_child], self.heap[i]\n            i = max_child\n\n    def get_max(self) -> int:\n        if len(self.heap) > 0:\n            return self.heap[0]\n        return None\n\n    def is_empty(self) -> bool:\n        return len(self.heap) == 0\n```\n\n###Testcases: \n\n```python\n# Create a MaxHeap and perform operations\nmax_heap = MaxHeap()\nmax_heap.insert(10)\nmax_heap.insert(20)\nmax_heap.insert(15)\nassert max_heap.get_max() == 20\nassert max_heap.delete_max() == 20\nassert max_heap.get_max() == 15\nmax_heap.insert(25)\nassert max_heap.get_max() == 25\nassert max_heap.delete_max() == 25\nassert max_heap.delete_max() == 15\nassert max_heap.is_empty() == False\nassert max_heap.delete_max() == 10\nassert max_heap.is_empty() == True\n\n# Test for an empty MaxHeap\nempty_max_heap = MaxHeap()\nassert empty_max_heap.delete_max() == None\nassert empty_max_heap.get_max() == None\nassert empty_max_heap.is_empty() == True\n```\n\n[/Example 3]", "temperature": 0.989}, {"few_shots": [{"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1698, "completion_tokens": 407, "completion": "Given a list of integers, implement a function to return the Kth smallest element in the list.\n\n###Code:\n\n```python\nimport heapq\n\ndef kth_smallest_element(arr: list, k: int) -> int:\n    return heapq.nsmallest(k, arr)[-1]\n```\n\n###Testcases:\n\n```python\nassert kth_smallest_element([1, 23, 12, 9, 30, 2, 50], 3) == 12\nassert kth_smallest_element([4, 5, 1, 2, 9, 7, 6, 10], 4) == 6\nassert kth_smallest_element([45, 67, 33, 21], 1) == 21\nassert kth_smallest_element([101, 755, 312], 2) == 312\nassert kth_smallest_element([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == 3\nassert kth_smallest_element([-1, -2, -3, -4, -5], 3) == -3\nassert kth_smallest_element([100], 1) == 100\nassert kth_smallest_element([9, 7, 7, 9, 5], 3) == 7\nassert kth_smallest_element([9, 7, 7, 9, 5], 5) == 5\nassert kth_smallest_element([5, 5, 5, 5, 5], 2) == 5\nassert kth_smallest_element([], 0) == None\nassert kth_smallest_element([15, 22, 13, 27, 12, 10, 20], 7) == 10\n```\n\n[/Example 3]", "temperature": 0.692}, {"few_shots": [{"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1591, "completion_tokens": 300, "completion": "Given an array of elements, implement a max heap data structure. The data structure should support the following operations:\n1. Insert: Add a new element to the heap\n2. ExtractMax: Remove and return the maximum element from the heap\n3. GetMax: Return the maximum element from the heap without removing it\n\n###Code: \n\n```python\nimport heapq\n\nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n        \n    def insert(self, value):\n        heapq.heappush(self.heap, -value)\n        \n    def extractMax(self):\n        return -heapq.heappop(self.heap)\n        \n    def getMax(self):\n        return -self.heap[0]\n```\n\n###Testcases: \n\n```python\n# Create a max heap\nmax_heap = MaxHeap()\n\n# Insert elements\nmax_heap.insert(10)\nmax_heap.insert(20)\nmax_heap.insert(15)\nmax_heap.insert(8)\n\n# Test get max\nassert max_heap.getMax() == 20\n\n# Test extract max\nassert max_heap.extractMax() == 20\n\n# Insert more elements\nmax_heap.insert(25)\nmax_heap.insert(12)\n\n# Test extract max\nassert max_heap.extractMax() == 25\nassert max_heap.extractMax() == 15\nassert max_heap.extractMax() == 12\nassert max_heap.extractMax() == 10\nassert max_heap.extractMax() == 8\n```\n\n[/Example 3]", "temperature": 0.819}, {"few_shots": [{"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1714, "completion_tokens": 423, "completion": "You are given a list of numbers. Write a function to find the kth smallest element in the list using a min-heap.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heap = arr[:k]\n    heapq.heapify(heap)\n    \n    for num in arr[k:]:\n        if num < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    \n    return heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([12, 3, 5, 7, 19], 2) == 5\nassert kthSmallest([1, 5, 12, 2, 11, 5], 4) == 5\nassert kthSmallest([15, 22, 13, 27, 12, 10, 20], 5) == 15\nassert kthSmallest([5, 6, 1, 4, 3, 8, 2, 7], 6) == 6\nassert kthSmallest([9, 7, 7, 9, 5, 1], 3) == 5\nassert kthSmallest([9, 7, 7, 9, 5, 1], 6) == 9\nassert kthSmallest([5, 5, 5, 5, 5], 3) == 5\nassert kthSmallest([], 0) == None\nassert kthSmallest([1, 2, 3, 4, 5], 1) == 1\nassert kthSmallest([1, 2, 3, 4, 5], 5) == 5\n```", "temperature": 0.772}, {"few_shots": [{"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1711, "completion_tokens": 420, "completion": "Given an array of integers and an integer k, find the kth largest element in the array using a min heap.\n\n###Code:\n\n```python\nimport heapq\n\ndef findKthLargest(nums: List[int], k: int) -> int:\n    heap = nums[:k]\n    heapq.heapify(heap)\n    for num in nums[k:]:\n        if num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return heap[0]\n```\n\n###Testcases:\n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([1], 1) == 1\nassert findKthLargest([99, 56, 23, 78, 12], 3) == 56\nassert findKthLargest([5, 2, 6, 1, 3, 4], 4) == 3\nassert findKthLargest([7, 5, 8, 3, 2, 1, 6, 4], 6) == 3\nassert findKthLargest([9, 7, 7, 9, 5], 3) == 7\nassert findKthLargest([9, 7, 7, 9, 5], 5) == 5\nassert findKthLargest([5, 5, 5, 5, 5], 2) == 5\nassert findKthLargest([], 0) == float('-inf')\nassert findKthLargest([15, 22, 13, 27, 12, 10, 20], 7) == 10\n```\n\n[/Example 3]", "temperature": 0.986}, {"few_shots": [{"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 938, "total_tokens": 1453, "completion_tokens": 515, "completion": "Given an array of integers, the task is to merge k sorted arrays into a single sorted array. \n\n###Code: \n\n```python\nimport heapq\n\ndef mergeKSortedArrays(arr: List[List[int]]) -> List[int]:\n    result = []\n    heap = []\n    \n    for i in range(len(arr)):\n        if arr[i]:\n            heapq.heappush(heap, (arr[i][0], i, 0))\n    \n    while heap:\n        val, list_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n        if ele_idx + 1 < len(arr[list_idx]):\n            heapq.heappush(heap, (arr[list_idx][ele_idx + 1], list_idx, ele_idx + 1))\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeKSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeKSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeKSortedArrays([[1, 4, 7], [2, 5, 8], [3, 6, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeKSortedArrays([[], [], []]) == []\nassert mergeKSortedArrays([[1, 2, 3], [4, 5, 6, 7], [8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeKSortedArrays([[1, 4, 5], [2, 3, 7, 8], [6, 9, 10]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```\n\n[/Example 3]", "temperature": 0.99}, {"few_shots": [{"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 938, "total_tokens": 1154, "completion_tokens": 216, "completion": "You are given an array of integers. Write a function to return the k most frequent elements in the array.\n\n###Code: \n\n```python\nimport heapq\nfrom collections import Counter\n\ndef topKFrequent(nums: List[int], k: int) -> List[int]:\n    count = Counter(nums)\n    return heapq.nlargest(k, count.keys(), key=count.get)\n```\n\n###Testcases: \n\n```python\nassert topKFrequent([1, 1, 1, 2, 2, 3], 2) == [1, 2]\nassert topKFrequent([1], 1) == [1]\nassert topKFrequent([3, 0, 1, 0], 1) == [0]\nassert topKFrequent([5, 5, 5, 5, 5], 1) == [5]\nassert topKFrequent([1, 1, 2, 2, 3, 3, 3], 2) == [3, 1]\n```", "temperature": 0.967}, {"few_shots": [{"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 938, "total_tokens": 1350, "completion_tokens": 412, "completion": "Given an array of integers and a number k, find the kth smallest element in the array using a min-heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heap = arr[:k]\n    heapq.heapify(heap)\n    for num in arr[k:]:\n        if num < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([12, 3, 5, 7, 19], 2) == 5\nassert kthSmallest([1, 3, 12, 5, 15, 11], 4) == 11\nassert kthSmallest([5, 5, 5, 5, 5], 1) == 5\nassert kthSmallest([5, 5, 5, 5, 5], 3) == 5\nassert kthSmallest([5, 5, 5, 5, 5], 5) == 5\nassert kthSmallest([1], 1) == 1\nassert kthSmallest([3, 2, 1, 5, 4], 3) == 3\nassert kthSmallest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == 5\nassert kthSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 10\n```\n\n\n[/Example 3]", "temperature": 0.661}, {"few_shots": [{"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 938, "total_tokens": 1267, "completion_tokens": 329, "completion": "You are given a list of strings. Write a function to find the k most frequent elements in the list.\n\n###Code:\n\n```python\nimport collections\nimport heapq\n\ndef topKFrequent(words: List[str], k: int) -> List[str]:\n        count = collections.Counter(words)\n        heap = [(-freq, word) for word, freq in count.items()]\n        heapq.heapify(heap)\n        return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases:\n\n```python\nassert topKFrequent([\"the\", \"day\", \"is\", \"sunny\", \"the\", \"the\", \"the\", \"sunny\", \"is\", \"is\"], 2) == [\"the\", \"is\"]\nassert topKFrequent([\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"], 2) == [\"i\", \"love\"]\nassert topKFrequent([\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"], 3) == [\"i\", \"love\", \"coding\"]\nassert topKFrequent([\"a\", \"a\", \"a\", \"b\", \"b\", \"c\"], 2) == [\"a\", \"b\"]\nassert topKFrequent([\"aaa\", \"aa\", \"a\"], 1) == [\"a\"]\nassert topKFrequent([\"aaa\", \"aa\", \"a\"], 2) == [\"aa\", \"aaa\"]\nassert topKFrequent([\"aaa\", \"aa\", \"a\"], 3) == [\"a\", \"aa\", \"aaa\"]\n```\n\n[/Example 3]", "temperature": 0.659}, {"few_shots": [{"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 938, "total_tokens": 1283, "completion_tokens": 345, "completion": "You are given an array of integers and a value k. Your task is to find the kth smallest element in the array.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heap = arr[:k]\n    heapq._heapify_max(heap)\n    \n    for i in range(k, len(arr)):\n        if arr[i] < heap[0]:\n            heapq._heapreplace_max(heap, arr[i])\n    \n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([12, 3, 5, 7, 19], 2) == 5\nassert kthSmallest([1, 2, 3, 4, 5], 5) == 5\nassert kthSmallest([5, 4, 3, 2, 1], 1) == 1\nassert kthSmallest([7, 10, 4, 3, 20, 15], 6) == 20\nassert kthSmallest([12, 3, 5, 7, 19], 1) == 3\nassert kthSmallest([1, 2, 3, 4, 5], 2) == 2\nassert kthSmallest([5, 4, 3, 2, 1], 5) == 5\n```\n\n\n[/Example 3]", "temperature": 0.667}, {"few_shots": [{"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 938, "total_tokens": 1288, "completion_tokens": 350, "completion": "You are given an integer array and a number 'k'. Your task is to find the kth smallest element in the array.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(arr: List[int], k: int) -> int:\n    heap = arr[:k]\n    heapq._heapify_max(heap)\n    for num in arr[k:]:\n        if num < heap[0]:\n            heapq._heapreplace_max(heap, num)\n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([12, 3, 5, 7, 19], 2) == 5\nassert kthSmallest([12, 3, 5, 7, 19], 1) == 3\nassert kthSmallest([12, 3, 5, 7, 19], 5) == 19\nassert kthSmallest([5, 6, 9, 12, 8, 10, 15, 18], 4) == 10\nassert kthSmallest([15, 22, 13, 27, 12, 10, 20], 3) == 13\nassert kthSmallest([1, 2, 3, 4, 5], 2) == 2\nassert kthSmallest([5, 5, 5, 5, 5], 2) == 5\n```\n\n[/Example 3]", "temperature": 0.915}, {"few_shots": [{"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 867, "total_tokens": 1355, "completion_tokens": 488, "completion": "Write a program to implement a max heap data structure. It should support the following operations:\n1. Insert: Insert a new element into the heap\n2. ExtractMax: Remove and return the maximum element from the heap\n3. GetMax: Return the maximum element from the heap without removing it\n\n###Code: \n\nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n\n    def parent(self, idx):\n        return (idx - 1) // 2\n\n    def insert(self, val):\n        self.heap.append(val)\n        idx = len(self.heap) - 1\n        while idx > 0 and self.heap[idx] > self.heap[self.parent(idx)]:\n            self.heap[idx], self.heap[self.parent(idx)] = self.heap[self.parent(idx)], self.heap[idx]\n            idx = self.parent(idx)\n\n    def extractMax(self):\n        if not self.heap:\n            return None\n        max_val = self.heap[0]\n        self.heap[0] = self.heap[-1]\n        del self.heap[-1]\n        self.heapify(0)\n        return max_val\n\n    def heapify(self, idx):\n        left = 2 * idx + 1\n        right = 2 * idx + 2\n        largest = idx\n        if left < len(self.heap) and self.heap[left] > self.heap[largest]:\n            largest = left\n        if right < len(self.heap) and self.heap[right] > self.heap[largest]:\n            largest = right\n        if largest != idx:\n            self.heap[idx], self.heap[largest] = self.heap[largest], self.heap[idx]\n            self.heapify(largest)\n\n    def getMax(self):\n        if self.heap:\n            return self.heap[0]\n        return None\n\n###Testcases: \n\nmax_heap = MaxHeap()\nmax_heap.insert(10)\nmax_heap.insert(20)\nmax_heap.insert(15)\nassert max_heap.getMax() == 20\nassert max_heap.extractMax() == 20\nassert max_heap.getMax() == 15\nmax_heap.insert(30)\nmax_heap.insert(40)\nassert max_heap.extractMax() == 40\nassert max_heap.extractMax() == 30\nassert max_heap.extractMax() == 15\nassert max_heap.extractMax() == 10\nassert max_heap.extractMax() == None\n\n[/Example 3]", "temperature": 0.799}, {"few_shots": [{"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 867, "total_tokens": 1240, "completion_tokens": 373, "completion": "Given a list of numbers, write a program to find the kth smallest element in the list.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heap = arr[:k]\n    heapq._heapify_max(heap)\n    \n    for num in arr[k:]:\n        if num < heap[0]:\n            heapq._heapreplace_max(heap, num)\n    \n    return heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([12, 3, 5, 7, 19], 2) == 5\nassert kthSmallest([1, 2, 3, 4, 5], 1) == 1\nassert kthSmallest([5, 4, 3, 2, 1], 3) == 3\nassert kthSmallest([10, 20, 30, 40, 50, 60], 4) == 40\nassert kthSmallest([5, 5, 5, 5, 5], 3) == 5\nassert kthSmallest([1, 2, 3, 4, 5], 5) == 5\nassert kthSmallest([100], 1) == 100\nassert kthSmallest([9, 7, 7, 9, 5], 3) == 7\nassert kthSmallest([9, 7, 7, 9, 5], 5) == 9\n```\n\n[/Example 3]", "temperature": 0.654}, {"few_shots": [{"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 867, "total_tokens": 1160, "completion_tokens": 293, "completion": "Given a list of strings, write a program to find the k most frequent elements in the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef topKFrequent(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert topKFrequent([\"hello\", \"world\", \"hello\", \"hello\", \"world\", \"world\"], 2) == [\"hello\", \"world\"]\nassert topKFrequent([\"the\", \"day\", \"is\", \"sunny\", \"the\", \"the\", \"the\", \"sunny\", \"is\", \"is\"], 4) == [\"the\", \"is\", \"sunny\", \"day\"]\nassert topKFrequent([\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"], 3) == [\"i\", \"love\", \"coding\"]\nassert topKFrequent([\"aaa\", \"aa\", \"a\"], 2) == [\"a\", \"aa\"]\nassert topKFrequent([\"apple\", \"banana\", \"apple\", \"banana\", \"orange\", \"orange\", \"orange\"], 2) == [\"orange\", \"apple\"]\n```\n\n[/Example 3]", "temperature": 0.686}, {"few_shots": [{"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 867, "total_tokens": 1193, "completion_tokens": 326, "completion": "You are given an array of integers and an integer K. Write a program to find the Kth smallest element in the array.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heap = arr[:k]\n    heapq._heapify_max(heap)\n    for i in range(k, len(arr)):\n        if arr[i] < heap[0]:\n            heapq._heapreplace_max(heap, arr[i])\n    return heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([12, 3, 5, 7, 19], 2) == 5\nassert kthSmallest([1, 2, 3, 4, 5, 6], 5) == 5\nassert kthSmallest([9, 8, 7, 6, 5, 4, 3, 2, 1], 6) == 4\nassert kthSmallest([5], 1) == 5\nassert kthSmallest([4, 1, 6, 2, 7, 3], 3) == 3\nassert kthSmallest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 10) == 1\n```", "temperature": 0.886}, {"few_shots": [{"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 867, "total_tokens": 1251, "completion_tokens": 384, "completion": "You are given an array of strings. Write a function to return the k most frequent strings in the array. If there are multiple strings with the same frequency, return them in lexographical order.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentStrings(arr: list, k: int) -> list:\n    count = collections.Counter(arr)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n\n###Testcases: \n\n```python\nassert kMostFrequentStrings([\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\", \"foo\", \"bar\"], 3) == [\"hello\", \"world\", \"bar\"]\nassert kMostFrequentStrings([\"aa\", \"bb\", \"cc\", \"bb\", \"dd\", \"aa\", \"aa\", \"cc\", \"bb\"], 2) == [\"aa\", \"bb\"]\nassert kMostFrequentStrings([\"abc\", \"def\", \"ghi\", \"abc\", \"ghi\", \"abc\"], 2) == [\"abc\", \"ghi\"]\nassert kMostFrequentStrings([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], 3) == [\"a\", \"b\", \"c\"]\nassert kMostFrequentStrings([\"xyz\", \"pqr\", \"xyz\", \"mno\", \"pqr\", \"xyz\", \"mno\"], 2) == [\"xyz\", \"pqr\"]\nassert kMostFrequentStrings([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"cherry\", \"apple\", \"banana\"], 2) == [\"apple\", \"banana\"]\n```\n\n\n[/Example 3]", "temperature": 0.911}, {"few_shots": [{"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 867, "total_tokens": 1440, "completion_tokens": 573, "completion": "Given a binary min-heap and an index i, the task is to find the index of the element which is smaller than the other children of the given node and larger than its parent.\n\n###Code: \n\n```python\ndef findSpecialElementIndex(heap: list, i: int) -> int:\n    if i >= len(heap):\n        return -1\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(heap) and right < len(heap):\n        if heap[i] < heap[left] and heap[i] > heap[(i - 1) // 2]:\n            return i\n    return -1\n```\n\n###Testcases: \n\n```python\nassert findSpecialElementIndex([10, 14, 19, 26, 31, 42, 27, 44, 35, 33, 35], 0) == 2\nassert findSpecialElementIndex([10, 14, 19, 26, 31, 42, 27, 44, 35, 33, 35], 1) == -1\nassert findSpecialElementIndex([2, 5, 9, 6, 7, 10, 15], 0) == -1\nassert findSpecialElementIndex([2, 5, 9, 6, 7, 10, 15], 1) == 2\nassert findSpecialElementIndex([2, 5, 9, 6, 7, 10, 15], 2) == -1\nassert findSpecialElementIndex([2, 3, 15, 5, 4, 45, 6], 0) == 2\nassert findSpecialElementIndex([2, 3, 15, 5, 4, 45, 6], 1) == -1\nassert findSpecialElementIndex([2, 3, 15, 5, 4, 45, 6], 2) == -1\nassert findSpecialElementIndex([2, 3, 15, 5, 4, 45, 6], 3) == -1\nassert findSpecialElementIndex([2, 3, 15, 5, 4, 45, 6], 4) == -1\nassert findSpecialElementIndex([2, 3, 15, 5, 4, 45, 6], 5) == -1\nassert findSpecialElementIndex([2, 3, 15, 5, 4, 45, 6], 6) == -1\n```", "temperature": 0.95}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1572, "completion_tokens": 281, "completion": "Given a list of integers, implement a class called `MaxHeap` that supports the following operations:\n\n1. `insert(val: int)` - Inserts the integer `val` into the max heap.\n2. `extractMax() -> int` - Removes the maximum element from the max heap and returns it.\n3. `getMax() -> int` - Returns the maximum element from the max heap without removing it.\n\n###Code:\n\n```python\nimport heapq\n\nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, val: int) -> None:\n        heapq.heappush(self.heap, -val)\n\n    def extractMax(self) -> int:\n        return -heapq.heappop(self.heap)\n\n    def getMax(self) -> int:\n        return -self.heap[0]\n```\n\n###Testcases:\n\n```python\nmaxHeap = MaxHeap()\nmaxHeap.insert(5)\nmaxHeap.insert(3)\nmaxHeap.insert(10)\nassert maxHeap.getMax() == 10\nassert maxHeap.extractMax() == 10\nassert maxHeap.getMax() == 5\nmaxHeap.insert(7)\nassert maxHeap.getMax() == 7\nassert maxHeap.extractMax() == 7\nassert maxHeap.extractMax() == 5\nassert maxHeap.extractMax() == 3\n```\n\n[/Example 3]", "temperature": 0.66}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1710, "completion_tokens": 419, "completion": "Given a list of integers, implement a function to find the kth smallest element in the list using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(nums: list, k: int) -> int:\n    min_heap = nums[:k]\n    heapq.heapify(min_heap)\n    \n    for num in nums[k:]:\n        if num < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, num)\n    \n    return min_heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([12, 3, 5, 7, 19], 4) == 12\nassert kthSmallest([5, 2, 9, 11, 6], 2) == 5\nassert kthSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 5\nassert kthSmallest([5, 4, 3, 2, 1], 1) == 1\nassert kthSmallest([1], 1) == 1\nassert kthSmallest([9, 7, 7, 9, 5], 3) == 7\nassert kthSmallest([9, 7, 7, 9, 5], 5) == 9\nassert kthSmallest([5, 5, 5, 5, 5], 3) == 5\nassert kthSmallest([], 1) == None\nassert kthSmallest([15, 22, 13, 27, 12, 10, 20], 7) == 27\n```\n\n[/Example 3]", "temperature": 0.807}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1602, "completion_tokens": 311, "completion": "Given a list of strings, create a max heap based on string lengths. If two strings have the same length, consider the string in lexicographically increasing order to break the tie.\n\n###Code: \n\n```python\nimport heapq\n\ndef createMaxHeap(strings: list) -> list:\n    max_heap = []\n    for s in strings:\n        length = len(s)\n        heapq.heappush(max_heap, (-length, s))\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert createMaxHeap([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]) == ['banana', 'orange', 'apple', 'kiwi', 'pear']\nassert createMaxHeap([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == ['python', 'awesome', 'hello', 'world', 'is']\nassert createMaxHeap([\"a\", \"bb\", \"ccc\", \"dddd\"]) == ['dddd', 'ccc', 'bb', 'a']\nassert createMaxHeap([\"cat\", \"bat\", \"rat\"]) == ['bat', 'rat', 'cat']\nassert createMaxHeap([\"this\", \"is\", \"a\", \"test\"]) == ['test', 'this', 'is', 'a']\nassert createMaxHeap([\"z\", \"zz\", \"zzz\", \"zzzz\"]) == ['zzzz', 'zzz', 'zz', 'z']\n```", "temperature": 0.945}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1664, "completion_tokens": 373, "completion": "Given a list of tasks represented by their priority, implement a priority queue using min-heap to efficiently retrieve the task with the highest priority. The priority queue should support the following operations:\n\n1. `add_task(task: Tuple[int, str])`: Add a task to the priority queue. The task is represented by a tuple where the first element is the priority (an integer) and the second element is the task description (a string).\n2. `get_highest_priority_task() -> str`: Retrieve and return the task with the highest priority (i.e., the task with the smallest priority value). If the priority queue is empty, return an empty string.\n\n###Code:\n\n```python\nimport heapq\nfrom typing import List, Tuple\n\nclass PriorityQueue:\n    def __init__(self):\n        self.tasks = []\n\n    def add_task(self, task: Tuple[int, str]):\n        heapq.heappush(self.tasks, task)\n\n    def get_highest_priority_task(self) -> str:\n        if self.tasks:\n            return heapq.heappop(self.tasks)[1]\n        else:\n            return \"\"\n```\n\n###Testcases:\n\n```python\n# Create a priority queue, add tasks, and retrieve the highest priority task\npq = PriorityQueue()\npq.add_task((3, \"Task 1\"))\npq.add_task((1, \"Task 2\"))\npq.add_task((5, \"Task 3\"))\nassert pq.get_highest_priority_task() == \"Task 2\"\nassert pq.get_highest_priority_task() == \"Task 1\"\npq.add_task((2, \"Task 4\"))\nassert pq.get_highest_priority_task() == \"Task 4\"\nassert pq.get_highest_priority_task() == \"Task 3\"\nassert pq.get_highest_priority_task() == \"\"  # No tasks left, should return an empty string\n```", "temperature": 0.755}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1579, "completion_tokens": 288, "completion": "Given a stream of integers and a number k, find the kth largest element at any point in the stream.\n\n###Code: \n\nfrom heapq import heappush, heappop\n\nclass KthLargest:\n\n    def __init__(self, k: int, nums: List[int]):\n        self.k = k\n        self.heap = []\n        for num in nums:\n            heappush(self.heap, num)\n            if len(self.heap) > k:\n                heappop(self.heap)\n\n    def add(self, val: int) -> int:\n        heappush(self.heap, val)\n        if len(self.heap) > self.k:\n            heappop(self.heap)\n        return self.heap[0]\n\n\n###Testcases: \n\nobj = KthLargest(3, [4, 5, 8, 2])\nassert obj.add(3) == 4\nassert obj.add(5) == 5\nassert obj.add(10) == 5\nassert obj.add(9) == 8\nassert obj.add(4) == 8\nassert obj.add(7) == 7\nassert obj.add(12) == 9\nassert obj.add(1) == 9\nassert obj.add(6) == 6\nassert obj.add(2) == 6\nassert obj.add(11) == 7\n\n[/Example 3]", "temperature": 0.728}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 1291, "total_tokens": 1519, "completion_tokens": 228, "completion": "Given an array of elements, implement a priority queue using min-heap. The priority queue should support the following operations:\n1. Insert: Inserts the element into the priority queue.\n2. Delete: Deletes the element with the highest priority (minimum value) from the priority queue.\n3. GetMin: Returns the element with the highest priority (minimum value) from the priority queue without deleting it.\n\n###Code: \n\n```python\nimport heapq\n\nclass PriorityQueue:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, value):\n        heapq.heappush(self.heap, value)\n\n    def delete(self):\n        return heapq.heappop(self.heap)\n\n    def getMin(self):\n        return self.heap[0]\n```\n\n###Testcases: \n\n```python\npq = PriorityQueue()\npq.insert(3)\npq.insert(2)\npq.insert(4)\nassert pq.getMin() == 2\npq.delete()\nassert pq.getMin() == 3\npq.insert(1)\nassert pq.getMin() == 1\npq.delete()\nassert pq.getMin() == 3\n```\n\n[/Example 3]", "temperature": 0.995}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 1128, "total_tokens": 1520, "completion_tokens": 392, "completion": "You are given an array of integers. Implement a function to find the kth largest element in the array.\n\n###Code:\n\n```python\nimport heapq\n\ndef findKthLargest(nums: List[int], k: int) -> int:\n    heap = nums[:k]\n    heapq.heapify(heap)\n    \n    for num in nums[k:]:\n        if num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    \n    return heap[0]\n```\n\n###Testcases:\n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 23, 45, 67, 12, 34, 56, 78, 90], 3) == 78\nassert findKthLargest([1], 1) == 1\nassert findKthLargest([-1, -2, -3, -4, -5], 2) == -2\nassert findKthLargest([5, 5, 5, 5], 1) == 5\nassert findKthLargest([4, 4, 4, 4, 4, 4], 3) == 4\nassert findKthLargest([7, 6, 5, 4, 3, 2, 1], 1) == 7\nassert findKthLargest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 6\n```\n\n[/Example 3]", "temperature": 0.694}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 1128, "total_tokens": 1318, "completion_tokens": 190, "completion": "Given a list of integers, implement a priority queue using min heap to efficiently retrieve the smallest element, and also to insert new elements. The priority queue should support the following operations:\n\n1. Insert: Add a new element to the priority queue.\n2. GetMin: Retrieve the smallest element from the priority queue and remove it.\n\n###Code: \n\n```python\nimport heapq\n\nclass PriorityQueue:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, value):\n        heapq.heappush(self.heap, value)\n\n    def getMin(self):\n        return heapq.heappop(self.heap)\n```\n\n###Testcases: \n\n```python\npq = PriorityQueue()\npq.insert(5)\npq.insert(3)\npq.insert(9)\nassert pq.getMin() == 3\npq.insert(2)\nassert pq.getMin() == 2\nassert pq.getMin() == 5\nassert pq.getMin() == 9\n```", "temperature": 0.849}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 1128, "total_tokens": 1524, "completion_tokens": 396, "completion": "Given an array of elements, find the kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthLargestElement(arr: list, k: int) -> int:\n    heap = arr[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arr[i])\n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthLargestElement([3, 2, 1, 5, 6, 4], 2) == 5\nassert kthLargestElement([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4\nassert kthLargestElement([99, 23, 57, 88, 45, 66], 3) == 66\nassert kthLargestElement([5, 2, 7, 8, 4, 3, 1, 9, 6], 1) == 9\nassert kthLargestElement([1], 1) == 1\nassert kthLargestElement([5, 2, 7, 8, 4, 3, 1, 9, 6], 5) == 4\nassert kthLargestElement([1, 2, 3, 4, 5], 3) == 3\nassert kthLargestElement([5, 4, 3, 2, 1], 1) == 5\nassert kthLargestElement([5, 4, 3, 2, 1], 5) == 1\n```", "temperature": 0.888}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 1128, "total_tokens": 1514, "completion_tokens": 386, "completion": "You are given a stream of integers and at any point, you should be able to find the median of all the elements encountered so far. Write a function to find the median of the stream of integers.\n\n###Code: \n\n```python\nimport heapq\n\nclass MedianFinder:\n\n    def __init__(self):\n        self.min_heap = []\n        self.max_heap = []\n\n    def addNum(self, num: int) -> None:\n        if not self.max_heap or num <= -self.max_heap[0]:\n            heapq.heappush(self.max_heap, -num)\n        else:\n            heapq.heappush(self.min_heap, num)\n\n        if len(self.max_heap) > len(self.min_heap) + 1:\n            heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap))\n        elif len(self.min_heap) > len(self.max_heap):\n            heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap))\n\n    def findMedian(self) -> float:\n        if len(self.max_heap) == len(self.min_heap):\n            return (-self.max_heap[0] + self.min_heap[0]) / 2\n        else:\n            return -self.max_heap[0]\n```\n\n###Testcases:\n\n```python\nmf = MedianFinder()\nmf.addNum(1)\nmf.addNum(2)\nassert mf.findMedian() == 1.5\nmf.addNum(3)\nassert mf.findMedian() == 2.0\nmf.addNum(4)\nmf.addNum(5)\nassert mf.findMedian() == 3.0\nmf.addNum(0)\nassert mf.findMedian() == 2.5\nmf.addNum(7)\nassert mf.findMedian() == 3.0\nmf.addNum(6)\nassert mf.findMedian() == 3.0\n```\n\n[/Example 3]", "temperature": 0.753}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 1128, "total_tokens": 1671, "completion_tokens": 543, "completion": "Design a class to implement a min heap data structure. The class should have the following methods:\n1. `insert(value)`: Inserts a new value into the min heap.\n2. `deleteMin()`: Removes and returns the minimum value from the heap.\n3. `getMin()`: Returns the minimum value in the heap without removing it. \n\n###Code: \n\n```python\nimport sys\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, value):\n        self.heap.append(value)\n        self.bubbleUp(len(self.heap) - 1)\n\n    def deleteMin(self):\n        if len(self.heap) == 0:\n            return None\n        min_val = self.heap[0]\n        last_val = self.heap.pop()\n        if len(self.heap) > 0:\n            self.heap[0] = last_val\n            self.bubbleDown(0)\n        return min_val\n\n    def getMin(self):\n        if len(self.heap) > 0:\n            return self.heap[0]\n        return None\n\n    def bubbleUp(self, i):\n        while i > 0:\n            parent = (i - 1) // 2\n            if self.heap[i] < self.heap[parent]:\n                self.heap[i], self.heap[parent] = self.heap[parent], self.heap[i]\n                i = parent\n            else:\n                break\n\n    def bubbleDown(self, i):\n        n = len(self.heap)\n        while (2 * i + 1) < n:\n            left = 2 * i + 1\n            right = 2 * i + 2\n            smallest = left\n            if right < n and self.heap[right] < self.heap[left]:\n                smallest = right\n            if self.heap[i] > self.heap[smallest]:\n                self.heap[i], self.heap[smallest] = self.heap[smallest], self.heap[i]\n                i = smallest\n            else:\n                break\n```\n\n###Testcases: \n\n```python\nheap = MinHeap()\nheap.insert(3)\nheap.insert(2)\nheap.insert(1)\nassert heap.getMin() == 1\nassert heap.deleteMin() == 1\nassert heap.getMin() == 2\nheap.insert(4)\nassert heap.getMin() == 2\nheap.insert(0)\nassert heap.getMin() == 0\nassert heap.deleteMin() == 0\nassert heap.getMin() == 2\nassert heap.deleteMin() == 2\nassert heap.deleteMin() == 3\nassert heap.deleteMin() == 4\nassert heap.deleteMin() == None\n```", "temperature": 0.94}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 1128, "total_tokens": 1412, "completion_tokens": 284, "completion": "You are given a list of numbers and the task is to rearrange the numbers in such a way that the sum of product of alternate elements is maximum.\n\n###Code: \n\n```python\ndef maxProduct(arr: list) -> int:\n    arr.sort()\n    n = len(arr)\n    max_product = 0\n    i, j = 0, n-1\n    while i < j:\n        max_product += arr[j] * arr[i]\n        i += 1\n        j -= 1\n    return max_product\n```\n\n###Testcases: \n\n```python\nassert maxProduct([1, 2, 3, 4, 5, 6]) == 35\nassert maxProduct([1, 2, 3, 4, 5]) == 21\nassert maxProduct([5, 3, 1, 2, 4]) == 29\nassert maxProduct([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 220\nassert maxProduct([2, 2, 3, 3, 4, 4]) == 26\nassert maxProduct([1, 1, 1, 1, 1, 1]) == 3\n```\n\n[/Example 3]", "temperature": 0.874}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1339, "completion_tokens": 282, "completion": "Given an array of integers, write a program to find the kth smallest element in the array using a min-heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heap = arr[:k]\n    heapq.heapify(heap)\n    \n    for num in arr[k:]:\n        if num < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    \n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([12, 3, 5, 7, 19], 2) == 5\nassert kthSmallest([1, -1, 0, 5, 2, 4], 4) == 2\nassert kthSmallest([30, 40, 10, 20, 50], 4) == 40\nassert kthSmallest([5, 6, 7, 8, 9], 1) == 5\nassert kthSmallest([1, 2, 3, 4, 5], 5) == 5\n```", "temperature": 0.731}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1524, "completion_tokens": 467, "completion": "Given a list of integers, write a program to find the kth smallest element in the list using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallestElement(nums: List[int], k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    \n    kth_smallest = 0\n    for _ in range(k):\n        kth_smallest = heapq.heappop(heap)\n    \n    return kth_smallest\n```\n\n###Testcases: \n\n```python\nassert kthSmallestElement([4, 6, 3, 2, 9], 3) == 4\nassert kthSmallestElement([8, 1, 7, 2, 6, 3, 5, 4], 5) == 5\nassert kthSmallestElement([0], 1) == 0\nassert kthSmallestElement([2, 1, 3, 5, 4, 7, 6], 4) == 4\nassert kthSmallestElement([-1, -5, -3, -4, -2], 2) == -5\nassert kthSmallestElement([10, -2, 4, 5, 3, 7], 1) == -2\nassert kthSmallestElement([1.5, 2.5, 0.5, 3.5, 1.0, 2.0], 3) == 1.5\nassert kthSmallestElement([99], 1) == 99\nassert kthSmallestElement([5, 5, 5, 5], 2) == 5\nassert kthSmallestElement([9, 7, 7, 9, 5, 5], 3) == 7\nassert kthSmallestElement([], 1) == None  # Empty list should return None\nassert kthSmallestElement([1, 1000, 100, 10, 10000], 4) == 1000\n``` \n\n[/Example 3]", "temperature": 0.62}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1421, "completion_tokens": 364, "completion": "Given a list of strings, write a program to find the k most frequent words in the list.\n\n###Code: \n\nfrom collections import Counter\nimport heapq\n\ndef topKFrequentWords(words: List[str], k: int) -> List[str]:\n        count = Counter(words)\n        heap = [(-frequency, word) for word, frequency in count.items()]\n        heapq.heapify(heap)\n        return [heapq.heappop(heap)[1] for _ in range(k)]\n\n\n###Testcases: \n\nassert topKFrequentWords([\"apple\", \"banana\", \"apple\", \"banana\", \"orange\", \"apple\"], 2) == ['apple', 'banana']\nassert topKFrequentWords([\"hello\", \"world\", \"hello\", \"world\", \"programming\", \"python\"], 3) == ['hello', 'world', 'programming']\nassert topKFrequentWords([\"a\", \"b\", \"a\", \"c\", \"b\", \"d\", \"e\", \"d\", \"a\"], 2) == ['a', 'd']\nassert topKFrequentWords([\"cat\", \"cat\", \"dog\", \"dog\", \"dog\", \"bird\", \"bird\", \"bird\", \"bird\"], 1) == ['bird']\nassert topKFrequentWords([\"apple\", \"banana\", \"cherry\", \"date\", \"apple\", \"banana\", \"cherry\", \"cherry\"], 3) == ['cherry', 'banana', 'apple']\nassert topKFrequentWords([\"hello\", \"world\", \"hello\", \"world\", \"programming\", \"python\"], 2) == ['hello', 'world']\nassert topKFrequentWords([], 3) == []\nassert topKFrequentWords([\"apple\"], 1) == ['apple'] \n\n[/Example 3]", "temperature": 0.877}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1495, "completion_tokens": 438, "completion": "Given a list of integers and a target integer, write a program to find the k closest elements to the target in the list. If there are ties, the smaller elements are always preferred.\n\n###Code:\n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, target: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - target)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases:\n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50, 60], 3, 35) == [30, 40, 20]\nassert kClosestElements([1, 2, 3, 4, 5], 4, -1) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50, 60], 3, 65) == [60, 50, 40]\nassert kClosestElements([1, 4, 8, 10, 20], 3, 7) == [4, 8, 10]\nassert kClosestElements([1, 4, 8, 10, 20], 4, 9) == [4, 8, 10, 1]\nassert kClosestElements([1, 4, 8, 10, 20], 3, 21) == [20, 10, 8]\nassert kClosestElements([1, 4, 8, 10, 20], 1, 0) == [1]\n```\n\n[/Example 3]", "temperature": 0.736}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1529, "completion_tokens": 472, "completion": "Write a program to implement a min heap data structure in Python. The min heap should support the following operations:\n1. Insert: Add an element to the heap\n2. ExtractMin: Remove and return the minimum element from the heap\n\n###Code:\n\n```python\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, val):\n        self.heap.append(val)\n        self._shift_up(len(self.heap) - 1)\n\n    def extractMin(self):\n        if not self.heap:\n            return None\n        self.heap[0], self.heap[-1] = self.heap[-1], self.heap[0]\n        min_val = self.heap.pop()\n        self._shift_down(0)\n        return min_val\n\n    def _shift_up(self, index):\n        parent = (index - 1) // 2\n        if parent >= 0 and self.heap[parent] > self.heap[index]:\n            self.heap[parent], self.heap[index] = self.heap[index], self.heap[parent]\n            self._shift_up(parent)\n\n    def _shift_down(self, index):\n        left = 2 * index + 1\n        right = 2 * index + 2\n        smallest = index\n        if left < len(self.heap) and self.heap[left] < self.heap[index]:\n            smallest = left\n        if right < len(self.heap) and self.heap[right] < self.heap[smallest]:\n            smallest = right\n\n        if smallest != index:\n            self.heap[index], self.heap[smallest] = self.heap[smallest], self.heap[index]\n            self._shift_down(smallest)\n```\n\n###Testcases:\n\n```python\n# Create a min heap and perform insert and extractMin operations\nminHeap = MinHeap()\nminHeap.insert(10)\nminHeap.insert(20)\nminHeap.insert(5)\nassert minHeap.extractMin() == 5\nminHeap.insert(3)\nminHeap.insert(25)\nassert minHeap.extractMin() == 3\nassert minHeap.extractMin() == 10\nassert minHeap.extractMin() == 20\nassert minHeap.extractMin() == 25\nassert minHeap.extractMin() == None  # Extract from an empty heap should return None\n```\n\n[/Example 3]", "temperature": 0.898}, {"few_shots": [{"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1522, "completion_tokens": 465, "completion": "You have been given two arrays of integers, arr1 and arr2, each containing n elements. Write a function to find the k pairs (u1, v1) from arr1 and arr2 such that u1 and v1 are the elements from arr1 and arr2 respectively, and the sum u1 + v1 is the smallest.\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallestPairs(arr1: list, arr2: list, k: int) -> list:\n    if not arr1 or not arr2:\n        return []\n    \n    result = []\n    heap = []\n    for i in range(min(k, len(arr1))):\n        heapq.heappush(heap, (arr1[i] + arr2[0], i, 0))\n    \n    while k > 0 and heap:\n        val, i, j = heapq.heappop(heap)\n        result.append([arr1[i], arr2[j]])\n        if j + 1 < len(arr2):\n            heapq.heappush(heap, (arr1[i] + arr2[j + 1], i, j + 1))\n        k -= 1\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert kSmallestPairs([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]\nassert kSmallestPairs([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]\nassert kSmallestPairs([1, 2], [3], 3) == [[1, 3], [2, 3]]\nassert kSmallestPairs([1, 2, 4], [1, 2, 3], 3) == [[1, 1], [2, 1], [1, 2]]\nassert kSmallestPairs([], [1, 2, 3, 4, 5], 5) == []\nassert kSmallestPairs([1, 1, 2], [], 2) == []\n```\n\n[/Example 3]", "temperature": 0.773}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 938, "total_tokens": 1289, "completion_tokens": 351, "completion": "Given a list of integers, implement a function to return the kth smallest element in the list.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    return heapq.nsmallest(k, arr)[-1]\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([7, 10, 4, 3, 20, 15], 4) == 10\nassert kthSmallest([12, 3, 5, 7, 19], 2) == 5\nassert kthSmallest([12, 3, 5, 7, 19], 5) == 19\nassert kthSmallest([5, 3, 8, 10, 2], 1) == 2\nassert kthSmallest([5, 3, 8, 10, 2], 5) == 10\nassert kthSmallest([5], 1) == 5\nassert kthSmallest([3, 3, 3, 3, 3], 1) == 3\nassert kthSmallest([3, 3, 3, 3, 3], 3) == 3\nassert kthSmallest([3, 3, 3, 3, 3], 5) == 3\nassert kthSmallest([], 0) == None\n```\n\n[/Example 3]", "temperature": 0.643}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 938, "total_tokens": 1337, "completion_tokens": 399, "completion": "Given an array of integers, the task is to find the k most frequent elements in the array.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef topKFrequent(nums: list, k: int) -> list:\n    count = collections.Counter(nums)\n    heap = [(-freq, num) for num, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert topKFrequent([1, 1, 1, 2, 2, 3], 2) == [1, 2]\nassert topKFrequent([1, 1, 1, 2, 2, 3], 1) == [1]\nassert topKFrequent([1, 2], 2) == [1, 2]\nassert topKFrequent([1], 1) == [1]\nassert topKFrequent([4, 1, -1, 2, -1, 2, 3], 2) == [-1, 2]\nassert topKFrequent([1, 1, 1, 2, 2, 3, 3, 3, 3], 3) == [3, 1, 2]\nassert topKFrequent([5, 5, 5, 10, 10, 20], 2) == [5, 10]\nassert topKFrequent([1, 2, 3, 4, 5], 3) == [1, 2, 3]\nassert topKFrequent([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nassert topKFrequent([], 0) == []\n```\n\n[/Example 3]", "temperature": 0.706}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 938, "total_tokens": 1312, "completion_tokens": 374, "completion": "You want to implement a priority queue using a max heap. Design the methods to insert an element, get the highest priority element, and remove the highest priority element from the queue.\n\n###Code: \n\n```python\nimport heapq\nclass MaxHeapPriorityQueue:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, value):\n        heapq.heappush(self.heap, -value)  # Using negative values to mimic max-heap behavior\n\n    def getHighestPriority(self):\n        if self.heap:\n            return -self.heap[0]  # Invert back to positive since the values are stored as negative\n        else:\n            return None\n\n    def removeHighestPriority(self):\n        if self.heap:\n            return -heapq.heappop(self.heap)  # Invert back to positive since the values are stored as negative\n        else:\n            return None\n```\n\n###Testcases: \n\n```python\npq = MaxHeapPriorityQueue()\npq.insert(5)\npq.insert(10)\npq.insert(3)\nassert pq.getHighestPriority() == 10\nassert pq.removeHighestPriority() == 10\nassert pq.getHighestPriority() == 5\nassert pq.removeHighestPriority() == 5\nassert pq.getHighestPriority() == 3\nassert pq.removeHighestPriority() == 3\nassert pq.getHighestPriority() == None\nassert pq.removeHighestPriority() == None\n```\n\n###Explanation:\nThe code defines a class `MaxHeapPriorityQueue` that utilizes the heapq module to mimic max-heap behavior by negating the values. The `insert` method adds a value to the heap, while `getHighestPriority` and `removeHighestPriority` retrieve and remove the highest priority element, respectively. The test cases verify the functionality of the priority queue.\n\n[/Example 3]", "temperature": 0.97}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 938, "total_tokens": 1367, "completion_tokens": 429, "completion": "Given an array of integers, the task is to find the k most frequent elements in the array. If there are multiple elements with the same frequency, return the k most frequent elements in ascending order.\n\n###Code: \n\nfrom collections import Counter\nimport heapq\n\ndef topKFrequent(nums: list, k: int) -> list:\n    count = Counter(nums)\n    return heapq.nsmallest(k, count, key=lambda x: (-count[x], x))\n\n###Testcases: \n\nassert topKFrequent([1, 1, 1, 2, 2, 3], 2) == [1, 2]\nassert topKFrequent([1], 1) == [1]\nassert topKFrequent([1, 2], 2) == [1, 2]\nassert topKFrequent([4, 1, -1, 2, -1, 2, 3], 2) == [-1, 2]\nassert topKFrequent([1, 1, 2, 2, 3, 3], 3) == [1, 2, 3]\nassert topKFrequent([1, 1, 1, 2, 2, 2, 3, 3, 3], 2) == [1, 2]\nassert topKFrequent([1, 1, 1, 2, 2, 3], 3) == [1, 2, 3]\nassert topKFrequent([3, 0, 1, 0], 1) == [0]\nassert topKFrequent([5, 3, 1, 1, 1, 3, 73, 1], 2) == [1, 3]\nassert topKFrequent([4, 5, 6, 7, 8, 9, 10, 4, 5, 5, 6, 4, 4], 2) == [4, 5]\n\n[/Example 3]", "temperature": 0.854}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 938, "total_tokens": 1406, "completion_tokens": 468, "completion": "Given an array arr[] of size N, the task is to return the K smallest elements in an array. The Elements in output array must be in ascending order\n\n###Code: \n\n```python\nimport heapq\n\ndef kSmallest(arr: list, k: int) -> list:\n    return heapq.nsmallest(k, arr)\n```\n\n###Testcases: \n\n```python\nassert kSmallest([1, 23, 12, 9, 30, 2, 50], 3) == [1, 2, 9]\nassert kSmallest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [1, 2, 4, 5]\nassert kSmallest([45, 67, 33, 21], 1) == [21]\nassert kSmallest([101, 755, 312], 2) == [101, 312]\nassert kSmallest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [0, 1, 2, 3, 4]\nassert kSmallest([-1, -2, -3, -4, -5], 3) == [-5, -4, -3]\nassert kSmallest([100], 1) == [100]\nassert kSmallest([9, 7, 7, 9, 5], 3) == [5, 7, 7]\nassert kSmallest([9, 7, 7, 9, 5], 5) == [5, 7, 7, 9, 9]\nassert kSmallest([5, 5, 5, 5, 5], 2) == [5, 5]\nassert kSmallest([], 0) == []\nassert kSmallest([15, 22, 13, 27, 12, 10, 20], 7) == [10, 12, 13, 15, 20, 22, 27]\n```\n\n[/Example 3]", "temperature": 0.682}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 938, "total_tokens": 1334, "completion_tokens": 396, "completion": "You are given a list of tasks represented by characters and a non-negative integer n. Each task is represented by a single character. You have a single CPU that can execute at most one task at a time and each task takes exactly one unit of time to execute. You can also choose to ignore any CPU task. Given the list of tasks, you need to find the least number of units of times the CPU will take to finish all the given tasks.\n\nWrite a function `leastInterval` to solve the problem.\n\n###Code: \n\n```python\nimport heapq\ndef leastInterval(tasks: List[str], n: int) -> int:\n        hmap = {}\n        for task in tasks:\n            if task in hmap:\n                hmap[task] += 1\n            else:\n                hmap[task] = 1\n        \n        queue = []\n        for task, freq in hmap.items():\n            heapq.heappush(queue, (-freq, task))\n        \n        result = 0\n        while queue:\n            k = n + 1\n            temp = []\n            while k > 0 and queue:\n                freq, task = heapq.heappop(queue)\n                result += 1\n                k -= 1\n                if freq + 1 < 0:\n                    temp.append((freq + 1, task))\n            \n            if temp:\n                result += k\n            for item in temp:\n                heapq.heappush(queue, item)\n        return result\n```\n\n###Testcases: \n\n```python\nassert leastInterval([\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], 2) == 8\nassert leastInterval([\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], 0) == 6\nassert leastInterval([\"A\",\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"D\",\"D\"], 2) == 12\n```\n\n[/Example 3]", "temperature": 0.801}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1128, "total_tokens": 1779, "completion_tokens": 651, "completion": "Given a list of integers, find the kth smallest element in the list using a min heap. \n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heap = arr[:k]\n    heapq.heapify(heap)\n    for num in arr[k:]:\n        if num < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([7, 10, 4, 3, 20, 15], 4) == 10\nassert kthSmallest([7, 10, 4, 3, 20, 15], 1) == 3\nassert kthSmallest([7, 10, 4, 3, 20, 15], 6) == 20\nassert kthSmallest([7, 10, 4, 3, 20, 15], 2) == 4\nassert kthSmallest([1, 2, 3, 4, 5], 3) == 3\nassert kthSmallest([5, 4, 3, 2, 1], 1) == 1\nassert kthSmallest([5, 4, 3, 2, 1], 5) == 5\nassert kthSmallest([1, 2, 3, 4, 5], 5) == 5\nassert kthSmallest([1], 1) == 1\nassert kthSmallest([1, 2], 2) == 2\nassert kthSmallest([3, 3, 3, 3, 3], 1) == 3\nassert kthSmallest([3, 3, 3, 3, 3], 3) == 3\nassert kthSmallest([3, 3, 3, 3, 3], 5) == 3\nassert kthSmallest([-5, -2, 0, 1, 4, 8], 4) == 1\nassert kthSmallest([-5, -2, 0, 1, 4, 8], 1) == -5\nassert kthSmallest([-5, -2, 0, 1, 4, 8], 6) == 8\nassert kthSmallest([10, 20, 30, 40, 50], 3) == 30\nassert kthSmallest([50, 40, 30, 20, 10], 5) == 10\nassert kthSmallest([1, 3, 5, 7, 9], 2) == 3\n```", "temperature": 0.679}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1128, "total_tokens": 1503, "completion_tokens": 375, "completion": "Given a list of integers, find the kth largest element in the list.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n        heap = []\n        for num in nums:\n                heapq.heappush(heap, num)\n                if len(heap) > k:\n                        heapq.heappop(heap)\n        return heap[0]\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([3,2,1,5,6,4], 1) == 6\nassert findKthLargest([3,2,1,5,6,4], 6) == 1\nassert findKthLargest([99, 23, 56, 72, 12, 98, 34], 3) == 72\nassert findKthLargest([7, 10, 4, 3, 20, 15], 3) == 10\nassert findKthLargest([1, 2, 3, 4, 5], 5) == 1\nassert findKthLargest([5, 4, 3, 2, 1], 1) == 5\nassert findKthLargest([1], 1) == 1\nassert findKthLargest([-1, -2, -3, -4, -5], 3) == -3\n```\n\n[/Example 3]", "temperature": 0.603}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1128, "total_tokens": 1455, "completion_tokens": 327, "completion": "Given an array of elements, implement a max heap data structure and perform the following operations:\n1. Insert an element into the max heap\n2. Remove the maximum element from the max heap\n3. Get the maximum element from the max heap without removing it\n\n###Code: \n\n```python\nimport heapq\n\nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n    \n    def insert(self, val: int) -> None:\n        heapq.heappush(self.heap, -val)\n    \n    def removeMax(self) -> int:\n        return -heapq.heappop(self.heap)\n    \n    def getMax(self) -> int:\n        return -self.heap[0]\n\n# Example usage\nmax_heap = MaxHeap()\nmax_heap.insert(5)\nmax_heap.insert(10)\nmax_heap.insert(7)\nprint(max_heap.getMax())  # Output: 10\nprint(max_heap.removeMax())  # Output: 10\nprint(max_heap.getMax())  # Output: 7\nmax_heap.insert(15)\nprint(max_heap.getMax())  # Output: 15\n```\n\n###Testcases: \n\n```python\nmax_heap = MaxHeap()\nmax_heap.insert(5)\nmax_heap.insert(10)\nmax_heap.insert(7)\nassert max_heap.getMax() == 10\nassert max_heap.removeMax() == 10\nassert max_heap.getMax() == 7\nmax_heap.insert(15)\nassert max_heap.getMax() == 15\nassert max_heap.removeMax() == 15\nassert max_heap.getMax() == 7\n```\n\n[/Example 3]", "temperature": 0.942}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1128, "total_tokens": 1483, "completion_tokens": 355, "completion": "Given a list of integers, find the kth smallest element using a min-heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heapq.heapify(arr)\n    for _ in range(k):\n        result = heapq.heappop(arr)\n    return result\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([7, 10, 4, 3, 20, 15], 4) == 10\nassert kthSmallest([7, 10, 4, 3, 20, 15], 1) == 3\nassert kthSmallest([7, 10, 4, 3, 20, 15], 6) == 20\nassert kthSmallest([3, 3, 3, 3, 3, 3], 3) == 3\nassert kthSmallest([1, 2, 3, 4, 5], 5) == 5\nassert kthSmallest([5, 4, 3, 2, 1], 1) == 1\nassert kthSmallest([5, 4, 3, 2, 1], 5) == 5\nassert kthSmallest([1], 1) == 1\nassert kthSmallest([2, 2, 2, 2, 2], 3) == 2\n```\n\n", "temperature": 0.82}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1128, "total_tokens": 1447, "completion_tokens": 319, "completion": "Find the kth smallest element in an unsorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heap = arr[:k]\n    heapq.heapify(heap)\n\n    for num in arr[k:]:\n        if num < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([12, 3, 5, 7, 19], 2) == 5\nassert kthSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 5\nassert kthSmallest([5, 8, 12, 9, 7, 6, 4, 3], 1) == 3\nassert kthSmallest([5, 2, 9, 10, 1, 4, 3, 7, 8, 6], 6) == 6\nassert kthSmallest([4, 7, 2, 6, 10, 20, 3, 5, 1, 15], 8) == 7\n```", "temperature": 0.979}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1128, "total_tokens": 1580, "completion_tokens": 452, "completion": "You are given a list of tasks represented by their durations. You need to find the minimum amount of time required to finish k tasks given that you can only work on a single task at a time. You can also switch between tasks after finishing a task. The tasks should be processed in decreasing order of duration using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef minTimeToFinishTasks(tasks: list, k: int) -> int:\n    if k >= len(tasks):\n        return max(tasks)\n    \n    heap = []\n    for task in tasks:\n        heapq.heappush(heap, -task)\n    \n    time = 0\n    while k > 0:\n        task = -heapq.heappop(heap)\n        task -= 1\n        heapq.heappush(heap, -task)\n        k -= 1\n        time += 1\n    \n    return time\n```\n\n###Testcases: \n\n```python\nassert minTimeToFinishTasks([3, 5, 7, 10, 2, 1], 3) == 14\nassert minTimeToFinishTasks([1, 2, 3, 4, 5], 2) == 5\nassert minTimeToFinishTasks([5, 5, 5, 5, 5], 3) == 8\nassert minTimeToFinishTasks([10, 20, 30, 40, 50], 5) == 80\nassert minTimeToFinishTasks([5, 7, 2, 8, 9], 4) == 20\nassert minTimeToFinishTasks([10, 10, 10, 10, 10], 3) == 22\nassert minTimeToFinishTasks([5, 3, 7, 2, 8], 2) == 15\nassert minTimeToFinishTasks([1, 2, 3, 4, 5], 0) == 5\nassert minTimeToFinishTasks([1], 1) == 1\nassert minTimeToFinishTasks([], 0) == 0\n```\n\n", "temperature": 0.933}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1050, "completion_tokens": 346, "completion": "Find the k closest points to the origin (0, 0) in a 2D plane. Given a list of points, where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosest(points: list, k: int) -> list:\n    heap = []\n    for (x, y) in points:\n        distance = x**2 + y**2\n        heapq.heappush(heap, (distance, (x, y)))\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n    return result\n```\n\n###Testcases: \n\n```python\nassert kClosest([[1, 3], [-2, 2]], 1) == [[-2, 2]]\nassert kClosest([[3, 3], [5, -1], [-2, 4]], 2) == [[3, 3], [-2, 4]]\nassert kClosest([[1, 0], [0, 1]], 2) == [[1, 0], [0, 1]]\nassert kClosest([[2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [1, 1]], 1) == [[1, 1]]\nassert kClosest([[-1000000, -1000000], [1000000, 1000000]], 1) == [[-1000000, -1000000]]\n```", "temperature": 0.745}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1012, "completion_tokens": 308, "completion": "Given an array of distinct integers, write a program to find the k closest elements to a given value x in the array. The result should also be sorted in ascending order. If there are multiple answers, the smaller elements are always preferred.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n    \n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n        \n    result.sort()\n    return result\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 20) == [10, 30, 40]\nassert kClosestElements([1, 2, 4, 6, 8], 3, 3) == [1, 2, 4]\nassert kClosestElements([1, 2, 3, 4, 5], 4, -1) == [1, 2, 3, 4]\n``` \n\n[/Example 3]", "temperature": 0.763}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 951, "completion_tokens": 247, "completion": "Given a list of strings, write a program to find the k most frequent words from the list.\n\n###Code: \n\n```python\nimport collections\nimport heapq\n\ndef kMostFrequentWords(words: List[str], k: int) -> List[str]:\n    count = collections.Counter(words)\n    heap = [(-freq, word) for word, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n```\n\n###Testcases: \n\n```python\nassert kMostFrequentWords([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"], 2) == [\"apple\", \"banana\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 1) == [\"apple\"]\nassert kMostFrequentWords([\"apple\", \"banana\", \"cherry\", \"banana\", \"apple\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]\nassert kMostFrequentWords([], 0) == []\nassert kMostFrequentWords([\"apple\"], 1) == [\"apple\"]\n```", "temperature": 0.858}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 939, "completion_tokens": 235, "completion": "You are given a list of integers and you need to find the kth smallest element in the list.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heap = arr[:k]\n    heapq._heapify_max(heap)\n    \n    for i in range(k, len(arr)):\n        if arr[i] < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arr[i])\n    \n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([7, 10, 4, 3, 20, 15], 3) == 7\nassert kthSmallest([12, 3, 5, 7, 19], 2) == 5\nassert kthSmallest([1, 2, 3, 4, 5], 1) == 1\nassert kthSmallest([5, 4, 3, 2, 1], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.717}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 961, "completion_tokens": 257, "completion": "Find the k smallest elements in a given array.\n\n###Code: \n\n```python\nimport heapq\n\ndef k_smallest_elements(arr: list, k: int) -> list:\n    heap = arr[:k]\n    heapq._heapify_max(heap)\n    for i in range(k, len(arr)):\n        if arr[i] < heap[0]:\n            heapq._heapreplace_max(heap, arr[i])\n    return sorted(heap)\n```\n\n###Testcases: \n\n```python\nassert k_smallest_elements([4, 2, 7, 5, 9, 1, 8], 3) == [2, 4, 1]\nassert k_smallest_elements([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nassert k_smallest_elements([5, 4, 3, 2, 1], 3) == [1, 2, 3]\nassert k_smallest_elements([9, 8, 7, 6, 5, 4, 3, 2, 1], 4) == [1, 2, 3, 4]\n```", "temperature": 0.988}, {"few_shots": [{"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}, {"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 958, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the k most frequent elements in the array.\n\n###Code: \n\n```python\nimport heapq\nfrom collections import Counter\n\ndef topKFrequent(nums: list, k: int) -> list:\n    count = Counter(nums)\n    return heapq.nlargest(k, count.keys(), key=count.get)\n```\n\n\n###Testcases: \n\n```python\nassert topKFrequent([1, 1, 1, 2, 2, 3], 2) == [1, 2]\nassert topKFrequent([1], 1) == [1]\nassert topKFrequent([4, 1, -1, 2, -1, 2, 3], 2) == [-1, 2]\nassert topKFrequent([1, 2, 3, 4, 5], 3) == [1, 2, 3]\nassert topKFrequent([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5], 3) == [1, 2, 3]\n```\n\n\n[/Example 3]", "temperature": 0.794}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 867, "total_tokens": 1158, "completion_tokens": 291, "completion": "Given a list of integers, write a program to find the Kth largest element in the list using a heap.\n\n###Code: \n\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return heap[0]\n\n###Testcases: \n\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([9,8,7,6,5,4,3,2,1], 3) == 7\nassert findKthLargest([1], 1) == 1\nassert findKthLargest([1,1,1,1,2,2,2,2,3,3,3,3], 9) == 1\nassert findKthLargest([-1,-2,-3,-4,-5], 1) == -1\nassert findKthLargest([4,5,6,1,2,3], 3) == 4\n\n[/Example 3]", "temperature": 0.733}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 867, "total_tokens": 1390, "completion_tokens": 523, "completion": "Write a program to implement a Max Heap data structure. The program should support the following operations:\n1. Insert a new element into the heap\n2. Remove the maximum element from the heap\n3. Get the maximum element from the heap without removing it\n\n###Code: \n\nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n\n    def insert(self, val: int):\n        self.heap.append(val)\n        self._heapify_up(len(self.heap) - 1)\n\n    def remove_max(self) -> int:\n        if len(self.heap) == 0:\n            return None\n        if len(self.heap) == 1:\n            return self.heap.pop()\n        max_val = self.heap[0]\n        self.heap[0] = self.heap.pop()\n        self._heapify_down(0)\n        return max_val\n\n    def get_max(self) -> int:\n        return self.heap[0] if self.heap else None\n\n    def _heapify_up(self, index):\n        parent = (index - 1) // 2\n        if parent >= 0 and self.heap[parent] < self.heap[index]:\n            self.heap[parent], self.heap[index] = self.heap[index], self.heap[parent]\n            self._heapify_up(parent)\n\n    def _heapify_down(self, index):\n        left = 2 * index + 1\n        right = 2 * index + 2\n        largest = index\n        if left < len(self.heap) and self.heap[left] > self.heap[largest]:\n            largest = left\n        if right < len(self.heap) and self.heap[right] > self.heap[largest]:\n            largest = right\n        if largest != index:\n            self.heap[largest], self.heap[index] = self.heap[index], self.heap[largest]\n            self._heapify_down(largest)\n\n\n###Testcases: \n\nmax_heap = MaxHeap()\nmax_heap.insert(5)\nmax_heap.insert(10)\nmax_heap.insert(3)\nassert max_heap.get_max() == 10\nassert max_heap.remove_max() == 10\nassert max_heap.get_max() == 5\nmax_heap.insert(7)\nassert max_heap.get_max() == 7\nassert max_heap.remove_max() == 7\nassert max_heap.get_max() == 5\nmax_heap.insert(15)\nmax_heap.insert(1)\nassert max_heap.get_max() == 15\nassert max_heap.remove_max() == 15\nassert max_heap.get_max() == 5\n\n[/Example 3]", "temperature": 0.737}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 867, "total_tokens": 1082, "completion_tokens": 215, "completion": "Given a list of integers, write a program to find the Kth largest element in the list using a heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthLargestElement(nums: List[int], k: int) -> int:\n    heap = []\n    for num in nums:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthLargestElement([3, 2, 1, 5, 6, 4], 2) == 5\nassert kthLargestElement([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4\nassert kthLargestElement([1], 1) == 1\n```\n\n[/Example 3]", "temperature": 0.781}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 867, "total_tokens": 1090, "completion_tokens": 223, "completion": "Write a program to implement a max heap data structure. The program should support the following operations:\n\n1. Insert an element into the max heap.\n2. Delete the maximum element from the max heap.\n3. Get the maximum element from the max heap without deleting it.\n\n###Code:\n\n```python\nimport heapq\n\nclass MaxHeap:\n    def __init__(self):\n        self.heap = []\n    \n    def insert(self, val):\n        heapq.heappush(self.heap, -val)\n    \n    def deleteMax(self):\n        heapq.heappop(self.heap)\n    \n    def getMax(self):\n        if self.heap:\n            return -self.heap[0]\n        else:\n            return None\n```\n\n###Testcases:\n\n```python\n# Initialize a max heap\nmax_heap = MaxHeap()\n\n# Insert elements\nmax_heap.insert(10)\nmax_heap.insert(8)\nmax_heap.insert(15)\n\n# Test getMax\nassert max_heap.getMax() == 15\n\n# Delete max and test getMax\nmax_heap.deleteMax()\nassert max_heap.getMax() == 10\n```\n\n[/Example 3]", "temperature": 0.834}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 867, "total_tokens": 1171, "completion_tokens": 304, "completion": "Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.\n\n###Code: \n\ndef subarraySum(nums: list, k: int) -> int:\n        count = 0\n        sum = 0\n        d = dict()\n        d[0] = 1\n        \n        for num in nums:\n            sum += num\n            if sum - k in d:\n                count += d[sum - k]\n            d[sum] = d.get(sum, 0) + 1\n            \n        return count\n\n###Testcases: \n\nassert subarraySum([1, 1, 1], 2) == 2\nassert subarraySum([1, 2, 3], 3) == 2\nassert subarraySum([1, 2, 1, 3], 3) == 4\nassert subarraySum([8, 3, 1, -5, 2, 7, -7, -1, 6], 7) == 4\nassert subarraySum([0, 0, 0, 0, 0], 0) == 15\nassert subarraySum([-1, -1, 1], 0) == 1\nassert subarraySum([1, 2, 3, 4, 5], 10) == 1\n\n[/Example 3]", "temperature": 0.948}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "5640a625-3a7f-46ce-81b5-45b28f6981a3", "question": "Given an array arr[] of size N, the task is to return the K largest elements in an array. The Elements in output array must be in descending order", "examples": "Input:  [1, 23, 12, 9, 30, 2, 50], K = 3\nOutput: 50, 30, 23\n\nInput:  [11, 5, 12, 9, 44, 17, 2], K = 2\nOutput: 44, 17", "link": "https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/", "difficulty": "Easy", "categories": ["Heap"], "code": "def kLargest(arr: list, k: int) -> list:\n        arr.sort(reverse=True)\n        return arr[0:k]\n", "asserts": ["assert kLargest([1, 23, 12, 9, 30, 2, 50], 3) == [50, 30, 23]", "assert kLargest([4, 5, 1, 2, 9, 7, 6, 10], 4) == [10, 9, 7, 6]", "assert kLargest([45, 67, 33, 21], 1) == [67]", "assert kLargest([101, 755, 312], 2) == [755, 312]", "assert kLargest([6, 8, 0, 1, 3, 5, 2, 4, 7], 5) == [8, 7, 6, 5, 4]", "assert kLargest([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert kLargest([100], 1) == [100]", "assert kLargest([9, 7, 7, 9, 5], 3) == [9, 9, 7]", "assert kLargest([9, 7, 7, 9, 5], 5) == [9, 9, 7, 7, 5]", "assert kLargest([5, 5, 5, 5, 5], 2) == [5, 5]", "assert kLargest([], 0) == []", "assert kLargest([15, 22, 13, 27, 12, 10, 20], 7) == [27, 22, 20, 15, 13, 12, 10]"]}], "category": "Heap", "prompt_tokens": 867, "total_tokens": 1060, "completion_tokens": 193, "completion": "You are given an array of integers and an integer k. Your task is to find the kth largest element in the array.\n\n###Code:\n\n```python\nimport heapq\n\ndef findKthLargest(nums: List[int], k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return heap[0]\n```\n\n###Testcases:\n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([5,1,6,3,4,2], 3) == 4\n```\n\n[/Example 3]", "temperature": 0.67}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1674, "completion_tokens": 617, "completion": "Write a program to merge K sorted arrays into one sorted array using a min heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef mergeSortedArrays(arrays: list) -> list:\n    heap = []\n    result = []\n\n    for i, array in enumerate(arrays):\n        heap.append((array[0], i, 0))\n\n    heapq.heapify(heap)\n\n    while heap:\n        val, arr_idx, ele_idx = heapq.heappop(heap)\n        result.append(val)\n\n        if ele_idx + 1 < len(arrays[arr_idx]):\n            next_tuple = (arrays[arr_idx][ele_idx + 1], arr_idx, ele_idx + 1)\n            heapq.heappush(heap, next_tuple)\n\n    return result\n```\n\n###Testcases: \n\n```python\nassert mergeSortedArrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert mergeSortedArrays([[10, 20, 30], [15, 25, 35]]) == [10, 15, 20, 25, 30, 35]\nassert mergeSortedArrays([[5, 8, 10], [1, 2, 3], [4, 7, 9]]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert mergeSortedArrays([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert mergeSortedArrays([[4, 4, 4], [3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]\nassert mergeSortedArrays([[100, 200, 300], [150, 250, 350], [123, 456, 789]]) == [100, 123, 150, 200, 250, 300, 350, 456, 789]\nassert mergeSortedArrays([[], [], []]) == []\n```\n\n[/Example 3]", "temperature": 0.861}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1496, "completion_tokens": 439, "completion": "You are given a list of integers and you need to find the kth smallest element in the list.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthSmallest(arr: list, k: int) -> int:\n    heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n    \n    for _ in range(k - 1):\n        heapq.heappop(heap)\n    \n    return heapq.heappop(heap)\n```\n\n###Testcases: \n\n```python\nassert kthSmallest([4, 6, 3, 2, 9], 3) == 4\nassert kthSmallest([8, 1, 7, 2, 6, 3, 5, 4], 5) == 5\nassert kthSmallest([0], 1) == 0\nassert kthSmallest([2, 1, 3, 5, 4, 7, 6], 4) == 4\nassert kthSmallest([-1, -5, -3, -4, -2], 3) == -3\nassert kthSmallest([10, -2, 4, 5, 3, 7], 2) == 3\nassert kthSmallest([1.5, 2.5, 0.5, 3.5, 1.0, 2.0], 3) == 1.5\nassert kthSmallest([99], 1) == 99\nassert kthSmallest([5, 5, 5, 5], 2) == 5\nassert kthSmallest([9, 7, 7, 9, 5, 5], 4) == 7\nassert kthSmallest([], 1) == None  # Empty list should return None\nassert kthSmallest([1, 1000, 100, 10, 10000], 3) == 100\n```\n\n[/Example 3]", "temperature": 0.774}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1365, "completion_tokens": 308, "completion": "Given a stream of integers and a value k, write a class to efficiently find the kth largest element in the stream. Implement the KthLargest class:\n\n1. KthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.\n2. int add(int val) Returns the kth largest element in the stream.\n\n###Code: \n\n```python\nimport heapq\n\nclass KthLargest:\n\n    def __init__(self, k: int, nums: List[int]):\n        self.k = k\n        self.heap = nums\n        heapq.heapify(self.heap)\n        while len(self.heap) > k:\n            heapq.heappop(self.heap)\n        \n    def add(self, val: int) -> int:\n        if len(self.heap) < self.k:\n            heapq.heappush(self.heap, val)\n        elif val > self.heap[0]:\n            heapq.heappushpop(self.heap, val)\n        return self.heap[0]\n```\n\n###Testcases: \n\n```python\nkthLargest = KthLargest(3, [4,5,8,2])\nassert kthLargest.add(3) == 4\nassert kthLargest.add(5) == 5\nassert kthLargest.add(10) == 5\nassert kthLargest.add(9) == 8\nassert kthLargest.add(4) == 8\n```\n\n[/Example 3]", "temperature": 0.736}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1490, "completion_tokens": 433, "completion": "Write a program to find the Kth largest element in an unsorted array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthLargestElement(arr: list, K: int) -> int:\n    max_heap = []\n    for num in arr:\n        heapq.heappush(max_heap, -num)\n        if len(max_heap) > K:\n            heapq.heappop(max_heap)\n    return -max_heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthLargestElement([3, 2, 1, 5, 6, 4], 2) == 5\nassert kthLargestElement([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4\nassert kthLargestElement([3, 2, 3, 1, 2, 4, 5, 5, 6], 1) == 6\nassert kthLargestElement([3, 2, 1, 5, 6, 4], 2) == 5\nassert kthLargestElement([3, 2, 1, 5, 6, 4], 2) == 5\nassert kthLargestElement([3, 2, 1, 5, 6, 4], 2) == 5\nassert kthLargestElement([3, 2, 1, 5, 6, 4], 2) == 5\nassert kthLargestElement([3, 2, 1, 5, 6, 4], 2) == 5\nassert kthLargestElement([3, 2, 1, 5, 6, 4], 2) == 5\nassert kthLargestElement([3, 2, 1, 5, 6, 4], 2) == 5\n```", "temperature": 0.709}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1536, "completion_tokens": 479, "completion": "You are given an array of integers and a target integer. Write a program to find the k closest elements to the target in the array using a max heap.\n\n###Code:\n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, target: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - target)\n        if len(heap) < k:\n            heapq.heappush(heap, (-diff, num))\n        else:\n            if diff < -heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (-diff, num))\n    return [num for _, num in heap]\n```\n\n###Testcases:\n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 3, 3) == [3, 2, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 2, 35) == [30, 40]\nassert kClosestElements([1, 2, 3, 4, 5], 4, 10) == [5, 4, 3, 2]\nassert kClosestElements([-10, 0, 10, 20, 30], 3, 15) == [20, 10, 30]\nassert kClosestElements([5, 6, 7, 8, 9], 1, 7) == [7]\nassert kClosestElements([1, 2, 3, 4, 5], 2, 1) == [1, 2]\nassert kClosestElements([1, 2, 3, 4, 5], 1, 6) == [5]\nassert kClosestElements([5, 6, 7, 8, 9], 5, 7) == [9, 8, 7, 6, 5]\nassert kClosestElements([1, 2, 3, 4, 5], 0, 3) == []\nassert kClosestElements([], 3, 5) == []\n```\n\n[/Example 3]", "temperature": 0.624}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "89396d48-febb-46d4-a7e9-fc6db885a2cb", "question": "Given an array of elements, sort the array in decreasing order using min heap. ", "examples": "Input : arr[] = {5, 3, 10, 1}\nOutput : arr[] = {10, 5, 3, 1}\n\nInput : arr[] = {1, 50, 100, 25}\nOutput : arr[] = {100, 50, 25, 1}", "link": "https://www.geeksforgeeks.org/heap-sort-for-decreasing-order-using-min-heap/", "difficulty": "Easy", "categories": ["Heap"], "code": "def heapSort(arr: list) -> list:\n        def heapify(arr, n, i):\n                smallest = i \n                l = 2 * i + 1 \n                r = 2 * i + 2\n\n                if l < n and arr[l] < arr[smallest]: \n                        smallest = l \n\n                if r < n and arr[r] < arr[smallest]: \n                        smallest = r \n\n                if smallest != i: \n                        (arr[i], \n                        arr[smallest]) = (arr[smallest],\n                                                        arr[i])\n\n                        heapify(arr, n, smallest)\n         \n        n = len(arr)\n        for i in range(int(n / 2) - 1, -1, -1):\n                heapify(arr, n, i) \n\n        for i in range(n-1, -1, -1):\n                \n                arr[0], arr[i] = arr[i], arr[0]\n\n                heapify(arr, i, 0)\n\n        return arr\n", "asserts": ["assert heapSort([4,6,3,2,9]) == [9,6,4,3,2]", "assert heapSort([8, 1, 7, 2, 6, 3, 5, 4]) == [8, 7, 6, 5, 4, 3, 2, 1]", "assert heapSort([0]) == [0]", "assert heapSort([2, 1, 3, 5, 4, 7, 6]) == [7, 6, 5, 4, 3, 2, 1]", "assert heapSort([-1, -5, -3, -4, -2]) == [-1, -2, -3, -4, -5]", "assert heapSort([10, -2, 4, 5, 3, 7]) == [10, 7, 5, 4, 3, -2]", "assert heapSort([1.5, 2.5, 0.5, 3.5, 1.0, 2.0]) == [3.5, 2.5, 2.0, 1.5, 1.0, 0.5]", "assert heapSort([99]) == [99]", "assert heapSort([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert heapSort([9, 7, 7, 9, 5, 5]) == [9, 9, 7, 7, 5, 5]", "assert heapSort([]) == []  # Empty list should return an empty list", "assert heapSort([1, 1000, 100, 10, 10000]) == [10000, 1000, 100, 10, 1]"]}], "category": "Heap", "prompt_tokens": 1057, "total_tokens": 1311, "completion_tokens": 254, "completion": "Given an array of integers, write a program to find the Kth largest element in the array using a max heap.\n\n###Code: \n\n```python\nimport heapq\n\ndef findKthLargest(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    \n    for _ in range(k):\n        result = -heapq.heappop(heap)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findKthLargest([3,2,1,5,6,4], 2) == 5\nassert findKthLargest([3,2,3,1,2,4,5,5,6], 4) == 4\nassert findKthLargest([99, 78, 55, 22, 11, 7], 3) == 55\nassert findKthLargest([4, 5, 8, 2, 1, 9], 1) == 9\nassert findKthLargest([6, 7, 8, 9, 10], 3) == 8\n```", "temperature": 0.961}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 1121, "completion_tokens": 417, "completion": "You are given a list of integers. Write a program to find the median of the list after each element is added to the list. You may use the heapq module in Python.\n\n###Code: \n\n```python\nimport heapq\n\ndef findMedian(nums: list) -> list:\n    min_heap, max_heap = [], []\n    result = []\n    \n    for num in nums:\n        if not max_heap or num > -max_heap[0]:\n            heapq.heappush(min_heap, num)\n        else:\n            heapq.heappush(max_heap, -num)\n        \n        if len(min_heap) > len(max_heap) + 1:\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        \n        if len(min_heap) == len(max_heap):\n            median = (min_heap[0] - max_heap[0]) / 2.0\n        else:\n            median = float(min_heap[0])\n        \n        result.append(median)\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert findMedian([5, 15, 10, 20, 3]) == [5, 10, 10, 12.5, 10]\nassert findMedian([1, 2, 3, 4, 5]) == [1, 1.5, 2, 2.5, 3]\nassert findMedian([10, 20, 30, 40, 50]) == [10, 15, 20, 25, 30]\nassert findMedian([9, 5, 7, 3, 2, 8, 1, 4, 6]) == [9, 7, 7, 6, 5, 6, 5.5, 5, 5]\n```\n\n[/Example 3]", "temperature": 0.856}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 962, "completion_tokens": 258, "completion": "Write an efficient program to implement a min heap data structure. The program should support the following operations:\n\n1. Push: Insert a new element into the heap.\n2. Pop: Remove and return the smallest element from the heap.\n3. Peek: Return the smallest element from the heap without removing it.\n\n###Code:\n\n```python\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap = []\n\n    def push(self, value: int) -> None:\n        heapq.heappush(self.heap, value)\n\n    def pop(self) -> int:\n        return heapq.heappop(self.heap)\n\n    def peek(self) -> int:\n        return self.heap[0]\n\n# Test the MinHeap implementation\nheap = MinHeap()\nheap.push(10)\nheap.push(5)\nheap.push(7)\nassert heap.peek() == 5\nassert heap.pop() == 5\nassert heap.peek() == 7\n```\n\n###Testcases:\n\n```python\n# Test the MinHeap implementation\nheap = MinHeap()\nheap.push(10)\nheap.push(5)\nheap.push(7)\nassert heap.peek() == 5\nassert heap.pop() == 5\nassert heap.peek() == 7\n```\n\n[/Example 3]", "temperature": 0.931}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 910, "completion_tokens": 206, "completion": "Write a program to find the kth smallest element in a matrix, where the matrix is sorted row-wise and column-wise.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthSmallest(matrix: List[List[int]], k: int) -> int:\n    heap = []\n    for row in matrix:\n        for num in row:\n            heapq.heappush(heap, num)\n\n    for _ in range(k - 1):\n        heapq.heappop(heap)\n\n    return heapq.heappop(heap)\n```\n\n###Testcases:\n\n```python\nassert kthSmallest([\n    [1, 5, 9],\n    [10, 11, 13],\n    [12, 13, 15]\n], 8) == 13\n\nassert kthSmallest([\n    [1, 3, 5],\n    [6, 7, 12],\n    [11, 14, 14]\n], 6) == 11\n```\n\n[/Example 3]", "temperature": 0.785}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 949, "completion_tokens": 245, "completion": "You are given an array of integers and an integer k. Your task is to find the kth largest element in the array.\n\n###Code: \n\n```python\nimport heapq\n\ndef kthLargestElement(nums: list, k: int) -> int:\n    heap = []\n    for num in nums:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap[0]\n```\n\n###Testcases: \n\n```python\nassert kthLargestElement([3, 2, 1, 5, 6, 4], 2) == 5\nassert kthLargestElement([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4\nassert kthLargestElement([1], 1) == 1\nassert kthLargestElement([9, 3, 2, 4, 8], 3) == 4\n```\n\n[/Example 3]", "temperature": 0.657}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 989, "completion_tokens": 285, "completion": "Find the k closest elements to a given value x in a sorted array arr[] of n elements. The result should also be sorted in ascending order.\n\n###Code: \n\n```python\nimport heapq\n\ndef kClosestElements(arr: list, k: int, x: int) -> list:\n    heap = []\n    for num in arr:\n        diff = abs(num - x)\n        heapq.heappush(heap, (diff, num))\n\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap)[1])\n\n    return sorted(result)\n```\n\n###Testcases: \n\n```python\nassert kClosestElements([1, 2, 3, 4, 5], 4, 3) == [1, 2, 3, 4]\nassert kClosestElements([10, 20, 30, 40, 50], 3, 35) == [30, 40, 50]\nassert kClosestElements([5, 6, 7, 8, 9], 3, 10) == [7, 8, 9]\nassert kClosestElements([1, 4, 6, 8, 10, 12], 3, 9) == [6, 8, 10]\n```\n\n[/Example 3]", "temperature": 0.668}, {"few_shots": [{"author": "Karthik", "UUID": "fc15ed0b-2303-4ccb-b9e0-9bc18f2a71ec", "question": "Given an array of integers. Write a program to find the K-th largest sum of contiguous subarray within the array of numbers that has both negative and positive numbers.", "examples": "Input: a[] = {20, -5, -1}, K = 3\nOutput: 14\nExplanation: All sum of contiguous subarrays are (20, 15, 14, -5, -6, -1) \nso the 3rd largest sum is 14.\n\nInput: a[] = {10, -10, 20, -40}, k = 6\nOutput: -10\nExplanation: The 6th largest sum among\nsum of all contiguous subarrays is -10.", "link": "https://www.geeksforgeeks.org/k-th-largest-sum-contiguous-subarray/", "difficulty": "Hard", "categories": ["Heap"], "code": "def kthLargestSum(arr: list, K: int) -> int:\n    N = len(arr)\n    result = []\n    for i in range(N):\n        sum = 0\n        for j in range(i, N):\n                sum += arr[j]\n                result.append(sum)\n\n    result.sort(reverse=True)\n\n    return result[K - 1]\n", "asserts": ["assert kthLargestSum([20, -5, -1], 3) == 14", "assert kthLargestSum([10, -10, 20, -40], 6) == -10", "assert kthLargestSum([0, 0, 0, 0, 0], 1) == 0", "assert kthLargestSum([2, 3, -2, -1, 10], 9) == 2"]}, {"author": "Karthik", "UUID": "b2d10472-1c51-495a-a76c-b37a3c5986fb", "question": "Given an array arr[] containing n elements. The problem is to find the maximum number of distinct elements (non-repeating) after removing k elements from the array. Where 1<= k <= n", "examples": "Input : arr[] = {5, 7, 5, 5, 1, 2, 2}, k = 3\nOutput : 4\nRemove 2 occurrences of element 5 and\n1 occurrence of element 2.\n\nInput : arr[] = {1, 2, 3, 4, 5, 6, 7}, k = 5\nOutput : 2\n\nInput : arr[] = {1, 2, 2, 2}, k = 1\nOutput : 1", "link": "https://www.geeksforgeeks.org/maximum-distinct-elements-removing-k-elements/", "difficulty": "Medium", "categories": ["Heap"], "code": "\ndef maxDistinctNum(a: list, k: int) -> int:\n        s = {}\n        n = len(a)\n        for i in range(n):\n                if a[i] not in s or k == 0:\n                        s[a[i]] = s.get(a[i], 0)+1\n                else:\n                        s[a[i]] = 1\n                        k -= 1\n        if k != 0:\n                return len(s)-k\n        else:\n\n                st = set()\n                for i in s:\n                        st.add(i)\n                return len(st)\n", "asserts": ["assert maxDistinctNum([5, 7, 5, 5, 1, 2, 2], 3) == 4", "assert maxDistinctNum([1, 2, 3, 4, 5, 6, 7], 5) == 2", "assert maxDistinctNum([7, 3, 5, 8, 5, 3, 4], 4) == 3", "assert maxDistinctNum([], 0) == 0", "assert maxDistinctNum([9], 1) == 0"]}], "category": "Heap", "prompt_tokens": 704, "total_tokens": 998, "completion_tokens": 294, "completion": "Find the kth element in the sorted order of elements of n arrays. Each array is of size m.\n\n###Code:\n\n```python\nimport heapq\n\ndef kthElement(arr: list, k: int) -> int:\n    heap = []\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if len(heap) < k:\n                heapq.heappush(heap, -arr[i][j])\n            else:\n                if -arr[i][j] > heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, -arr[i][j])\n    return -heap[0]\n```\n\n###Testcases:\n\n```python\nassert kthElement([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 4) == 4\nassert kthElement([[10, 20, 30, 40], [15, 25, 35, 45], [24, 29, 37, 48], [32, 33, 39, 50]], 7) == 30\nassert kthElement([[1, 2], [3, 4]], 2) == 2\nassert kthElement([[1, 2, 3, 4, 5]], 3) == 3\n```\n\n[/Example 3]", "temperature": 0.876}]