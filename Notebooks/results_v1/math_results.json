[{"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 938, "completion_tokens": 306, "completion": "Calculate the Sum of Two Integers: Write a function that takes two integers and returns their sum. You are not allowed to use the operator '+' or '-'.\n\n###Code:\n\ndef getSum(a: int, b: int) -> int:\n    # 32 bits integer max\n    MAX = 0x7FFFFFFF\n    # Mask to get 32 bits\n    mask = 0xFFFFFFFF\n    \n    while b != 0:\n        # ^ get different bits and & gets double 1s, << moves carry\n        a, b = (a ^ b) & mask, ((a & b) << 1) & mask\n    # if a is negative, get a's 32 bits complement positive first\n    return a if a <= MAX else ~(a ^ mask)\n\n###Testcases:\n\nassert getSum(1, 2) == 3\nassert getSum(-2, 3) == 1\nassert getSum(-3, -4) == -7\nassert getSum(20, 30) == 50\nassert getSum(0, 0) == 0\nassert getSum(2, -8) == -6\nassert getSum(-5, 5) == 0\nassert getSum(123, 456) == 579\nassert getSum(-1000, 1000) == 0\nassert getSum(9999, 1) == 10000\n\n[/Example 3]", "temperature": 0.86}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 964, "completion_tokens": 332, "completion": "Prime Number of Set Bits in Binary Representation: Given two integers left and right, return the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation.\n\n(Recall that the number of set bits an integer has is the number of 1s present when written in binary. For example, 21 written in binary is 10101, which has 3 set bits.)\n\n###Code: \n\ndef countPrimeSetBits(left: int, right: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for num in range(left, right+1):\n        if is_prime(bin(num).count('1')):\n            count += 1\n    return count\n\n###Testcases: \n\nassert countPrimeSetBits(6, 10) == 4\nassert countPrimeSetBits(10, 15) == 5\nassert countPrimeSetBits(842, 888) == 23\nassert countPrimeSetBits(0, 1) == 0\nassert countPrimeSetBits(10, 10) == 1\nassert countPrimeSetBits(5, 5) == 1\nassert countPrimeSetBits(100, 10000) == 606\nassert countPrimeSetBits(2890, 3455) == 233\n\n[/Example 3]", "temperature": 0.819}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 836, "completion_tokens": 204, "completion": "Factorial Trailing Zeroes: Given an integer n, return the number of trailing zeroes in n!.\n\nExample: n = 5, n! = 120, the number of trailing zeroes is 1.\n\n###Code:\n\ndef trailingZeroes(n: int) -> int:\n    count = 0\n    while n > 0:\n        n //= 5\n        count += n\n    return count\n\n###Testcases:\n\nassert trailingZeroes(3) == 0\nassert trailingZeroes(5) == 1\nassert trailingZeroes(10) == 2\nassert trailingZeroes(0) == 0\nassert trailingZeroes(25) == 6\nassert trailingZeroes(50) == 12\nassert trailingZeroes(75) == 18\nassert trailingZeroes(100) == 24\nassert trailingZeroes(125) == 31\nassert trailingZeroes(200) == 49\n\n[/Example 3]", "temperature": 0.937}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 1013, "completion_tokens": 381, "completion": "Prime Arrangements: Return the number of permutations of the first n non-negative integers such that the prime numbers are at prime indices (1-indexed).\n\n(Recall that an integer is called prime if and only if it is greater than 1 and cannot be written as a product of two different integers both smaller than it.)\n\nSince the answer may be large, return the answer modulo 10^9 + 7.\n\n###Code: \n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef primeArrangements(n: int) -> int:\n    prime_count = sum(is_prime(i) for i in range(1, n+1))\n    non_prime_count = n - prime_count\n    MOD = 10**9 + 7\n\n    def factorial(x):\n        result = 1\n        for i in range(2, x + 1):\n            result = result * i % MOD\n        return result\n\n    return factorial(prime_count) * factorial(non_prime_count) % MOD\n\n###Testcases: \n\nassert primeArrangements(5)==12\nassert primeArrangements(100) == 682289015\nassert primeArrangements(1) == 1\nassert primeArrangements(2) == 1\nassert primeArrangements(3) == 2\nassert primeArrangements(10) == 17280\nassert primeArrangements(11) == 86400\nassert primeArrangements(20) == 364953600\nassert primeArrangements(0) == 1\nassert primeArrangements(7) == 504\n\n[/Example 3]", "temperature": 0.811}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 970, "completion_tokens": 338, "completion": "Count Primes: Count the number of prime numbers less than a non-negative number, n.\n\n###Code:\n\n```python\ndef is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef countPrimes(n: int) -> int:\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n```\n\n###Testcases:\n\n```python\nassert countPrimes(10) == 4  # 2, 3, 5, 7\nassert countPrimes(0) == 0\nassert countPrimes(1) == 0\nassert countPrimes(2) == 0\nassert countPrimes(3) == 1  # 2\nassert countPrimes(5) == 2  # 2, 3\nassert countPrimes(100) == 25  # 2, 3, 5, 7, ..., 97\nassert countPrimes(1000) == 168\nassert countPrimes(499979) == 41537\nassert countPrimes(999983) == 78497\n```\n\n[/Example 3]", "temperature": 0.691}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 969, "completion_tokens": 337, "completion": "Perfect Squares: Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.\n\nFor example, given n = 12, return 3 because 12 = 4 + 4 + 4; given n = 13, return 2 because 13 = 4 + 9.\n\n###Code:\n\n```python\nimport math\n\ndef numSquares(n: int) -> int:\n    if n < 2:\n        return n\n    squares = [i**2 for i in range(1, int(math.sqrt(n)) + 1)]\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    \n    for i in range(1, n + 1):\n        for square in squares:\n            if i >= square:\n                dp[i] = min(dp[i], dp[i - square] + 1)\n    \n    return dp[n]\n```\n\n###Testcases:\n\n```python\nassert numSquares(12) == 3\nassert numSquares(13) == 2\nassert numSquares(1) == 1\nassert numSquares(0) == 0\nassert numSquares(18) == 2\nassert numSquares(27) == 3\nassert numSquares(52) == 2\nassert numSquares(85) == 2\nassert numSquares(99) == 3\nassert numSquares(100) == 1\n```\n\n[/Example 3]", "temperature": 0.671}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1283, "completion_tokens": 339, "completion": "Prime Factors Count: Given a positive integer n, return the count of prime factors of n. A prime factor is a factor that is a prime number.\n\n###Code: \n\nfrom typing import List\n\ndef prime_factors_count(n: int) -> int:\n    count = 0\n    # Count the number of 2s that divide n\n    while n % 2 == 0:\n        count += 1\n        n = n // 2\n    # n must be odd at this point, so a skip of 2 (i += 2) can be used\n    for i in range(3, int(n**0.5)+1, 2):\n        # While i divides n, count i and divide n\n        while n % i == 0:\n            count += 1\n            n = n // i\n    # If n is a prime number greater than 2, then count it\n    if n > 2:\n        count += 1\n    return count\n\n###Testcases: \n\nassert prime_factors_count(2) == 1\nassert prime_factors_count(100) == 4  # 2^2 * 5^2\nassert prime_factors_count(49) == 2  # 7^2\nassert prime_factors_count(1) == 0\nassert prime_factors_count(37) == 1  # 37 is prime\nassert prime_factors_count(64) == 6  # 2^6\nassert prime_factors_count(360) == 6  # 2^3 * 3^2 * 5\n\n[/Example 3]", "temperature": 0.755}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1220, "completion_tokens": 276, "completion": "Prime Factorization: Given a positive integer n, return its prime factorization as a sorted list of the prime factors. If n is a prime number, the list should contain only n itself.\n\n###Code:\n\ndef primeFactors(n: int) -> List[int]:\n    factors = []\n    # Divide out all 2's first\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    # Now check for odd factors\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    # If remaining n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return factors\n\n###Testcases:\n\nassert primeFactors(2) == [2]\nassert primeFactors(3) == [3]\nassert primeFactors(4) == [2, 2]\nassert primeFactors(56) == [2, 2, 2, 7]\nassert primeFactors(100) == [2, 2, 5, 5]\nassert primeFactors(101) == [101]\nassert primeFactors(154) == [2, 7, 11]\n\n[/Example 3]", "temperature": 0.701}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1204, "completion_tokens": 260, "completion": "Prime Factorization: Write a function that takes an integer n and returns its prime factors in ascending order. A prime factor is a factor that is a prime number. If the input number is 1 or less, the function should return an empty list.\n\n###Code: \n\nfrom typing import List\n\ndef prime_factors(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n >= divisor:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n\n###Testcases: \n\nassert prime_factors(2) == [2]\nassert prime_factors(3) == [3]\nassert prime_factors(4) == [2, 2]\nassert prime_factors(5) == [5]\nassert prime_factors(6) == [2, 3]\nassert prime_factors(18) == [2, 3, 3]\nassert prime_factors(100) == [2, 2, 5, 5]\nassert prime_factors(1) == []\nassert prime_factors(0) == []\nassert prime_factors(19) == [19]\nassert prime_factors(20) == [2, 2, 5]\n\n[/Example 3]", "temperature": 0.746}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1158, "completion_tokens": 214, "completion": "Prime Factorization: Create a function that returns the prime factors of a given integer n in the form of a list. The prime factors should be listed in ascending order.\n\n###Code:\n\ndef prime_factors(n: int) -> list:\n    factors = []\n    d = 2\n    while d * d <= n:\n        while (n % d) == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n    if n > 1:\n       factors.append(n)\n    return factors\n\n###Testcases:\n\nassert prime_factors(2) == [2]\nassert prime_factors(18) == [2, 3, 3]\nassert prime_factors(35) == [5, 7]\nassert prime_factors(89) == [89]\nassert prime_factors(420) == [2, 2, 3, 5, 7]\nassert prime_factors(1105) == [5, 13, 17]\nassert prime_factors(9999991) == [9999991]", "temperature": 0.872}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1136, "completion_tokens": 192, "completion": "Sum of Square Numbers: Given a non-negative integer c, decide whether there're two integers a and b such that a^2 + b^2 = c.\n\n###Code: \n\nimport math\n\ndef judgeSquareSum(c: int) -> bool:\n    left = 0\n    right = int(math.sqrt(c))\n    while left <= right:\n        cur_sum = left * left + right * right\n        if cur_sum < c:\n            left += 1\n        elif cur_sum > c:\n            right -= 1\n        else:\n            return True\n    return False\n\n###Testcases: \n\nassert judgeSquareSum(5) == True\nassert judgeSquareSum(3) == False\nassert judgeSquareSum(4) == True\nassert judgeSquareSum(2) == True\nassert judgeSquareSum(1) == True\nassert judgeSquareSum(999999999) == False\n\n[/Example 3]", "temperature": 0.859}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1326, "completion_tokens": 382, "completion": "Greatest Common Divisor of Strings: For two strings str1 and str2, we say that str1 divides str2 if and only if str2 = str1 + ... + str1 (str1 concatenated with itself one or more times).\n\nReturn the largest string x such that x divides both str1 and str2.\n\n###Code: \n\ndef gcdOfStrings(str1: str, str2: str) -> str:\n    # Helper function to compute the greatest common divisor of two numbers\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n    # Helper function to check whether a string t divides another string s\n    def checkDivide(s: str, t: str) -> bool:\n        if len(s) % len(t) != 0:\n            return False\n        return s == t * (len(s) // len(t))\n    # Compute the gcd of the lengths of the two strings\n    gcd_len = gcd(len(str1), len(str2))\n    # Check if it divides both strings\n    candidate = str1[:gcd_len]\n    if checkDivide(str1, candidate) and checkDivide(str2, candidate):\n        return candidate\n    return \"\"\n\n###Testcases: \n\nassert gcdOfStrings(\"ABCABC\", \"ABC\") == \"ABC\"\nassert gcdOfStrings(\"ABABAB\", \"ABAB\") == \"AB\"\nassert gcdOfStrings(\"LEET\", \"CODE\") == \"\"\nassert gcdOfStrings(\"ABCDEF\", \"ABC\") == \"\"\nassert gcdOfStrings(\"AA\", \"A\") == \"A\"\nassert gcdOfStrings(\"ABCABCABCABC\", \"ABCABC\") == \"ABCABC\"\nassert gcdOfStrings(\"AAAAAA\", \"AAA\") == \"AAA\"\n\n[/Example 3]", "temperature": 0.79}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 872, "completion_tokens": 248, "completion": "Prime Factorization: Write a function that returns the prime factors of a given number in the form of a list of tuples, where each tuple contains the prime factor and its exponent.\n\n###Code:\n\nfrom collections import Counter\n\ndef prime_factors(n: int) -> list:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n        \n    factor_counts = Counter(factors)\n    return list(factor_counts.items())\n\n###Testcases:\n\nassert prime_factors(18) == [(2, 1), (3, 2)]\nassert prime_factors(100) == [(2, 2), (5, 2)]\nassert prime_factors(35) == [(5, 1), (7, 1)]\nassert prime_factors(89) == [(89, 1)]  # 89 is a prime number\nassert prime_factors(2) == [(2, 1)]    # Prime number\nassert prime_factors(1) == []          # 1 has no prime factors\n\n[/Example 3]", "temperature": 0.762}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 768, "completion_tokens": 144, "completion": "Perfect Square Sequence: Given a positive integer n, find the smallest integer which is a perfect square and is greater than n.\n\n###Code:\n\nimport math\n\ndef nextPerfectSquare(n: int) -> int:\n    root = math.ceil(math.sqrt(n))\n    return root * root\n\n###Testcases:\n\nassert nextPerfectSquare(9) == 16\nassert nextPerfectSquare(15) == 16\nassert nextPerfectSquare(24) == 25\nassert nextPerfectSquare(0) == 1\nassert nextPerfectSquare(1) == 4\nassert nextPerfectSquare(100) == 121\nassert nextPerfectSquare(999) == 1024\n\n[/Example 3]", "temperature": 0.678}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 883, "completion_tokens": 259, "completion": "Prime Factorization: Write a function that takes an integer n and returns a list of tuples where each tuple consists of two integers: a prime number and its power in the prime factorization of n.\n\n###Code:\n\nfrom collections import Counter\nfrom math import sqrt\n\ndef prime_factors(n: int):\n    factors = []\n    count = 2\n    while count * count <= n:\n        if n % count:\n            count += 1\n        else:\n            n //= count\n            factors.append(count)\n    if n > 1:\n        factors.append(n)\n    factor_counts = Counter(factors)\n    return list(factor_counts.items())\n\n###Testcases:\n\nassert prime_factors(12) == [(2, 2), (3, 1)]\nassert prime_factors(315) == [(3, 2), (5, 1), (7, 1)]\nassert prime_factors(110) == [(2, 1), (5, 1), (11, 1)]\nassert prime_factors(29) == [(29, 1)]\nassert prime_factors(60) == [(2, 2), (3, 1), (5, 1)]\nassert prime_factors(17) == [(17, 1)]\n\n[/Example 3]", "temperature": 0.873}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 922, "completion_tokens": 298, "completion": "Prime Number of Set Bits in Binary Representation: Given two integers left and right, return the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation.\n\n(Recall that the number of set bits an integer has is the number of 1s present when written in binary. For example, \"21\" written in binary is \"10101\" which has 3 set bits.)\n\n###Code:\n\ndef countPrimeSetBits(left: int, right: int) -> int:\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for num in range(left, right + 1):\n        if is_prime(bin(num).count('1')):\n            count += 1\n    return count\n\n###Testcases:\n\nassert countPrimeSetBits(6, 10) == 4\nassert countPrimeSetBits(10, 15) == 5\nassert countPrimeSetBits(842, 888) == 23\nassert countPrimeSetBits(1, 1) == 0\nassert countPrimeSetBits(1, 2) == 1\nassert countPrimeSetBits(289, 345) == 21\n\n[/Example 3]", "temperature": 0.687}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 852, "completion_tokens": 228, "completion": "Perfect Number: Write a function to determine if a number is \"perfect\". A perfect number is a positive integer that is equal to the sum of its proper divisors (excluding itself). The smallest perfect number is 6, which is the sum of its divisors 1, 2, and 3.\n\n###Code:\n\ndef isPerfect(num: int) -> bool:\n    if num <= 1:\n        return False\n    divisors_sum = 1\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            divisors_sum += i\n            if i != num // i:\n                divisors_sum += num // i\n    return divisors_sum == num\n\n###Testcases:\n\nassert isPerfect(6) == True\nassert isPerfect(28) == True\nassert isPerfect(496) == True\nassert isPerfect(8128) == True\nassert isPerfect(2) == False\nassert isPerfect(7) == False\nassert isPerfect(14) == False\n\n[/Example 3]", "temperature": 0.753}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 899, "completion_tokens": 275, "completion": "Prime Factorization: Given an integer n, return a list of integers such that they are the prime factors of n. The prime factors should be in ascending order.\n\n###Code:\n\ndef primeFactors(n: int) -> [int]:\n    factors = []\n    # Print the number of 2s that divide n\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n         \n    # n must be odd at this point\n    for i in range(3, int(n**0.5)+1, 2):\n        # while i divides n, append i and divide n\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n             \n    # Condition if n is a prime\n    # number greater than 2\n    if n > 2:\n        factors.append(n)\n        \n    return factors\n\n###Testcases:\n\nassert primeFactors(2) == [2]\nassert primeFactors(3) == [3]\nassert primeFactors(4) == [2, 2]\nassert primeFactors(18) == [2, 3, 3]\nassert primeFactors(100) == [2, 2, 5, 5]\nassert primeFactors(101) == [101]\n\n[/Example 3]", "temperature": 0.857}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 943, "completion_tokens": 311, "completion": "Count Primes: Count the number of prime numbers less than a non-negative number, n.\n\n###Code:\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef countPrimes(n: int) -> int:\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count\n\n###Testcases:\n\nassert countPrimes(10) == 4  # 2, 3, 5, 7\nassert countPrimes(0) == 0\nassert countPrimes(1) == 0\nassert countPrimes(2) == 0\nassert countPrimes(3) == 1  # 2\nassert countPrimes(5) == 2  # 2, 3\nassert countPrimes(100) == 25\nassert countPrimes(1000) == 168\nassert countPrimes(499979) == 41537\nassert countPrimes(999983) == 78497\n\n[/Example 3]", "temperature": 0.652}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 960, "completion_tokens": 328, "completion": "Perfect Squares: Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.\n\n###Code:\n\ndef numSquares(n: int) -> int:\n    dp = [float('inf')] * (n+1)\n    dp[0] = 0\n    \n    for i in range(1, n+1):\n        j = 1\n        while j*j <= i:\n            dp[i] = min(dp[i], dp[i - j*j] + 1)\n            j += 1\n    return dp[n]\n\n###Testcases:\n\nassert numSquares(12)==3  # Explanation: 12 = 4 + 4 + 4.\nassert numSquares(13) == 2  # Explanation: 13 = 4 + 9.\nassert numSquares(1) == 1  # Explanation: 1 = 1.\nassert numSquares(2) == 2  # Explanation: 2 = 1 + 1.\nassert numSquares(3) == 3  # Explanation: 3 = 1 + 1 + 1.\nassert numSquares(18) == 2  # Explanation: 18 = 9 + 9.\nassert numSquares(100) == 1  # Explanation: 100 = 10*10.\nassert numSquares(19) == 3  # Explanation: 19 = 9 + 9 + 1.\n\n[/Example 3]", "temperature": 0.675}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 998, "completion_tokens": 366, "completion": "Prime Numbers Before N: Write a function that returns all the prime numbers less than a given number n.\n\nA prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\n###Code:\n\ndef primesBeforeN(n: int) -> [int]:\n    if n <= 2:\n        return []\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if sieve[i]:\n            for j in range(i*i, n, i):\n                sieve[j] = False\n    return [x for x in range(2, n) if sieve[x]]\n\n###Testcases:\n\nassert primesBeforeN(10) == [2, 3, 5, 7]\nassert primesBeforeN(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert primesBeforeN(2) == []\nassert primesBeforeN(30) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nassert primesBeforeN(1) == []\nassert primesBeforeN(5) == [2, 3]\nassert primesBeforeN(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n[/Example 3]", "temperature": 0.816}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 838, "completion_tokens": 206, "completion": "Sum of Square Numbers: Given a non-negative integer c, your task is to decide whether there're two integers a and b such that a^2 + b^2 = c.\n\n###Code: \n\nimport math\n\ndef judgeSquareSum(c: int) -> bool:\n    for a in range(int(math.sqrt(c)) + 1):\n        b = math.sqrt(c - a**2)\n        if b.is_integer():\n            return True\n    return False\n\n###Testcases: \n\nassert judgeSquareSum(5) == True\nassert judgeSquareSum(3) == False\nassert judgeSquareSum(4) == True\nassert judgeSquareSum(2) == True\nassert judgeSquareSum(1) == True\nassert judgeSquareSum(0) == True\nassert judgeSquareSum(13) == True\nassert judgeSquareSum(27) == False\nassert judgeSquareSum(18) == True\nassert judgeSquareSum(999999999) == False\n\n[/Example 3]", "temperature": 0.713}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 953, "completion_tokens": 321, "completion": "Calculate the Sum of Two Integers: Write a function that adds two integers without using the '+' or '-' operators. You can use bitwise operations or any other mathematical operation that does not involve direct addition or subtraction.\n\n###Code:\n\ndef getSum(a: int, b: int) -> int:\n    # 32-bits integer max\n    MAX = 0x7FFFFFFF\n    # Mask to get 32-bits overflow\n    mask = 0xFFFFFFFF\n    \n    while b != 0:\n        # ^ is the bitwise xor in Python\n        a, b = (a ^ b) & mask, ((a & b) << 1) & mask\n        \n    # if a is negative in 32-bits\n    return a if a <= MAX else ~(a ^ mask)\n\n###Testcases:\n\nassert getSum(1, 2) == 3\nassert getSum(-1, 1) == 0\nassert getSum(20, -14) == 6\nassert getSum(-10, -20) == -30\nassert getSum(0, 0) == 0\nassert getSum(123, 456) == 579\nassert getSum(1111, 2222) == 3333\nassert getSum(-333, 333) == 0\nassert getSum(-500, 500) == 0\nassert getSum(2147483647, -2147483648) == -1  # edge case, max int and min int\n\n[/Example 3]", "temperature": 0.879}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 880, "completion_tokens": 248, "completion": "Valid Perfect Square: Given a positive integer num, write a function which returns True if num is a perfect square else False.\n\nNote: Do not use any built-in library function such as sqrt.\n\n###Code:\n\ndef isPerfectSquare(num: int) -> bool:\n    left, right = 1, num\n    while left <= right:\n        mid = left + (right - left) // 2\n        square = mid * mid\n        if square == num:\n            return True\n        elif square < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\n###Testcases:\n\nassert isPerfectSquare(16) == True\nassert isPerfectSquare(14) == False\nassert isPerfectSquare(1) == True\nassert isPerfectSquare(25) == True\nassert isPerfectSquare(9) == True\nassert isPerfectSquare(24) == False\nassert isPerfectSquare(49) == True\nassert isPerfectSquare(0) == False\nassert isPerfectSquare(2) == False\nassert isPerfectSquare(100) == True\nassert isPerfectSquare(81) == True\n\n[/Example 3]", "temperature": 0.784}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1169, "completion_tokens": 258, "completion": "Calculate the Sum of Two Integers: You are tasked with creating a function that takes two integers and returns their sum. However, you must do this without using the \"+\" or \"-\" operators.\n\n###Code:\n\ndef getSum(a: int, b: int) -> int:\n    MASK = 0xFFFFFFFF\n    INT_MAX = 0x7FFFFFFF\n    \n    while b != 0:\n        a, b = (a ^ b) & MASK, ((a & b) << 1) & MASK\n    \n    return a if a <= INT_MAX else ~(a ^ MASK)\n\n###Testcases:\n\nassert getSum(1, 2) == 3\nassert getSum(2, 3) == 5\nassert getSum(-2, 3) == 1\nassert getSum(-2, -3) == -5\nassert getSum(0, 0) == 0\nassert getSum(-1, 1) == 0\nassert getSum(20, 30) == 50\nassert getSum(-20, -30) == -50\nassert getSum(123, 456) == 579\nassert getSum(-123, -456) == -579\n\n[/Example 3]", "temperature": 0.702}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1288, "completion_tokens": 377, "completion": "Calculate Median from Data Stream: Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values.\n\nDesign a class to find the median from a data stream. The class should have the following methods:\n\n- `addNum(int num)`: Adds a number into the data structure.\n- `findMedian()`: Returns the median of all elements so far.\n\n###Code: \n\nfrom heapq import heappush, heappop\n\nclass MedianFinder:\n\n    def __init__(self):\n        self.small = []  # Max heap for the smaller half\n        self.large = []  # Min heap for the larger half\n\n    def addNum(self, num: int) -> None:\n        heappush(self.large, num)  # Add to large part\n        heappush(self.small, -heappop(self.large))  # Balance min heap property\n        if len(self.small) > len(self.large):  # Maintain size property\n            heappush(self.large, -heappop(self.small))\n\n    def findMedian(self) -> float:\n        if len(self.small) == len(self.large):\n            return (-self.small[0] + self.large[0]) / 2.0\n        else:\n            return self.large[0]\n\n\n###Testcases:\n\nmedianFinder = MedianFinder()\nmedianFinder.addNum(1)\nmedianFinder.addNum(2)\nassert medianFinder.findMedian() == 1.5\n\nmedianFinder.addNum(3)\nassert medianFinder.findMedian() == 2.0\n\nmedianFinder.addNum(4)\nassert medianFinder.findMedian() == 2.5\n\nmedianFinder.addNum(5)\nassert medianFinder.findMedian() == 3.0\n\n[/Example 3]", "temperature": 0.934}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1213, "completion_tokens": 302, "completion": "Pythagorean Triplet: Given an array of integers, write a function that returns true if there is a triplet (a, b, c) that satisfies a^2 + b^2 = c^2.\n\n###Code: \n\nfrom typing import List\n\ndef pythagoreanTriplet(arr: List[int]) -> bool:\n    squares = set([x**2 for x in arr])\n    for a in arr:\n        for b in arr:\n            if a**2 + b**2 in squares:\n                return True\n    return False\n\n###Testcases: \n\nassert pythagoreanTriplet([3, 1, 4, 6, 5]) == True\nassert pythagoreanTriplet([10, 4, 6, 12, 5]) == True\nassert pythagoreanTriplet([8, 16, 18, 20, 15]) == True\nassert pythagoreanTriplet([1, 2, 3]) == False\nassert pythagoreanTriplet([9, 12, 15, 17, 21]) == False\nassert pythagoreanTriplet([5, 12, 13]) == True\nassert pythagoreanTriplet([14, 3, 6, 8, 10]) == True\nassert pythagoreanTriplet([11, 13, 17, 19, 23]) == False\n\n[/Example 3]", "temperature": 0.814}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1103, "completion_tokens": 192, "completion": "Power of Three: Given an integer n, write a function to determine if it is a power of three.\n\n###Code: \n\ndef isPowerOfThree(n: int) -> bool:\n    if n <= 0:\n        return False\n    while n % 3 == 0:\n        n /= 3\n    return n == 1\n\n###Testcases: \n\nassert isPowerOfThree(27) == True\nassert isPowerOfThree(0) == False\nassert isPowerOfThree(9) == True\nassert isPowerOfThree(45) == False\nassert isPowerOfThree(1) == True\nassert isPowerOfThree(3) == True\nassert isPowerOfThree(81) == True\nassert isPowerOfThree(82) == False\nassert isPowerOfThree(-3) == False\nassert isPowerOfThree(243) == True\n\n[/Example 3]", "temperature": 0.914}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1260, "completion_tokens": 349, "completion": "Prime Number of Set Bits in Binary Representation: Given two integers left and right, return the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation.\n\n(Recall that the number of set bits an integer has is the number of 1s present when written in binary. For example, 21 written in binary is 10101, which has 3 set bits.)\n\n###Code: \n\ndef countPrimeSetBits(left: int, right: int) -> int:\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return sum(is_prime(bin(x).count('1')) for x in range(left, right+1))\n\n###Testcases: \n\nassert countPrimeSetBits(6, 10) == 4\nassert countPrimeSetBits(10, 15) == 5\nassert countPrimeSetBits(842, 888) == 23\nassert countPrimeSetBits(1, 1) == 0\nassert countPrimeSetBits(5, 10) == 5\nassert countPrimeSetBits(2890, 2930) == 15\nassert countPrimeSetBits(100, 200) == 21\nassert countPrimeSetBits(250, 269) == 10\nassert countPrimeSetBits(21, 29) == 3\nassert countPrimeSetBits(11, 19) == 5\n\n[/Example 3]", "temperature": 0.864}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1326, "completion_tokens": 415, "completion": "Perfect Squares: Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.\n\n###Code: \n\nimport math\n\ndef numSquares(n: int) -> int:\n    # list of square numbers less than 'n'\n    square_nums = [i**2 for i in range(1, int(math.sqrt(n))+1)]\n    \n    dp = [float('inf')] * (n+1)\n    # bottom case: 0 is the sum of the square of 0\n    dp[0] = 0\n    \n    for i in range(1, n+1):\n        for square in square_nums:\n            if i < square:\n                break\n            dp[i] = min(dp[i], dp[i-square] + 1)\n    return dp[n]\n\n###Testcases: \n\nassert numSquares(12) == 3 # Explanation: 12 = 4 + 4 + 4\nassert numSquares(13) == 2 # Explanation: 13 = 4 + 9\nassert numSquares(1) == 1  # Explanation: 1 = 1\nassert numSquares(2) == 2  # Explanation: 2 = 1 + 1\nassert numSquares(3) == 3  # Explanation: 3 = 1 + 1 + 1\nassert numSquares(25) == 1 # Explanation: 25 = 25\nassert numSquares(26) == 2 # Explanation: 26 = 25 + 1\nassert numSquares(43) == 3 # Explanation: 43 = 36 + 4 + 3\nassert numSquares(85) == 2 # Explanation: 85 = 64 + 21\nassert numSquares(100) == 1 # Explanation: 100 = 100\n\n[/Example 3]", "temperature": 0.82}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 889, "completion_tokens": 298, "completion": "Find the Duplicate Number: Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive. There is only one repeated number in nums, return this repeated number. You must solve the problem without modifying the array nums and use only constant extra space.\n\n###Code: \n\ndef findDuplicate(nums: [int]) -> int:\n    # Find the intersection point of the two runners.\n    tortoise = hare = nums[0]\n    while True:\n        tortoise = nums[tortoise]\n        hare = nums[nums[hare]]\n        if tortoise == hare:\n            break\n    \n    # Find the \"entrance\" to the cycle.\n    tortoise = nums[0]\n    while tortoise != hare:\n        tortoise = nums[tortoise]\n        hare = nums[hare]\n    \n    return hare\n\n###Testcases: \n\nassert findDuplicate([1,3,4,2,2]) == 2\nassert findDuplicate([3,1,3,4,2]) == 3\nassert findDuplicate([1,1]) == 1\nassert findDuplicate([1,1,2]) == 1\nassert findDuplicate([2,2,2,2,2]) == 2\nassert findDuplicate([9,6,4,2,3,5,7,0,1,8,6]) == 6\n\n[/Example 3]", "temperature": 0.741}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 863, "completion_tokens": 272, "completion": "Perfect Squares: Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.\n\n###Code: \n\nimport math\ndef numSquares(n: int) -> int:\n    square_nums = [i**2 for i in range(1, int(math.sqrt(n)) + 1)]\n    \n    dp = [float('inf')] * (n+1)\n    dp[0] = 0\n    \n    for i in range(1, n+1):\n        for square in square_nums:\n            if i >= square:\n                dp[i] = min(dp[i], dp[i-square] + 1)\n    \n    return dp[n]\n\n###Testcases: \n\nassert numSquares(12)==3\nassert numSquares(13) == 2\nassert numSquares(1) == 1\nassert numSquares(26) == 2\nassert numSquares(100) == 1\nassert numSquares(99) == 3\nassert numSquares(153) == 3\nassert numSquares(43) == 3\nassert numSquares(2) == 2\nassert numSquares(17) == 2\n\n[/Example 3]", "temperature": 0.741}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 855, "completion_tokens": 264, "completion": "Find All Duplicates in an Array: Given an integer array nums of size n where all the integers of nums are in the range [1, n] inclusive, and each integer appears once or twice, return an array of all the integers that appears twice.\n\nYou must write an algorithm that runs in O(n) time and uses only constant extra space.\n\n###Code: \n\ndef findDuplicates(nums: list[int]) -> list[int]:\n    duplicates = []\n    for num in nums:\n        if nums[abs(num) - 1] < 0:\n            duplicates.append(abs(num))\n        else:\n            nums[abs(num) - 1] *= -1\n    return duplicates\n\n###Testcases: \n\nassert findDuplicates([4,3,2,7,8,2,3,1])==[2,3]\nassert findDuplicates([1,1,2])==[1]\nassert findDuplicates([1])==[]\nassert findDuplicates([1,1,2,2])==[1,2]\nassert findDuplicates([10,2,5,10,9,1,1,4,3,7])==[10,1]\nassert findDuplicates([2,2])==[2]\nassert findDuplicates([3,3,3])==[3]\n\n[/Example 3]", "temperature": 0.864}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 817, "completion_tokens": 226, "completion": "Square Root of Integer: Implement an efficient algorithm to calculate the integer part of the square root of a given number n.\n\n###Code: \n\ndef sqrt(n: int) -> int:\n    if n < 2:\n        return n\n    \n    low, high = 2, n // 2\n    while low <= high:\n        mid = (low + high) // 2\n        squared = mid * mid\n        if squared == n:\n            return mid\n        elif squared < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return high\n\n###Testcases: \n\nassert sqrt(4) == 2\nassert sqrt(8) == 2\nassert sqrt(1) == 1\nassert sqrt(0) == 0\nassert sqrt(16) == 4\nassert sqrt(27) == 5\nassert sqrt(81) == 9\nassert sqrt(99) == 9\nassert sqrt(100) == 10\nassert sqrt(1024) == 32\n\n[/Example 3]", "temperature": 0.856}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 866, "completion_tokens": 275, "completion": "Perfect Number: A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding itself. For example, 6 is a perfect number because its divisors are 1, 2, and 3, and 1 + 2 + 3 = 6.\n\nGiven an integer n, write a function that returns True if n is a perfect number, else return False.\n\n###Code: \n\ndef checkPerfectNumber(num: int) -> bool:\n    if num <= 1:\n        return False\n    \n    sum_of_divisors = 1\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            sum_of_divisors += i\n            if i != num // i:\n                sum_of_divisors += num // i\n                \n    return sum_of_divisors == num\n\n###Testcases: \n\nassert checkPerfectNumber(6)==True\nassert checkPerfectNumber(28)==True\nassert checkPerfectNumber(496)==True\nassert checkPerfectNumber(8128)==True\nassert checkPerfectNumber(2)==False\nassert checkPerfectNumber(12)==False\nassert checkPerfectNumber(97)==False\nassert checkPerfectNumber(100)==False\nassert checkPerfectNumber(10234)==False\n\n[/Example 3]", "temperature": 0.761}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 814, "completion_tokens": 223, "completion": "Prime Counting Function: Given an integer n, return the number of prime numbers that are strictly less than n.\n\n###Code:\n\ndef countPrimes(n: int) -> int:\n    if n <= 2:\n        return 0\n\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n\n    for i in range(2, int(n**0.5) + 1):\n        if sieve[i]:\n            for j in range(i*i, n, i):\n                sieve[j] = False\n                \n    return sum(sieve)\n\n###Testcases:\n\nassert countPrimes(10) == 4\nassert countPrimes(0) == 0\nassert countPrimes(1) == 0\nassert countPrimes(2) == 0\nassert countPrimes(100) == 25\nassert countPrimes(1000) == 168\nassert countPrimes(499979) == 41537\nassert countPrimes(5000000) == 348513\n\n[/Example 3]", "temperature": 0.846}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1362, "completion_tokens": 418, "completion": "Calculate Pi using Monte Carlo Method: Monte Carlo methods are a broad class of computational algorithms that rely on repeated random sampling to obtain numerical results. The basic concept is to use randomness to solve problems that might be deterministic in principle. In this task, use the Monte Carlo method to estimate the value of Pi (\u03c0).\n\nImplement a function that simulates random points being thrown in the unit square ([0,1] x [0,1]) and determines how many fall inside the unit circle (the circle with radius 1 centered at the origin). The ratio of the points inside the circle to the total points thrown will approximate \u03c0/4, thus by multiplying this ratio by 4, we can get an approximation of \u03c0.\n\n###Code: \n\nimport random\n\ndef calculate_pi(num_samples: int) -> float:\n    inside_circle = 0\n    for _ in range(num_samples):\n        x, y = random.random(), random.random()\n        if x**2 + y**2 <= 1:\n            inside_circle += 1\n    return 4 * inside_circle / num_samples\n\n###Testcases: \n\nNote: Since the output is an approximation and will have some variance, we should not use assert statements for exact matches. Instead, we can check if the result is within an acceptable error margin.\n\n# Defining a function to test the approximation against an error margin\ndef test_within_margin(approx_val, actual_val, margin):\n    return abs(approx_val - actual_val) <= margin\n\nactual_pi = 3.141592653589793\nmargin = 0.01\n\n# Testing with different number of samples and error margins\nnum_samples_1 = 10000\nassert test_within_margin(calculate_pi(num_samples_1), actual_pi, margin)\n\nnum_samples_2 = 100000\nassert test_within_margin(calculate_pi(num_samples_2), actual_pi, margin)\n\nnum_samples_3 = 1000000\nassert test_within_margin(calculate_pi(num_samples_3), actual_pi, margin)\n\n[/Example 3]", "temperature": 0.944}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1365, "completion_tokens": 421, "completion": "Closest Dessert Cost: You are given three inputs: an array of base costs, an array of topping costs, and a target cost. You must pick exactly one base and can optionally add any number of toppings (including none). Each topping can be used at most twice. Find the closest possible cost of a dessert to the target. If there are two possible costs that are equally close to the target, return the lower one.\n\n###Code:\n\nfrom typing import List\n\ndef closestCost(baseCosts: List[int], toppingCosts: List[int], target: int) -> int:\n    def dfs(index, current_cost):\n        nonlocal closest\n        if abs(target - current_cost) < abs(target - closest) or (abs(target - current_cost) == abs(target - closest) and current_cost < closest):\n            closest = current_cost\n        \n        if index == len(toppingCosts) or current_cost >= target:\n            return\n        \n        # Option 1: Skip the current topping\n        dfs(index + 1, current_cost)\n        \n        # Option 2: Use the current topping once\n        dfs(index + 1, current_cost + toppingCosts[index])\n        \n        # Option 3: Use the current topping twice\n        dfs(index + 1, current_cost + 2 * toppingCosts[index])\n    \n    closest = float('inf')\n    for base in baseCosts:\n        dfs(0, base)\n    return closest\n\n###Testcases:\n\nassert closestCost([1,7], [3,4], 10) == 10\nassert closestCost([2,3], [4,5,100], 18) == 17\nassert closestCost([3,10], [2,5], 9) == 8\nassert closestCost([10], [1], 1) == 10\nassert closestCost([5], [1,2], 11) == 10\nassert closestCost([4,9], [9], 9) == 9\n\n[/Example 3]", "temperature": 0.759}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1146, "completion_tokens": 202, "completion": "Count Primes: Count the number of prime numbers less than a non-negative number, n.\n\n###Code:\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef countPrimes(n: int) -> int:\n    return sum(is_prime(x) for x in range(2, n))\n\n###Testcases:\n\nassert countPrimes(10) == 4\nassert countPrimes(0) == 0\nassert countPrimes(1) == 0\nassert countPrimes(100) == 25\nassert countPrimes(5000) == 669\nassert countPrimes(10000) == 1229\nassert countPrimes(2) == 0\nassert countPrimes(3) == 1\n\n[/Example 3]", "temperature": 0.906}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1087, "completion_tokens": 143, "completion": "Power of Two: Given an integer n, write a function to determine if it is a power of two.\n\n###Code:\n\ndef isPowerOfTwo(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0\n\n###Testcases:\n\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(4) == True\nassert isPowerOfTwo(5) == False\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(-16) == False\n\n[/Example 3]", "temperature": 0.868}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1189, "completion_tokens": 245, "completion": "Count Primes: Write a function that counts the number of prime numbers less than a non-negative number, n.\n\n###Code: \n\ndef countPrimes(n: int) -> int:\n    if n <= 2:\n        return 0\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if sieve[i]:\n            for j in range(i*i, n, i):\n                sieve[j] = False\n    return sum(sieve)\n\n###Testcases: \n\nassert countPrimes(10) == 4  # 2, 3, 5, 7\nassert countPrimes(0) == 0\nassert countPrimes(1) == 0\nassert countPrimes(2) == 0\nassert countPrimes(3) == 1  # 2\nassert countPrimes(5) == 2  # 2, 3\nassert countPrimes(100) == 25\nassert countPrimes(1000) == 168\n  \n[/Example 3]", "temperature": 0.79}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1293, "completion_tokens": 349, "completion": "Primes Less Than N: Write a function that returns an array of all prime numbers less than a non-negative number, n.\n\n###Code: \n\nfrom typing import List\n\ndef countPrimes(n: int) -> List[int]:\n    if n <= 2:\n        return []\n    \n    primes = [True] * n\n    primes[0] = primes[1] = False\n    p = 2\n    while p * p < n:\n        if primes[p]:\n            for i in range(p * p, n, p):\n                primes[i] = False\n        p += 1\n    \n    return [i for i in range(n) if primes[i]]\n\n###Testcases: \n\nassert countPrimes(10) == [2, 3, 5, 7]\nassert countPrimes(0) == []\nassert countPrimes(2) == []\nassert countPrimes(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert countPrimes(30) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nassert countPrimes(1) == []\nassert countPrimes(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n[/Example 3]", "temperature": 0.903}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1239, "completion_tokens": 328, "completion": "Generate a Unique ID: Given a list of integers representing IDs that are already taken, write a function to generate a unique ID. Assume the ID is an integer starting from 1, and the function should return the smallest positive integer that is not yet taken.\n\n###Code: \n\nfrom typing import List\n\ndef generateUniqueID(takenIDs: List[int]) -> int:\n    takenIDs = set(takenIDs)\n    uniqueID = 1\n    while uniqueID in takenIDs:\n        uniqueID += 1\n    return uniqueID\n\n###Testcases: \n\nassert generateUniqueID([1, 2, 3, 4]) == 5\nassert generateUniqueID([1, 3, 4, 5]) == 2\nassert generateUniqueID([]) == 1\nassert generateUniqueID([2, 3, 7]) == 1\nassert generateUniqueID([1, 1, 1, 1]) == 2\nassert generateUniqueID([3, 5, 6, 1, 2]) == 4\nassert generateUniqueID([10, 9, 8, 1, 2, 3, 4, 5, 6, 7]) == 11\nassert generateUniqueID([1, 3, 2, 5, 4, 7, 6, 8, 10, 9, 12, 11, 14, 13, 16, 15, 17]) == 18\n\n[/Example 3]", "temperature": 0.682}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1194, "completion_tokens": 283, "completion": "Perfect Number: A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding itself. For example, 6 is a perfect number because its divisors are 1, 2, and 3, and 1 + 2 + 3 = 6.\n\nWrite a function that determines if a number is perfect. The function should return true if the number is perfect, otherwise return false.\n\n###Code:\n\ndef isPerfect(num: int) -> bool:\n    if num <= 1:\n        return False\n    \n    sum_divisors = 1\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            sum_divisors += i\n            if i != num // i:\n                sum_divisors += num // i\n    \n    return sum_divisors == num\n\n###Testcases:\n\nassert isPerfect(6) == True\nassert isPerfect(28) == True\nassert isPerfect(496) == True\nassert isPerfect(8128) == True\nassert isPerfect(2) == False\nassert isPerfect(10) == False\nassert isPerfect(97) == False\nassert isPerfect(12) == False\nassert isPerfect(100) == False\nassert isPerfect(33550336) == True\n\n[/Example 3]", "temperature": 0.813}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1206, "completion_tokens": 295, "completion": "Lucky Numbers: A lucky number is a number which has exactly 2 distinct prime divisors. You are given a number A and you need to determine the count of lucky numbers between the range 1 to A (inclusive).\n\n### Code:\n\ndef isLuckyNumber(num):\n    distinct_prime_factors = 0\n    div = 2\n    while div * div <= num:\n        if num % div == 0:\n            distinct_prime_factors += 1\n            while num % div == 0:\n                num //= div\n        div += 1\n    if num > 1:\n        distinct_prime_factors += 1\n    return distinct_prime_factors == 2\n\ndef luckyNumbers(A: int) -> int:\n    count = 0\n    for i in range(1, A + 1):\n        if isLuckyNumber(i):\n            count += 1\n    return count\n\n### Testcases:\n\nassert luckyNumbers(1) == 0\nassert luckyNumbers(8) == 1\nassert luckyNumbers(12) == 2\nassert luckyNumbers(30) == 6\nassert luckyNumbers(50) == 10\nassert luckyNumbers(0) == 0\nassert luckyNumbers(100) == 22\nassert luckyNumbers(22) == 5\nassert luckyNumbers(14) == 3\nassert luckyNumbers(44) == 9\n\n[/Example 3]", "temperature": 0.939}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1462, "completion_tokens": 551, "completion": "Circular Array Loop: You are given a circular array nums of positive and negative integers. If you move forward on the array, you end at the next index. Similarly, if you move backward, you end at the previous index. Always moving forward or backward you may loop around the array.\n\nA single cycle in the array consists of a sequence of indices seq of length k where:\n\nFollowing the movement rules above and starting with index i, after exactly k moves, you return back to index i.\nFor all elements seq[j], where 0 <= j < k, nums[seq[j]] is either all positive or all negative.\nk > 1\nReturn true if there is a single cycle in nums, otherwise return false.\n\n###Code:\n\nfrom typing import List\n\ndef circularArrayLoop(nums: List[int]) -> bool:\n    def next_index(direction, current):\n        move = nums[current]\n        if (move > 0) != direction:\n            return -1  # Different directions\n        next_index = (current + move) % len(nums)\n        if next_index == current:\n            return -1  # Single element cycle\n        return next_index\n\n    for i in range(len(nums)):\n        direction = nums[i] > 0  # Direction of movement: True if forward\n        slow = i\n        fast = i\n        \n        while True:\n            slow = next_index(direction, slow)\n            fast = next_index(direction, fast)\n            if fast != -1:\n                fast = next_index(direction, fast)\n            if slow == -1 or fast == -1 or slow == fast:\n                break\n        \n        if slow != -1 and slow == fast:\n            return True\n            \n    return False\n\n###Testcases: \n\nassert circularArrayLoop([2, -1, 1, 2, 2]) == True\nassert circularArrayLoop([-1, 2]) == False\nassert circularArrayLoop([-2, 1, -1, -2, -2]) == False\nassert circularArrayLoop([1, 2, 3, 4, 5]) == False\nassert circularArrayLoop([1, 1, 2]) == True\nassert circularArrayLoop([1, -1]) == False\nassert circularArrayLoop([3, 1, 2]) == True\nassert circularArrayLoop([1]) == False\nassert circularArrayLoop([1, 1, 1, 1, 1, 1, 1, 1, 1, -5]) == True\nassert circularArrayLoop([-1, -2, -3, -4, -5]) == False\n\n[/Example 3]", "temperature": 0.787}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1258, "completion_tokens": 347, "completion": "Prime Number of Set Bits in Binary Representation: Given two integers left and right, find the count of numbers in the range [left, right] (inclusive) having a prime number of set bits in their binary representation.\n\n(Recall that the number of set bits an integer has is the number of 1s present when written in binary. For example, 21 written in binary is 10101 which has 3 set bits.)\n\n###Code:\n\ndef countPrimeSetBits(left: int, right: int) -> int:\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return sum(is_prime(bin(x).count('1')) for x in range(left, right + 1))\n\n###Testcases:\n\nassert countPrimeSetBits(6, 10) == 4\nassert countPrimeSetBits(10, 15) == 5\nassert countPrimeSetBits(842, 888) == 23\nassert countPrimeSetBits(1, 1) == 0\nassert countPrimeSetBits(2, 2) == 1\nassert countPrimeSetBits(5, 10) == 5\nassert countPrimeSetBits(10, 20) == 6\nassert countPrimeSetBits(15, 30) == 9\nassert countPrimeSetBits(45, 50) == 3\nassert countPrimeSetBits(99, 100) == 0\n\n[/Example 3]", "temperature": 0.708}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1218, "completion_tokens": 307, "completion": "Find All Duplicates in an Array: Given an integer array nums of length n where all the integers of nums are in the range [1, n] inclusive with every element appearing once or twice, return an array of all the integers that appears twice.\n\nYou must write an algorithm that runs in O(n) time and uses only constant extra space.\n\n###Code: \n\nfrom typing import List\ndef findDuplicates(nums: List[int]) -> List[int]:\n    duplicates = []\n    for num in nums:\n        if nums[abs(num) - 1] < 0:\n            duplicates.append(abs(num))\n        else:\n            nums[abs(num) - 1] *= -1\n    return duplicates\n\n###Testcases: \n\nassert findDuplicates([4, 3, 2, 7, 8, 2, 3, 1]) == [2, 3]\nassert findDuplicates([1, 1, 2]) == [1]\nassert findDuplicates([1]) == []\nassert findDuplicates([2, 2]) == [2]\nassert findDuplicates([10, 2, 5, 10, 9, 1, 1, 4, 3, 7]) == [10, 1]\nassert findDuplicates([5, 4, 6, 7, 9, 3, 10, 9, 5, 6]) == [5, 6, 9]\n\n[/Example 3]", "temperature": 0.905}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1112, "completion_tokens": 209, "completion": "Unique Paths: A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below). How many possible unique paths are there?\n\n###Code: \n\nfrom math import factorial\ndef uniquePaths(m: int, n: int) -> int:\n    return factorial(m+n-2) // (factorial(m-1) * factorial(n-1))\n\n###Testcases: \n\nassert uniquePaths(3, 7) == 28\nassert uniquePaths(3, 2) == 3\nassert uniquePaths(7, 3) == 28\nassert uniquePaths(3, 3) == 6\nassert uniquePaths(1, 1) == 1\nassert uniquePaths(23, 12) == 193536720\n\n[/Example 3]", "temperature": 0.837}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1209, "completion_tokens": 306, "completion": "Calculate the Unique Paths: A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below). How many possible unique paths are there?\n\n###Code: \n\nfrom math import factorial\ndef uniquePaths(m: int, n: int) -> int:\n    # The number of paths to the bottom-right corner is the number of permutations\n    # of moves where we have to move right m-1 times and down n-1 times.\n    # So, the total number of unique paths will be the number of combinations\n    # of (m-1) rights and (n-1) downs, which is the binomial coefficient (m+n-2) choose (n-1).\n    return factorial(m + n - 2) // (factorial(n - 1) * factorial(m - 1))\n\n###Testcases: \n\nassert uniquePaths(3, 7) == 28\nassert uniquePaths(3, 2) == 3\nassert uniquePaths(7, 3) == 28\nassert uniquePaths(3, 3) == 6\nassert uniquePaths(10, 10) == 48620\nassert uniquePaths(23, 12) == 193536720\n\n[/Example 3]", "temperature": 0.705}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1135, "completion_tokens": 232, "completion": "Calculate Pi using Monte Carlo Method: Write a function that estimates the value of Pi by simulating the throwing of darts at a square dartboard with a circle inscribed within it. The function should take an integer number_of_darts as an argument and return an estimate of Pi based on the Monte Carlo method.\n\n###Code: \n\nimport random\n\ndef estimate_pi(number_of_darts: int) -> float:\n    inside_circle = 0\n    for _ in range(number_of_darts):\n        x, y = random.random(), random.random()\n        if x*x + y*y <= 1.0:\n            inside_circle += 1\n    return (inside_circle / number_of_darts) * 4\n\n###Testcases: \n\n# Since the function is based on random simulation, exact values cannot be asserted.\n# However, we can check if the values are reasonably close to PI for a large number of darts.\n\nestimated_pi = estimate_pi(1000000)\nassert abs(estimated_pi - 3.14159) < 0.01  # Check if the estimate is within reasonable bounds\n\n[/Example 3]", "temperature": 0.84}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1138, "completion_tokens": 235, "completion": "Right Triangle With Integer Coordinates: A right triangle is formed in the coordinate plane with one vertex at the origin (0, 0), one vertex on the positive x-axis (x, 0), and one vertex on the positive y-axis (0, y). Given an integer n, return the number of right triangles whose vertices on the x and y axes have integer coordinates such that 0 < x, y \u2264 n.\n\n###Code:\n\ndef rightTriangle(n: int) -> int:\n    result = 0\n    for x in range(1, n + 1):\n        for y in range(1, n + 1):\n            if math.gcd(x, y) == 1:\n                result += min(x * (n // y), y * (n // x))\n    return result\n\n###Testcases:\n\nassert rightTriangle(1) == 0\nassert rightTriangle(2) == 2\nassert rightTriangle(3) == 6\nassert rightTriangle(4) == 12\nassert rightTriangle(5) == 20\nassert rightTriangle(10) == 76\n\n[/Example 3]", "temperature": 0.748}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1112, "completion_tokens": 209, "completion": "Perfect Number Checker: Given an integer n, write a function to determine if it is a perfect number. A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding itself.\n\n###Code: \n\ndef checkPerfectNumber(num: int) -> bool:\n    if num <= 1:\n        return False\n    \n    divisors_sum = 1\n    divisor = 2\n    \n    while divisor * divisor <= num:\n        if num % divisor == 0:\n            divisors_sum += divisor\n            if divisor * divisor != num:\n                divisors_sum += num // divisor\n        divisor += 1\n    \n    return divisors_sum == num\n\n###Testcases: \n\nassert checkPerfectNumber(28) == True\nassert checkPerfectNumber(6) == True\nassert checkPerfectNumber(496) == True\nassert checkPerfectNumber(8128) == True\nassert checkPerfectNumber(2) == False\nassert checkPerfectNumber(97) == False\n\n[/Example 3]", "temperature": 0.672}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1202, "completion_tokens": 299, "completion": "Pythagorean Triples Checker: Create a function that takes three integers - a, b, and c. This function should return `True` if the three numbers form a Pythagorean triple, such that \\(a^2 + b^2 = c^2\\), and `False` otherwise. The integers a, b, and c must be strictly positive, and it's assumed they represent the lengths of the sides of a right-angled triangle.\n\n###Code:\n\n```python\ndef is_pythagorean_triple(a: int, b: int, c: int) -> bool:\n    return a > 0 and b > 0 and c > 0 and a**2 + b**2 == c**2\n\n```\n\n###Testcases:\n\n```python\nassert is_pythagorean_triple(3, 4, 5) == True\nassert is_pythagorean_triple(5, 12, 13) == True\nassert is_pythagorean_triple(8, 15, 17) == True\nassert is_pythagorean_triple(7, 24, 25) == True\nassert is_pythagorean_triple(1, 2, 3) == False\nassert is_pythagorean_triple(6, 8, 10) == True\nassert is_pythagorean_triple(9, 12, 15) == False\n```\n\n[/Example 3]", "temperature": 0.802}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 899, "completion_tokens": 275, "completion": "Prime Factors of a Number: Write a function that takes an integer n and returns a sorted list of all its distinct prime factors. A prime factor is a factor that is a prime number.\n\n###Code: \n\ndef primeFactors(n: int) -> list:\n    factors = []\n    # Handle 2 separately\n    while n % 2 == 0:\n        n //= 2\n        factors.append(2)\n    # Check for odd factor\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    if n > 2:\n        factors.append(n)\n    return sorted(list(set(factors)))\n\n###Testcases: \n\nassert primeFactors(2) == [2]\nassert primeFactors(3) == [3]\nassert primeFactors(4) == [2]\nassert primeFactors(6) == [2, 3]\nassert primeFactors(8) == [2]\nassert primeFactors(10) == [2, 5]\nassert primeFactors(28) == [2, 7]\nassert primeFactors(100) == [2, 5]\nassert primeFactors(13195) == [5, 7, 13, 29]\n\n[/Example 3]", "temperature": 0.949}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 918, "completion_tokens": 294, "completion": "Prime Factorization: Given a positive integer n, return a list of prime factors of n.\n\n###Code:\n\nfrom typing import List\n\ndef prime_factors(n: int) -> List[int]:\n    factors = []\n    # Divide by 2 to eliminate all even factors\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # Check for odd factors from 3 to sqrt(n)\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    # If n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return factors\n\n###Testcases:\n\nassert prime_factors(2) == [2]\nassert prime_factors(3) == [3]\nassert prime_factors(4) == [2, 2]\nassert prime_factors(56) == [2, 2, 2, 7]\nassert prime_factors(100) == [2, 2, 5, 5]\nassert prime_factors(101) == [101]\nassert prime_factors(360) == [2, 2, 2, 3, 3, 5]\nassert prime_factors(1269) == [3, 3, 3, 47]\n\n[/Example 3]", "temperature": 0.673}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 1050, "completion_tokens": 426, "completion": "Prime Factorization: Given a positive integer n greater than 1, return a list of tuples where each tuple contains two integers: the prime factor and its exponent in the prime factorization of n.\n\nFor example, the prime factorization of 18 is 2^1 * 3^2, so the function should return [(2, 1), (3, 2)].\n\n###Code: \n\nfrom collections import Counter\n\ndef primeFactors(n):\n    factors = []\n    # Count the number of 2s that divide n\n    count = 0\n    while n % 2 == 0:\n        count += 1\n        n //= 2\n    if count > 0:\n        factors.append((2, count))\n    \n    # n must be odd at this point, so a skip of 2 ( i = i + 2) can be used\n    for i in range(3, int(n**0.5)+1, 2):\n        # While i divides n, count i and divide n\n        count = 0\n        while n % i == 0:\n            count += 1\n            n //= i\n        if count > 0:\n            factors.append((i, count))\n    \n    # If n is a prime number greater than 2\n    if n > 2:\n        factors.append((n, 1))\n    \n    return factors\n\n###Testcases: \n\nassert primeFactors(18) == [(2, 1), (3, 2)]\nassert primeFactors(84) == [(2, 2), (3, 1), (7, 1)]\nassert primeFactors(360) == [(2, 3), (3, 2), (5, 1)]\nassert primeFactors(19) == [(19, 1)]\nassert primeFactors(100) == [(2, 2), (5, 2)]\nassert primeFactors(9973) == [(9973, 1)] # 9973 is a prime number\n\n[/Example 3]", "temperature": 0.735}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 871, "completion_tokens": 247, "completion": "Fibonacci Number: Given a number n, write a function to compute the nth Fibonacci number.\n\nThe Fibonacci sequence is a series of numbers where a number is the addition of the last two numbers, starting with 0, and 1. That is,\n\nF(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n > 1.\n\n###Code:\n\ndef fibonacci(n: int) -> int:\n    if n == 0: return 0\n    elif n == 1: return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b\n\n###Testcases:\n\nassert fibonacci(0) == 0\nassert fibonacci(1) == 1\nassert fibonacci(2) == 1\nassert fibonacci(3) == 2\nassert fibonacci(4) == 3\nassert fibonacci(5) == 5\nassert fibonacci(10) == 55\nassert fibonacci(15) == 610\n\n[/Example 3]", "temperature": 0.858}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 900, "completion_tokens": 276, "completion": "Prime Factors: Write a function that takes an integer n and returns a list of its prime factors.\n\n###Code:\n\ndef primeFactors(n: int) -> list:\n    factors = []\n    # Count the number of 2s that divide n\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    # n must be odd at this point, so a skip of 2 is used\n    for i in range(3, int(n**0.5)+1, 2):\n        # While i divides n, append i and divide n\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    # If n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return factors\n\n###Testcases:\n\nassert primeFactors(2) == [2]\nassert primeFactors(3) == [3]\nassert primeFactors(4) == [2, 2]\nassert primeFactors(18) == [2, 3, 3]\nassert primeFactors(35) == [5, 7]\nassert primeFactors(84) == [2, 2, 3, 7]\nassert primeFactors(101) == [101]\n\n[/Example 3]", "temperature": 0.738}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 858, "completion_tokens": 234, "completion": "Prime Factorization: Write a function that takes an integer n and returns its prime factors in ascending order as a list. The function should handle cases where n is a prime number, a product of primes, or any other integer greater than 1.\n\n###Code:\n\ndef prime_factors(n: int) -> list:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n###Testcases:\n\nassert prime_factors(2) == [2]\nassert prime_factors(3) == [3]\nassert prime_factors(4) == [2, 2]\nassert prime_factors(18) == [2, 3, 3]\nassert prime_factors(100) == [2, 2, 5, 5]\nassert prime_factors(101) == [101]\nassert prime_factors(360) == [2, 2, 2, 3, 3, 5]\n\n[/Example 3]", "temperature": 0.789}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 984, "completion_tokens": 393, "completion": "Generate Prime Numbers: Write a function that generates all prime numbers less than or equal to a given number n.\n\n###Code:\n\ndef generatePrimes(n: int) -> list:\n    if n < 2: return []\n    primes = [2]\n    for num in range(3, n+1, 2):  # Check only odd numbers\n        is_prime = True\n        for prime in primes:\n            if prime * prime > num: break  # No need to check beyond the square root of the num\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes\n\n###Testcases:\n\n# Prime numbers up to 10 are 2, 3, 5, and 7\nassert generatePrimes(10) == [2, 3, 5, 7]\n\n# Prime numbers up to 0 is an empty list\nassert generatePrimes(0) == []\n\n# Prime numbers up to 1 is also an empty list\nassert generatePrimes(1) == []\n\n# Prime numbers up to 30 are 2, 3, 5, 7, 11, 13, 17, 19, 23, and 29\nassert generatePrimes(30) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\n# Prime numbers up to 50\nassert generatePrimes(50) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n\n# Prime numbers up to 2 is 2\nassert generatePrimes(2) == [2]\n\n[/Example 3]", "temperature": 0.908}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 982, "completion_tokens": 391, "completion": "Prime Number of Set Bits in Binary Representation: Given two integers left and right, find the count of numbers in the range [left, right] (inclusive) having a prime number of set bits in their binary representation.\n\n(Recall that the number of set bits an integer has is the number of 1s present when written in binary. For example, 21 written in binary is 10101 which has 3 set bits.)\n\n###Code: \n\ndef countPrimeSetBits(left: int, right: int) -> int:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def bit_count(n):\n        count = 0\n        while n:\n            n &= n - 1\n            count += 1\n        return count\n\n    count = 0\n    for n in range(left, right + 1):\n        if is_prime(bit_count(n)):\n            count += 1\n    return count\n\n###Testcases: \n\nassert countPrimeSetBits(6, 10) == 4\nassert countPrimeSetBits(10, 15) == 5\nassert countPrimeSetBits(20, 22) == 0\nassert countPrimeSetBits(5, 10) == 5\nassert countPrimeSetBits(842, 888) == 23\nassert countPrimeSetBits(1, 2) == 1\nassert countPrimeSetBits(10, 14) == 4\nassert countPrimeSetBits(6, 6) == 1\nassert countPrimeSetBits(10, 10) == 1\nassert countPrimeSetBits(11, 19) == 4\n\n[/Example 3]", "temperature": 0.717}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 754, "completion_tokens": 163, "completion": "Power of Two: Given an integer (n), write a function to determine if it is a power of two.\n\n###Code:\n\ndef isPowerOfTwo(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n\n###Testcases:\n\nassert isPowerOfTwo(16) == True\nassert isPowerOfTwo(1) == True\nassert isPowerOfTwo(0) == False\nassert isPowerOfTwo(3) == False\nassert isPowerOfTwo(4) == True\nassert isPowerOfTwo(-16) == False\nassert isPowerOfTwo(1024) == True\nassert isPowerOfTwo(1023) == False\n\n[/Example 3]", "temperature": 0.946}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 851, "completion_tokens": 260, "completion": "Prime Check: Write a function that takes an integer n and returns True if n is a prime number, otherwise returns False.\n\n###Code: \n\ndef isPrime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n###Testcases: \n\nassert isPrime(2) == True\nassert isPrime(3) == True\nassert isPrime(4) == False\nassert isPrime(5) == True\nassert isPrime(25) == False\nassert isPrime(13) == True\nassert isPrime(17) == True\nassert isPrime(19) == True\nassert isPrime(20) == False\nassert isPrime(29) == True\nassert isPrime(0) == False\nassert isPrime(1) == False\nassert isPrime(7919) == True\n\n[/Example 3]", "temperature": 0.945}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 779, "completion_tokens": 188, "completion": "Factorial Trailing Zeroes: Given an integer n, return the number of trailing zeroes in n!.\n\n###Code: \n\ndef trailingZeroes(n: int) -> int:\n    zero_count = 0\n    current_multiple = 5\n    while n >= current_multiple:\n        zero_count += n // current_multiple\n        current_multiple *= 5\n    return zero_count\n\n###Testcases: \n\nassert trailingZeroes(3) == 0\nassert trailingZeroes(5) == 1\nassert trailingZeroes(0) == 0\nassert trailingZeroes(10) == 2\nassert trailingZeroes(20) == 4\nassert trailingZeroes(100) == 24\nassert trailingZeroes(200) == 49\nassert trailingZeroes(1000) == 249\nassert trailingZeroes(30) == 7\n\n[/Example 3]", "temperature": 0.688}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 907, "completion_tokens": 316, "completion": "Prime Count: Given two integers left and right, return the count of primes within the range [left, right] (inclusive).\n\n###Code: \n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef primeCount(left: int, right: int) -> int:\n    count = 0\n    for num in range(left, right + 1):\n        if is_prime(num):\n            count += 1\n    return count\n\n###Testcases: \n\nassert primeCount(10, 30) == 6\nassert primeCount(0, 1) == 0\nassert primeCount(100, 200) == 21\nassert primeCount(23, 29) == 3\nassert primeCount(11, 19) == 4\nassert primeCount(0, 100) == 25\nassert primeCount(1, 1) == 0\nassert primeCount(2, 2) == 1\nassert primeCount(5, 5) == 1\nassert primeCount(8, 10) == 1\n\n[/Example 3]", "temperature": 0.694}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1358, "completion_tokens": 455, "completion": "Find the Pythagorean Triples: Given an integer N, return all unique Pythagorean triples for which a, b, and c (the lengths of the sides of a right-angled triangle) are all integers less than or equal to N. A Pythagorean triple is defined as a set of three positive integers (a, b, c) such that a^2 + b^2 = c^2.\n\n###Code: \n\nfrom typing import List, Tuple\n\ndef pythagoreanTriples(N: int) -> List[Tuple[int, int, int]]:\n    triples = set()\n    for a in range(1, N+1):\n        for b in range(a, N+1): # b starts from a to avoid duplicates\n            c_square = a**2 + b**2\n            c = int(c_square**0.5)\n            if c**2 == c_square and c <= N:\n                triples.add((a, b, c))\n    return sorted(triples)\n\n###Testcases: \n\nassert pythagoreanTriples(5) == [(3, 4, 5)]\nassert pythagoreanTriples(10) == [(3, 4, 5), (6, 8, 10)]\nassert pythagoreanTriples(15) == [(3, 4, 5), (5, 12, 13), (6, 8, 10), (9, 12, 15)]\nassert pythagoreanTriples(20) == [(3, 4, 5), (5, 12, 13), (6, 8, 10), (8, 15, 17), (9, 12, 15), (12, 16, 20)]\nassert pythagoreanTriples(25) == [(3, 4, 5), (5, 12, 13), (6, 8, 10), (7, 24, 25), (8, 15, 17), (9, 12, 15), (12, 16, 20), (15, 20, 25)]\n\n[/Example 3]", "temperature": 0.729}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1155, "completion_tokens": 252, "completion": "Pythagorean Triplet Product: Given an input number n, find the product of the Pythagorean triplet (a, b, c) for which a + b + c = n. A Pythagorean triplet is a set of three natural numbers, a < b < c, for which a^2 + b^2 = c^2. Return -1 if no such triplet exists.\n\n###Code:\n\ndef pythagoreanTripletProduct(n: int) -> int:\n    for a in range(1, n//3 + 1):\n        for b in range(a + 1, n//2 + 1):\n            c = n - a - b\n            if a * a + b * b == c * c:\n                return a * b * c\n    return -1\n\n###Testcases:\n\nassert pythagoreanTripletProduct(12)==60\nassert pythagoreanTripletProduct(30)==780\nassert pythagoreanTripletProduct(1000)==31875000\nassert pythagoreanTripletProduct(100)==-1\nassert pythagoreanTripletProduct(24)==480\nassert pythagoreanTripletProduct(80)==3200\n\n[/Example 3]", "temperature": 0.8}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1230, "completion_tokens": 327, "completion": "Add Minimum Number of Rungs: You are given a strictly increasing integer array rungs that represents the height of ladder rungs and an integer dist. You are initially on the floor at height 0 and you can climb at most dist height in a single step.\n\nYou are also given the task to add the minimum number of rungs to the ladder such that you can reach the highest rung without climbing more than dist height at once. Return the minimum number of rungs you need to add to the ladder.\n\n###Code:\n\n```python\nfrom typing import List\n\ndef addRungs(rungs: List[int], dist: int) -> int:\n    current_height = 0\n    add_count = 0\n    for rung in rungs:\n        if rung - current_height > dist:\n            # Calculate how many rungs need to be inserted\n            add_count += (rung - current_height - 1) // dist\n        current_height = rung\n    return add_count\n```\n\n###Testcases:\n\n```python\nassert addRungs([1, 3, 5, 10], 2) == 2\nassert addRungs([3,6,8,10], 3) == 0\nassert addRungs([3,4,6,7], 1) == 3\nassert addRungs([5,10,15], 5) == 0\nassert addRungs([1,6,10,13,14,16,22], 4) == 2\n```\n\n[/Example 3]", "temperature": 0.927}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1146, "completion_tokens": 243, "completion": "Find the Missing Number: You are given a list of n-1 integers in the range from 1 to n with no duplicates in the list. One of the integers is missing in the list. Write a function to find and return the missing integer.\n\n###Code: \n\ndef missingNumber(arr):\n    n = len(arr) + 1\n    total_sum = n * (n + 1) // 2\n    arr_sum = sum(arr)\n    return total_sum - arr_sum\n\n###Testcases: \n\nassert missingNumber([3, 7, 1, 2, 8, 4, 5]) == 6\nassert missingNumber([1, 2, 3, 5]) == 4\nassert missingNumber([1, 2, 3, 4, 6, 7, 8]) == 5\nassert missingNumber([10, 11, 12, 13, 14, 16, 17, 18, 19, 20]) == 15\nassert missingNumber([1]) == 2\nassert missingNumber([2]) == 1\n\n[/Example 3]", "temperature": 0.915}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1163, "completion_tokens": 260, "completion": "Prime Subtraction: Given two integers x and y, return true if it's possible to subtract one prime number from another to get a difference of x - y. Otherwise, return false.\n\n###Code: \n\ndef isPrime(num: int) -> bool:\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef primeSubtraction(x: int, y: int) -> bool:\n    return isPrime(x - y)\n\n###Testcases: \n\nassert primeSubtraction(10, 3) == True\nassert primeSubtraction(13, 7) == True\nassert primeSubtraction(103, 97) == True\nassert primeSubtraction(15, 2) == False\nassert primeSubtraction(100, 97) == False\nassert primeSubtraction(1000003, 1000000) == False\n\n[/Example 3]", "temperature": 0.809}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1607, "completion_tokens": 704, "completion": "Convert a Non-negative Integer to its English Words Representation: Write a function that converts a non-negative integer num to its English words representation.\n\n###Code: \n\nclass NumberToWords:\n    def __init__(self):\n        self.below_20 = \"One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen Fourteen Fifteen Sixteen Seventeen Eighteen Nineteen\".split()\n        self.tens = \"Twenty Thirty Forty Fifty Sixty Seventy Eighty Ninety\".split()\n        self.thousands = \"Thousand Million Billion\".split()\n\n    def numberToWords(self, num: int) -> str:\n        if num == 0:\n            return \"Zero\"\n        \n        def one(num):\n            return self.below_20[num - 1] if num else \"\"\n\n        def two_less_than_20(num):\n            return self.below_20[num - 1] if num else \"\"\n\n        def ten(num):\n            return self.tens[num - 2] if num else \"\"\n\n        def two(num):\n            if not num:\n                return \"\"\n            elif num < 20:\n                return two_less_than_20(num)\n            else:\n                tenner = num // 10\n                rest = num - tenner * 10\n                return ten(tenner) + \" \" + one(rest) if rest else ten(tenner)\n\n        def three(num):\n            hundred = num // 100\n            rest = num - hundred * 100\n            if hundred and rest:\n                return one(hundred) + \" Hundred \" + two(rest)\n            elif not hundred and rest:\n                return two(rest)\n            elif hundred and not rest:\n                return one(hundred) + \" Hundred\"\n\n        def words(num):\n            if num >= 10**9:\n                billion = num // 10**9\n                rest = num - billion * 10**9\n                return three(billion) + \" Billion\" + (\"\" if rest == 0 else \" \" + words(rest))\n            elif num >= 10**6:\n                million = num // 10**6\n                rest = num - million * 10**6\n                return three(million) + \" Million\" + (\"\" if rest == 0 else \" \" + words(rest))\n            elif num >= 1000:\n                thousand = num // 1000\n                rest = num - thousand * 1000\n                return three(thousand) + \" Thousand\" + (\"\" if rest == 0 else \" \" + words(rest))\n            else:\n                return three(num)\n\n        return words(num).strip()\n\n###Testcases: \n\nconverter = NumberToWords()\nassert converter.numberToWords(123) == \"One Hundred Twenty Three\"\nassert converter.numberToWords(12345) == \"Twelve Thousand Three Hundred Forty Five\"\nassert converter.numberToWords(1234567) == \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"\nassert converter.numberToWords(1234567891) == \"One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One\"\nassert converter.numberToWords(0) == \"Zero\"\nassert converter.numberToWords(19) == \"Nineteen\"\nassert converter.numberToWords(20) == \"Twenty\"\nassert converter.numberToWords(50868) == \"Fifty Thousand Eight Hundred Sixty Eight\"\n\n[/Example 3]", "temperature": 0.742}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 941, "completion_tokens": 309, "completion": "Perfect Number: A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding itself. For example, 28 is a perfect number because its divisors are 1, 2, 4, 7, 14, and 28 and the sum of its divisors excluding 28 is 1 + 2 + 4 + 7 + 14 = 28.\n\nGiven an integer n, write a function that returns true if n is a perfect number, otherwise return false.\n\n###Code: \n\ndef checkPerfectNumber(num: int) -> bool:\n    if num <= 1:\n        return False\n    sum_divisors = 1\n    sqrt_num = int(num**0.5)\n    for i in range(2, sqrt_num + 1):\n        if num % i == 0:\n            sum_divisors += i\n            if i != num // i:\n                sum_divisors += num // i\n    return sum_divisors == num\n\n###Testcases: \n\nassert checkPerfectNumber(28) == True\nassert checkPerfectNumber(6) == True\nassert checkPerfectNumber(496) == True\nassert checkPerfectNumber(8128) == True\nassert checkPerfectNumber(2) == False\nassert checkPerfectNumber(10) == False\nassert checkPerfectNumber(100) == False\nassert checkPerfectNumber(27) == False\nassert checkPerfectNumber(1) == False\n\n[/Example 3]", "temperature": 0.766}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 917, "completion_tokens": 285, "completion": "Find the nth Digit of a Number: Create a function that takes two numbers as arguments (n, p) and returns the pth digit (from right to left) of n.\n\nIf the number does not have a pth digit, return -1.\n\n###Code: \n\ndef findNthDigit(n: int, p: int) -> int:\n    num_str = str(n)\n    reverse_idx = len(num_str) - p\n    if reverse_idx >= 0 and reverse_idx < len(num_str):\n        return int(num_str[reverse_idx])\n    return -1\n\n###Testcases: \n\nassert findNthDigit(456, 2) == 5\nassert findNthDigit(12345, 1) == 5\nassert findNthDigit(987654321, 5) == 4\nassert findNthDigit(234, 6) == -1\nassert findNthDigit(10000, 5) == 1\nassert findNthDigit(123456789, 9) == 1\nassert findNthDigit(678, 0) == -1\nassert findNthDigit(10, 2) == 1\nassert findNthDigit(1, 3) == -1\nassert findNthDigit(789, 2) == 8\n\n[/Example 3]", "temperature": 0.969}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 900, "completion_tokens": 268, "completion": "Happy Number: Write a function to determine if a number n is \"happy\".\n\nA happy number is a number defined by the following process:\n\n- Starting with any positive integer, replace the number by the sum of the squares of its digits.\n- Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.\n- Those numbers for which this process ends in 1 are happy numbers.\n\nReturn true if n is a happy number, and false if not.\n\n###Code: \n\ndef isHappy(n: int) -> bool:\n    seen = set()\n    while n not in seen:\n        seen.add(n)\n        n = sum([int(x)**2 for x in str(n)])\n        if n == 1:\n            return True\n    return False\n\n###Testcases: \n\nassert isHappy(19) == True\nassert isHappy(1) == True\nassert isHappy(2) == False\nassert isHappy(7) == True\nassert isHappy(88) == False\nassert isHappy(97) == True\nassert isHappy(100) == True\nassert isHappy(11) == False\nassert isHappy(90) == False\nassert isHappy(70) == True\n\n[/Example 3]", "temperature": 0.84}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 851, "completion_tokens": 219, "completion": "Factorial Trailing Zeroes: Given an integer n, return the number of trailing zeroes in n!.\n\nNote that n! (n factorial) is the product of all positive integers less than or equal to n.\n\nFor example:\n\n5! = 120 (One trailing zero)  \n10! = 3628800 (Two trailing zeros)\n\n###Code:\n\ndef trailingZeroes(n: int) -> int:\n    zeroes = 0\n    while n > 0:\n        n //= 5\n        zeroes += n\n    return zeroes\n\n###Testcases:\n\nassert trailingZeroes(5) == 1\nassert trailingZeroes(10) == 2\nassert trailingZeroes(3) == 0\nassert trailingZeroes(0) == 0\nassert trailingZeroes(25) == 6\nassert trailingZeroes(50) == 12\nassert trailingZeroes(100) == 24\nassert trailingZeroes(125) == 31\nassert trailingZeroes(200) == 49\n\n[/Example 3]", "temperature": 0.837}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 845, "completion_tokens": 213, "completion": "Palindrome Number: Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward. Negative numbers are not considered as palindromes.\n\n###Code: \n\ndef isPalindrome(x: int) -> bool:\n    if x < 0:\n        return False\n    original = x\n    reversed_num = 0\n    while x > 0:\n        reversed_num = reversed_num * 10 + x % 10\n        x //= 10\n    return original == reversed_num\n\n###Testcases: \n\nassert isPalindrome(121)==True\nassert isPalindrome(-121) == False\nassert isPalindrome(10) == False\nassert isPalindrome(0) == True\nassert isPalindrome(12321) == True\nassert isPalindrome(1234321) == True\nassert isPalindrome(123454321) == True\nassert isPalindrome(123456) == False\nassert isPalindrome(1) == True\nassert isPalindrome(111) == True\n\n[/Example 3]", "temperature": 0.622}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 980, "completion_tokens": 348, "completion": "Prime Factorization: Given a positive integer n, return the prime factors of the number in an array in ascending order. If the number is a prime itself, the array should only contain the number.\n\n###Code: \n\ndef primeFactors(n: int) -> [int]:\n    factors = []\n    \n    # Divide by 2 to get rid of all even factors\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n        \n    # n must be odd at this point, so we can skip one element (Note i = i +2)\n    for i in range(3, int(n**0.5) + 1, 2): \n        while n % i == 0:\n            factors.append(i)\n            n //= i\n            \n    # If n becomes a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n        \n    return factors\n\n###Testcases: \n\nassert primeFactors(18) == [2, 3, 3]\nassert primeFactors(19) == [19]\nassert primeFactors(100) == [2, 2, 5, 5]\nassert primeFactors(1) == []\nassert primeFactors(37) == [37]\nassert primeFactors(84) == [2, 2, 3, 7]\nassert primeFactors(56) == [2, 2, 2, 7]\nassert primeFactors(210) == [2, 3, 5, 7]\nassert primeFactors(99) == [3, 3, 11]\nassert primeFactors(29) == [29]\n\n[/Example 3]", "temperature": 0.773}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1296, "completion_tokens": 352, "completion": "Evaluate Reverse Polish Notation: Evaluate the value of an arithmetic expression in Reverse Polish Notation.\n\nValid operators are +, -, *, and /. Each operand may be an integer or another expression.\n\nNote that division between two integers should truncate toward zero.\n\nIt is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.\n\n###Code: \n\n```python\nfrom typing import List\n\ndef evalRPN(tokens: List[str]) -> int:\n    stack = []\n    for token in tokens:\n        if token not in {\"+\", \"-\", \"*\", \"/\"}:\n            stack.append(int(token))\n        else:\n            a, b = stack.pop(), stack.pop()\n            if token == \"+\":\n                stack.append(a + b)\n            elif token == \"-\":\n                stack.append(b - a)\n            elif token == \"*\":\n                stack.append(a * b)\n            elif token == \"/\":\n                stack.append(int(b / a))  # Note: int() to truncate toward zero\n    return stack[0]\n\n```\n\n###Testcases: \n\n```python\nassert evalRPN([\"2\", \"1\", \"+\", \"3\", \"*\"]) == 9\nassert evalRPN([\"4\", \"13\", \"5\", \"/\", \"+\"]) == 6\nassert evalRPN([\"10\", \"6\", \"9\", \"3\", \"+\", \"-11\", \"*\", \"/\", \"*\", \"17\", \"+\", \"5\", \"+\"]) == 22\nassert evalRPN([\"4\", \"2\", \"/\", \"3\", \"/\"]) == 0\nassert evalRPN([\"3\", \"-4\", \"+\"]) == -1\n```\n\n[/Example 3]", "temperature": 0.944}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1275, "completion_tokens": 331, "completion": "Calculate the Square Root: Implement a function to calculate the square root of a non-negative integer n. The result should be truncated (i.e., only the integer part of the result should be returned).\n\nFor example:\n\n- squareRoot(4) should return 2.\n- squareRoot(8) should return 2 (since the square root of 8 is approximately 2.82842, and we truncate the result).\n- squareRoot(1) should return 1.\n- squareRoot(0) should return 0.\n\nNote: Try not to use the built-in sqrt function from the math library, and instead, implement a function using some algorithm like binary search.\n\n###Code: \n\ndef squareRoot(n: int) -> int:\n    if n < 2:\n        return n\n\n    left, right = 2, n // 2\n    while left <= right:\n        pivot = left + (right - left) // 2\n        num = pivot * pivot\n        if num > n:\n            right = pivot - 1\n        elif num < n:\n            left = pivot + 1\n        else:\n            return pivot\n    return right\n\n###Testcases: \n\nassert squareRoot(4) == 2\nassert squareRoot(8) == 2\nassert squareRoot(1) == 1\nassert squareRoot(0) == 0\nassert squareRoot(9) == 3\nassert squareRoot(16) == 4\nassert squareRoot(25) == 5\nassert squareRoot(49) == 7\n\n[/Example 3]", "temperature": 0.736}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1205, "completion_tokens": 261, "completion": "Prime Factorization: Write a function that takes an integer n and returns its prime factors as a list of integers.\n\n###Code:\n\ndef prime_factors(n: int) -> list:\n    factors = []\n    # Handle 2 separately\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # Loop from 3 to sqrt(n) for odd factors\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    # If n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return factors\n\n###Testcases:\n\nassert prime_factors(1) == []\nassert prime_factors(2) == [2]\nassert prime_factors(3) == [3]\nassert prime_factors(4) == [2, 2]\nassert prime_factors(6) == [2, 3]\nassert prime_factors(28) == [2, 2, 7]\nassert prime_factors(29) == [29]\nassert prime_factors(315) == [3, 3, 5, 7]\n\n[/Example 3]", "temperature": 0.995}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1222, "completion_tokens": 278, "completion": "Perfect Number: Write a function to check whether a number is a \"perfect number\". A perfect number is a positive integer that is equal to the sum of its proper divisors, excluding itself.\n\nFor example, 28 is a perfect number because its proper divisors are 1, 2, 4, 7, 14, and the sum of these divisors is 28.\n\n###Code: \n\ndef checkPerfectNumber(num: int) -> bool:\n    if num <= 1:\n        return False\n    \n    divisors_sum = 1\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            divisors_sum += i\n            if i != num // i:  # Exclude the square root itself if it's a divisor\n                divisors_sum += num // i\n    return divisors_sum == num\n\n###Testcases: \n\nassert checkPerfectNumber(28) == True\nassert checkPerfectNumber(6) == True\nassert checkPerfectNumber(496) == True\nassert checkPerfectNumber(8128) == True\nassert checkPerfectNumber(2) == False\nassert checkPerfectNumber(10) == False\nassert checkPerfectNumber(27) == False\nassert checkPerfectNumber(100) == False\n\n[/Example 3]", "temperature": 0.881}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1182, "completion_tokens": 238, "completion": "Prime Factorization: Write a function that takes an integer n and returns its prime factors in ascending order.\n\nFor example, given n = 28, the function should return [2, 2, 7] because 28 = 2 x 2 x 7.\n\n###Code: \n\ndef primeFactors(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n###Testcases: \n\nassert primeFactors(28) == [2, 2, 7]\nassert primeFactors(18) == [2, 3, 3]\nassert primeFactors(19) == [19]\nassert primeFactors(84) == [2, 2, 3, 7]\nassert primeFactors(100) == [2, 2, 5, 5]\nassert primeFactors(2) == [2]\nassert primeFactors(1) == []\n\n[/Example 3]", "temperature": 0.729}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1219, "completion_tokens": 275, "completion": "Count Primes: Write a function that counts the number of prime numbers less than a non-negative number, n.\n\nA prime number is a natural number greater than 1 that is not a product of two smaller natural numbers.\n\n###Code:\n\ndef countPrimes(n: int) -> int:\n    if n <= 2:\n        return 0\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if sieve[i]:\n            for j in range(i*i, n, i):\n                sieve[j] = False\n\n    return sum(sieve)\n\n###Testcases:\n\nassert countPrimes(10) == 4  # 2, 3, 5, 7\nassert countPrimes(0) == 0\nassert countPrimes(1) == 0\nassert countPrimes(2) == 0\nassert countPrimes(100) == 25  # 25 prime numbers less than 100\nassert countPrimes(1000) == 168  # 168 prime numbers less than 1000\nassert countPrimes(499979) == 41537  # prime numbers less than 499979\n\n[/Example 3]", "temperature": 0.891}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 916, "completion_tokens": 292, "completion": "Perfect Square Sequence: Given an integer n, find the least number of perfect square numbers (e.g., 1, 4, 9, 16, ...) which sum to n.\n\n###Code: \n\nimport math\ndef numSquares(n: int) -> int:\n    if n < 2:\n        return n\n    lst = []\n    for i in range(1, int(n**0.5)+1):\n        lst.append(i*i)\n    cnt = 0\n    toCheck = {n}\n    while toCheck:\n        cnt += 1\n        temp = set()\n        for x in toCheck:\n            for y in lst:\n                if x == y:\n                    return cnt\n                if x < y:\n                    break\n                temp.add(x-y)\n        toCheck = temp\n    return cnt\n\n###Testcases: \n\nassert numSquares(12)==3 # Explanation: 12 = 4 + 4 + 4.\nassert numSquares(13) == 2 # Explanation: 13 = 4 + 9.\nassert numSquares(1) == 1\nassert numSquares(2) == 2\nassert numSquares(18) == 2 # Explanation: 18 = 9 + 9.\nassert numSquares(100) == 1 # Explanation: 100 = 10^2.\n\n[/Example 3]", "temperature": 0.817}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 763, "completion_tokens": 139, "completion": "Perfect Square Finder: Determine if a given positive integer n is a perfect square.\n\n###Code:\n\ndef isPerfectSquare(num: int) -> bool:\n    if num < 0:\n        return False\n    \n    root = int(num**0.5)\n    return root * root == num\n\n###Testcases:\n\nassert isPerfectSquare(16) == True\nassert isPerfectSquare(14) == False\nassert isPerfectSquare(1) == True\nassert isPerfectSquare(25) == True\nassert isPerfectSquare(26) == False\nassert isPerfectSquare(100) == True\nassert isPerfectSquare(1024) == True\n\n[/Example 3]", "temperature": 0.788}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 839, "completion_tokens": 215, "completion": "Perfect Square Sequence: Given an integer n, generate the first n numbers in the sequence of perfect squares.\n\nA perfect square is a number that can be expressed as the product of an integer with itself. For example, 1, 4, 9, 16, 25 are the first 5 perfect squares.\n\n###Code:\n\ndef perfectSquareSequence(n: int) -> list:\n    return [i**2 for i in range(1, n+1)]\n\n###Testcases:\n\nassert perfectSquareSequence(5) == [1, 4, 9, 16, 25]\nassert perfectSquareSequence(1) == [1]\nassert perfectSquareSequence(10) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert perfectSquareSequence(7) == [1, 4, 9, 16, 25, 36, 49]\nassert perfectSquareSequence(0) == []\n\n[/Example 3]", "temperature": 0.846}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 965, "completion_tokens": 341, "completion": "Factor Combinations: Numbers can be regarded as product of their factors. For example, 8 = 2 x 2 x 2; = 2 x 4. Given an integer n, return all possible combinations of its factors. Note that you should not include the combination of 1 and n as that is not a valid combination.\n\n###Code:\n\ndef getFactors(n: int) -> List[List[int]]:\n    def factorize(x, start, path, res):\n        while start * start <= x:\n            if x % start == 0:\n                res.append(path + [start, x//start])\n                factorize(x//start, start, path+[start], res)\n            start += 1\n        return res\n\n    return factorize(n, 2, [], [])\n\n###Testcases:\n\nassert getFactors(12) == [[2, 6], [2, 2, 3], [3, 4]]\nassert getFactors(32) == [[2, 16], [2, 2, 8], [2, 2, 2, 4], [2, 2, 2, 2, 2], [4, 8]]\nassert getFactors(37) == []  # 37 is a prime number so it has no factors other than 1 and itself\nassert getFactors(1) == []  # 1 has no factors other than itself\nassert getFactors(16) == [[2, 8], [2, 2, 4], [2, 2, 2, 2], [4, 4]]\n\n[/Example 3]", "temperature": 0.766}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 867, "completion_tokens": 243, "completion": "Prime Factor Count: Given an integer n, return the number of unique prime factors of n.\n\n###Code: \n\ndef countPrimeFactors(n: int) -> int:\n    factors = set()\n    # Handle even numbers\n    while n % 2 == 0:\n        factors.add(2)\n        n //= 2\n    # Handle odd numbers\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.add(i)\n            n //= i\n    # If n is a prime number greater than 2\n    if n > 2:\n        factors.add(n)\n    return len(factors)\n\n###Testcases: \n\nassert countPrimeFactors(2) == 1\nassert countPrimeFactors(3) == 1\nassert countPrimeFactors(4) == 1\nassert countPrimeFactors(6) == 2\nassert countPrimeFactors(18) == 2\nassert countPrimeFactors(28) == 2\nassert countPrimeFactors(100) == 2\nassert countPrimeFactors(101) == 1\n\n[/Example 3]", "temperature": 0.698}, {"few_shots": [{"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 911, "completion_tokens": 287, "completion": "Prime Factorization: Given a positive integer n, return the prime factors of n in ascending order.\n\n###Code: \n\ndef primeFactors(n: int) -> list:\n    factors = []\n    # Divide by 2 until n is odd\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    \n    # n must be odd at this point so a skip of 2 (i = i + 2) can be used\n    for i in range(3, int(n**0.5)+1, 2):\n        # while i divides n, append i and divide n\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n            \n    # Condition if n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return factors\n\n###Testcases: \n\nassert primeFactors(3) == [3]\nassert primeFactors(13) == [13]\nassert primeFactors(56) == [2, 2, 2, 7]\nassert primeFactors(315) == [3, 3, 5, 7]\nassert primeFactors(110) == [2, 5, 11]\nassert primeFactors(999) == [3, 3, 3, 37]\n\n[/Example 3]", "temperature": 0.857}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 892, "completion_tokens": 260, "completion": "Calculate the Square Root: Implement the `sqrt` function. Given a non-negative integer x, compute and return the square root of x. If the square root is not an integer, return the nearest integer (the result will be truncated).\n\n###Code: \n\ndef sqrt(x: int) -> int:\n    if x < 2:\n        return x\n    left, right = 2, x // 2\n    while left <= right:\n        pivot = left + (right - left) // 2\n        num = pivot * pivot\n        if num > x:\n            right = pivot - 1\n        elif num < x:\n            left = pivot + 1\n        else:\n            return pivot\n    return right\n\n###Testcases: \n\nassert sqrt(4) == 2\nassert sqrt(8) == 2\nassert sqrt(1) == 1\nassert sqrt(0) == 0\nassert sqrt(9) == 3\nassert sqrt(15) == 3\nassert sqrt(16) == 4\nassert sqrt(24) == 4\nassert sqrt(25) == 5\nassert sqrt(36) == 6\nassert sqrt(49) == 7\n\n[/Example 3]", "temperature": 0.726}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 818, "completion_tokens": 186, "completion": "Climbing Stairs: You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n\n###Code:\n\ndef climbStairs(n: int) -> int:\n    if n == 1:\n        return 1\n    first, second = 1, 2\n    for i in range(3, n + 1):\n        first, second = second, first + second\n    return second\n\n###Testcases:\n\nassert climbStairs(2) == 2\nassert climbStairs(3) == 3\nassert climbStairs(4) == 5\nassert climbStairs(5) == 8\nassert climbStairs(10) == 89\nassert climbStairs(1) == 1\n\n[/Example 3]", "temperature": 0.762}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 973, "completion_tokens": 341, "completion": "Prime Number of Set Bits in Binary Representation: Given two integers left and right, return the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation.\n\n(Recall that the number of set bits an integer has is the number of 1s present when written in binary. For example, 21 written in binary is 10101 which has 3 set bits.)\n\n###Code:\n\ndef countPrimeSetBits(left: int, right: int) -> int:\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def bit_count(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n    \n    return sum(is_prime(bit_count(i)) for i in range(left, right + 1))\n\n###Testcases:\n\nassert countPrimeSetBits(6, 10) == 4\nassert countPrimeSetBits(10, 15) == 5\nassert countPrimeSetBits(842, 888) == 23\nassert countPrimeSetBits(1, 2) == 1\nassert countPrimeSetBits(5, 10) == 5\nassert countPrimeSetBits(11, 19) == 4\nassert countPrimeSetBits(20, 30) == 5\nassert countPrimeSetBits(289, 345) == 17\n\n[/Example 3]", "temperature": 0.688}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 888, "completion_tokens": 256, "completion": "Prime Factorization: Write a function that takes an integer n and returns a list of its prime factors. The prime factors of a number are the set of prime numbers that divide the number exactly.\n\n###Code:\n\ndef primeFactors(n: int) -> list:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n###Testcases:\n\nassert primeFactors(63) == [3, 3, 7]\nassert primeFactors(64) == [2, 2, 2, 2, 2, 2]\nassert primeFactors(12) == [2, 2, 3]\nassert primeFactors(29) == [29]\nassert primeFactors(60) == [2, 2, 3, 5]\nassert primeFactors(100) == [2, 2, 5, 5]\nassert primeFactors(1) == []\nassert primeFactors(2) == [2]\nassert primeFactors(91) == [7, 13]\n\n[/Example 3]", "temperature": 0.682}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 952, "completion_tokens": 320, "completion": "Prime Factorization: Given a positive integer n, return its prime factorization as a list of integers, where the integers are sorted in ascending order.\n\n###Code: \n\ndef primeFactors(n: int) -> list:\n    factors = []\n    # Handle the even numbers first.\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # Handle odd numbers up to sqrt(n).\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    # If n is a prime number greater than 2.\n    if n > 2:\n        factors.append(n)\n    return factors\n\n###Testcases: \n\nassert primeFactors(2) == [2]\nassert primeFactors(3) == [3]\nassert primeFactors(4) == [2, 2]\nassert primeFactors(18) == [2, 3, 3]\nassert primeFactors(27) == [3, 3, 3]\nassert primeFactors(29) == [29]\nassert primeFactors(60) == [2, 2, 3, 5]\nassert primeFactors(84) == [2, 2, 3, 7]\nassert primeFactors(100) == [2, 2, 5, 5]\nassert primeFactors(13195) == [5, 7, 13, 29]\n\n[/Example 3]", "temperature": 0.687}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 632, "total_tokens": 808, "completion_tokens": 176, "completion": "Calculate the Sum of Digits: Create a function that takes a non-negative integer and returns the sum of its digits.\n\n###Code: \n\ndef sumOfDigits(number: int) -> int:\n    return sum(map(int, str(number)))\n\n###Testcases: \n\nassert sumOfDigits(123) == 6\nassert sumOfDigits(4005) == 9\nassert sumOfDigits(8) == 8\nassert sumOfDigits(0) == 0\nassert sumOfDigits(5067) == 18\nassert sumOfDigits(999) == 27\nassert sumOfDigits(123456789) == 45\nassert sumOfDigits(1010101) == 4\nassert sumOfDigits(444) == 12\nassert sumOfDigits(1111111) == 7\n\n[/Example 3]", "temperature": 0.934}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1275, "completion_tokens": 364, "completion": "Calculate Pi using Leibniz Formula: The Leibniz formula for \u03c0 is given by the following infinite series:\n\n\u03c0 = 4 * (1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 + ...)\n\nWrite a function that calculates \u03c0 using this formula. The function should take an integer n which determines the number of terms in the series to use in the approximation. The more terms, the more accurate the approximation of \u03c0 will be.\n\n###Code: \n\ndef calculatePi(n: int) -> float:\n    pi = 0\n    sign = 1\n    for i in range(n):\n        pi += sign * (4.0 / (2 * i + 1))\n        sign *= -1\n    return pi\n\n###Testcases: \n\n# Note: These are approximations and the accuracy increases with higher values of n.\nassert abs(calculatePi(1) - 4.0) < 1e-1\nassert abs(calculatePi(10) - 3.0418396189) < 1e-1\nassert abs(calculatePi(100) - 3.1315929036) < 1e-2\nassert abs(calculatePi(1000) - 3.1405926538) < 1e-3\nassert abs(calculatePi(10000) - 3.1414926536) < 1e-4\nassert abs(calculatePi(100000) - 3.1415826536) < 1e-5\nassert abs(calculatePi(1000000) - 3.1415916536) < 1e-6\n\n[/Example 3]", "temperature": 0.652}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1273, "completion_tokens": 362, "completion": "Prime Number of Set Bits in Binary Representation: Given two integers left and right, find the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation.\n\n(Recall that the number of set bits an integer has is the number of 1s present when written in binary. For example, 21 written in binary is 10101, which has 3 set bits.)\n\n###Code: \n\ndef countPrimeSetBits(left: int, right: int) -> int:\n    prime_set = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31}\n    \n    def is_prime(num: int) -> bool:\n        return num in prime_set\n    \n    count = 0\n    for num in range(left, right + 1):\n        if is_prime(bin(num).count('1')):\n            count += 1\n    \n    return count\n\n###Testcases: \n\nassert countPrimeSetBits(6, 10) == 4\nassert countPrimeSetBits(10, 15) == 5\nassert countPrimeSetBits(842, 888) == 23\nassert countPrimeSetBits(1, 2) == 1\nassert countPrimeSetBits(14, 15) == 2\nassert countPrimeSetBits(10, 20) == 5\nassert countPrimeSetBits(16, 24) == 3\nassert countPrimeSetBits(5, 7) == 3\nassert countPrimeSetBits(99, 103) == 3\nassert countPrimeSetBits(244, 269) == 11\n\n[/Example 3]", "temperature": 0.859}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1359, "completion_tokens": 448, "completion": "Count Prime Set Bits: Given two integers left and right, find the count of numbers in the range [left, right] (inclusive) where the number of prime set bits is also prime.\n\nA set bit is a bit with a value of 1. For example, the binary representation of 5 is \"101\", which has 2 set bits.\n\n###Code: \n\ndef countPrimeSetBits(left: int, right: int) -> int:\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    def count_bits(n: int) -> int:\n        count = 0\n        while n:\n            n &= (n-1)  # flip the least significant bit set\n            count += 1\n        return count\n    \n    prime_set_bit_count = 0\n    for num in range(left, right+1):\n        if is_prime(count_bits(num)):\n            prime_set_bit_count += 1\n            \n    return prime_set_bit_count\n\n###Testcases: \n\nassert countPrimeSetBits(6, 10) == 4\nassert countPrimeSetBits(10, 15) == 5\nassert countPrimeSetBits(842, 888) == 23\nassert countPrimeSetBits(1, 2) == 1\nassert countPrimeSetBits(14, 15) == 2\nassert countPrimeSetBits(5, 10) == 5\nassert countPrimeSetBits(0, 0) == 0\nassert countPrimeSetBits(0, 1) == 0\nassert countPrimeSetBits(4, 6) == 3\nassert countPrimeSetBits(11, 19) == 5\n\n[/Example 3]", "temperature": 0.737}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1230, "completion_tokens": 319, "completion": "Prime Factorization: Given a positive integer n, return its prime factorization as a list of integers where the elements represent the prime factors in ascending order.\n\n###Code:\n\ndef primeFactorization(n: int) -> List[int]:\n    factors = []\n    # Divide out all 2's first\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    # Now, we only have to deal with odd numbers starting from 3\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    # If n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return factors\n\n###Testcases:\n\nassert primeFactorization(2) == [2]\nassert primeFactorization(3) == [3]\nassert primeFactorization(4) == [2, 2]\nassert primeFactorization(5) == [5]\nassert primeFactorization(6) == [2, 3]\nassert primeFactorization(18) == [2, 3, 3]\nassert primeFactorization(19) == [19]\nassert primeFactorization(100) == [2, 2, 5, 5]\nassert primeFactorization(101) == [101]\nassert primeFactorization(102) == [2, 3, 17]\n\n[/Example 3]", "temperature": 0.738}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1107, "completion_tokens": 196, "completion": "Factorial Trailing Zeroes: Given an integer n, return the number of trailing zeroes in n!.\n\nNote that n! means the factorial of n, which is the product of all positive integers less than or equal to n.\n\n###Code:\n\ndef trailingZeroes(n: int) -> int:\n    count = 0\n    while n > 0:\n        n //= 5\n        count += n\n    return count\n\n###Testcases:\n\nassert trailingZeroes(3) == 0\nassert trailingZeroes(5) == 1\nassert trailingZeroes(0) == 0\nassert trailingZeroes(10) == 2\nassert trailingZeroes(25) == 6\nassert trailingZeroes(50) == 12\nassert trailingZeroes(100) == 24\nassert trailingZeroes(125) == 31\nassert trailingZeroes(200) == 49\n\n[/Example 3]", "temperature": 0.699}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1114, "completion_tokens": 203, "completion": "Number Complement: Given a positive integer num, output its complement number. The complement strategy is to flip the bits of its binary representation.\n\n###Code: \n\ndef findComplement(num: int) -> int:\n    binary_repr = bin(num)[2:]\n    complement = ''.join('1' if x == '0' else '0' for x in binary_repr)\n    return int(complement, 2)\n\n###Testcases: \n\nassert findComplement(5)==2\nassert findComplement(1)==0\nassert findComplement(10)==5\nassert findComplement(7)==0\nassert findComplement(2)==1\nassert findComplement(20)==11\nassert findComplement(100)==27\nassert findComplement(0)==1  # This would not be a valid test case as the input is specified to be positive.\nassert findComplement(33)==30\nassert findComplement(999)==24\n\n[/Example 3]", "temperature": 0.963}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 903, "completion_tokens": 312, "completion": "Prime Factorization: Write a function that takes an integer n and returns a list of its prime factors.\n\n###Code:\n\ndef primeFactors(n: int) -> list:\n    factors = []\n    # Handle 2 separately to make the loop more efficient\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # Now n is odd, we can skip one element (even numbers)\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    # If n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return factors\n\n###Testcases: \n\nassert primeFactors(18) == [2, 3, 3]\nassert primeFactors(3) == [3]\nassert primeFactors(13) == [13]\nassert primeFactors(100) == [2, 2, 5, 5]\nassert primeFactors(210) == [2, 3, 5, 7]\nassert primeFactors(1) == []\nassert primeFactors(37) == [37]\nassert primeFactors(64) == [2, 2, 2, 2, 2, 2]\nassert primeFactors(99) == [3, 3, 11]\nassert primeFactors(97) == [97]\n\n[/Example 3]", "temperature": 0.757}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 911, "completion_tokens": 320, "completion": "Prime Factors: Write a function that takes an integer n and returns a list of all prime factors of n.\n\n###Code: \n\ndef primeFactors(n: int) -> list:\n    factors = []\n    # Divide by 2 until n becomes odd\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # n must be odd at this point, so we can skip one element (note i = i + 2)\n    for i in range(3, int(n**0.5)+1, 2):\n        # While i divides n, append i and divide n\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    # If n is a prime number greater than 2, then append it\n    if n > 2:\n        factors.append(n)\n    return factors\n\n###Testcases: \n\nassert primeFactors(315) == [3, 3, 5, 7]\nassert primeFactors(2) == [2]\nassert primeFactors(11) == [11]\nassert primeFactors(28) == [2, 2, 7]\nassert primeFactors(100) == [2, 2, 5, 5]\nassert primeFactors(1) == []\nassert primeFactors(29) == [29]\nassert primeFactors(86240) == [2, 2, 2, 2, 2, 5, 7, 7, 11]\n\n[/Example 3]", "temperature": 0.679}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 894, "completion_tokens": 303, "completion": "Prime Number of Set Bits in Binary Representation: Given two integers left and right, find the count of numbers in the range [left, right] (inclusive) having a prime number of set bits in their binary representation.\n\n(Recall that the number of set bits an integer has is the number of 1s present when written in binary. For example, 21 written in binary is 10101, which has 3 set bits.)\n\n###Code: \n\ndef countPrimeSetBits(left: int, right: int) -> int:\n    prime_numbers = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31}\n    \n    def isPrimeSetBits(n):\n        return bin(n).count('1') in prime_numbers\n    \n    return sum(isPrimeSetBits(i) for i in range(left, right + 1))\n\n###Testcases: \n\nassert countPrimeSetBits(6, 10) == 4\nassert countPrimeSetBits(10, 15) == 5\nassert countPrimeSetBits(842, 888) == 23\nassert countPrimeSetBits(6, 6) == 1\nassert countPrimeSetBits(1, 1) == 0\nassert countPrimeSetBits(10, 10) == 1\nassert countPrimeSetBits(5, 10) == 5\n\n[/Example 3]", "temperature": 0.85}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 996, "completion_tokens": 405, "completion": "Prime Arrangements: Return the number of permutations of the first n positive integers that are prime arrangements. A prime arrangement is a permutation where prime numbers are at prime indices (1-indexed). (Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two smaller natural numbers.) The answer may be large, so return it modulo 10^9 + 7.\n\n###Code:\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef primeArrangements(n: int) -> int:\n    MOD = 10**9 + 7\n    primes = sum(is_prime(i) for i in range(1, n+1))\n    non_primes = n - primes\n\n    def factorial(x):\n        result = 1\n        for i in range(2, x + 1):\n            result = result * i % MOD\n        return result\n\n    return factorial(primes) * factorial(non_primes) % MOD\n\n###Testcases:\n\nassert primeArrangements(5) == 12\nassert primeArrangements(100) == 682289015\nassert primeArrangements(1) == 1\nassert primeArrangements(2) == 1\nassert primeArrangements(3) == 2\nassert primeArrangements(10) == 17280\nassert primeArrangements(20) == 614094221\nassert primeArrangements(30) == 898961330\n\n[/Example 3]", "temperature": 0.611}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 868, "completion_tokens": 277, "completion": "Prime Arrangements: Return the number of permutations of the first n natural numbers so that the prime numbers are at prime indices (1-indexed). Since the answer may be large, return the answer modulo 10^9 + 7.\n\n###Code: \n\nfrom math import factorial\n\ndef countPrimes(n: int) -> int:\n    sieve = [1] * (n+1)\n    sieve[0] = sieve[1] = 0\n    for i in range(2, int(n**0.5) + 1):\n        if sieve[i]:\n            for j in range(i*i, n+1, i):\n                sieve[j] = 0\n    return sum(sieve)\n\ndef primeArrangements(n: int) -> int:\n    primes = countPrimes(n)\n    return (factorial(primes) * factorial(n - primes)) % (10**9 + 7)\n\n###Testcases: \n\nassert primeArrangements(5) == 12\nassert primeArrangements(100) == 682289015\nassert primeArrangements(1) == 1\nassert primeArrangements(2) == 1\nassert primeArrangements(10) == 17280\nassert primeArrangements(20) == 841798420\n\n[/Example 3]", "temperature": 0.948}, {"few_shots": [{"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 873, "completion_tokens": 282, "completion": "Prime Factorization: Create a function that returns a sorted list of prime factors of a given positive integer.\n\n###Code:\n\ndef primeFactors(n: int) -> list:\n    factors = []\n    # Divide by 2 until n is odd\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # n is now odd, check for odd factors starting from 3\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    # If n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return factors\n\n###Testcases:\n\nassert primeFactors(2) == [2]\nassert primeFactors(3) == [3]\nassert primeFactors(4) == [2, 2]\nassert primeFactors(18) == [2, 3, 3]\nassert primeFactors(35) == [5, 7]\nassert primeFactors(100) == [2, 2, 5, 5]\nassert primeFactors(101) == [101]\nassert primeFactors(360) == [2, 2, 2, 3, 3, 5]\n\n[/Example 3]", "temperature": 0.759}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1563, "completion_tokens": 619, "completion": "Find the Derivative: Create a function that returns the derivative of a polynomial as a string given the polynomial in the standard mathematical format. The polynomial will be given as a string, and the function should return the derivative also as a string. The coefficients and powers of the polynomial term are separated by 'x's and the terms are separated by '+' or '-'.\n\nFor example, the derivative of \"3x^2\" is \"6x\", and the derivative of \"5x^4 - 2x^3 + 7x\" is \"20x^3 - 6x^2 + 7\".\n\nIf the polynomial has a constant term, it should be skipped in the derivative. If the polynomial term has a power of 1, the power should not be included in the derivative.\n\n###Code: \n\nimport re\n\ndef findDerivative(poly: str) -> str:\n    def derive(coeff: int, power: int) -> str:\n        if power == 1:\n            return str(coeff)\n        if power == 0:\n            return \"\"\n        return str(coeff * power) + \"x\" + (\"\" if power == 2 else \"^\" + str(power - 1))\n\n    # Split the polynomial into terms, handling both plus and minus\n    terms = re.findall(r'[+-]?\\s*\\d*x\\^?\\d*', poly)\n    \n    derivatives = []\n    \n    for term in terms:\n        term = term.replace(\" \", \"\")  # Remove spaces\n        if 'x' in term:\n            parts = term.split('x')\n            coeff = int(parts[0]) if parts[0] and parts[0] not in '+-' else 1 * (-1 if parts[0] == '-' else 1)\n            power = int(parts[1][1:]) if len(parts) > 1 and parts[1] else 1\n            derived_term = derive(coeff, power)\n            if derived_term:\n                derivatives.append(derived_term)\n\n    return \" + \".join(derivatives).replace(\"+ -\", \"- \")\n\n###Testcases: \n\nassert findDerivative(\"3x^2\") == \"6x\"\nassert findDerivative(\"5x^4 - 2x^3 + 7x\") == \"20x^3 - 6x^2 + 7\"\nassert findDerivative(\"-6x^5 + 3x - 2\") == \"-30x^4 + 3\"\nassert findDerivative(\"10\") == \"\"\nassert findDerivative(\"x^3 + 2x^2 - x\") == \"3x^2 + 4x - 1\"\nassert findDerivative(\"-4x^2 + 16x\") == \"-8x + 16\"\nassert findDerivative(\"12x^7 - 5x^5 + 3x^2 - 2x\") == \"84x^6 - 25x^4 + 6x - 2\"\n\n[/Example 3]", "temperature": 0.927}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1157, "completion_tokens": 213, "completion": "Prime Factorization: Write a function that takes an integer n and returns its prime factors as a list. The prime factors should be listed in ascending order.\n\n###Code:\n\ndef prime_factors(n: int) -> list:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n###Testcases:\n\nassert prime_factors(60) == [2, 2, 3, 5]\nassert prime_factors(13) == [13]\nassert prime_factors(100) == [2, 2, 5, 5]\nassert prime_factors(29) == [29]\nassert prime_factors(2) == [2]\nassert prime_factors(360) == [2, 2, 2, 3, 3, 5]\nassert prime_factors(1) == []\n\n[/Example 3]", "temperature": 0.668}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1333, "completion_tokens": 389, "completion": "Angle Between Hands of a Clock: Given two numbers, hour and minutes, calculate the smaller angle (in degrees) formed between the hour and the minute hand on a clock. The function should return the angle in degrees as a floating-point value.\n\nNote:\n\nThe hour hand of a 12-hour clock turns 360 degrees in 12 hours or 0.5 degrees per minute.\nThe minute hand of a clock turns 360 degrees in 60 minutes or 6 degrees per minute.\n\n###Code:\n\ndef clockAngle(hour: int, minutes: int) -> float:\n    hour %= 12  # Convert 24-hour format to 12-hour format if needed\n    # Calculate the angles moved by hour and minute hands\n    hour_angle = (hour * 60 + minutes) * 0.5\n    minute_angle = minutes * 6\n    # Calculate the absolute difference between the two angles\n    angle = abs(hour_angle - minute_angle)\n    # Find the smallest angle (the angle could be > 180 degrees)\n    angle = min(360 - angle, angle)\n    return angle\n\n###Testcases: \n\nassert abs(clockAngle(3, 15) - 7.5) < 1e-9\nassert abs(clockAngle(12, 30) - 165) < 1e-9\nassert abs(clockAngle(9, 0) - 90) < 1e-9\nassert abs(clockAngle(6, 0) - 180) < 1e-9\nassert abs(clockAngle(12, 0) - 0) < 1e-9\nassert abs(clockAngle(1, 57) - 76.5) < 1e-9\nassert abs(clockAngle(12, 45) - 112.5) < 1e-9\n\n[/Example 3]", "temperature": 0.929}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1178, "completion_tokens": 234, "completion": "Palindrome Number: Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward. Your function should return `True` if the number is a palindrome, and `False` otherwise.\n\nNote: Negative numbers are not considered as palindromes due to the negative sign.\n\n###Code: \n\ndef isPalindrome(x: int) -> bool:\n    if x < 0:\n        return False\n    original = x\n    reversed_number = 0\n    while x > 0:\n        reversed_number = reversed_number * 10 + x % 10\n        x = x // 10\n    return original == reversed_number\n\n###Testcases: \n\nassert isPalindrome(121) == True\nassert isPalindrome(-121) == False\nassert isPalindrome(10) == False\nassert isPalindrome(0) == True\nassert isPalindrome(1234321) == True\nassert isPalindrome(12344321) == True\nassert isPalindrome(1) == True\nassert isPalindrome(12321) == True\nassert isPalindrome(123321) == True\n\n[/Example 3]", "temperature": 0.897}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1137, "completion_tokens": 193, "completion": "Maximum Product of Three Numbers: Given an integer array nums, find three numbers whose product is maximum and return the maximum product.\n\n###Code: \n\nfrom typing import List\n\ndef maximumProduct(nums: List[int]) -> int:\n    nums.sort()\n    return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])\n\n###Testcases: \n\nassert maximumProduct([1,2,3])==6\nassert maximumProduct([1,2,3,4])==24\nassert maximumProduct([-1,-2,-3])==(-1)*(-2)*(-3)\nassert maximumProduct([-100,-98,-1,2,3,4])==39200\nassert maximumProduct([-1,1,0,2])==0\nassert maximumProduct([1,1000,1000,2,3])==(1000*1000*3)\n\n[/Example 3]", "temperature": 0.809}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 944, "total_tokens": 1188, "completion_tokens": 244, "completion": "Calculate the Square Root: Implement a function to calculate the square root of a non-negative integer. Given an integer x, return the square root of x. If the square root is not an integer, return the integer part (truncate the fractional part).\n\n###Code: \n\ndef mySqrt(x: int) -> int:\n    if x < 2:\n        return x\n    \n    left, right = 2, x // 2\n    \n    while left <= right:\n        mid = (left + right) // 2\n        num = mid * mid\n        if num < x:\n            left = mid + 1\n        elif num > x:\n            right = mid - 1\n        else:\n            return mid\n    \n    return right\n\n###Testcases: \n\nassert mySqrt(4) == 2\nassert mySqrt(8) == 2\nassert mySqrt(1) == 1\nassert mySqrt(0) == 0\nassert mySqrt(16) == 4\nassert mySqrt(14) == 3\nassert mySqrt(2147395600) == 46340\n\n[/Example 3]", "temperature": 0.714}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1351, "completion_tokens": 440, "completion": "Island Perimeter: You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water. The grid cells are square with side length 1. The island doesn't have lakes, meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1.\n\nWrite a function to calculate the perimeter of the island.\n\n###Code:\n\nfrom typing import List\n\ndef islandPerimeter(grid: List[List[int]]) -> int:\n    rows, cols = len(grid), len(grid[0])\n    perimeter = 0\n    \n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] == 1:\n                perimeter += 4\n                if r > 0 and grid[r - 1][c] == 1:  # up\n                    perimeter -= 2\n                if c > 0 and grid[r][c - 1] == 1:  # left\n                    perimeter -= 2\n    return perimeter\n\n###Testcases:\n\nassert islandPerimeter([[0,1,0,0],\n                        [1,1,1,0],\n                        [0,1,0,0],\n                        [1,1,0,0]]) == 16\n\nassert islandPerimeter([[1]]) == 4\nassert islandPerimeter([[1,0]]) == 4\nassert islandPerimeter([[1,1],\n                        [1,1]]) == 8\nassert islandPerimeter([[1,0,1],\n                        [0,1,0],\n                        [1,0,1]]) == 12\nassert islandPerimeter([[0,1,1,0],\n                        [1,1,0,0],\n                        [0,1,1,0],\n                        [0,0,0,0]]) == 14\nassert islandPerimeter([[0,0,0,0],\n                        [0,1,1,0],\n                        [0,1,1,0],\n                        [0,0,0,0]]) == 8\n\n[/Example 3]", "temperature": 0.701}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1240, "completion_tokens": 329, "completion": "Prime Arrangement: Return the number of permutations of the first n positive integers, so that prime numbers are at prime indices (1-indexed.)\n\n(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than itself.)\n\nSince the answer may be large, return the answer modulo 10^9 + 7.\n\n###Code: \n\nfrom math import factorial\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef countPrimes(n: int) -> int:\n    return sum(is_prime(i) for i in range(1, n+1))\n\ndef primeArrangement(n: int) -> int:\n    MOD = 10**9 + 7\n    primes = countPrimes(n)\n    return factorial(primes) * factorial(n - primes) % MOD\n\n###Testcases: \n\nassert primeArrangement(5)==12\nassert primeArrangement(1)==1\nassert primeArrangement(100)==682289015\nassert primeArrangement(2)==1\nassert primeArrangement(3)==2\nassert primeArrangement(10)==17280\nassert primeArrangement(20)==6375600\nassert primeArrangement(30)==94155717\nassert primeArrangement(50)==418604687\nassert primeArrangement(75)==189498660\n\n[/Example 3]", "temperature": 0.742}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1194, "completion_tokens": 283, "completion": "Find All Duplicates in an Array: Given an integer array nums of size n where all the elements of nums are in the range [1, n] inclusive and each integer appears once or twice, return an array of all the integers that appears twice.\n\nYou must write an algorithm that runs in O(n) time and uses only constant extra space.\n\n###Code:\n\n```python\nfrom typing import List\n\ndef findDuplicates(nums: List[int]) -> List[int]:\n    duplicates = []\n    for num in nums:\n        if nums[abs(num) - 1] < 0:\n            duplicates.append(abs(num))\n        else:\n            nums[abs(num) - 1] *= -1\n    return duplicates\n```\n\n###Testcases:\n\n```python\nassert findDuplicates([4,3,2,7,8,2,3,1]) == [2,3]\nassert findDuplicates([1,1,2]) == [1]\nassert findDuplicates([1]) == []\nassert findDuplicates([2,2]) == [2]\nassert findDuplicates([10,2,5,10,9,1,1,4,3,7]) == [10,1]\nassert findDuplicates([5,4,6,7,9,3,10,9,5,6]) == [5,6,9]\n```\n\n[/Example 3]", "temperature": 0.732}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1283, "completion_tokens": 372, "completion": "Prime Number of Set Bits in Binary Representation: Given two integers left and right, find the count of numbers in the range [left, right] (inclusive) having a prime number of set bits in their binary representation.\n\n(Recall that the number of set bits an integer has is the number of 1s present when written in binary. For example, the binary representation of 21 is 10101, which contains 3 set bits. Also, 1 is not a prime number.)\n\n###Code: \n\ndef countPrimeSetBits(left: int, right: int) -> int:\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(left, right + 1):\n        if is_prime(bin(i).count('1')):\n            count += 1\n    return count\n\n###Testcases: \n\nassert countPrimeSetBits(6, 10) == 4\nassert countPrimeSetBits(10, 15) == 5\nassert countPrimeSetBits(842, 888) == 23\nassert countPrimeSetBits(1, 1) == 0\nassert countPrimeSetBits(1, 2) == 1\nassert countPrimeSetBits(14, 19) == 6\nassert countPrimeSetBits(0, 0) == 0\nassert countPrimeSetBits(10, 11) == 2\nassert countPrimeSetBits(289, 345) == 23\nassert countPrimeSetBits(560, 584) == 15\n\n[/Example 3]", "temperature": 0.916}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1269, "completion_tokens": 358, "completion": "Prime Number of Set Bits in Binary Representation: Given two integers left and right, return the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation.\n\n(Recall that the number of set bits an integer has is the number of 1s present when written in binary. For example, 21 written in binary is 10101 which has 3 set bits.)\n\n###Code: \n\ndef countPrimeSetBits(left: int, right: int) -> int:\n    def isPrime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(left, right + 1):\n        if isPrime(bin(i).count('1')):\n            count += 1\n    return count\n\n###Testcases: \n\nassert countPrimeSetBits(6, 10) == 4\nassert countPrimeSetBits(10, 15) == 5\nassert countPrimeSetBits(842, 888) == 23\nassert countPrimeSetBits(1, 2) == 1\nassert countPrimeSetBits(5, 10) == 5\nassert countPrimeSetBits(11, 19) == 5\nassert countPrimeSetBits(289, 349) == 21\nassert countPrimeSetBits(15, 15) == 0\nassert countPrimeSetBits(16, 16) == 1\nassert countPrimeSetBits(567, 607) == 15\n\n[/Example 3]", "temperature": 0.75}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 911, "total_tokens": 1343, "completion_tokens": 432, "completion": "Evaluate Reverse Polish Notation: Evaluate the value of an arithmetic expression in Reverse Polish Notation.\n\nValid operators are +, -, *, and /. Each operand may be an integer or another expression. Note that division between two integers should truncate toward zero.\n\nIt is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.\n\n###Code:\n\nfrom typing import List\n\ndef evalRPN(tokens: List[str]) -> int:\n    stack = []\n    operators = {\n        '+': lambda a, b: a + b,\n        '-': lambda a, b: a - b,\n        '*': lambda a, b: a * b,\n        '/': lambda a, b: int(a / b),  # Python division operator behaves differently for negative values\n    }\n    \n    for token in tokens:\n        if token in operators:\n            b = stack.pop()\n            a = stack.pop()\n            operation = operators[token]\n            stack.append(operation(a, b))\n        else:\n            stack.append(int(token))\n    \n    return stack[0]\n\n###Testcases:\n\nassert evalRPN([\"2\", \"1\", \"+\", \"3\", \"*\"]) == 9\nassert evalRPN([\"4\", \"13\", \"5\", \"/\", \"+\"]) == 6\nassert evalRPN([\"10\", \"6\", \"9\", \"3\", \"+\", \"-11\", \"*\", \"/\", \"*\", \"17\", \"+\", \"5\", \"+\"]) == 22\nassert evalRPN([\"3\", \"11\", \"+\", \"5\", \"-\"]) == 9\nassert evalRPN([\"4\", \"2\", \"/\", \"2\", \"/\"]) == 1\nassert evalRPN([\"4\", \"-2\", \"/\", \"-2\", \"/\"]) == 1\nassert evalRPN([\"2\", \"3\", \"11\", \"+\", \"*\", \"5\", \"-\"]) == 27\nassert evalRPN([\"2\", \"3\", \"*\", \"5\", \"4\", \"*\", \"+\", \"9\", \"-\"]) == 17\n\n[/Example 3]", "temperature": 0.819}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1220, "completion_tokens": 317, "completion": "Calculate Pi using Leibniz's Formula: Write a function that calculates an approximation of Pi using the Leibniz formula. The function should take one integer argument, `n`, which determines the number of terms in the series to include in the approximation (the more terms, the more accurate the approximation). The Leibniz formula for Pi is given by:\n\n\u03c0 = 4 * (1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 + ...)\n\nThe sign alternates between addition and subtraction for each subsequent term in the series.\n\n###Code: \n\ndef calculate_pi(n: int) -> float:\n    pi = 0\n    for i in range(n):\n        term = (-1)**i / (2 * i + 1)\n        pi += term\n    pi *= 4\n    return pi\n\n###Testcases: \n\nassert abs(calculate_pi(10) - 3.0418396189) < 0.0001\nassert abs(calculate_pi(100) - 3.1315929036) < 0.0001\nassert abs(calculate_pi(1000) - 3.1405926538) < 0.0001\nassert abs(calculate_pi(10000) - 3.1414926536) < 0.0001\nassert abs(calculate_pi(100000) - 3.1415826536) < 0.0001\n\n[/Example 3]", "temperature": 0.735}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1213, "completion_tokens": 310, "completion": "Prime Arrangements: Return the number of permutations of the first n positive integers such that prime numbers are at prime indices (1-indexed.)\n\n(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two smaller positive integers. Both 1 and n do not need to be prime.)\n\nThe answer might be large, so return it modulo 10^9 + 7.\n\n###Code: \n\nfrom math import factorial\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_arrangements(n: int) -> int:\n    prime_count = sum(is_prime(i) for i in range(1, n + 1))\n    non_prime_count = n - prime_count\n    MOD = 10**9 + 7\n    return (factorial(prime_count) * factorial(non_prime_count)) % MOD\n\n###Testcases: \n\nassert prime_arrangements(5) == 12\nassert prime_arrangements(100) == 682289015\nassert prime_arrangements(1) == 1\nassert prime_arrangements(2) == 1\nassert prime_arrangements(3) == 2\nassert prime_arrangements(10) == 17280\n\n[/Example 3]", "temperature": 0.634}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1108, "completion_tokens": 205, "completion": "Fibonacci Number: Given a non-negative integer n, write a function that returns the nth Fibonacci number.\n\nThe Fibonacci sequence is a sequence of numbers in which each number after the first two is the sum of the two preceding ones. By definition, the first two numbers in the Fibonacci sequence are 0 and 1, respectively.\n\n###Code: \n\ndef fibonacci(n: int) -> int:\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n###Testcases: \n\nassert fibonacci(0) == 0\nassert fibonacci(1) == 1\nassert fibonacci(2) == 1\nassert fibonacci(3) == 2\nassert fibonacci(4) == 3\nassert fibonacci(5) == 5\nassert fibonacci(6) == 8\nassert fibonacci(10) == 55\nassert fibonacci(20) == 6765\n\n[/Example 3]", "temperature": 0.905}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1232, "completion_tokens": 329, "completion": "Pythagorean Triples: Given an array of integers, find out how many distinct Pythagorean triples are present. A Pythagorean triple consists of three positive integers a, b, and c, such that a^2 + b^2 = c^2. The integers in the triple are not required to be in any particular order.\n\n###Code:\n\nfrom typing import List\nimport collections\n\ndef pythagoreanTriples(nums: List[int]) -> int:\n    count = 0\n    nums.sort()\n    squares = collections.Counter([x*x for x in nums])\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if squares[nums[i] * nums[i] + nums[j] * nums[j]]:\n                count += 1\n    return count\n\n###Testcases:\n\nassert pythagoreanTriples([3, 1, 4, 6, 5]) == 1\nassert pythagoreanTriples([10, 4, 6, 12, 5]) == 1\nassert pythagoreanTriples([8, 6, 10, 5, 15]) == 1\nassert pythagoreanTriples([7, 24, 25, 10, 15]) == 1\nassert pythagoreanTriples([12, 35, 37, 30, 5]) == 0\nassert pythagoreanTriples([13, 84, 85, 36, 77, 5]) == 1\n\n[/Example 3]", "temperature": 0.822}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1168, "completion_tokens": 265, "completion": "Find the Kth Positive Missing Number: Given an array arr of positive integers sorted in a strictly increasing order, and an integer k, find the kth positive integer that is missing from this array.\n\n###Code: \n\nfrom typing import List\ndef findKthPositive(arr: List[int], k: int) -> int:\n    missing_nums = []\n    current = 1\n    index = 0\n    while len(missing_nums) < k:\n        if index < len(arr) and arr[index] == current:\n            index += 1\n        else:\n            missing_nums.append(current)\n        current += 1\n    return missing_nums[-1]\n\n###Testcases: \n\nassert findKthPositive([2,3,4,7,11], 5) == 9\nassert findKthPositive([1,2,3,4], 2) == 6\nassert findKthPositive([1,3], 1) == 2\nassert findKthPositive([3,10], 2) == 5\nassert findKthPositive([1,5,6,8], 3) == 4\nassert findKthPositive([2,7,11,15], 5) == 6\n\n[/Example 3]", "temperature": 0.688}, {"few_shots": [{"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}, {"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1173, "completion_tokens": 270, "completion": "Missing Number in Arithmetic Progression: Given an array arr that represents elements of an arithmetic progression in order. Unfortunately, one element from the sequence is missing. You need to return the missing number from the sequence.\n\nAn arithmetic progression is a sequence of numbers such that the difference between the consecutive terms is constant.\n\n###Code:\n\nfrom typing import List\n\ndef missingNumber(arr: List[int]) -> int:\n    n = len(arr)\n    common_diff = (arr[-1] - arr[0]) // n\n    for i in range(1, n):\n        if arr[i] - arr[i - 1] != common_diff:\n            return arr[i - 1] + common_diff\n    return arr[0]\n\n###Testcases:\n\nassert missingNumber([5, 7, 11, 13]) == 9\nassert missingNumber([15, 13, 12]) == 14\nassert missingNumber([1, 3, 5, 9, 11]) == 7\nassert missingNumber([0, 60, 80, 100]) == 40\nassert missingNumber([3, 5, 9, 11]) == 7\nassert missingNumber([-5, -1, 3, 7]) == 1\n\n[/Example 3]", "temperature": 0.905}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 803, "completion_tokens": 179, "completion": "Factorial Trailing Zeroes: Given an integer n, return the number of trailing zeroes in n!.\n\nFor example:\n\n5! = 120 -> 1 trailing zero\n10! = 3628800 -> 2 trailing zeroes\n...\n\n###Code: \n\ndef trailingZeroes(n: int) -> int:\n    count = 0\n    while n >= 5:\n        n //= 5\n        count += n\n    return count\n\n###Testcases: \n\nassert trailingZeroes(5) == 1\nassert trailingZeroes(10) == 2\nassert trailingZeroes(15) == 3\nassert trailingZeroes(20) == 4\nassert trailingZeroes(25) == 6\nassert trailingZeroes(100) == 24\nassert trailingZeroes(125) == 31\n\n[/Example 3]", "temperature": 0.737}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 794, "completion_tokens": 170, "completion": "Factorial Trailing Zeroes: Given an integer n, return the number of trailing zeroes in n!.\n\nNote that n! (n factorial) is the product of all positive integers from 1 to n.\n\n###Code:\n\ndef trailingZeroes(n: int) -> int:\n    count = 0\n    while n > 0:\n        n //= 5\n        count += n\n    return count\n\n###Testcases:\n\nassert trailingZeroes(3) == 0\nassert trailingZeroes(5) == 1\nassert trailingZeroes(10) == 2\nassert trailingZeroes(25) == 6\nassert trailingZeroes(50) == 12\nassert trailingZeroes(100) == 24\nassert trailingZeroes(125) == 31\n\n[/Example 3]", "temperature": 0.635}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 928, "completion_tokens": 304, "completion": "Prime Number of Set Bits: Given two integers left and right, return the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation.\n\n(Recall that the number of set bits an integer has is the number of 1s present when written in binary. For example, 21 written in binary is 10101 which has 3 set bits.)\n\n###Code:\n\ndef countPrimeSetBits(left: int, right: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_count = 0\n    for num in range(left, right + 1):\n        set_bits = bin(num).count('1')\n        if is_prime(set_bits):\n            prime_count += 1\n    \n    return prime_count\n\n###Testcases:\n\nassert countPrimeSetBits(6, 10) == 4\nassert countPrimeSetBits(10, 15) == 5\nassert countPrimeSetBits(842, 888) == 23\nassert countPrimeSetBits(20, 30) == 5\nassert countPrimeSetBits(5, 10) == 5\nassert countPrimeSetBits(289, 694) == 130\n\n[/Example 3]", "temperature": 0.692}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 814, "completion_tokens": 190, "completion": "Find the Difference of the Product and Sum of Digits of an Integer: Given an integer num, return the difference between the product of its digits and the sum of its digits.\n\n###Code: \n\ndef subtractProductAndSum(n: int) -> int:\n    product = 1\n    summation = 0\n    while n > 0:\n        digit = n % 10\n        product *= digit\n        summation += digit\n        n //= 10\n    return product - summation\n\n###Testcases: \n\nassert subtractProductAndSum(234) == 15\nassert subtractProductAndSum(4421) == 21\nassert subtractProductAndSum(12345) == 105\nassert subtractProductAndSum(9999) == 5274\nassert subtractProductAndSum(10) == -1\nassert subtractProductAndSum(1) == 0\n\n[/Example 3]", "temperature": 0.793}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 768, "completion_tokens": 144, "completion": "Calculate the Factorial: Given a non-negative integer n, return the factorial of n, which is denoted n! and is the product of all positive integers less than or equal to n.\n\n###Code:\n\ndef factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n###Testcases:\n\nassert factorial(0) == 1\nassert factorial(1) == 1\nassert factorial(5) == 120\nassert factorial(7) == 5040\nassert factorial(10) == 3628800\nassert factorial(13) == 6227020800\n\n[/Example 3]", "temperature": 0.763}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "828013d5-f389-4c8e-8e81-3caf3f2bf40b", "question": "Excel Sheet Column Number: Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n", "examples": "Input: columnTitle = \"A\"\nOutput: 1\nInput: columnTitle = \"ZY\"\nOutput: 701", "link": "https://leetcode.com/problems/excel-sheet-column-number/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def titleToNumber(s: str) -> int:\n    result = 0\n    alpha_map = {chr(i + 65): i + 1 for i in range(26)}\n    n = len(s)\n    for i in range(n):\n        cur_char = s[n - 1 - i]\n        result += (alpha_map[cur_char] * (26 ** i))\n    return result", "asserts": ["assert titleToNumber(\"AB\")==28", "assert titleToNumber(\"AAA\") == 703", "assert titleToNumber(\"ZZZ\") == 18278", "assert titleToNumber(\"BZ\") == 78", "assert titleToNumber(\"CV\") == 100", "assert titleToNumber(\"XFD\") == 16384", "assert titleToNumber(\"Q\") == 17"]}], "category": "Math", "prompt_tokens": 624, "total_tokens": 945, "completion_tokens": 321, "completion": "Prime Factorization: Given an integer n, return a list of integers such that they represent the prime factors of n in ascending order.\n\n###Code: \n\nfrom typing import List\n\ndef primeFactors(n: int) -> List[int]:\n    factors = []\n    # Handle 2 separately to make the main loop odd-only.\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # Check for odd factors from 3 to sqrt(n).\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    # If n is still greater than 2, then n must be a prime number.\n    if n > 2:\n        factors.append(n)\n    return factors\n\n###Testcases: \n\nassert primeFactors(2)==[2]\nassert primeFactors(3)==[3]\nassert primeFactors(4)==[2, 2]\nassert primeFactors(5)==[5]\nassert primeFactors(6)==[2, 3]\nassert primeFactors(8)==[2, 2, 2]\nassert primeFactors(9)==[3, 3]\nassert primeFactors(10)==[2, 5]\nassert primeFactors(60)==[2, 2, 3, 5]\nassert primeFactors(100)==[2, 2, 5, 5]\nassert primeFactors(101)==[101]\n\n[/Example 3]", "temperature": 0.617}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 781, "completion_tokens": 190, "completion": "Power of Three: Given an integer, write a function to determine if it is a power of three.\n\n###Code:\n\ndef isPowerOfThree(n: int) -> bool:\n    if n <= 0:\n        return False\n    while n % 3 == 0:\n        n //= 3\n    return n == 1\n\n###Testcases:\n\nassert isPowerOfThree(27) == True\nassert isPowerOfThree(1) == True\nassert isPowerOfThree(9) == True\nassert isPowerOfThree(0) == False\nassert isPowerOfThree(45) == False\nassert isPowerOfThree(81) == True\nassert isPowerOfThree(-3) == False\nassert isPowerOfThree(243) == True\nassert isPowerOfThree(8) == False\nassert isPowerOfThree(19682) == False\n\n[/Example 3]", "temperature": 0.679}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 925, "completion_tokens": 334, "completion": "Prime Number of Set Bits in Binary Representation: Given two integers left and right, find the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation (i.e., the number of 1s in the binary representation of the number).\n\n(Recall that the number of set bits an integer has is the number of 1s present when written in binary. For example, 21 written in binary is 10101 which has 3 set bits.)\n\n###Code: \n\ndef isPrime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef countPrimeSetBits(left: int, right: int) -> int:\n    return sum(isPrime(bin(x).count('1')) for x in range(left, right + 1))\n\n###Testcases: \n\nassert countPrimeSetBits(6, 10) == 4\nassert countPrimeSetBits(10, 15) == 5\nassert countPrimeSetBits(842, 888) == 23\nassert countPrimeSetBits(1, 1) == 0\nassert countPrimeSetBits(10, 10) == 1\nassert countPrimeSetBits(16, 20) == 0\nassert countPrimeSetBits(567, 607) == 17\nassert countPrimeSetBits(34, 58) == 9\n\n[/Example 3]", "temperature": 0.892}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 874, "completion_tokens": 283, "completion": "Prime Count: Write a function that takes an integer n and returns the count of prime numbers that are less than or equal to n.\n\n###Code: \n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef primeCount(n: int) -> int:\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count\n\n###Testcases: \n\nassert primeCount(10)==4\nassert primeCount(1) == 0\nassert primeCount(100) == 25\nassert primeCount(0) == 0\nassert primeCount(2) == 1\nassert primeCount(19) == 8\nassert primeCount(20) == 8\nassert primeCount(50) == 15\nassert primeCount(1000) == 168\nassert primeCount(5000) == 669\n\n[/Example 3]", "temperature": 0.688}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 965, "completion_tokens": 374, "completion": "Prime Factorization: Given a positive integer n, return its prime factorization in the form of a sorted list of integers, where each integer represents a prime factor of n, and if a prime factor occurs multiple times, it is listed that many times.\n\n###Code: \n\nfrom collections import Counter\n\ndef primeFactors(n: int) -> list:\n    factors = []\n    # Count the number of 2s that divide n\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # n must be odd at this point so a skip of 2 ( i = i + 2) can be used\n    for i in range(3, int(n**0.5)+1, 2):\n        # while i divides n, append i and divide n\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    # Condition if n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return factors\n\n###Testcases: \n\nassert primeFactors(18)==[2, 3, 3]\nassert primeFactors(3) == [3]\nassert primeFactors(13) == [13]\nassert primeFactors(100) == [2, 2, 5, 5]\nassert primeFactors(28) == [2, 2, 7]\nassert primeFactors(210) == [2, 3, 5, 7]\nassert primeFactors(999) == [3, 3, 3, 37]\nassert primeFactors(1024) == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n\n[/Example 3]", "temperature": 0.855}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 951, "completion_tokens": 360, "completion": "Prime Number of Set Bits in Binary Representation: Given two integers left and right, return the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation.\n\n(Recall that the number of set bits an integer has is the number of 1s present when written in binary. For example, 21 written in binary is 10101 which has 3 set bits.)\n\n###Code:\n\ndef isPrime(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef countPrimeSetBits(left: int, right: int) -> int:\n    count = 0\n    for num in range(left, right + 1):\n        if isPrime(bin(num).count('1')):\n            count += 1\n    return count\n\n###Testcases:\n\nassert countPrimeSetBits(6, 10) == 4\nassert countPrimeSetBits(10, 15) == 5\nassert countPrimeSetBits(842, 888) == 23\nassert countPrimeSetBits(1, 2) == 1\nassert countPrimeSetBits(5, 6) == 1\nassert countPrimeSetBits(10, 20) == 6\nassert countPrimeSetBits(100, 200) == 39\nassert countPrimeSetBits(289, 345) == 23\nassert countPrimeSetBits(11, 19) == 5\nassert countPrimeSetBits(50, 100) == 21\n\n[/Example 3]", "temperature": 0.795}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "de168393-5fd5-4856-89e1-a8722feeb70f", "question": "Arranging Coins: You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\n\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": "Input: n = 5\nOutput: 2\nExplanation: Because the 3rd row is incomplete, we return 2.", "link": "https://leetcode.com/problems/arranging-coins/description/", "difficulty": "Easy", "categories": ["Math"], "code": "def arrangeCoins(n: int) -> int:\n    return (int)((2 * n + 0.25)**0.5 - 0.5)", "asserts": ["assert arrangeCoins(8)==3", "assert arrangeCoins(1) == 1", "assert arrangeCoins(10) == 4", "assert arrangeCoins(0) == 0", "assert arrangeCoins(3) == 2", "assert arrangeCoins(21) == 6", "assert arrangeCoins(15) == 5", "assert arrangeCoins(45) == 9", "assert arrangeCoins(100) == 13", "assert arrangeCoins(28) == 7"]}], "category": "Math", "prompt_tokens": 591, "total_tokens": 920, "completion_tokens": 329, "completion": "Prime Factorization: Write a function that takes an integer n and returns its prime factors along with their multiplicities as a list of tuples. Each tuple consists of a prime factor and its corresponding exponent in the factorization.\n\n###Code:\n\nfrom collections import Counter\n\ndef primeFactorization(n: int):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return list(Counter(factors).items())\n\n###Testcases:\n\nassert primeFactorization(18) == [(2, 1), (3, 2)]\nassert primeFactorization(19) == [(19, 1)]\nassert primeFactorization(100) == [(2, 2), (5, 2)]\nassert primeFactorization(101) == [(101, 1)]\nassert primeFactorization(12) == [(2, 2), (3, 1)]\nassert primeFactorization(60) == [(2, 2), (3, 1), (5, 1)]\nassert primeFactorization(210) == [(2, 1), (3, 1), (5, 1), (7, 1)]\nassert primeFactorization(29) == [(29, 1)]\nassert primeFactorization(49) == [(7, 2)]\nassert primeFactorization(1) == [] # Special case: 1 does not have prime factors\n\n[/Example 3]", "temperature": 0.809}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1186, "completion_tokens": 283, "completion": "Calculate Pi: Write a function that approximates the value of Pi by simulating the throwing of darts at a square dartboard with an inscribed circle. The function should use the Monte Carlo method to estimate Pi by randomly generating points within the square and determining how many fall inside the circle.\n\n###Code:\n\nimport random\n\ndef calculate_pi(num_darts):\n    inside_circle = 0\n    for _ in range(num_darts):\n        x, y = random.random(), random.random() # Random point between 0 and 1\n        if x**2 + y**2 <= 1: # Check if the point is inside the circle\n            inside_circle += 1\n    pi_estimate = 4 * inside_circle / num_darts\n    return pi_estimate\n\n###Testcases:\n\n# Since this is a probabilistic method, we cannot assert exact values, so we test if the value is within acceptable range.\nassert 3.10 < calculate_pi(1000) < 3.20\nassert 3.12 < calculate_pi(5000) < 3.18\nassert 3.13 < calculate_pi(10000) < 3.15\nassert 3.13 < calculate_pi(50000) < 3.15\nassert 3.14 < calculate_pi(100000) < 3.15\n\n[/Example 3]", "temperature": 0.729}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1343, "completion_tokens": 440, "completion": "Find Pythagorean Triples: Given an integer `n`, find all distinct Pythagorean triples where a, b, and c are positive integers, a < b < c, and a^2 + b^2 = c^2 with c less than or equal to `n`. A Pythagorean triple is only considered distinct if it cannot be obtained from another by multiplying by a common integer. Return the list of distinct Pythagorean triples in ascending order.\n\n###Code: \n\nfrom typing import List, Tuple\nimport math\n\ndef find_pythagorean_triples(n: int) -> List[Tuple[int, int, int]]:\n    triples = []\n    for b in range(2, n):\n        for a in range(1, b):\n            c = math.sqrt(a*a + b*b)\n            if c.is_integer() and c <= n:\n                triples.append((a, b, int(c)))\n    triples.sort()\n    return triples\n\n###Testcases: \n\nassert find_pythagorean_triples(10) == [(3, 4, 5), (6, 8, 10)]\nassert find_pythagorean_triples(15) == [(3, 4, 5), (5, 12, 13), (6, 8, 10), (9, 12, 15)]\nassert find_pythagorean_triples(5) == [(3, 4, 5)]\nassert find_pythagorean_triples(20) == [(3, 4, 5), (5, 12, 13), (6, 8, 10), (8, 15, 17), (9, 12, 15)]\nassert find_pythagorean_triples(25) == [(3, 4, 5), (5, 12, 13), (6, 8, 10), (7, 24, 25), (8, 15, 17), (9, 12, 15), (12, 16, 20), (15, 20, 25)]\n\n[/Example 3]", "temperature": 0.802}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1142, "completion_tokens": 239, "completion": "Perfect Squares: Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.\n\n###Code:\n\nimport math\ndef numSquares(n: int) -> int:\n    # Four-square and three-square theorems.\n    while n % 4 == 0:\n        n //= 4\n    if n % 8 == 7:\n        return 4\n\n    for a in range(int(math.sqrt(n)) + 1):\n        b = int(math.sqrt(n - a*a))\n        if a*a + b*b == n:\n            return (1 if a > 0 else 0) + (1 if b > 0 else 0)\n\n    return 3\n\n###Testcases:\n\nassert numSquares(12) == 3\nassert numSquares(13) == 2\nassert numSquares(1) == 1\nassert numSquares(18) == 2\nassert numSquares(23) == 4\nassert numSquares(43) == 3\n\n[/Example 3]", "temperature": 0.643}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1184, "completion_tokens": 281, "completion": "Perfect Squares: Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.\n\n###Code: \n\nimport math\ndef numSquares(n: int) -> int:\n    # The list dp stores the least number of perfect square numbers\n    # which sum to i. Note that dp[0] is 0.\n    dp = [float('inf')] * (n+1)\n    dp[0] = 0\n    \n    # Precompute the square numbers less than or equal to n\n    squares = [i**2 for i in range(1, int(math.sqrt(n)) + 1)]\n    \n    for i in range(1, n + 1):\n        for square in squares:\n            if i >= square:\n                dp[i] = min(dp[i], dp[i - square] + 1)\n            else:\n                break\n    return dp[n]\n\n###Testcases: \n\nassert numSquares(1) == 1\nassert numSquares(12) == 3\nassert numSquares(13) == 2\nassert numSquares(26) == 2\nassert numSquares(100) == 1\nassert numSquares(9999) == 4\n\n[/Example 3]", "temperature": 0.851}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1142, "completion_tokens": 239, "completion": "Prime Factorization: Write a function that takes an integer n and returns its prime factorization as a list of integers, where each integer is a prime factor and the list is sorted in ascending order. If the input number is 1 or a prime number, the list should contain just the number itself.\n\n###Code:\n\ndef primeFactorization(n: int) -> list:\n    factors = []\n    divisor = 2\n    while n >= divisor**2:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    factors.append(n)\n    return factors\n\n###Testcases:\n\nassert primeFactorization(2) == [2]\nassert primeFactorization(100) == [2, 2, 5, 5]\nassert primeFactorization(37) == [37]\nassert primeFactorization(1) == [1]\nassert primeFactorization(84) == [2, 2, 3, 7]\nassert primeFactorization(360) == [2, 2, 2, 3, 3, 5]\n\n[/Example 3]", "temperature": 0.623}, {"few_shots": [{"author": "Hafeez", "UUID": "22847d55-ac87-410b-956b-009096af4c77", "question": "Consecutive Numbers Sum: Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": "Input: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "link": "https://leetcode.com/problems/consecutive-numbers-sum/description/", "difficulty": "Hard", "categories": ["Math"], "code": "import math\ndef consecutiveNumbersSum(N: int) -> int:\n    count = 0\n    upper_limit = math.ceil((2 * N + 0.25)**0.5 - 0.5) + 1\n    for k in range(1, upper_limit):\n        if (N - k * (k + 1) // 2) % k == 0:\n            count += 1\n    return count", "asserts": ["assert consecutiveNumbersSum(9)==3", "assert consecutiveNumbersSum(1) == 1", "assert consecutiveNumbersSum(10) == 2", "assert consecutiveNumbersSum(28) == 2", "assert consecutiveNumbersSum(100) == 3", "assert consecutiveNumbersSum(9876) == 4"]}, {"author": "Hafeez", "UUID": "6ceae436-ff42-4122-a163-cc19372ef773", "question": "Squirrel Simulation: You are given two integers height and width representing a garden of size height x width. You are also given:\n\nan array tree where tree = [treer, treec] is the position of the tree in the garden,\nan array squirrel where squirrel = [squirrelr, squirrelc] is the position of the squirrel in the garden,\nand an array nuts where nuts[i] = [nutir, nutic] is the position of the ith nut in the garden.\nThe squirrel can only take at most one nut at one time and can move in four directions: up, down, left, and right, to the adjacent cell.\n\nReturn the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one.\n\nThe distance is the number of moves.", "examples": "Input: height = 5, width = 7, tree = [2,2], squirrel = [4,4], nuts = [[3,0], [2,5]]\nOutput: 12\nExplanation: The squirrel should go to the nut at [2, 5] first to achieve a minimal distance.", "link": "https://leetcode.com/problems/squirrel-simulation/description/", "difficulty": "Medium", "categories": ["Math"], "code": "from typing import List\ndef minDistance(height: int, width: int, tree: List[int], squirrel: List[int], nuts: List[List[int]]) -> int:\n        firstPath = float('-inf')\n        total_dist = 0\n        for nut in nuts:\n            dist_to_Sq = abs(squirrel[0]-nut[0])+abs(squirrel[1]-nut[1])\n            dist_to_Tr = abs(tree[0]-nut[0])+abs(tree[1]-nut[1])\n            if (dist_to_Tr-dist_to_Sq)>firstPath:\n                firstPath = dist_to_Tr-dist_to_Sq\n            total_dist+=2*dist_to_Tr\n        total_dist = total_dist - firstPath\n        return total_dist", "asserts": ["assert minDistance(1,3, [0,1], [0,0], [[0,2]])==3", "assert minDistance(5, 5, [2, 2], [0, 0], [[0, 1], [1, 3], [3, 4], [4, 2]]) == 18", "assert minDistance(6, 6, [1, 1], [5, 5], [[1, 2], [2, 2], [3, 3]]) == 14", "assert minDistance(2, 2, [0, 0], [1, 1], [[0, 1]]) == 2", "assert minDistance(3, 3, [0, 0], [2, 2], [[1, 1], [2, 0]]) == 8"]}], "category": "Math", "prompt_tokens": 903, "total_tokens": 1286, "completion_tokens": 383, "completion": "Calculate the Surface Area of a 3D Shape: A 3D shape is represented by a grid-like structure in the 3D space where each cell on this grid is a unit cube, and the grid is connected such that the cubes are attached face to face. Given a 2D grid of positive integers, where each grid[i][j] represents the number of unit cubes stacked at the cell (i, j), calculate the total surface area of all the shapes formed.\n\n###Code: \n\nfrom typing import List\ndef surfaceArea(grid: List[List[int]]) -> int:\n    n, m = len(grid), len(grid[0])\n    area = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]:\n                # Each cell contributes 4 sides, plus the top and bottom\n                area += 4 * grid[i][j] + 2\n            # Remove the area of the adjacent sides\n            if i > 0: area -= min(grid[i][j], grid[i-1][j]) * 2\n            if j > 0: area -= min(grid[i][j], grid[i][j-1]) * 2\n    return area\n\n###Testcases: \n\nassert surfaceArea([[2]])==10\nassert surfaceArea([[1,2],[3,4]])==34\nassert surfaceArea([[1,0],[0,2]]) == 16\nassert surfaceArea([[1,1,1],[1,0,1],[1,1,1]]) == 32\nassert surfaceArea([[2,2,2],[2,1,2],[2,2,2]]) == 46\nassert surfaceArea([[3,3,3],[3,4,5],[5,0,4]]) == 98\n\n[/Example 3]", "temperature": 0.93}]