[{"few_shots": [{"author": "Karthik", "UUID": "aa471867-aa0d-4e14-ba9b-8e8f537394e4", "question": "Given an integer matrix of odd dimensions (like 3 * 3 or 5 * 5), find the sum of the middle row & column elements. Return the values in an array, with the first element being the row sum and the second element being the column sum", "examples": "Input :  2 5 7\n         3 7 2\n         5 6 9\nOutput : [12,18]\n\nInput :  1 3 5 6 7\n         3 5 3 2 1\n         1 2 3 4 5\n         7 9 2 1 6\n         9 1 5 3 2\nOutput : [15,18]", "link": "https://www.geeksforgeeks.org/sum-middle-row-column-matrix/", "difficulty": "Easy", "categories": ["Matrix"], "code": "def middlesum(mat: list) -> list:\n\n        row_sum = 0\n        col_sum = 0\n        n = len(mat)\n\n        for i in range(n):\n                row_sum += mat[n // 2][i]\n        \n        for i in range(n):\n                col_sum += mat[i][n // 2]\n\n        mid_sum = [row_sum, col_sum]\n        return mid_sum\n        \n        \n", "asserts": ["assert middlesum([[2, 5, 7],[3, 7, 2],[5, 6, 9]]) == [12, 18]", "assert middlesum([[1, 3, 5, 6, 7], [3, 5, 3, 2, 1], [1, 2, 3, 4, 5], [7, 9, 2, 1, 6], [9, 1, 5, 3, 2]]) == [15, 18]", "assert middlesum([[4]]) == [4, 4]", "assert middlesum([[8, 2, 4], [1, 5, 9], [6, 3, 7]]) == [15, 10]", "assert middlesum([[3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3]]) == [15, 15]"]}, {"author": "Karthik", "UUID": "3c29c2a6-0039-4bc9-a4a5-6faea36dfa7e", "question": "Given a matrix of n*n size, the task is to find whether all rows are circular rotations of each other or not. ", "examples": "Input: mat[][] = 1, 2, 3\n                 3, 1, 2\n                 2, 3, 1\nOutput:  Yes\nAll rows are rotated permutation\nof each other.\n\nInput: mat[3][3] = 1, 2, 3\n                   3, 2, 1\n                   1, 3, 2\nOutput:  No\nExplanation : As 3, 2, 1 is not a rotated or \ncircular permutation of 1, 2, 3", "link": "https://geeksforgeeks.org/check-rows-matrix-circular-rotations/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\nMAX = 1000\n\ndef isPermutedMatrix(mat: list) -> bool:\n        \n        n = len(mat)\n        str_cat = \"\"\n        for i in range(n) :\n                str_cat = str_cat + \"-\" + str(mat[0][i])\n\n        str_cat = str_cat + str_cat\n\n        for i in range(1, n) :\n                curr_str = \"\"\n                \n                for j in range(n) :\n                        curr_str = curr_str + \"-\" + str(mat[i][j])\n\n                if (str_cat.find(curr_str)) : \n                        return True\n                        \n        return False\n", "asserts": ["assert isPermutedMatrix([[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]]) == True", "assert isPermutedMatrix([[1, 2, 3], [2, 3, 1], [3, 1, 2]]) == True", "assert isPermutedMatrix([[5, 6], [6, 5]]) == True", "assert isPermutedMatrix([[13, 5, 7, 9], [5, 7, 9, 13], [7, 9, 13, 5], [9, 13, 5, 7]]) == True", "assert isPermutedMatrix([[3, 8], [8, 3]]) == True", "assert isPermutedMatrix([[2, 4, 6, 8], [4, 6, 8, 2], [8, 2, 4, 6], [6, 8, 2, 4]]) == True"]}], "category": "Matrix", "prompt_tokens": 1009, "total_tokens": 1365, "completion_tokens": 356, "completion": "Given a matrix of size n x n, rotate the matrix by 90 degrees clockwise in place.\n\n###Code: \n\ndef rotate(matrix: list) -> None:\n        n = len(matrix)\n        \n        for i in range(n // 2):\n            for j in range(i, n - i - 1):\n                temp = matrix[i][j]\n                matrix[i][j] = matrix[n - 1 - j][i]\n                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j]\n                matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i]\n                matrix[j][n - 1 - i] = temp\n\n\n###Testcases: \n\nmat1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nrotate(mat1)\nassert mat1 == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\nmat2 = [[5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16]]\nrotate(mat2)\nassert mat2 == [[15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11]]\n\nmat3 = [[1]]\nrotate(mat3)\nassert mat3 == [[1]]\n\n[/Example 3]", "temperature": 0.943, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "aa471867-aa0d-4e14-ba9b-8e8f537394e4", "question": "Given an integer matrix of odd dimensions (like 3 * 3 or 5 * 5), find the sum of the middle row & column elements. Return the values in an array, with the first element being the row sum and the second element being the column sum", "examples": "Input :  2 5 7\n         3 7 2\n         5 6 9\nOutput : [12,18]\n\nInput :  1 3 5 6 7\n         3 5 3 2 1\n         1 2 3 4 5\n         7 9 2 1 6\n         9 1 5 3 2\nOutput : [15,18]", "link": "https://www.geeksforgeeks.org/sum-middle-row-column-matrix/", "difficulty": "Easy", "categories": ["Matrix"], "code": "def middlesum(mat: list) -> list:\n\n        row_sum = 0\n        col_sum = 0\n        n = len(mat)\n\n        for i in range(n):\n                row_sum += mat[n // 2][i]\n        \n        for i in range(n):\n                col_sum += mat[i][n // 2]\n\n        mid_sum = [row_sum, col_sum]\n        return mid_sum\n        \n        \n", "asserts": ["assert middlesum([[2, 5, 7],[3, 7, 2],[5, 6, 9]]) == [12, 18]", "assert middlesum([[1, 3, 5, 6, 7], [3, 5, 3, 2, 1], [1, 2, 3, 4, 5], [7, 9, 2, 1, 6], [9, 1, 5, 3, 2]]) == [15, 18]", "assert middlesum([[4]]) == [4, 4]", "assert middlesum([[8, 2, 4], [1, 5, 9], [6, 3, 7]]) == [15, 10]", "assert middlesum([[3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3]]) == [15, 15]"]}, {"author": "Karthik", "UUID": "3c29c2a6-0039-4bc9-a4a5-6faea36dfa7e", "question": "Given a matrix of n*n size, the task is to find whether all rows are circular rotations of each other or not. ", "examples": "Input: mat[][] = 1, 2, 3\n                 3, 1, 2\n                 2, 3, 1\nOutput:  Yes\nAll rows are rotated permutation\nof each other.\n\nInput: mat[3][3] = 1, 2, 3\n                   3, 2, 1\n                   1, 3, 2\nOutput:  No\nExplanation : As 3, 2, 1 is not a rotated or \ncircular permutation of 1, 2, 3", "link": "https://geeksforgeeks.org/check-rows-matrix-circular-rotations/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\nMAX = 1000\n\ndef isPermutedMatrix(mat: list) -> bool:\n        \n        n = len(mat)\n        str_cat = \"\"\n        for i in range(n) :\n                str_cat = str_cat + \"-\" + str(mat[0][i])\n\n        str_cat = str_cat + str_cat\n\n        for i in range(1, n) :\n                curr_str = \"\"\n                \n                for j in range(n) :\n                        curr_str = curr_str + \"-\" + str(mat[i][j])\n\n                if (str_cat.find(curr_str)) : \n                        return True\n                        \n        return False\n", "asserts": ["assert isPermutedMatrix([[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]]) == True", "assert isPermutedMatrix([[1, 2, 3], [2, 3, 1], [3, 1, 2]]) == True", "assert isPermutedMatrix([[5, 6], [6, 5]]) == True", "assert isPermutedMatrix([[13, 5, 7, 9], [5, 7, 9, 13], [7, 9, 13, 5], [9, 13, 5, 7]]) == True", "assert isPermutedMatrix([[3, 8], [8, 3]]) == True", "assert isPermutedMatrix([[2, 4, 6, 8], [4, 6, 8, 2], [8, 2, 4, 6], [6, 8, 2, 4]]) == True"]}], "category": "Matrix", "prompt_tokens": 1009, "total_tokens": 1309, "completion_tokens": 300, "completion": "Given a matrix of size n x n, write a function to rotate the matrix by 90 degrees clockwise in-place.\n\n###Code:\n\n```python\ndef rotateMatrix(matrix: list) -> None:\n    n = len(matrix)\n    # Transpose the matrix\n    for i in range(n):\n        for j in range(i, n):\n            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    # Reverse each row\n    for i in range(n):\n        matrix[i].reverse()\n```\n\n###Testcases:\n\n```python\nmatrix1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nrotateMatrix(matrix1)\nassert matrix1 == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\nmatrix2 = [[5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16]]\nrotateMatrix(matrix2)\nassert matrix2 == [[15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11]]\n```\n\n[/Example 3]", "temperature": 0.712, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "aa471867-aa0d-4e14-ba9b-8e8f537394e4", "question": "Given an integer matrix of odd dimensions (like 3 * 3 or 5 * 5), find the sum of the middle row & column elements. Return the values in an array, with the first element being the row sum and the second element being the column sum", "examples": "Input :  2 5 7\n         3 7 2\n         5 6 9\nOutput : [12,18]\n\nInput :  1 3 5 6 7\n         3 5 3 2 1\n         1 2 3 4 5\n         7 9 2 1 6\n         9 1 5 3 2\nOutput : [15,18]", "link": "https://www.geeksforgeeks.org/sum-middle-row-column-matrix/", "difficulty": "Easy", "categories": ["Matrix"], "code": "def middlesum(mat: list) -> list:\n\n        row_sum = 0\n        col_sum = 0\n        n = len(mat)\n\n        for i in range(n):\n                row_sum += mat[n // 2][i]\n        \n        for i in range(n):\n                col_sum += mat[i][n // 2]\n\n        mid_sum = [row_sum, col_sum]\n        return mid_sum\n        \n        \n", "asserts": ["assert middlesum([[2, 5, 7],[3, 7, 2],[5, 6, 9]]) == [12, 18]", "assert middlesum([[1, 3, 5, 6, 7], [3, 5, 3, 2, 1], [1, 2, 3, 4, 5], [7, 9, 2, 1, 6], [9, 1, 5, 3, 2]]) == [15, 18]", "assert middlesum([[4]]) == [4, 4]", "assert middlesum([[8, 2, 4], [1, 5, 9], [6, 3, 7]]) == [15, 10]", "assert middlesum([[3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3]]) == [15, 15]"]}, {"author": "Karthik", "UUID": "3c29c2a6-0039-4bc9-a4a5-6faea36dfa7e", "question": "Given a matrix of n*n size, the task is to find whether all rows are circular rotations of each other or not. ", "examples": "Input: mat[][] = 1, 2, 3\n                 3, 1, 2\n                 2, 3, 1\nOutput:  Yes\nAll rows are rotated permutation\nof each other.\n\nInput: mat[3][3] = 1, 2, 3\n                   3, 2, 1\n                   1, 3, 2\nOutput:  No\nExplanation : As 3, 2, 1 is not a rotated or \ncircular permutation of 1, 2, 3", "link": "https://geeksforgeeks.org/check-rows-matrix-circular-rotations/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\nMAX = 1000\n\ndef isPermutedMatrix(mat: list) -> bool:\n        \n        n = len(mat)\n        str_cat = \"\"\n        for i in range(n) :\n                str_cat = str_cat + \"-\" + str(mat[0][i])\n\n        str_cat = str_cat + str_cat\n\n        for i in range(1, n) :\n                curr_str = \"\"\n                \n                for j in range(n) :\n                        curr_str = curr_str + \"-\" + str(mat[i][j])\n\n                if (str_cat.find(curr_str)) : \n                        return True\n                        \n        return False\n", "asserts": ["assert isPermutedMatrix([[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]]) == True", "assert isPermutedMatrix([[1, 2, 3], [2, 3, 1], [3, 1, 2]]) == True", "assert isPermutedMatrix([[5, 6], [6, 5]]) == True", "assert isPermutedMatrix([[13, 5, 7, 9], [5, 7, 9, 13], [7, 9, 13, 5], [9, 13, 5, 7]]) == True", "assert isPermutedMatrix([[3, 8], [8, 3]]) == True", "assert isPermutedMatrix([[2, 4, 6, 8], [4, 6, 8, 2], [8, 2, 4, 6], [6, 8, 2, 4]]) == True"]}], "category": "Matrix", "prompt_tokens": 1009, "total_tokens": 1509, "completion_tokens": 500, "completion": "Given a matrix, rotate the matrix by 90 degrees in clockwise direction in-place.\n\n###Code: \n\ndef rotateMatrix(matrix: list) -> None:\n        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(i, n - i - 1):\n                temp = matrix[i][j]\n                matrix[i][j] = matrix[n - 1 - j][i]\n                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j]\n                matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i]\n                matrix[j][n - 1 - i] = temp\n\n\n###Testcases: \n\nmatrix1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nrotateMatrix(matrix1)\nassert matrix1 == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\nmatrix2 = [[5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16]]\nrotateMatrix(matrix2)\nassert matrix2 == [[15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11]]\n\nmatrix3 = [[1]]\nrotateMatrix(matrix3)\nassert matrix3 == [[1]]\n\nmatrix4 = [[1, 2], [3, 4]]\nrotateMatrix(matrix4)\nassert matrix4 == [[3, 1], [4, 2]]\n\nmatrix5 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\nrotateMatrix(matrix5)\nassert matrix5 == [[13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4]]\n\n[/Example 3]", "temperature": 0.745, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "aa471867-aa0d-4e14-ba9b-8e8f537394e4", "question": "Given an integer matrix of odd dimensions (like 3 * 3 or 5 * 5), find the sum of the middle row & column elements. Return the values in an array, with the first element being the row sum and the second element being the column sum", "examples": "Input :  2 5 7\n         3 7 2\n         5 6 9\nOutput : [12,18]\n\nInput :  1 3 5 6 7\n         3 5 3 2 1\n         1 2 3 4 5\n         7 9 2 1 6\n         9 1 5 3 2\nOutput : [15,18]", "link": "https://www.geeksforgeeks.org/sum-middle-row-column-matrix/", "difficulty": "Easy", "categories": ["Matrix"], "code": "def middlesum(mat: list) -> list:\n\n        row_sum = 0\n        col_sum = 0\n        n = len(mat)\n\n        for i in range(n):\n                row_sum += mat[n // 2][i]\n        \n        for i in range(n):\n                col_sum += mat[i][n // 2]\n\n        mid_sum = [row_sum, col_sum]\n        return mid_sum\n        \n        \n", "asserts": ["assert middlesum([[2, 5, 7],[3, 7, 2],[5, 6, 9]]) == [12, 18]", "assert middlesum([[1, 3, 5, 6, 7], [3, 5, 3, 2, 1], [1, 2, 3, 4, 5], [7, 9, 2, 1, 6], [9, 1, 5, 3, 2]]) == [15, 18]", "assert middlesum([[4]]) == [4, 4]", "assert middlesum([[8, 2, 4], [1, 5, 9], [6, 3, 7]]) == [15, 10]", "assert middlesum([[3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3]]) == [15, 15]"]}, {"author": "Karthik", "UUID": "cc621092-1c08-4777-8341-f53f97e7cb4d", "question": "Given a N x N binary matrix (elements in matrix can be either 1 or 0) where each row and column of the matrix is sorted in ascending order, count number of 0s present in it.", "examples": "Input: \n[0, 0, 0, 0, 1]\n[0, 0, 0, 1, 1]\n[0, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n\nOutput: 8\n\n\nInput: \n[0, 0]\n[0, 0]\n\nOutput: 4\n\n\nInput: \n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n\nOutput: 0", "link": "https://www.geeksforgeeks.org/count-zeros-in-a-row-wise-and-column-wise-sorted-matrix/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\ndef countZeroes(mat: list) -> int:\n        \n        N = 5;\n        row = N - 1;\n        col = 0;\n        count = 0;\n\n        while (col < N):\n                while (mat[row][col]):\n                        if (row < 0):\n                                return count;\n                        row = row - 1;\n                count = count + (row + 1);\n                col = col + 1;\n\n        return count\n", "asserts": ["assert countZeroes([[0, 0, 0, 0, 1],[0, 0, 0, 1, 1],[0, 1, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 1, 1]]) == 8", "assert countZeroes([[0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 1", "assert countZeroes([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]) == 25", "assert countZeroes([[0, 0, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 4"]}], "category": "Matrix", "prompt_tokens": 1085, "total_tokens": 1409, "completion_tokens": 324, "completion": "Given a matrix, rotate the matrix 90 degrees clockwise in-place.\n\n###Code: \n\n```python\ndef rotate(matrix: list) -> None:\n        n = len(matrix)\n        \n        # Transpose the matrix\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # Reverse each row\n        for row in matrix:\n            row.reverse()\n        \n```\n\n\n###Testcases: \n\n```python\nmatrix1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nrotate(matrix1)\nassert matrix1 == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\nmatrix2 = [[5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16]]\nrotate(matrix2)\nassert matrix2 == [[15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11]]\n\nmatrix3 = [[1, 2], [3, 4]]\nrotate(matrix3)\nassert matrix3 == [[3, 1], [4, 2]]\n```\n\n[/Example 3]", "temperature": 0.818, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "aa471867-aa0d-4e14-ba9b-8e8f537394e4", "question": "Given an integer matrix of odd dimensions (like 3 * 3 or 5 * 5), find the sum of the middle row & column elements. Return the values in an array, with the first element being the row sum and the second element being the column sum", "examples": "Input :  2 5 7\n         3 7 2\n         5 6 9\nOutput : [12,18]\n\nInput :  1 3 5 6 7\n         3 5 3 2 1\n         1 2 3 4 5\n         7 9 2 1 6\n         9 1 5 3 2\nOutput : [15,18]", "link": "https://www.geeksforgeeks.org/sum-middle-row-column-matrix/", "difficulty": "Easy", "categories": ["Matrix"], "code": "def middlesum(mat: list) -> list:\n\n        row_sum = 0\n        col_sum = 0\n        n = len(mat)\n\n        for i in range(n):\n                row_sum += mat[n // 2][i]\n        \n        for i in range(n):\n                col_sum += mat[i][n // 2]\n\n        mid_sum = [row_sum, col_sum]\n        return mid_sum\n        \n        \n", "asserts": ["assert middlesum([[2, 5, 7],[3, 7, 2],[5, 6, 9]]) == [12, 18]", "assert middlesum([[1, 3, 5, 6, 7], [3, 5, 3, 2, 1], [1, 2, 3, 4, 5], [7, 9, 2, 1, 6], [9, 1, 5, 3, 2]]) == [15, 18]", "assert middlesum([[4]]) == [4, 4]", "assert middlesum([[8, 2, 4], [1, 5, 9], [6, 3, 7]]) == [15, 10]", "assert middlesum([[3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3]]) == [15, 15]"]}, {"author": "Karthik", "UUID": "cc621092-1c08-4777-8341-f53f97e7cb4d", "question": "Given a N x N binary matrix (elements in matrix can be either 1 or 0) where each row and column of the matrix is sorted in ascending order, count number of 0s present in it.", "examples": "Input: \n[0, 0, 0, 0, 1]\n[0, 0, 0, 1, 1]\n[0, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n\nOutput: 8\n\n\nInput: \n[0, 0]\n[0, 0]\n\nOutput: 4\n\n\nInput: \n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n\nOutput: 0", "link": "https://www.geeksforgeeks.org/count-zeros-in-a-row-wise-and-column-wise-sorted-matrix/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\ndef countZeroes(mat: list) -> int:\n        \n        N = 5;\n        row = N - 1;\n        col = 0;\n        count = 0;\n\n        while (col < N):\n                while (mat[row][col]):\n                        if (row < 0):\n                                return count;\n                        row = row - 1;\n                count = count + (row + 1);\n                col = col + 1;\n\n        return count\n", "asserts": ["assert countZeroes([[0, 0, 0, 0, 1],[0, 0, 0, 1, 1],[0, 1, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 1, 1]]) == 8", "assert countZeroes([[0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 1", "assert countZeroes([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]) == 25", "assert countZeroes([[0, 0, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 4"]}], "category": "Matrix", "prompt_tokens": 1085, "total_tokens": 1436, "completion_tokens": 351, "completion": "Given a matrix of size m x n, rotate the matrix by 90 degrees clockwise in-place.\n\n###Code: \n\n```python\ndef rotate(matrix: List[List[int]]) -> None:\n        n = len(matrix[0])\n        for i in range(n // 2 + n % 2):\n            for j in range(n // 2):\n                tmp = [0] * 4\n                row, col = i, j\n                for k in range(4):\n                    tmp[k] = matrix[row][col]\n                    row, col = col, n - 1 - row\n                for k in range(4):\n                    matrix[row][col] = tmp[(k - 1) % 4]\n                    row, col = col, n - 1 - row\n```\n\n###Testcases: \n\n```python\nmatrix1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nrotate(matrix1)\nassert matrix1 == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\nmatrix2 = [[5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16]]\nrotate(matrix2)\nassert matrix2 == [[15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11]]\n```\n\n[/Example 3]", "temperature": 0.661, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "aa471867-aa0d-4e14-ba9b-8e8f537394e4", "question": "Given an integer matrix of odd dimensions (like 3 * 3 or 5 * 5), find the sum of the middle row & column elements. Return the values in an array, with the first element being the row sum and the second element being the column sum", "examples": "Input :  2 5 7\n         3 7 2\n         5 6 9\nOutput : [12,18]\n\nInput :  1 3 5 6 7\n         3 5 3 2 1\n         1 2 3 4 5\n         7 9 2 1 6\n         9 1 5 3 2\nOutput : [15,18]", "link": "https://www.geeksforgeeks.org/sum-middle-row-column-matrix/", "difficulty": "Easy", "categories": ["Matrix"], "code": "def middlesum(mat: list) -> list:\n\n        row_sum = 0\n        col_sum = 0\n        n = len(mat)\n\n        for i in range(n):\n                row_sum += mat[n // 2][i]\n        \n        for i in range(n):\n                col_sum += mat[i][n // 2]\n\n        mid_sum = [row_sum, col_sum]\n        return mid_sum\n        \n        \n", "asserts": ["assert middlesum([[2, 5, 7],[3, 7, 2],[5, 6, 9]]) == [12, 18]", "assert middlesum([[1, 3, 5, 6, 7], [3, 5, 3, 2, 1], [1, 2, 3, 4, 5], [7, 9, 2, 1, 6], [9, 1, 5, 3, 2]]) == [15, 18]", "assert middlesum([[4]]) == [4, 4]", "assert middlesum([[8, 2, 4], [1, 5, 9], [6, 3, 7]]) == [15, 10]", "assert middlesum([[3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3]]) == [15, 15]"]}, {"author": "Karthik", "UUID": "cc621092-1c08-4777-8341-f53f97e7cb4d", "question": "Given a N x N binary matrix (elements in matrix can be either 1 or 0) where each row and column of the matrix is sorted in ascending order, count number of 0s present in it.", "examples": "Input: \n[0, 0, 0, 0, 1]\n[0, 0, 0, 1, 1]\n[0, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n\nOutput: 8\n\n\nInput: \n[0, 0]\n[0, 0]\n\nOutput: 4\n\n\nInput: \n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n\nOutput: 0", "link": "https://www.geeksforgeeks.org/count-zeros-in-a-row-wise-and-column-wise-sorted-matrix/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\ndef countZeroes(mat: list) -> int:\n        \n        N = 5;\n        row = N - 1;\n        col = 0;\n        count = 0;\n\n        while (col < N):\n                while (mat[row][col]):\n                        if (row < 0):\n                                return count;\n                        row = row - 1;\n                count = count + (row + 1);\n                col = col + 1;\n\n        return count\n", "asserts": ["assert countZeroes([[0, 0, 0, 0, 1],[0, 0, 0, 1, 1],[0, 1, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 1, 1]]) == 8", "assert countZeroes([[0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 1", "assert countZeroes([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]) == 25", "assert countZeroes([[0, 0, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 4"]}], "category": "Matrix", "prompt_tokens": 1085, "total_tokens": 1415, "completion_tokens": 330, "completion": "Given a matrix of integers, write a function to rotate the matrix by 90 degrees clockwise. The matrix is represented as a list of lists, and the function should modify the original matrix in place.\n\n###Code: \n\n```python\ndef rotateMatrix(matrix: list) -> None:\n    n = len(matrix)\n    \n    # Transpose the matrix\n    for i in range(n):\n        for j in range(i, n):\n            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n            \n    # Reverse each row\n    for i in range(n):\n        matrix[i].reverse()\n```\n\n###Testcases: \n\n```python\nmatrix1 = [[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]]\nrotateMatrix(matrix1)\nassert matrix1 == [[7, 4, 1],\n                   [8, 5, 2],\n                   [9, 6, 3]]\n\nmatrix2 = [[1, 2, 3, 4],\n           [5, 6, 7, 8],\n           [9, 10, 11, 12],\n           [13, 14, 15, 16]]\nrotateMatrix(matrix2)\nassert matrix2 == [[13, 9, 5, 1],\n                   [14, 10, 6, 2],\n                   [15, 11, 7, 3],\n                   [16, 12, 8, 4]]\n```\n\n[/Example 3]", "temperature": 0.925, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3c29c2a6-0039-4bc9-a4a5-6faea36dfa7e", "question": "Given a matrix of n*n size, the task is to find whether all rows are circular rotations of each other or not. ", "examples": "Input: mat[][] = 1, 2, 3\n                 3, 1, 2\n                 2, 3, 1\nOutput:  Yes\nAll rows are rotated permutation\nof each other.\n\nInput: mat[3][3] = 1, 2, 3\n                   3, 2, 1\n                   1, 3, 2\nOutput:  No\nExplanation : As 3, 2, 1 is not a rotated or \ncircular permutation of 1, 2, 3", "link": "https://geeksforgeeks.org/check-rows-matrix-circular-rotations/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\nMAX = 1000\n\ndef isPermutedMatrix(mat: list) -> bool:\n        \n        n = len(mat)\n        str_cat = \"\"\n        for i in range(n) :\n                str_cat = str_cat + \"-\" + str(mat[0][i])\n\n        str_cat = str_cat + str_cat\n\n        for i in range(1, n) :\n                curr_str = \"\"\n                \n                for j in range(n) :\n                        curr_str = curr_str + \"-\" + str(mat[i][j])\n\n                if (str_cat.find(curr_str)) : \n                        return True\n                        \n        return False\n", "asserts": ["assert isPermutedMatrix([[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]]) == True", "assert isPermutedMatrix([[1, 2, 3], [2, 3, 1], [3, 1, 2]]) == True", "assert isPermutedMatrix([[5, 6], [6, 5]]) == True", "assert isPermutedMatrix([[13, 5, 7, 9], [5, 7, 9, 13], [7, 9, 13, 5], [9, 13, 5, 7]]) == True", "assert isPermutedMatrix([[3, 8], [8, 3]]) == True", "assert isPermutedMatrix([[2, 4, 6, 8], [4, 6, 8, 2], [8, 2, 4, 6], [6, 8, 2, 4]]) == True"]}, {"author": "Karthik", "UUID": "aa471867-aa0d-4e14-ba9b-8e8f537394e4", "question": "Given an integer matrix of odd dimensions (like 3 * 3 or 5 * 5), find the sum of the middle row & column elements. Return the values in an array, with the first element being the row sum and the second element being the column sum", "examples": "Input :  2 5 7\n         3 7 2\n         5 6 9\nOutput : [12,18]\n\nInput :  1 3 5 6 7\n         3 5 3 2 1\n         1 2 3 4 5\n         7 9 2 1 6\n         9 1 5 3 2\nOutput : [15,18]", "link": "https://www.geeksforgeeks.org/sum-middle-row-column-matrix/", "difficulty": "Easy", "categories": ["Matrix"], "code": "def middlesum(mat: list) -> list:\n\n        row_sum = 0\n        col_sum = 0\n        n = len(mat)\n\n        for i in range(n):\n                row_sum += mat[n // 2][i]\n        \n        for i in range(n):\n                col_sum += mat[i][n // 2]\n\n        mid_sum = [row_sum, col_sum]\n        return mid_sum\n        \n        \n", "asserts": ["assert middlesum([[2, 5, 7],[3, 7, 2],[5, 6, 9]]) == [12, 18]", "assert middlesum([[1, 3, 5, 6, 7], [3, 5, 3, 2, 1], [1, 2, 3, 4, 5], [7, 9, 2, 1, 6], [9, 1, 5, 3, 2]]) == [15, 18]", "assert middlesum([[4]]) == [4, 4]", "assert middlesum([[8, 2, 4], [1, 5, 9], [6, 3, 7]]) == [15, 10]", "assert middlesum([[3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3]]) == [15, 15]"]}], "category": "Matrix", "prompt_tokens": 1009, "total_tokens": 1457, "completion_tokens": 448, "completion": "Given a matrix, write a function to rotate the matrix by 90 degrees clockwise. Return the rotated matrix.\n\n###Code: \n\ndef rotateMatrix(matrix: list) -> list:\n    n = len(matrix)\n    result = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            result[j][n-1-i] = matrix[i][j]\n    return result\n\n\n###Testcases: \n\nassert rotateMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\nassert rotateMatrix([[5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16]]) == [[15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11]]\nassert rotateMatrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\nassert rotateMatrix([[1]]) == [[1]]\nassert rotateMatrix([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]) == [[21, 16, 11, 6, 1], [22, 17, 12, 7, 2], [23, 18, 13, 8, 3], [24, 19, 14, 9, 4], [25, 20, 15, 10, 5]]\n\n[/Example 3]", "temperature": 0.779, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3c29c2a6-0039-4bc9-a4a5-6faea36dfa7e", "question": "Given a matrix of n*n size, the task is to find whether all rows are circular rotations of each other or not. ", "examples": "Input: mat[][] = 1, 2, 3\n                 3, 1, 2\n                 2, 3, 1\nOutput:  Yes\nAll rows are rotated permutation\nof each other.\n\nInput: mat[3][3] = 1, 2, 3\n                   3, 2, 1\n                   1, 3, 2\nOutput:  No\nExplanation : As 3, 2, 1 is not a rotated or \ncircular permutation of 1, 2, 3", "link": "https://geeksforgeeks.org/check-rows-matrix-circular-rotations/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\nMAX = 1000\n\ndef isPermutedMatrix(mat: list) -> bool:\n        \n        n = len(mat)\n        str_cat = \"\"\n        for i in range(n) :\n                str_cat = str_cat + \"-\" + str(mat[0][i])\n\n        str_cat = str_cat + str_cat\n\n        for i in range(1, n) :\n                curr_str = \"\"\n                \n                for j in range(n) :\n                        curr_str = curr_str + \"-\" + str(mat[i][j])\n\n                if (str_cat.find(curr_str)) : \n                        return True\n                        \n        return False\n", "asserts": ["assert isPermutedMatrix([[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]]) == True", "assert isPermutedMatrix([[1, 2, 3], [2, 3, 1], [3, 1, 2]]) == True", "assert isPermutedMatrix([[5, 6], [6, 5]]) == True", "assert isPermutedMatrix([[13, 5, 7, 9], [5, 7, 9, 13], [7, 9, 13, 5], [9, 13, 5, 7]]) == True", "assert isPermutedMatrix([[3, 8], [8, 3]]) == True", "assert isPermutedMatrix([[2, 4, 6, 8], [4, 6, 8, 2], [8, 2, 4, 6], [6, 8, 2, 4]]) == True"]}, {"author": "Karthik", "UUID": "aa471867-aa0d-4e14-ba9b-8e8f537394e4", "question": "Given an integer matrix of odd dimensions (like 3 * 3 or 5 * 5), find the sum of the middle row & column elements. Return the values in an array, with the first element being the row sum and the second element being the column sum", "examples": "Input :  2 5 7\n         3 7 2\n         5 6 9\nOutput : [12,18]\n\nInput :  1 3 5 6 7\n         3 5 3 2 1\n         1 2 3 4 5\n         7 9 2 1 6\n         9 1 5 3 2\nOutput : [15,18]", "link": "https://www.geeksforgeeks.org/sum-middle-row-column-matrix/", "difficulty": "Easy", "categories": ["Matrix"], "code": "def middlesum(mat: list) -> list:\n\n        row_sum = 0\n        col_sum = 0\n        n = len(mat)\n\n        for i in range(n):\n                row_sum += mat[n // 2][i]\n        \n        for i in range(n):\n                col_sum += mat[i][n // 2]\n\n        mid_sum = [row_sum, col_sum]\n        return mid_sum\n        \n        \n", "asserts": ["assert middlesum([[2, 5, 7],[3, 7, 2],[5, 6, 9]]) == [12, 18]", "assert middlesum([[1, 3, 5, 6, 7], [3, 5, 3, 2, 1], [1, 2, 3, 4, 5], [7, 9, 2, 1, 6], [9, 1, 5, 3, 2]]) == [15, 18]", "assert middlesum([[4]]) == [4, 4]", "assert middlesum([[8, 2, 4], [1, 5, 9], [6, 3, 7]]) == [15, 10]", "assert middlesum([[3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3]]) == [15, 15]"]}], "category": "Matrix", "prompt_tokens": 1009, "total_tokens": 1349, "completion_tokens": 340, "completion": "Write a function to rotate an n x n matrix by 90 degrees clockwise in place.\n\n###Code: \n\n```python\ndef rotate(matrix: list) -> None:\n    n = len(matrix)\n    for i in range(n // 2):\n        for j in range(i, n - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n - 1 - j][i]\n            matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j]\n            matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i]\n            matrix[j][n - 1 - i] = temp\n```\n\n###Testcases: \n\n```python\nmatrix1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nrotate(matrix1)\nassert matrix1 == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n\nmatrix2 = [[5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16]]\nrotate(matrix2)\nassert matrix2 == [[15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11]]\n```", "temperature": 0.844, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3c29c2a6-0039-4bc9-a4a5-6faea36dfa7e", "question": "Given a matrix of n*n size, the task is to find whether all rows are circular rotations of each other or not. ", "examples": "Input: mat[][] = 1, 2, 3\n                 3, 1, 2\n                 2, 3, 1\nOutput:  Yes\nAll rows are rotated permutation\nof each other.\n\nInput: mat[3][3] = 1, 2, 3\n                   3, 2, 1\n                   1, 3, 2\nOutput:  No\nExplanation : As 3, 2, 1 is not a rotated or \ncircular permutation of 1, 2, 3", "link": "https://geeksforgeeks.org/check-rows-matrix-circular-rotations/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\nMAX = 1000\n\ndef isPermutedMatrix(mat: list) -> bool:\n        \n        n = len(mat)\n        str_cat = \"\"\n        for i in range(n) :\n                str_cat = str_cat + \"-\" + str(mat[0][i])\n\n        str_cat = str_cat + str_cat\n\n        for i in range(1, n) :\n                curr_str = \"\"\n                \n                for j in range(n) :\n                        curr_str = curr_str + \"-\" + str(mat[i][j])\n\n                if (str_cat.find(curr_str)) : \n                        return True\n                        \n        return False\n", "asserts": ["assert isPermutedMatrix([[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]]) == True", "assert isPermutedMatrix([[1, 2, 3], [2, 3, 1], [3, 1, 2]]) == True", "assert isPermutedMatrix([[5, 6], [6, 5]]) == True", "assert isPermutedMatrix([[13, 5, 7, 9], [5, 7, 9, 13], [7, 9, 13, 5], [9, 13, 5, 7]]) == True", "assert isPermutedMatrix([[3, 8], [8, 3]]) == True", "assert isPermutedMatrix([[2, 4, 6, 8], [4, 6, 8, 2], [8, 2, 4, 6], [6, 8, 2, 4]]) == True"]}, {"author": "Karthik", "UUID": "aa471867-aa0d-4e14-ba9b-8e8f537394e4", "question": "Given an integer matrix of odd dimensions (like 3 * 3 or 5 * 5), find the sum of the middle row & column elements. Return the values in an array, with the first element being the row sum and the second element being the column sum", "examples": "Input :  2 5 7\n         3 7 2\n         5 6 9\nOutput : [12,18]\n\nInput :  1 3 5 6 7\n         3 5 3 2 1\n         1 2 3 4 5\n         7 9 2 1 6\n         9 1 5 3 2\nOutput : [15,18]", "link": "https://www.geeksforgeeks.org/sum-middle-row-column-matrix/", "difficulty": "Easy", "categories": ["Matrix"], "code": "def middlesum(mat: list) -> list:\n\n        row_sum = 0\n        col_sum = 0\n        n = len(mat)\n\n        for i in range(n):\n                row_sum += mat[n // 2][i]\n        \n        for i in range(n):\n                col_sum += mat[i][n // 2]\n\n        mid_sum = [row_sum, col_sum]\n        return mid_sum\n        \n        \n", "asserts": ["assert middlesum([[2, 5, 7],[3, 7, 2],[5, 6, 9]]) == [12, 18]", "assert middlesum([[1, 3, 5, 6, 7], [3, 5, 3, 2, 1], [1, 2, 3, 4, 5], [7, 9, 2, 1, 6], [9, 1, 5, 3, 2]]) == [15, 18]", "assert middlesum([[4]]) == [4, 4]", "assert middlesum([[8, 2, 4], [1, 5, 9], [6, 3, 7]]) == [15, 10]", "assert middlesum([[3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3]]) == [15, 15]"]}], "category": "Matrix", "prompt_tokens": 1009, "total_tokens": 1320, "completion_tokens": 311, "completion": "Write a function to transpose a given matrix. The transpose of a matrix is obtained by exchanging the rows and columns. \n\n###Code: \n\ndef transposeMatrix(matrix: list) -> list:\n    transposed = []\n    for i in range(len(matrix[0])):\n        transposed.append([row[i] for row in matrix])\n    return transposed\n\n###Testcases: \n\nassert transposeMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\nassert transposeMatrix([[1, 2, 3, 4], [5, 6, 7, 8]]) == [[1, 5], [2, 6], [3, 7], [4, 8]]\nassert transposeMatrix([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[9, 6, 3], [8, 5, 2], [7, 4, 1]]\nassert transposeMatrix([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert transposeMatrix([[1]]) == [[1]]\n\n[/Example 3]", "temperature": 0.907, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3c29c2a6-0039-4bc9-a4a5-6faea36dfa7e", "question": "Given a matrix of n*n size, the task is to find whether all rows are circular rotations of each other or not. ", "examples": "Input: mat[][] = 1, 2, 3\n                 3, 1, 2\n                 2, 3, 1\nOutput:  Yes\nAll rows are rotated permutation\nof each other.\n\nInput: mat[3][3] = 1, 2, 3\n                   3, 2, 1\n                   1, 3, 2\nOutput:  No\nExplanation : As 3, 2, 1 is not a rotated or \ncircular permutation of 1, 2, 3", "link": "https://geeksforgeeks.org/check-rows-matrix-circular-rotations/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\nMAX = 1000\n\ndef isPermutedMatrix(mat: list) -> bool:\n        \n        n = len(mat)\n        str_cat = \"\"\n        for i in range(n) :\n                str_cat = str_cat + \"-\" + str(mat[0][i])\n\n        str_cat = str_cat + str_cat\n\n        for i in range(1, n) :\n                curr_str = \"\"\n                \n                for j in range(n) :\n                        curr_str = curr_str + \"-\" + str(mat[i][j])\n\n                if (str_cat.find(curr_str)) : \n                        return True\n                        \n        return False\n", "asserts": ["assert isPermutedMatrix([[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]]) == True", "assert isPermutedMatrix([[1, 2, 3], [2, 3, 1], [3, 1, 2]]) == True", "assert isPermutedMatrix([[5, 6], [6, 5]]) == True", "assert isPermutedMatrix([[13, 5, 7, 9], [5, 7, 9, 13], [7, 9, 13, 5], [9, 13, 5, 7]]) == True", "assert isPermutedMatrix([[3, 8], [8, 3]]) == True", "assert isPermutedMatrix([[2, 4, 6, 8], [4, 6, 8, 2], [8, 2, 4, 6], [6, 8, 2, 4]]) == True"]}, {"author": "Karthik", "UUID": "cc621092-1c08-4777-8341-f53f97e7cb4d", "question": "Given a N x N binary matrix (elements in matrix can be either 1 or 0) where each row and column of the matrix is sorted in ascending order, count number of 0s present in it.", "examples": "Input: \n[0, 0, 0, 0, 1]\n[0, 0, 0, 1, 1]\n[0, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n\nOutput: 8\n\n\nInput: \n[0, 0]\n[0, 0]\n\nOutput: 4\n\n\nInput: \n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n\nOutput: 0", "link": "https://www.geeksforgeeks.org/count-zeros-in-a-row-wise-and-column-wise-sorted-matrix/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\ndef countZeroes(mat: list) -> int:\n        \n        N = 5;\n        row = N - 1;\n        col = 0;\n        count = 0;\n\n        while (col < N):\n                while (mat[row][col]):\n                        if (row < 0):\n                                return count;\n                        row = row - 1;\n                count = count + (row + 1);\n                col = col + 1;\n\n        return count\n", "asserts": ["assert countZeroes([[0, 0, 0, 0, 1],[0, 0, 0, 1, 1],[0, 1, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 1, 1]]) == 8", "assert countZeroes([[0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 1", "assert countZeroes([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]) == 25", "assert countZeroes([[0, 0, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 4"]}], "category": "Matrix", "prompt_tokens": 1073, "total_tokens": 1502, "completion_tokens": 429, "completion": "Given a matrix of n x n size, write a function to rotate the matrix by 90 degrees in anti-clockwise direction.\n\n###Code: \n\n```python\ndef rotateMatrix(matrix: list) -> list:\n    n = len(matrix)\n    result = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            result[n - j - 1][i] = matrix[i][j]\n    \n    return result\n```\n\n###Testcases: \n\n```python\nassert rotateMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[3, 6, 9], [2, 5, 8], [1, 4, 7]]\nassert rotateMatrix([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == [[4, 8, 12, 16], [3, 7, 11, 15], [2, 6, 10, 14], [1, 5, 9, 13]]\nassert rotateMatrix([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]) == [[5, 10, 15, 20, 25], [4, 9, 14, 19, 24], [3, 8, 13, 18, 23], [2, 7, 12, 17, 22], [1, 6, 11, 16, 21]]\n```\n\n[/Example 3]", "temperature": 0.696, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3c29c2a6-0039-4bc9-a4a5-6faea36dfa7e", "question": "Given a matrix of n*n size, the task is to find whether all rows are circular rotations of each other or not. ", "examples": "Input: mat[][] = 1, 2, 3\n                 3, 1, 2\n                 2, 3, 1\nOutput:  Yes\nAll rows are rotated permutation\nof each other.\n\nInput: mat[3][3] = 1, 2, 3\n                   3, 2, 1\n                   1, 3, 2\nOutput:  No\nExplanation : As 3, 2, 1 is not a rotated or \ncircular permutation of 1, 2, 3", "link": "https://geeksforgeeks.org/check-rows-matrix-circular-rotations/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\nMAX = 1000\n\ndef isPermutedMatrix(mat: list) -> bool:\n        \n        n = len(mat)\n        str_cat = \"\"\n        for i in range(n) :\n                str_cat = str_cat + \"-\" + str(mat[0][i])\n\n        str_cat = str_cat + str_cat\n\n        for i in range(1, n) :\n                curr_str = \"\"\n                \n                for j in range(n) :\n                        curr_str = curr_str + \"-\" + str(mat[i][j])\n\n                if (str_cat.find(curr_str)) : \n                        return True\n                        \n        return False\n", "asserts": ["assert isPermutedMatrix([[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]]) == True", "assert isPermutedMatrix([[1, 2, 3], [2, 3, 1], [3, 1, 2]]) == True", "assert isPermutedMatrix([[5, 6], [6, 5]]) == True", "assert isPermutedMatrix([[13, 5, 7, 9], [5, 7, 9, 13], [7, 9, 13, 5], [9, 13, 5, 7]]) == True", "assert isPermutedMatrix([[3, 8], [8, 3]]) == True", "assert isPermutedMatrix([[2, 4, 6, 8], [4, 6, 8, 2], [8, 2, 4, 6], [6, 8, 2, 4]]) == True"]}, {"author": "Karthik", "UUID": "cc621092-1c08-4777-8341-f53f97e7cb4d", "question": "Given a N x N binary matrix (elements in matrix can be either 1 or 0) where each row and column of the matrix is sorted in ascending order, count number of 0s present in it.", "examples": "Input: \n[0, 0, 0, 0, 1]\n[0, 0, 0, 1, 1]\n[0, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n\nOutput: 8\n\n\nInput: \n[0, 0]\n[0, 0]\n\nOutput: 4\n\n\nInput: \n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n\nOutput: 0", "link": "https://www.geeksforgeeks.org/count-zeros-in-a-row-wise-and-column-wise-sorted-matrix/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\ndef countZeroes(mat: list) -> int:\n        \n        N = 5;\n        row = N - 1;\n        col = 0;\n        count = 0;\n\n        while (col < N):\n                while (mat[row][col]):\n                        if (row < 0):\n                                return count;\n                        row = row - 1;\n                count = count + (row + 1);\n                col = col + 1;\n\n        return count\n", "asserts": ["assert countZeroes([[0, 0, 0, 0, 1],[0, 0, 0, 1, 1],[0, 1, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 1, 1]]) == 8", "assert countZeroes([[0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 1", "assert countZeroes([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]) == 25", "assert countZeroes([[0, 0, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 4"]}], "category": "Matrix", "prompt_tokens": 1073, "total_tokens": 1361, "completion_tokens": 288, "completion": "Given a matrix of size m x n, write a function to count the number of negative numbers in it. The matrix is sorted in non-increasing order, i.e., all elements in each row are sorted in non-increasing order and similarly all elements in each column are also sorted in non-increasing order.\n\n###Code: \n\n```python\ndef countNegatives(grid: List[List[int]]) -> int:\n    m, n = len(grid), len(grid[0])\n    count = 0\n    i, j = m - 1, 0\n    while i >= 0 and j < n:\n        if grid[i][j] < 0:\n            count += n - j\n            i -= 1\n        else:\n            j += 1\n    return count\n```\n\n###Testcases: \n\n```python\nassert countNegatives([[4, 3, 2, -1], [3, 2, 1, -1], [1, 1, -1, -2], [-1, -1, -2, -3]]) == 8\nassert countNegatives([[3, 2], [1, 0]]) == 0\nassert countNegatives([[1, -1], [-1, -2]]) == 3\nassert countNegatives([[-1]]) == 1\n```\n\n[/Example 3]", "temperature": 0.639, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "3c29c2a6-0039-4bc9-a4a5-6faea36dfa7e", "question": "Given a matrix of n*n size, the task is to find whether all rows are circular rotations of each other or not. ", "examples": "Input: mat[][] = 1, 2, 3\n                 3, 1, 2\n                 2, 3, 1\nOutput:  Yes\nAll rows are rotated permutation\nof each other.\n\nInput: mat[3][3] = 1, 2, 3\n                   3, 2, 1\n                   1, 3, 2\nOutput:  No\nExplanation : As 3, 2, 1 is not a rotated or \ncircular permutation of 1, 2, 3", "link": "https://geeksforgeeks.org/check-rows-matrix-circular-rotations/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\nMAX = 1000\n\ndef isPermutedMatrix(mat: list) -> bool:\n        \n        n = len(mat)\n        str_cat = \"\"\n        for i in range(n) :\n                str_cat = str_cat + \"-\" + str(mat[0][i])\n\n        str_cat = str_cat + str_cat\n\n        for i in range(1, n) :\n                curr_str = \"\"\n                \n                for j in range(n) :\n                        curr_str = curr_str + \"-\" + str(mat[i][j])\n\n                if (str_cat.find(curr_str)) : \n                        return True\n                        \n        return False\n", "asserts": ["assert isPermutedMatrix([[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]]) == True", "assert isPermutedMatrix([[1, 2, 3], [2, 3, 1], [3, 1, 2]]) == True", "assert isPermutedMatrix([[5, 6], [6, 5]]) == True", "assert isPermutedMatrix([[13, 5, 7, 9], [5, 7, 9, 13], [7, 9, 13, 5], [9, 13, 5, 7]]) == True", "assert isPermutedMatrix([[3, 8], [8, 3]]) == True", "assert isPermutedMatrix([[2, 4, 6, 8], [4, 6, 8, 2], [8, 2, 4, 6], [6, 8, 2, 4]]) == True"]}, {"author": "Karthik", "UUID": "cc621092-1c08-4777-8341-f53f97e7cb4d", "question": "Given a N x N binary matrix (elements in matrix can be either 1 or 0) where each row and column of the matrix is sorted in ascending order, count number of 0s present in it.", "examples": "Input: \n[0, 0, 0, 0, 1]\n[0, 0, 0, 1, 1]\n[0, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n\nOutput: 8\n\n\nInput: \n[0, 0]\n[0, 0]\n\nOutput: 4\n\n\nInput: \n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n\nOutput: 0", "link": "https://www.geeksforgeeks.org/count-zeros-in-a-row-wise-and-column-wise-sorted-matrix/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\ndef countZeroes(mat: list) -> int:\n        \n        N = 5;\n        row = N - 1;\n        col = 0;\n        count = 0;\n\n        while (col < N):\n                while (mat[row][col]):\n                        if (row < 0):\n                                return count;\n                        row = row - 1;\n                count = count + (row + 1);\n                col = col + 1;\n\n        return count\n", "asserts": ["assert countZeroes([[0, 0, 0, 0, 1],[0, 0, 0, 1, 1],[0, 1, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 1, 1]]) == 8", "assert countZeroes([[0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 1", "assert countZeroes([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]) == 25", "assert countZeroes([[0, 0, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 4"]}], "category": "Matrix", "prompt_tokens": 1073, "total_tokens": 1447, "completion_tokens": 374, "completion": "Given a matrix of n*m size, the task is to find the saddle point of the matrix. The saddle point is the minimum value in its row and maximum value in its column.\n\n###Code: \n\n\ndef findSaddlePoint(matrix: list) -> list:\n        result = []\n        row_max = []\n        col_min = []\n\n        for row in matrix:\n            row_max.append(max(row))\n\n        for col in range(len(matrix[0])):\n            col_data = [matrix[row][col] for row in range(len(matrix))]\n            col_min.append(min(col_data))\n\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == row_max[i] and matrix[i][j] == col_min[j]:\n                    result.append([i, j])\n\n        return result\n\n\n###Testcases: \n\nassert findSaddlePoint([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[0, 2]]\nassert findSaddlePoint([[5, 2, 3], [4, 5, 6], [7, 8, 5]]) == [[1, 1], [2, 2]]\nassert findSaddlePoint([[1, 2, 3], [4, 5, 6], [7, 8, 5]]) == [[2, 2]]\nassert findSaddlePoint([[1, 2, 3], [4, 5, 6], [0, 8, 9]]) == [[2, 0]]\nassert findSaddlePoint([[1, 2, 3], [4, 3, 6], [7, 8, 9]]) == []\n\n[/Example 3]", "temperature": 0.871, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "cc621092-1c08-4777-8341-f53f97e7cb4d", "question": "Given a N x N binary matrix (elements in matrix can be either 1 or 0) where each row and column of the matrix is sorted in ascending order, count number of 0s present in it.", "examples": "Input: \n[0, 0, 0, 0, 1]\n[0, 0, 0, 1, 1]\n[0, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n\nOutput: 8\n\n\nInput: \n[0, 0]\n[0, 0]\n\nOutput: 4\n\n\nInput: \n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n\nOutput: 0", "link": "https://www.geeksforgeeks.org/count-zeros-in-a-row-wise-and-column-wise-sorted-matrix/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\ndef countZeroes(mat: list) -> int:\n        \n        N = 5;\n        row = N - 1;\n        col = 0;\n        count = 0;\n\n        while (col < N):\n                while (mat[row][col]):\n                        if (row < 0):\n                                return count;\n                        row = row - 1;\n                count = count + (row + 1);\n                col = col + 1;\n\n        return count\n", "asserts": ["assert countZeroes([[0, 0, 0, 0, 1],[0, 0, 0, 1, 1],[0, 1, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 1, 1]]) == 8", "assert countZeroes([[0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 1", "assert countZeroes([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]) == 25", "assert countZeroes([[0, 0, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 4"]}, {"author": "Karthik", "UUID": "aa471867-aa0d-4e14-ba9b-8e8f537394e4", "question": "Given an integer matrix of odd dimensions (like 3 * 3 or 5 * 5), find the sum of the middle row & column elements. Return the values in an array, with the first element being the row sum and the second element being the column sum", "examples": "Input :  2 5 7\n         3 7 2\n         5 6 9\nOutput : [12,18]\n\nInput :  1 3 5 6 7\n         3 5 3 2 1\n         1 2 3 4 5\n         7 9 2 1 6\n         9 1 5 3 2\nOutput : [15,18]", "link": "https://www.geeksforgeeks.org/sum-middle-row-column-matrix/", "difficulty": "Easy", "categories": ["Matrix"], "code": "def middlesum(mat: list) -> list:\n\n        row_sum = 0\n        col_sum = 0\n        n = len(mat)\n\n        for i in range(n):\n                row_sum += mat[n // 2][i]\n        \n        for i in range(n):\n                col_sum += mat[i][n // 2]\n\n        mid_sum = [row_sum, col_sum]\n        return mid_sum\n        \n        \n", "asserts": ["assert middlesum([[2, 5, 7],[3, 7, 2],[5, 6, 9]]) == [12, 18]", "assert middlesum([[1, 3, 5, 6, 7], [3, 5, 3, 2, 1], [1, 2, 3, 4, 5], [7, 9, 2, 1, 6], [9, 1, 5, 3, 2]]) == [15, 18]", "assert middlesum([[4]]) == [4, 4]", "assert middlesum([[8, 2, 4], [1, 5, 9], [6, 3, 7]]) == [15, 10]", "assert middlesum([[3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3]]) == [15, 15]"]}], "category": "Matrix", "prompt_tokens": 1085, "total_tokens": 1464, "completion_tokens": 379, "completion": "Given a matrix of integers, rotate the matrix by 90 degrees in clockwise direction. Return the rotated matrix.\n\n###Code: \n\n```python\ndef rotateMatrix(matrix: list) -> list:\n        n = len(matrix)\n        for i in range(n // 2):\n            for j in range(i, n - i - 1):\n                temp = matrix[i][j]\n                matrix[i][j] = matrix[n - 1 - j][i]\n                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j]\n                matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i]\n                matrix[j][n - 1 - i] = temp\n        return matrix\n```\n\n###Testcases: \n\n```python\nassert rotateMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\nassert rotateMatrix([[5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16]]) == [[15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11]]\nassert rotateMatrix([[1, 2], [3, 4]]) == [[3, 1], [4, 2]]\nassert rotateMatrix([[1]]) == [[1]]\n```\n\n[/Example 3]", "temperature": 0.704, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "cc621092-1c08-4777-8341-f53f97e7cb4d", "question": "Given a N x N binary matrix (elements in matrix can be either 1 or 0) where each row and column of the matrix is sorted in ascending order, count number of 0s present in it.", "examples": "Input: \n[0, 0, 0, 0, 1]\n[0, 0, 0, 1, 1]\n[0, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n\nOutput: 8\n\n\nInput: \n[0, 0]\n[0, 0]\n\nOutput: 4\n\n\nInput: \n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n\nOutput: 0", "link": "https://www.geeksforgeeks.org/count-zeros-in-a-row-wise-and-column-wise-sorted-matrix/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\ndef countZeroes(mat: list) -> int:\n        \n        N = 5;\n        row = N - 1;\n        col = 0;\n        count = 0;\n\n        while (col < N):\n                while (mat[row][col]):\n                        if (row < 0):\n                                return count;\n                        row = row - 1;\n                count = count + (row + 1);\n                col = col + 1;\n\n        return count\n", "asserts": ["assert countZeroes([[0, 0, 0, 0, 1],[0, 0, 0, 1, 1],[0, 1, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 1, 1]]) == 8", "assert countZeroes([[0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 1", "assert countZeroes([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]) == 25", "assert countZeroes([[0, 0, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 4"]}, {"author": "Karthik", "UUID": "aa471867-aa0d-4e14-ba9b-8e8f537394e4", "question": "Given an integer matrix of odd dimensions (like 3 * 3 or 5 * 5), find the sum of the middle row & column elements. Return the values in an array, with the first element being the row sum and the second element being the column sum", "examples": "Input :  2 5 7\n         3 7 2\n         5 6 9\nOutput : [12,18]\n\nInput :  1 3 5 6 7\n         3 5 3 2 1\n         1 2 3 4 5\n         7 9 2 1 6\n         9 1 5 3 2\nOutput : [15,18]", "link": "https://www.geeksforgeeks.org/sum-middle-row-column-matrix/", "difficulty": "Easy", "categories": ["Matrix"], "code": "def middlesum(mat: list) -> list:\n\n        row_sum = 0\n        col_sum = 0\n        n = len(mat)\n\n        for i in range(n):\n                row_sum += mat[n // 2][i]\n        \n        for i in range(n):\n                col_sum += mat[i][n // 2]\n\n        mid_sum = [row_sum, col_sum]\n        return mid_sum\n        \n        \n", "asserts": ["assert middlesum([[2, 5, 7],[3, 7, 2],[5, 6, 9]]) == [12, 18]", "assert middlesum([[1, 3, 5, 6, 7], [3, 5, 3, 2, 1], [1, 2, 3, 4, 5], [7, 9, 2, 1, 6], [9, 1, 5, 3, 2]]) == [15, 18]", "assert middlesum([[4]]) == [4, 4]", "assert middlesum([[8, 2, 4], [1, 5, 9], [6, 3, 7]]) == [15, 10]", "assert middlesum([[3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3]]) == [15, 15]"]}], "category": "Matrix", "prompt_tokens": 1085, "total_tokens": 1495, "completion_tokens": 410, "completion": "Given a matrix of size m x n, return all elements of the matrix in spiral order.\n\n###Code: \n\n```python\ndef spiralOrder(matrix: list) -> list:\n        result = []\n        while matrix:\n            result += matrix.pop(0)\n            if matrix and matrix[0]:\n                for row in matrix:\n                    result.append(row.pop())\n            if matrix:\n                result += matrix.pop()[::-1]\n            if matrix and matrix[0]:\n                for row in matrix[::-1]:\n                    result.append(row.pop(0))\n        return result\n```\n\n###Testcases: \n\n```python\nassert spiralOrder([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 6, 9, 8, 7, 4, 5]\nassert spiralOrder([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]\nassert spiralOrder([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]) == [1, 2, 3, 4, 5, 10, 15, 14, 13, 12, 11, 6, 7, 8, 9]\nassert spiralOrder([[1, 2], [3, 4], [5, 6], [7, 8]]) == [1, 2, 4, 6, 8, 7, 5, 3]\n```\n\n[/Example 3]", "temperature": 0.942, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "cc621092-1c08-4777-8341-f53f97e7cb4d", "question": "Given a N x N binary matrix (elements in matrix can be either 1 or 0) where each row and column of the matrix is sorted in ascending order, count number of 0s present in it.", "examples": "Input: \n[0, 0, 0, 0, 1]\n[0, 0, 0, 1, 1]\n[0, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n\nOutput: 8\n\n\nInput: \n[0, 0]\n[0, 0]\n\nOutput: 4\n\n\nInput: \n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n\nOutput: 0", "link": "https://www.geeksforgeeks.org/count-zeros-in-a-row-wise-and-column-wise-sorted-matrix/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\ndef countZeroes(mat: list) -> int:\n        \n        N = 5;\n        row = N - 1;\n        col = 0;\n        count = 0;\n\n        while (col < N):\n                while (mat[row][col]):\n                        if (row < 0):\n                                return count;\n                        row = row - 1;\n                count = count + (row + 1);\n                col = col + 1;\n\n        return count\n", "asserts": ["assert countZeroes([[0, 0, 0, 0, 1],[0, 0, 0, 1, 1],[0, 1, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 1, 1]]) == 8", "assert countZeroes([[0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 1", "assert countZeroes([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]) == 25", "assert countZeroes([[0, 0, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 4"]}, {"author": "Karthik", "UUID": "aa471867-aa0d-4e14-ba9b-8e8f537394e4", "question": "Given an integer matrix of odd dimensions (like 3 * 3 or 5 * 5), find the sum of the middle row & column elements. Return the values in an array, with the first element being the row sum and the second element being the column sum", "examples": "Input :  2 5 7\n         3 7 2\n         5 6 9\nOutput : [12,18]\n\nInput :  1 3 5 6 7\n         3 5 3 2 1\n         1 2 3 4 5\n         7 9 2 1 6\n         9 1 5 3 2\nOutput : [15,18]", "link": "https://www.geeksforgeeks.org/sum-middle-row-column-matrix/", "difficulty": "Easy", "categories": ["Matrix"], "code": "def middlesum(mat: list) -> list:\n\n        row_sum = 0\n        col_sum = 0\n        n = len(mat)\n\n        for i in range(n):\n                row_sum += mat[n // 2][i]\n        \n        for i in range(n):\n                col_sum += mat[i][n // 2]\n\n        mid_sum = [row_sum, col_sum]\n        return mid_sum\n        \n        \n", "asserts": ["assert middlesum([[2, 5, 7],[3, 7, 2],[5, 6, 9]]) == [12, 18]", "assert middlesum([[1, 3, 5, 6, 7], [3, 5, 3, 2, 1], [1, 2, 3, 4, 5], [7, 9, 2, 1, 6], [9, 1, 5, 3, 2]]) == [15, 18]", "assert middlesum([[4]]) == [4, 4]", "assert middlesum([[8, 2, 4], [1, 5, 9], [6, 3, 7]]) == [15, 10]", "assert middlesum([[3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3], [3, 3, 3, 3, 3]]) == [15, 15]"]}], "category": "Matrix", "prompt_tokens": 1085, "total_tokens": 1413, "completion_tokens": 328, "completion": "Given a matrix, rotate it by 90 degrees clockwise in-place. \n\n###Code: \n\n```python\ndef rotate(matrix: list) -> None:\n        n = len(matrix)\n        \n        for i in range(n // 2):\n            for j in range(i, n - i - 1):\n                temp = matrix[i][j]\n                matrix[i][j] = matrix[n - 1 - j][i]\n                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j]\n                matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i]\n                matrix[j][n - 1 - i] = temp\n```\n\n###Testcases: \n\n```python\nmatrix1 = [[1, 2, 3],[4, 5, 6],[7, 8, 9]]\nrotate(matrix1)\nassert matrix1 == [[7, 4, 1],[8, 5, 2],[9, 6, 3]]\n\nmatrix2 = [[1, 2, 3, 4],[5, 6, 7, 8],[9, 10, 11, 12],[13, 14, 15, 16]]\nrotate(matrix2)\nassert matrix2 == [[13, 9, 5, 1],[14, 10, 6, 2],[15, 11, 7, 3],[16, 12, 8, 4]]\n```", "temperature": 0.885, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "cc621092-1c08-4777-8341-f53f97e7cb4d", "question": "Given a N x N binary matrix (elements in matrix can be either 1 or 0) where each row and column of the matrix is sorted in ascending order, count number of 0s present in it.", "examples": "Input: \n[0, 0, 0, 0, 1]\n[0, 0, 0, 1, 1]\n[0, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n\nOutput: 8\n\n\nInput: \n[0, 0]\n[0, 0]\n\nOutput: 4\n\n\nInput: \n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n\nOutput: 0", "link": "https://www.geeksforgeeks.org/count-zeros-in-a-row-wise-and-column-wise-sorted-matrix/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\ndef countZeroes(mat: list) -> int:\n        \n        N = 5;\n        row = N - 1;\n        col = 0;\n        count = 0;\n\n        while (col < N):\n                while (mat[row][col]):\n                        if (row < 0):\n                                return count;\n                        row = row - 1;\n                count = count + (row + 1);\n                col = col + 1;\n\n        return count\n", "asserts": ["assert countZeroes([[0, 0, 0, 0, 1],[0, 0, 0, 1, 1],[0, 1, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 1, 1]]) == 8", "assert countZeroes([[0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 1", "assert countZeroes([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]) == 25", "assert countZeroes([[0, 0, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 4"]}, {"author": "Karthik", "UUID": "3c29c2a6-0039-4bc9-a4a5-6faea36dfa7e", "question": "Given a matrix of n*n size, the task is to find whether all rows are circular rotations of each other or not. ", "examples": "Input: mat[][] = 1, 2, 3\n                 3, 1, 2\n                 2, 3, 1\nOutput:  Yes\nAll rows are rotated permutation\nof each other.\n\nInput: mat[3][3] = 1, 2, 3\n                   3, 2, 1\n                   1, 3, 2\nOutput:  No\nExplanation : As 3, 2, 1 is not a rotated or \ncircular permutation of 1, 2, 3", "link": "https://geeksforgeeks.org/check-rows-matrix-circular-rotations/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\nMAX = 1000\n\ndef isPermutedMatrix(mat: list) -> bool:\n        \n        n = len(mat)\n        str_cat = \"\"\n        for i in range(n) :\n                str_cat = str_cat + \"-\" + str(mat[0][i])\n\n        str_cat = str_cat + str_cat\n\n        for i in range(1, n) :\n                curr_str = \"\"\n                \n                for j in range(n) :\n                        curr_str = curr_str + \"-\" + str(mat[i][j])\n\n                if (str_cat.find(curr_str)) : \n                        return True\n                        \n        return False\n", "asserts": ["assert isPermutedMatrix([[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]]) == True", "assert isPermutedMatrix([[1, 2, 3], [2, 3, 1], [3, 1, 2]]) == True", "assert isPermutedMatrix([[5, 6], [6, 5]]) == True", "assert isPermutedMatrix([[13, 5, 7, 9], [5, 7, 9, 13], [7, 9, 13, 5], [9, 13, 5, 7]]) == True", "assert isPermutedMatrix([[3, 8], [8, 3]]) == True", "assert isPermutedMatrix([[2, 4, 6, 8], [4, 6, 8, 2], [8, 2, 4, 6], [6, 8, 2, 4]]) == True"]}], "category": "Matrix", "prompt_tokens": 1073, "total_tokens": 1469, "completion_tokens": 396, "completion": "Given a m x n matrix, write a function to spiral order print the matrix. \n\nFor example, given the following matrix:\n\n1 2 3\n\n4 5 6\n\n7 8 9\n\nThe function should output:\n1 2 3 6 9 8 7 4 5\n\n###Code: \n\n\ndef spiralOrder(matrix: list) -> list:\n        result = []\n        while matrix:\n            result += matrix.pop(0)\n            if matrix and matrix[0]:\n                for row in matrix:\n                    result.append(row.pop())\n            if matrix:\n                result += matrix.pop()[::-1]\n            if matrix and matrix[0]:\n                for row in matrix[::-1]:\n                    result.append(row.pop(0))\n        return result\n\n\n###Testcases: \n\nassert spiralOrder([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 6, 9, 8, 7, 4, 5]\nassert spiralOrder([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]\nassert spiralOrder([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]) == [1, 2, 3, 4, 5, 10, 15, 14, 13, 12, 11, 6, 7, 8, 9]\n\n[/Example 3]", "temperature": 0.984, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "cc621092-1c08-4777-8341-f53f97e7cb4d", "question": "Given a N x N binary matrix (elements in matrix can be either 1 or 0) where each row and column of the matrix is sorted in ascending order, count number of 0s present in it.", "examples": "Input: \n[0, 0, 0, 0, 1]\n[0, 0, 0, 1, 1]\n[0, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n\nOutput: 8\n\n\nInput: \n[0, 0]\n[0, 0]\n\nOutput: 4\n\n\nInput: \n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n\nOutput: 0", "link": "https://www.geeksforgeeks.org/count-zeros-in-a-row-wise-and-column-wise-sorted-matrix/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\ndef countZeroes(mat: list) -> int:\n        \n        N = 5;\n        row = N - 1;\n        col = 0;\n        count = 0;\n\n        while (col < N):\n                while (mat[row][col]):\n                        if (row < 0):\n                                return count;\n                        row = row - 1;\n                count = count + (row + 1);\n                col = col + 1;\n\n        return count\n", "asserts": ["assert countZeroes([[0, 0, 0, 0, 1],[0, 0, 0, 1, 1],[0, 1, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 1, 1]]) == 8", "assert countZeroes([[0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 1", "assert countZeroes([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]) == 25", "assert countZeroes([[0, 0, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 4"]}, {"author": "Karthik", "UUID": "3c29c2a6-0039-4bc9-a4a5-6faea36dfa7e", "question": "Given a matrix of n*n size, the task is to find whether all rows are circular rotations of each other or not. ", "examples": "Input: mat[][] = 1, 2, 3\n                 3, 1, 2\n                 2, 3, 1\nOutput:  Yes\nAll rows are rotated permutation\nof each other.\n\nInput: mat[3][3] = 1, 2, 3\n                   3, 2, 1\n                   1, 3, 2\nOutput:  No\nExplanation : As 3, 2, 1 is not a rotated or \ncircular permutation of 1, 2, 3", "link": "https://geeksforgeeks.org/check-rows-matrix-circular-rotations/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\nMAX = 1000\n\ndef isPermutedMatrix(mat: list) -> bool:\n        \n        n = len(mat)\n        str_cat = \"\"\n        for i in range(n) :\n                str_cat = str_cat + \"-\" + str(mat[0][i])\n\n        str_cat = str_cat + str_cat\n\n        for i in range(1, n) :\n                curr_str = \"\"\n                \n                for j in range(n) :\n                        curr_str = curr_str + \"-\" + str(mat[i][j])\n\n                if (str_cat.find(curr_str)) : \n                        return True\n                        \n        return False\n", "asserts": ["assert isPermutedMatrix([[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]]) == True", "assert isPermutedMatrix([[1, 2, 3], [2, 3, 1], [3, 1, 2]]) == True", "assert isPermutedMatrix([[5, 6], [6, 5]]) == True", "assert isPermutedMatrix([[13, 5, 7, 9], [5, 7, 9, 13], [7, 9, 13, 5], [9, 13, 5, 7]]) == True", "assert isPermutedMatrix([[3, 8], [8, 3]]) == True", "assert isPermutedMatrix([[2, 4, 6, 8], [4, 6, 8, 2], [8, 2, 4, 6], [6, 8, 2, 4]]) == True"]}], "category": "Matrix", "prompt_tokens": 1073, "total_tokens": 1300, "completion_tokens": 227, "completion": "Given a matrix of size n x m, the task is to find the maximum element from each row and then calculate the sum of those maximum elements.\n\n###Code: \n\ndef maxSumOfRowMax(matrix: list) -> int:\n\n        result = 0\n        for row in matrix:\n            result += max(row)\n        return result\n\n\n###Testcases: \n\nassert maxSumOfRowMax([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 24\nassert maxSumOfRowMax([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == 24\nassert maxSumOfRowMax([[3, 1, 4], [1, 5, 9], [2, 6, 5]]) == 18\nassert maxSumOfRowMax([[1, 3, 5], [2, 4, 6], [7, 8, 9]]) == 24\n\n[/Example 3]", "temperature": 0.759, "model_name": "gpt-3.5-turbo-1106"}, {"few_shots": [{"author": "Karthik", "UUID": "cc621092-1c08-4777-8341-f53f97e7cb4d", "question": "Given a N x N binary matrix (elements in matrix can be either 1 or 0) where each row and column of the matrix is sorted in ascending order, count number of 0s present in it.", "examples": "Input: \n[0, 0, 0, 0, 1]\n[0, 0, 0, 1, 1]\n[0, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1]\n\nOutput: 8\n\n\nInput: \n[0, 0]\n[0, 0]\n\nOutput: 4\n\n\nInput: \n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n[1, 1, 1, 1]\n\nOutput: 0", "link": "https://www.geeksforgeeks.org/count-zeros-in-a-row-wise-and-column-wise-sorted-matrix/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\ndef countZeroes(mat: list) -> int:\n        \n        N = 5;\n        row = N - 1;\n        col = 0;\n        count = 0;\n\n        while (col < N):\n                while (mat[row][col]):\n                        if (row < 0):\n                                return count;\n                        row = row - 1;\n                count = count + (row + 1);\n                col = col + 1;\n\n        return count\n", "asserts": ["assert countZeroes([[0, 0, 0, 0, 1],[0, 0, 0, 1, 1],[0, 1, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 1, 1]]) == 8", "assert countZeroes([[0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 1", "assert countZeroes([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]) == 25", "assert countZeroes([[0, 0, 1, 1, 1], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 4"]}, {"author": "Karthik", "UUID": "3c29c2a6-0039-4bc9-a4a5-6faea36dfa7e", "question": "Given a matrix of n*n size, the task is to find whether all rows are circular rotations of each other or not. ", "examples": "Input: mat[][] = 1, 2, 3\n                 3, 1, 2\n                 2, 3, 1\nOutput:  Yes\nAll rows are rotated permutation\nof each other.\n\nInput: mat[3][3] = 1, 2, 3\n                   3, 2, 1\n                   1, 3, 2\nOutput:  No\nExplanation : As 3, 2, 1 is not a rotated or \ncircular permutation of 1, 2, 3", "link": "https://geeksforgeeks.org/check-rows-matrix-circular-rotations/", "difficulty": "Medium", "categories": ["Matrix"], "code": "\nMAX = 1000\n\ndef isPermutedMatrix(mat: list) -> bool:\n        \n        n = len(mat)\n        str_cat = \"\"\n        for i in range(n) :\n                str_cat = str_cat + \"-\" + str(mat[0][i])\n\n        str_cat = str_cat + str_cat\n\n        for i in range(1, n) :\n                curr_str = \"\"\n                \n                for j in range(n) :\n                        curr_str = curr_str + \"-\" + str(mat[i][j])\n\n                if (str_cat.find(curr_str)) : \n                        return True\n                        \n        return False\n", "asserts": ["assert isPermutedMatrix([[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]]) == True", "assert isPermutedMatrix([[1, 2, 3], [2, 3, 1], [3, 1, 2]]) == True", "assert isPermutedMatrix([[5, 6], [6, 5]]) == True", "assert isPermutedMatrix([[13, 5, 7, 9], [5, 7, 9, 13], [7, 9, 13, 5], [9, 13, 5, 7]]) == True", "assert isPermutedMatrix([[3, 8], [8, 3]]) == True", "assert isPermutedMatrix([[2, 4, 6, 8], [4, 6, 8, 2], [8, 2, 4, 6], [6, 8, 2, 4]]) == True"]}], "category": "Matrix", "prompt_tokens": 1073, "total_tokens": 1401, "completion_tokens": 328, "completion": "Given a matrix of size n x m, where n is the number of rows and m is the number of columns, write a function to return the transpose of the matrix.\n\n###Code: \n\ndef transposeMatrix(matrix: list) -> list:\n    rows = len(matrix)\n    cols = len(matrix[0])\n    transposed = [[0 for _ in range(rows)] for _ in range(cols)]\n    \n    for i in range(rows):\n        for j in range(cols):\n            transposed[j][i] = matrix[i][j]\n    \n    return transposed\n\n###Testcases: \n\nassert transposeMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\nassert transposeMatrix([[1, 4], [2, 5], [3, 6]]) == [[1, 2, 3], [4, 5, 6]]\nassert transposeMatrix([[1, 2, 3, 4], [5, 6, 7, 8]]) == [[1, 5], [2, 6], [3, 7], [4, 8]]\nassert transposeMatrix([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == [[9, 6, 3], [8, 5, 2], [7, 4, 1]]\n\n", "temperature": 0.609, "model_name": "gpt-3.5-turbo-1106"}]