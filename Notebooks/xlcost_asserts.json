[{"question": "Given two arrays A[] and B[] consisting of N and M integers respectively, the task is to calculate the maximum prefix sum that can be obtained by merging the two arrays.", "title": "Maximum Prefix Sum possible by merging two given arrays", "prompt_tokens": 183, "total_tokens": 638, "completion_tokens": 455, "completion": "```python\n# Given code\ndef maxPreSum(A, B, i, j):\n    n = len(A)\n    m = len(B)\n    prefix_sum = 0\n    result = 0\n    while (i < n and j < m):\n        if (A[i] < 0 and B[j] < 0):\n            prefix_sum += max(A[i], B[j])\n        else:\n            prefix_sum += A[i] + B[j]\n        if (prefix_sum < 0):\n            prefix_sum = 0\n        result = max(result, prefix_sum)\n        if (A[i] < 0):\n            i += 1\n        if (B[j] < 0):\n            j += 1\n        else:\n            i += 1\n            j += 1\n    while (i < n):\n        prefix_sum += A[i]\n        if (prefix_sum < 0):\n            prefix_sum = 0\n        result = max(result, prefix_sum)\n        i += 1\n    while (j < m):\n        prefix_sum += B[j]\n        if (prefix_sum < 0):\n            prefix_sum = 0\n        result = max(result, prefix_sum)\n        j += 1\n    return result\n\n# Additional asserts\nassert maxPreSum([2, 1, 13, 5, 14], [-1, 4, -13], 0, 0) == 38\nassert maxPreSum([3, -2, 6, 10], [-5, 8, 0, -7], 0, 0) == 27\nassert maxPreSum([1, 2, 3, 4], [5, 6, 7, 8], 0, 0) == 36\nassert maxPreSum([-1, -2, -3, -4], [-5, -6, -7, -8], 0, 0) == 0\nassert maxPreSum([10, 20, 30, 40], [-5, -10, -15], 0, 0) == 100\n```", "model_name": "gpt-3.5-turbo-1106"}, {"question": "Given a number N, the task is to check if N is a centered cubic number or not. A centered cubic number counts the number of points which are formed by a point that is surrounded by concentric cubical layers in 3D with i2 points on the square faces of the i-th layer. The first few Centered cube numbers are 1, 9, 35, 91, 189, 341, 559, 855 \u2026 ", "title": "Program to check if N is a Centered Cubic Number", "prompt_tokens": 217, "total_tokens": 361, "completion_tokens": 144, "completion": "```python\n# Given function to be tested\ndef isCenteredcube(N):\n    i = 0\n    while(True):\n        points = (i + 1) * (i + 1) * (i + 1)\n        if points == N:\n            return True\n        if points > N:\n            return False\n        i = i + 1\n\n# Additional asserts\nassert isCenteredcube(1)==True\nassert isCenteredcube(35)==True\nassert isCenteredcube(91)==True\nassert isCenteredcube(190)==False\nassert isCenteredcube(560)==True\nassert isCenteredcube(1000)==False\n```", "model_name": "gpt-3.5-turbo-1106"}, {"question": "Given a number N, the task is to check if N is an Octagonal Number or not. If the number N is an Octagonal Number then print \u201cYes\u201d else print \u201cNo\u201d. Octagonal Number is the figure number that represent octagonal. Octagonal Numbers can be formed by placing triangular numbers on the four sides of a square. The first few Octagonal Numbers are 1, 8, 21, 40, 65, 96 \u2026 ", "title": "Program to check if N is a Octagonal Number", "prompt_tokens": 216, "total_tokens": 351, "completion_tokens": 135, "completion": "```python\ndef isoctagonal(N):\n    # check if N is an Octagonal Number\n    if N < 1:\n        return False\n    else:\n        x = ((2 * N) + 1)**0.5\n        if x % 1 == 0:\n            return True\n        else:\n            return False\n\nassert isoctagonal(8)==True\nassert isoctagonal(21)==True\nassert isoctagonal(40)==True\nassert isoctagonal(65)==True\nassert isoctagonal(96)==True\nassert isoctagonal(100)==False\nassert isoctagonal(144)==False\n```", "model_name": "gpt-3.5-turbo-1106"}, {"question": "Given an array A[] of integers. The task is to count the total number of strictly decreasing subarrays( with size > 1 ).", "title": "Find the count of Strictly decreasing Subarrays", "prompt_tokens": 158, "total_tokens": 370, "completion_tokens": 212, "completion": "```python\n# Given code\ndef countDecreasing(arr):\n    n = len(arr)\n    cnt = 0\n    start = 0\n    end = 1\n    while end < n:\n        if arr[end - 1] > arr[end]:\n            while end < n and arr[end - 1] > arr[end]:\n                end += 1\n            length = end - start\n            cnt += (length * (length - 1)) // 2\n            start = end\n        else:\n            start += 1\n            end += 1\n    return cnt\n# Asserts\nassert countDecreasing([100, 3, 1, 13]) == 3\nassert countDecreasing([3, 2, 1]) == 3\nassert countDecreasing([5, 4, 3, 2, 1]) == 10\nassert countDecreasing([1, 2, 3, 4, 5]) == 0\n```", "model_name": "gpt-3.5-turbo-1106"}, {"question": "Given a string, write a Python program to check whether the given string is starting with Vowel or Not.", "title": "Program to accept Strings starting with a Vowel", "prompt_tokens": 149, "total_tokens": 185, "completion_tokens": 36, "completion": "```python\nassert check(\"elephant\")==True\nassert check(\"123go\")==False\nassert check(\"Umbrella\")==True\nassert check(\"tree\")==False\n```", "model_name": "gpt-3.5-turbo-1106"}, {"question": "write a program the finds the number of integral points between the given two points. The number of points between two given points will be gcd(abs(x2), abs(y1-y2)) - 1. If the line joining is parallel to x-axis, then the number of integral points will be abs(y1 - y2) - 1. If the line joining is parallel to y-axis, then the number of integral points will be abs(x1 - x2) - 1. If the x points of both points are equal, then they are parallel to the x-axis. If the y points of both points are equal, then they are parallel to the y-axis.", "title": "Number of Integral Points between Two Points", "prompt_tokens": 267, "total_tokens": 325, "completion_tokens": 58, "completion": "```python\nassert getCount(Point(3, 5), Point(3, 10))==4\nassert getCount(Point(7, 3), Point(3, 3))==4\nassert getCount(Point(5, 3), Point(5, 3))==0\n```", "model_name": "gpt-3.5-turbo-1106"}, {"question": "Given array of integer, find the next smaller of next greater element of every element in array. The NSE for an element x is the first smaller element on the right side of x in the array. Elements for which no smaller element exist (on the right side), consider NSE as -1. The Next greater Element for an element x is the first greater element on the right side of x in the array. Elements for which no greater element exist, consider the next greater element as -1. ", "title": "Find next Smaller of next Greater in an array", "prompt_tokens": 263, "total_tokens": 502, "completion_tokens": 239, "completion": "```python\n# Function to find the next smaller of next greater element of every element in array\ndef nextSmallerOfNextGreater(arr):\n    result = []\n    stack = []\n    \n    # Iterate the array in reverse order to find next smaller of next greater element\n    for i in range(len(arr)-1, -1, -1):\n        while stack and stack[-1] <= arr[i]:\n            stack.pop()\n        \n        if not stack:\n            result.append(-1)\n        else:\n            result.append(stack[-1])\n        \n        stack.append(arr[i])\n    \n    return result[::-1]\n\n# Additional asserts\nassert nextSmallerOfNextGreater([1, 2, 3, 4, 5])==[-1, -1, -1, -1, -1]\nassert nextSmallerOfNextGreater([5, 4, 3, 2, 1])==[-1, -1, -1, -1, -1]\nassert nextSmallerOfNextGreater([3, 1, 4, 5, 2])==[2, -1, 2, -1, -1]\n```", "model_name": "gpt-3.5-turbo-1106"}, {"question": "Given a array size of n, we need to find the total number of zeros in the product of the elements of the array.", "title": "Count number of trailing zeros in product of array", "prompt_tokens": 168, "total_tokens": 296, "completion_tokens": 128, "completion": "```python\n# Given code\ndef countZeros(arr):\n    zero_count = 0\n    for num in arr:\n        zero_count += str(num).count('0')\n    return zero_count\n\n# Additional asserts\nassert countZeros([0, 10, 20, 30, 40, 50])==2\nassert countZeros([0, 0, 0, 0, 0, 0])==6\nassert countZeros([123, 456, 789])==0\nassert countZeros([101, 202, 303, 404])==4\n```", "model_name": "gpt-3.5-turbo-1106"}, {"question": "Given two numbers base and exp, we need to compute baseexp under Modulo 10^9+7 ", "title": "Exponential Squaring ( Fast Modulo Multiplication )", "prompt_tokens": 149, "total_tokens": 298, "completion_tokens": 149, "completion": "```python\n# Function to compute base^exp under Modulo 10^9+7\ndef exponentiation(base, exp):\n    MOD = 10**9 + 7\n    result = 1\n    base = base % MOD\n    while exp > 0:\n        if exp % 2 == 1:\n            result = (result * base) % MOD\n        exp = exp // 2\n        base = (base * base) % MOD\n    return result\n\n# Additional asserts\nassert exponentiation(3, 7) == 2187\nassert exponentiation(2, 10) == 1024\nassert exponentiation(7, 5) == 16807\n```", "model_name": "gpt-3.5-turbo-1106"}, {"question": "Given two positive integer n1 and n2, the task is to check if both are Cousin primes or not. Print \u2018YES\u2019 if the both the numbers are Cousin primes otherwise print \u2018NO\u2019. Cousin primes: In Mathematics, Cousin primes are prime numbers that differ by 4. Suppose \u2018p\u2019 is a prime number and if ( p + 4) is also a prime number then both the prime numbers will be called as cousin primes. ", "title": "Check whether the given numbers are Cousin prime or not", "prompt_tokens": 221, "total_tokens": 428, "completion_tokens": 207, "completion": "```python\n# Function to check if two numbers are cousin primes\ndef isCousinPrime(n1, n2):\n    def isPrime(x):\n        if x <= 1:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    \n    if isPrime(n1) and isPrime(n2) and abs(n1 - n2) == 4:\n        if isPrime(n1 + 4) or isPrime(n2 + 4):\n            return True\n    return False\n\n# Generating more asserts\nassert isCousinPrime(3, 7)==True\nassert isCousinPrime(5, 11)==True\nassert isCousinPrime(17, 13)==False\nassert isCousinPrime(23, 29)==True\nassert isCousinPrime(19, 31)==False\n```", "model_name": "gpt-3.5-turbo-1106"}, {"question": "Given an array arr containing N integers, the task is to count the possible number of pairs of elements with the same number of set bits.", "title": "Count of pairs in an Array with same number of set bits", "prompt_tokens": 184, "total_tokens": 399, "completion_tokens": 215, "completion": "```python\n# Given code\ndef countPairs(arr, n):\n    def countSetBits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n\n    set_bits_count = {}\n    for i in arr:\n        bits = countSetBits(i)\n        if bits in set_bits_count:\n            set_bits_count[bits] += 1\n        else:\n            set_bits_count[bits] = 1\n\n    result = 0\n    for key in set_bits_count:\n        count = set_bits_count[key]\n        result += count * (count - 1) // 2\n\n    return result\n\n# Generates more asserts\nassert countPairs([5, 10, 15, 20], 4) == 6\nassert countPairs([1, 2, 4, 8], 4) == 6\nassert countPairs([3, 3, 3, 3], 4) == 6\n```", "model_name": "gpt-3.5-turbo-1106"}, {"question": "Given a string str and an integer K, the task is to find the length of the longest sub-string S such that every character in S appears at least K times.", "title": "Longest substring where all the characters appear at least K times", "prompt_tokens": 160, "total_tokens": 305, "completion_tokens": 145, "completion": "```python\n# Function to find the length of the longest sub-string S\ndef longestSubstring(s, k):\n    if not s:\n        return 0\n    \n    for char in set(s):\n        if s.count(char) < k:\n            return max(longestSubstring(sub_s, k) for sub_s in s.split(char))\n    \n    return len(s)\n\n# Additional asserts\nassert(longestSubstring(\"aabbba\", 3)) == 6\nassert(longestSubstring(\"ababbbcbbb\", 3)) == 9\nassert(longestSubstring(\"aaaaaabbbbbcccccc\", 6)) == 18\nassert(longestSubstring(\"abcdefg\", 2)) == 0\n```", "model_name": "gpt-3.5-turbo-1106"}]