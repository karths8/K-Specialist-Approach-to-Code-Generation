[{"title": "Maximum Prefix Sum possible by merging two given arrays", "question": "Given two arrays A[] and B[] consisting of N and M integers respectively, the task is to calculate the maximum prefix sum that can be obtained by merging the two arrays.", "code": "\ndp = {}\n\ndef maxPreSum(a: list, b: list, x: int, y: int) -> int:\n    if (x, y) in dp:\n        return dp[(x, y)]\n    if x == len(a) and y == len(b):\n        return 0\n    curr = 0\n    if (x, y) in dp:\n        curr = dp[(x, y)]\n    if x == len(a):\n        curr = max(curr, b[y] + maxPreSum(a, b, x, y + 1))\n    elif (y == len(b)):\n        curr = max(curr, a[x] + maxPreSum(a, b, x + 1, y))\n    else:\n        maxs = max(a[x] + maxPreSum(a, b, x + 1, y), b[y] + maxPreSum(a, b, x, y + 1))\n        curr = max(curr, maxs)\n    dp[(x, y)] = curr\n    return dp[(x, y)]\n    ", "asserts": ["assert maxPreSum([2, 1, 13, 5, 14], [-1, 4, -13], 0, 0)==38"]}, {"title": "Program to check if N is a Centered Cubic Number", "question": "Given a number N, the task is to check if N is a centered cubic number or not. A centered cubic number counts the number of points which are formed by a point that is surrounded by concentric cubical layers in 3D with i2 points on the square faces of the i-th layer. The first few Centered cube numbers are 1, 9, 35, 91, 189, 341, 559, 855 \u2026 ", "code": "\ndef isCenteredcube(N: int) -> bool:\n\ti = 1\n\twhile (True):\n\t\tith_term = ((2 * i + 1) *\n\t\t\t\t\t(i * i + i + 1))\n\t\tif (ith_term == N):\n\t\t\treturn True\n\t\tif (ith_term > N):\n\t\t\treturn False \n\t\ti += 1\n    ", "asserts": ["assert isCenteredcube(9)==True"]}, {"title": "Program to check if N is a Octagonal Number", "question": "Given a number N, the task is to check if N is an Octagonal Number or not. If the number N is an Octagonal Number then return True else return False. Octagonal Number is the figure number that represent octagonal. Octagonal Numbers can be formed by placing triangular numbers on the four sides of a square. The first few Octagonal Numbers are 1, 8, 21, 40, 65, 96 \u2026 ", "code": "\ndef isoctagonal(N: int) -> bool:\n\tn = (2 + sqrt(12 * N + 4)) / 6\n\treturn (n - int(n)) == 0\n    ", "asserts": ["assert isoctagonal(8)==True"]}, {"title": "Find the count of Strictly decreasing Subarrays", "question": "Given an array A[] of integers. The task is to count the total number of strictly decreasing subarrays( with size > 1 ).", "code": "\nfrom typing import List\ndef countDecreasing(A: List[int], n: int) -> int:\n\n\tcnt = 0\n\tlen = 1\n\tfor i in range (n - 1):\n\t\tif (A[i + 1] < A[i]):\n\t\t\tlen += 1\n\t\telse:\n\t\t\tcnt += (((len - 1) * len) // 2);\n\t\t\tlen = 1\n\tif (len > 1):\n\t\tcnt += (((len - 1) * len) // 2)\n\treturn cnt\n    ", "asserts": ["assert countDecreasing([100, 3, 1, 13])==3"]}, {"title": "Program to accept Strings starting with a Vowel", "question": "Given a string, write a Python program to check whether the given string is starting with Vowel or Not.", "code": "\ndef checkIfStartsWithVowels(string: str) -> bool:\n\n\tif (not(string[0] == 'A' or string[0] == 'a'\n\t\tor string[0] == 'E' or string[0] == 'e'\n\t\tor string[0] == 'I' or string[0] == 'i'\n\t\tor string[0] == 'O' or string[0] == 'o'\n\t\tor string[0] == 'U' or string[0] == 'u')):\n\t\treturn True\n\telse :\n\t\treturn False\n    ", "asserts": ["assert check(\"animal\")==True", "assert check(\"zebra\")==False"]}, {"title": "Number of Integral Points between Two Points", "question": "write a program the finds the number of integral points between the given two points. The number of points between two given points will be gcd(abs(x2), abs(y1-y2)) - 1. If the line joining is parallel to x-axis, then the number of integral points will be abs(y1 - y2) - 1. If the line joining is parallel to y-axis, then the number of integral points will be abs(x1 - x2) - 1. If the x points of both points are equal, then they are parallel to the x-axis. If the y points of both points are equal, then they are parallel to the y-axis.", "code": "\nclass Point:\n\tdef __init__(self, a, b):\n\t\tself.x = a\n\t\tself.y = b\n\ndef gcd(a, b):\n\tif b == 0:\n\t\treturn a\n\treturn gcd(b, a % b)\n\ndef getCount(p: Point, q: Point) -> int:\n\tif p.x == q.x:\n\t\treturn abs(p.y - q.y) - 1\n\tif p.y == q.y:\n\t\treturn abs(p.x - q.x) - 1\n\treturn gcd(abs(p.x - q.x),abs(p.y - q.y)) - 1\n    ", "asserts": ["assert getCount(Point(1, 9), Point(8, 16))==6"]}, {"title": "Find next Smaller of next Greater in an array", "question": "Given array of integer, find the next smaller of next greater element of every element in array. The NSE for an element x is the first smaller element on the right side of x in the array. Elements for which no smaller element exist (on the right side), consider NSE as -1. The Next greater Element for an element x is the first greater element on the right side of x in the array. Elements for which no greater element exist, consider the next greater element as -1. ", "code": "\nfrom typing import List\ndef nextSmallerOfNextGreater(arr: List[int]) -> List[int]:\n    n = len(arr)\n\tvec = []\n\tfor i in range(n-1):\n\t\ttemp = arr[i]\n\t\tnext = -1\n\t\tans = -1\n\t\tfor j in range(i+1, n):\n\t\t\tif arr[j] > temp:\n\t\t\t\tnext = j\n\t\t\t\tbreak\n\t\tif next == -1:\n\t\t\tvec.append(-1)\n\t\telse:\n\t\t\tfor j in range(next+1, n):\n\t\t\t\tif arr[j] < arr[next]:\n\t\t\t\t\tans = j\n\t\t\t\t\tbreak\n\t\t\tif ans == -1:\n\t\t\t\tvec.append(-1)\n\t\t\telse:\n\t\t\t\tvec.append(arr[ans])\n\treturn vec\n    ", "asserts": ["assert nextSmallerOfNextGreater([5, 1, 9, 2, 5, 1, 7])==[2, 2, -1, 1, -1, -1, -1]"]}, {"title": "Count number of trailing zeros in product of array", "question": "Given a array size of n, we need to find the total number of zeros in the product of the elements of the array.", "code": "\nfrom typing import List\ndef countZeros(a: List[int]) -> int :\n    n = len(a)\n\tcount2 = 0\n\tcount5 = 0\n\tfor i in range(0, n) :\n\t\twhile (a[i] % 2 == 0) :\n\t\t\ta[i] = a[i] // 2\n\t\t\tcount2 = count2 + 1\n\n\t\twhile (a[i] % 5 == 0) :\n\t\t\ta[i] = a[i] // 5\n\t\t\tcount5 = count5 + 1\n\n\tif(count2 < count5) :\n\t\treturn count2\n\telse : \n\t\treturn count5\n    ", "asserts": ["assert countZeros([10, 100, 20, 30, 50, 90, 12, 80])==9"]}, {"title": "Exponential Squaring ( Fast Modulo Multiplication )", "question": "Given two numbers base and exp, we need to compute baseexp under Modulo 10^9+7 ", "code": "\nN = 1000000007\ndef exponentiation(bas: int, exp: int) -> int:\n\tif (exp == 0):\n\t\treturn 1\n\tif (exp == 1):\n\t\treturn bas % N\n\t\n\tt = exponentiation(bas, int(exp / 2))\n\tt = (t * t) % N\n\n\tif (exp % 2 == 0):\n\t\treturn t\n\telse:\n\t\treturn ((bas % N) * t) % N\n    ", "asserts": ["assert exponentiation(5, 100000)==754573817"]}, {"title": "Check whether the given numbers are Cousin prime or not", "question": "Given two positive integer n1 and n2, the task is to check if both are Cousin primes or not. Return True if the both the numbers are Cousin primes otherwise return False. Cousin primes: In Mathematics, Cousin primes are prime numbers that differ by 4. Suppose \u2018p\u2019 is a prime number and if ( p + 4) is also a prime number then both the prime numbers will be called as cousin primes. ", "code": "\nimport math \n\ndef isPrime(n: int) -> bool: \n\tif n <= 1: \n\t\treturn False\n\tif n <= 3: \n\t\treturn True\n\tif n % 2 == 0 or n % 3 == 0: \n\t\treturn False\n\t\n\tfor i in range(5, int(math.sqrt(n)+1), 6): \n\t\tif n % i == 0 or n %(i + 2) == 0: \n\t\t\treturn False\n\treturn True\n\t\t\ndef isCousinPrime(n1: int, n2: int) -> bool :\n\n\tif(not (abs(n1-n2)== 4)):\n\t\treturn False\n\t\n\t# Check if both are prime number or not\n\telse:\n\t\treturn (isPrime(n1) and isPrime(n2))\n    ", "asserts": ["assert isCousinPrime(7, 11)==True"]}, {"title": "Count of pairs in an Array with same number of set bits", "question": "Given an array arr containing N integers, the task is to count the possible number of pairs of elements with the same number of set bits.", "code": "\nfrom typinf import List\ndef countPairs(arr: List[int], N: int) -> int:\n\tmaxm = max(arr)\n\ti = 0\n\tk = 0\n\tbitscount = [0 for i in range(maxm + 1)]\n\t\n\ti = 1\n\twhile i <= maxm:\n\t\tbitscount[i] = 1\n\t\ti *= 2\n\tfor i in range(1, maxm + 1):\n\t\tif (bitscount[i] == 1):\n\t\t\tk = i\n\t\tif (bitscount[i] == 0):\n\t\t\tbitscount[i] = (bitscount[k] +\n\t\t\t\t\t\t\tbitscount[i - k])\n\tsetbits = dict()\n\tfor i in range(N):\n\t\tif bitscount[arr[i]] in setbits:\n\t\t\tsetbits[bitscount[arr[i]]] += 1\n\t\telse:\n\t\t\tsetbits[bitscount[arr[i]]] = 1\n\tans = 0\n\tfor it in setbits.values():\n\t\tans += it * (it - 1) // 2\n\treturn ans\n    ", "asserts": ["assert countPairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 12)==22"]}, {"title": "Longest substring where all the characters appear at least K times", "question": "Given a string str and an integer K, the task is to find the length of the longest sub-string S such that every character in S appears at least K times.", "code": "\ndef longestSubstring(s: str, k: int) -> int:\n\tans = 0\n\tfreq = [0]*26\n\tn = len(s)\n\tfor i in range(n):\n\t\tfreq[ord(s[i]) - ord('a')] += 1\n\tunique = 0\n\tfor i in range(26) :\n\t\tif (freq[i] != 0) :\n\t\t\tunique += 1\n\tfor curr_unique in range(1, unique + 1):\n\t\tFreq = [0]*26\n\t\tstart, end = 0, 0\n\t\tcnt, count_k = 0, 0\n\t\twhile (end < n) :\n\t\t\tif (cnt <= curr_unique) :\n\t\t\t\tind = ord(s[end]) - ord('a')\n\t\t\t\tif (Freq[ind] == 0) :\n\t\t\t\t\tcnt += 1\n\n\t\t\t\tFreq[ind] += 1\n\t\t\t\tif (Freq[ind] == k) :\n\t\t\t\t\tcount_k += 1\n\t\t\t\tend += 1\n\t\t\telse :\n\t\t\t\tind = ord(s[start]) - ord('a')\n\t\t\t\tif (Freq[ind] == k) :\n\t\t\t\t\tcount_k -= 1\n\n\t\t\t\tFreq[ind] -= 1\n\t\t\t\tif (Freq[ind] == 0) :\n\t\t\t\t\tcnt -= 1\n\t\t\t\tstart += 1\n\t\t\tif ((cnt == curr_unique) and (count_k == curr_unique)) :\n\t\t\t\tans = max(ans, end - start)\n\n\treturn ans\n    ", "asserts": ["assert(longestSubstring(\"aabbba\", 3))==6"]}]