[{"question": "Given an array reorder it so that even numbers appear first", "code": "\nimport numpy as np\n\ndef even_odd_reorder(arr: np.array):\n  nextEven = 0\n  nextOdd = len(arr) - 1\n  while nextEven < nextOdd:\n    if arr[nextEven] % 2 == 0:\n      nextEven += 1\n    else:\n      temp = arr[nextEven]\n      arr[nextEven] = arr[nextOdd]\n      arr[nextOdd] = temp\n      nextOdd -= 1\n", "categories": ["array", "sorting"]}, {"question": "Given an array with 3 different values sort the array", "code": "\nimport numpy as np\n\ndef dutch_flag_partition(pivot_idx: int, arr: np.array):\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[j] < arr[pivot_idx]:\n        tmp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = tmp\n        break\n  \n  for i in range(len(arr) - 1, 0, -1):\n    if arr[i] < arr[pivot_idx]:\n      break\n    for j in range(i - 1, 0, -1):\n      if arr[j] < arr[pivot_idx]:\n        break\n      if arr[j] > arr[pivot_idx]:\n        tmp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = tmp\n        break\n", "categories": ["array", "sorting"]}, {"question": "Given two arrays return an array with the set intersection of their common elements", "code": "\nimport numpy as np\n\ndef array_intersection(arr1: np.array, arr2: np.array):\n  set1 = set(arr1)\n  ret = [x for x in arr2 if x in set1]\n  return np.array(ret)\n", "categories": ["array"]}, {"question": "Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.", "code": "\nimport numpy as np\n\ndef array_intersection_with_freq(arr1: np.array, arr2: np.array):\n  freq = dict()\n  ret = []\n  for num in arr1:\n      if num in freq.keys():\n          freq[num] = freq[num]+1\n      else:\n          freq[num] = 1\n  for num in arr2:\n      if num in freq.keys() and freq[num] > 0:\n          ret.append(num)\n          freq[num] = freq[num] - 1\n  return np.array(ret)\n", "categories": ["array"]}, {"question": "You are given two 0-indexed integer permutations A and B of length n.\n\nA prefix common array of A and B is an array C such that C[i] is equal to the count of numbers that are present at or before the index i in both A and B.\n\nReturn the prefix common array of A and B.\n\nA sequence of n integers is called a permutation if it contains all integers from 1 to n exactly once.", "code": "\nimport numpy as np\n\ndef findThePrefixCommonArray(arr1: np.array, arr2: np.array):\n  max = arr1.size if arr1.size > arr2.size else arr2.size\n  seen = set()\n  curCount = 0\n  ret = []\n  for i in range(max):\n    cur1 = arr1[i]\n    cur2 = arr2[i]\n    if cur1 in seen:\n      curCount += 1\n    else:\n      seen.add(cur1)\n    if cur2 in seen:\n      curCount += 1\n    else:\n      seen.add(cur2)\n    ret.append(curCount)\n  return np.array(ret)\n", "categories": ["array"]}]