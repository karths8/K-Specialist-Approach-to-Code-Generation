[{"question": "Write a function that reverses a string. The input string is given as an array of characters s.\n\nYou must do this by modifying the input array in-place with O(1) extra memory.", "code": "\ndef reverse_string(s: str):\n  l = 0\n  r = len(s) - 1\n  while l < r:\n    tmp = s[l]\n    s[l] = s[r]\n    s[r] = tmp\n    l += 1\n    r -= 1\n"}, {"question": "Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.\n\nIn other words, return true if one of s1's permutations is the substring of s2.", "code": "\ndef permutation_in_string(s1: str, s2: str):\n  window = len(s1)\n  if window > len(s2):\n    return False\n  freq1 = [0]*26\n  freq2 = [0]*26\n  for i in range(window):\n    freq1[ord(s1[i])-ord('a')] += 1\n    freq2[ord(s2[i])-ord('a')] += 1\n\n  matches = 0\n  for i in range(26):\n    if freq1[i] == freq2[i]:\n      matches += 1\n  \n  for l in range(len(s2) - window):\n    if matches == 26:\n      return True\n\n    added = ord(s2[l + window]) - ord('a')\n    freq2[added] += 1\n    if freq1[added] == freq2[added]:\n      matches += 1\n    elif freq1[added] + 1 == freq2[added]:\n      matches -= 1\n\n    removed = ord(s2[l]) - ord('a')\n    freq2[removed] -= 1\n    if freq1[removed] == freq2[removed]:\n      matches += 1\n    elif freq1[removed] == freq2[removed] + 1:\n      matches -= 1\n    \n  return matches == 26\n"}, {"question": "You are given a string s and an integer array indices of the same length. The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.\n\nReturn the shuffled string.", "code": "\ndef shuffle_string(s: str, indices: list[int]):\n  ret = ['_']*len(s)\n  for idx, i in enumerate(indices):\n    ret[i] = s[idx]\n  return \"\".join(ret)\n\n#https://leetcode.com/problems/optimal-partition-of-string/description/\ndef partitionString(s):\n  substrings = 1\n  cur_str = set()\n  for i in range(len(s)):\n    if s[i] in cur_str:\n      substrings += 1\n      cur_str = {s[i]}\n    else:\n      cur_str.add(s[i])\n  return substrings\n"}, {"question": "Given an integer n, return the number of strings of length n that consist only of vowels (a, e, i, o, u) and are lexicographically sorted.\n\nA string s is lexicographically sorted if for all valid i, s[i] is the same as or comes before s[i+1] in the alphabet.", "code": "\nletters = [\"a\",\"e\",\"i\",\"o\",\"u\"]\ndynamic = {\n  'a1' : 5,\n  'e1' : 4,\n  'i1' : 3,\n  'o1' : 2,\n  'u1' : 1\n}\ndef helper(n, letter_idx):\n  ret = 0\n  key = letters[letter_idx] + str(n)\n  if key in dynamic.keys():\n    return dynamic[key]\n  else:\n    for i in range(letter_idx, len(letters)):\n      ret += helper(n-1, i)\n    dynamic[key] = ret\n  return ret\n  \n\ndef countVowelStrings(n):\n  return helper(n, 0)\n\nprint(countVowelStrings(33))\n"}]